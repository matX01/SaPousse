
C:\Users\mathi\AppData\Local\Temp\VMBuilds\SaPousse\teensy41\Debug/SaPousse.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 a8 12 01 00 00 00 00 00                 ...`........

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b77      	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a77      	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4877      	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a77      	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a76      	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4976      	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b74      	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6d      	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	496d      	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6d      	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a66      	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	4b66      	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a60      	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5f      	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5e      	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5d      	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5d      	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5b      	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5b      	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b57      	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4943      	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b5 	bl	600012a8 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a49      	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b49      	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4949      	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4946      	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a47      	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4847      	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a46      	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4845      	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4944      	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 face 	bl	6000171c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	4840      	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fcb1 	bl	60001af8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a3a      	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b3a      	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4933      	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2e      	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	4c30      	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	f000 f8de 	bl	600013a0 <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	f000 fc70 	bl	60001ac8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	2b13      	cmp	r3, #19
600011ec:	d9fc      	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	f000 fb55 	bl	6000189c <usb_init>
	analog_init();
600011f2:	f000 fbc9 	bl	60001988 <analog_init>
	pwm_init();
600011f6:	f000 fc77 	bl	60001ae8 <__pwm_init_veneer>
	tempmon_init();
600011fa:	f000 fac1 	bl	60001780 <tempmon_init>

	startup_late_hook();
600011fe:	f000 fc7f 	bl	60001b00 <__startup_late_hook_veneer>
60001202:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001208:	d3fb      	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	f000 fc7d 	bl	60001b08 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	f000 fc63 	bl	60001ad8 <__main_veneer>
60001212:	e7fe      	b.n	60001212 <ResetHandler+0x1de>
60001214:	400ac000 	.word	0x400ac000
60001218:	aaaaaaaf 	.word	0xaaaaaaaf
6000121c:	00200007 	.word	0x00200007
60001220:	20070000 	.word	0x20070000
60001224:	00000000 	.word	0x00000000
60001228:	60001b30 	.word	0x60001b30
6000122c:	0000dcc8 	.word	0x0000dcc8
60001230:	20000000 	.word	0x20000000
60001234:	6000f7fc 	.word	0x6000f7fc
60001238:	20001ab0 	.word	0x20001ab0
6000123c:	20001ab0 	.word	0x20001ab0
60001240:	200042c0 	.word	0x200042c0
60001244:	e000ed88 	.word	0xe000ed88
60001248:	200027fc 	.word	0x200027fc
6000124c:	00004b59 	.word	0x00004b59
60001250:	e000e400 	.word	0xe000e400
60001254:	e000e4a0 	.word	0xe000e4a0
60001258:	400d8000 	.word	0x400d8000
6000125c:	400fc000 	.word	0x400fc000
60001260:	e000ed08 	.word	0xe000ed08
60001264:	e000e014 	.word	0xe000e014
60001268:	e000e018 	.word	0xe000e018
6000126c:	00005db5 	.word	0x00005db5
60001270:	e000edfc 	.word	0xe000edfc
60001274:	20200000 	.word	0x20200000
60001278:	00005db9 	.word	0x00005db9
6000127c:	e0001000 	.word	0xe0001000
60001280:	e0001004 	.word	0xe0001004
60001284:	20002198 	.word	0x20002198
60001288:	23c34600 	.word	0x23c34600
6000128c:	40084000 	.word	0x40084000
60001290:	400d4000 	.word	0x400d4000
60001294:	56c00000 	.word	0x56c00000
60001298:	200021a0 	.word	0x200021a0
6000129c:	20002800 	.word	0x20002800
600012a0:	2018101b 	.word	0x2018101b
600012a4:	13110d0c 	.word	0x13110d0c

600012a8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012aa:	4a28      	ldr	r2, [pc, #160]	; (6000134c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012ae:	4b28      	ldr	r3, [pc, #160]	; (60001350 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012b0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b4:	4c27      	ldr	r4, [pc, #156]	; (60001354 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b6:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b8:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001394 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012bc:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012be:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012c0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012c2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012ca:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012cc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001398 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d0:	4f21      	ldr	r7, [pc, #132]	; (60001358 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012d2:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d6:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	4e20      	ldr	r6, [pc, #128]	; (6000135c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012dc:	4f20      	ldr	r7, [pc, #128]	; (60001360 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012de:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e0:	4920      	ldr	r1, [pc, #128]	; (60001364 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012e2:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	4e20      	ldr	r6, [pc, #128]	; (60001368 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e6:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	4f20      	ldr	r7, [pc, #128]	; (6000136c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012ec:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ee:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f0:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f4:	4e1e      	ldr	r6, [pc, #120]	; (60001370 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f6:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f8:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012fa:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012fc:	f8df e09c 	ldr.w	lr, [pc, #156]	; 6000139c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001300:	4e1c      	ldr	r6, [pc, #112]	; (60001374 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001302:	491d      	ldr	r1, [pc, #116]	; (60001378 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001304:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001308:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000130a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000130c:	4f1b      	ldr	r7, [pc, #108]	; (6000137c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001310:	4e1b      	ldr	r6, [pc, #108]	; (60001380 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001312:	491c      	ldr	r1, [pc, #112]	; (60001384 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001314:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001316:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001318:	4f1b      	ldr	r7, [pc, #108]	; (60001388 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131c:	4e1b      	ldr	r6, [pc, #108]	; (6000138c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131e:	491c      	ldr	r1, [pc, #112]	; (60001390 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001320:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001322:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001324:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001326:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001328:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000132c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001330:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001334:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001338:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000133c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001340:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001344:	f842 3c88 	str.w	r3, [r2, #-136]
60001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000134a:	bf00      	nop
6000134c:	e000ed9c 	.word	0xe000ed9c
60001350:	e000eda0 	.word	0xe000eda0
60001354:	e000ed94 	.word	0xe000ed94
60001358:	00100009 	.word	0x00100009
6000135c:	00200013 	.word	0x00200013
60001360:	07020021 	.word	0x07020021
60001364:	200042c0 	.word	0x200042c0
60001368:	20000014 	.word	0x20000014
6000136c:	13080025 	.word	0x13080025
60001370:	10000009 	.word	0x10000009
60001374:	40000017 	.word	0x40000017
60001378:	13100033 	.word	0x13100033
6000137c:	60000018 	.word	0x60000018
60001380:	070b002f 	.word	0x070b002f
60001384:	70000019 	.word	0x70000019
60001388:	170b0037 	.word	0x170b0037
6000138c:	7000001a 	.word	0x7000001a
60001390:	130b002f 	.word	0x130b002f
60001394:	1000003f 	.word	0x1000003f
60001398:	03080025 	.word	0x03080025
6000139c:	20200016 	.word	0x20200016

600013a0 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013a2:	4bb8      	ldr	r3, [pc, #736]	; (60001684 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013a4:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013a6:	4eb8      	ldr	r6, [pc, #736]	; (60001688 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013a8:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013aa:	49b8      	ldr	r1, [pc, #736]	; (6000168c <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600013ac:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013b0:	4db7      	ldr	r5, [pc, #732]	; (60001690 <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600013b2:	f04f 37ff 	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013b6:	4cb7      	ldr	r4, [pc, #732]	; (60001694 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013b8:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013bc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600013c0:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013c2:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013c6:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600013ca:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013ce:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013d2:	49b1      	ldr	r1, [pc, #708]	; (60001698 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d4:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d8:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013dc:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600013e0:	4eae      	ldr	r6, [pc, #696]	; (6000169c <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013e2:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600013e4:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600013e6:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600013e8:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600013ea:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600013ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600013f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600013f8:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013fc:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001400:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001404:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001408:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000140c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001410:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001414:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001416:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001418:	48a1      	ldr	r0, [pc, #644]	; (600016a0 <configure_external_ram+0x300>)
6000141a:	4018      	ands	r0, r3
6000141c:	4ba1      	ldr	r3, [pc, #644]	; (600016a4 <configure_external_ram+0x304>)
6000141e:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001420:	48a1      	ldr	r0, [pc, #644]	; (600016a8 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001422:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001424:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001428:	f043 030c 	orr.w	r3, r3, #12
6000142c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001430:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001432:	6803      	ldr	r3, [r0, #0]
60001434:	4333      	orrs	r3, r6
60001436:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001438:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000143a:	ea03 0e0e 	and.w	lr, r3, lr
6000143e:	4b9b      	ldr	r3, [pc, #620]	; (600016ac <configure_external_ram+0x30c>)
60001440:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001444:	f8df e29c 	ldr.w	lr, [pc, #668]	; 600016e4 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001448:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000144a:	4b99      	ldr	r3, [pc, #612]	; (600016b0 <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000144c:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000144e:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001452:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001454:	4f97      	ldr	r7, [pc, #604]	; (600016b4 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000145a:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000145c:	68c3      	ldr	r3, [r0, #12]
6000145e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001462:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001464:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001466:	401f      	ands	r7, r3
60001468:	4b93      	ldr	r3, [pc, #588]	; (600016b8 <configure_external_ram+0x318>)
6000146a:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000146c:	4f91      	ldr	r7, [pc, #580]	; (600016b4 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000146e:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001470:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001472:	401f      	ands	r7, r3
60001474:	4b90      	ldr	r3, [pc, #576]	; (600016b8 <configure_external_ram+0x318>)
60001476:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001478:	4f90      	ldr	r7, [pc, #576]	; (600016bc <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000147a:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000147c:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000147e:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001480:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001484:	4f8e      	ldr	r7, [pc, #568]	; (600016c0 <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000148a:	f043 0301 	orr.w	r3, r3, #1
6000148e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001492:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001496:	f8df e234 	ldr.w	lr, [pc, #564]	; 600016cc <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000149a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000149e:	f043 0301 	orr.w	r3, r3, #1
600014a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600014a6:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014a8:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014aa:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600014b0:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014b2:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014b8:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ba:	4b82      	ldr	r3, [pc, #520]	; (600016c4 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014bc:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014c0:	4a81      	ldr	r2, [pc, #516]	; (600016c8 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014c2:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014c4:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014c8:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014ca:	f843 1b04 	str.w	r1, [r3], #4
600014ce:	4293      	cmp	r3, r2
600014d0:	d1fb      	bne.n	600014ca <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d2:	4b75      	ldr	r3, [pc, #468]	; (600016a8 <configure_external_ram+0x308>)
600014d4:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014d6:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d8:	f042 0201 	orr.w	r2, r2, #1
600014dc:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014de:	680b      	ldr	r3, [r1, #0]
600014e0:	4a71      	ldr	r2, [pc, #452]	; (600016a8 <configure_external_ram+0x308>)
600014e2:	f013 0301 	ands.w	r3, r3, #1
600014e6:	d1fa      	bne.n	600014de <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014e8:	4e78      	ldr	r6, [pc, #480]	; (600016cc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ea:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014ec:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014f0:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014f4:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600014f8:	4f75      	ldr	r7, [pc, #468]	; (600016d0 <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014fa:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600014fc:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001500:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001502:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001506:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000150a:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000150e:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001512:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001514:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001518:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000151a:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000151e:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001522:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001526:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000152a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000152e:	4e69      	ldr	r6, [pc, #420]	; (600016d4 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001530:	4d69      	ldr	r5, [pc, #420]	; (600016d8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001532:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001536:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000153a:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000153e:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001542:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001546:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000154a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000154e:	694b      	ldr	r3, [r1, #20]
60001550:	4a55      	ldr	r2, [pc, #340]	; (600016a8 <configure_external_ram+0x308>)
60001552:	07dd      	lsls	r5, r3, #31
60001554:	d5fb      	bpl.n	6000154e <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001556:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001558:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000155a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000155e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001560:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001562:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001566:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000156a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000156e:	694b      	ldr	r3, [r1, #20]
60001570:	4a4d      	ldr	r2, [pc, #308]	; (600016a8 <configure_external_ram+0x308>)
60001572:	07dc      	lsls	r4, r3, #31
60001574:	d5fb      	bpl.n	6000156e <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001576:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001578:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000157a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000157e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001580:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001582:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001586:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000158a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000158e:	694b      	ldr	r3, [r1, #20]
60001590:	4a45      	ldr	r2, [pc, #276]	; (600016a8 <configure_external_ram+0x308>)
60001592:	07d8      	lsls	r0, r3, #31
60001594:	d5fb      	bpl.n	6000158e <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001596:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001598:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000159a:	4850      	ldr	r0, [pc, #320]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000159c:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000159e:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600015a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ac:	694b      	ldr	r3, [r1, #20]
600015ae:	4a3e      	ldr	r2, [pc, #248]	; (600016a8 <configure_external_ram+0x308>)
600015b0:	07db      	lsls	r3, r3, #31
600015b2:	d5fb      	bpl.n	600015ac <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600015b4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015b8:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015bc:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015be:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015c0:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015c2:	428b      	cmp	r3, r1
600015c4:	d000      	beq.n	600015c8 <configure_external_ram+0x228>
600015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015c8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015ce:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015d0:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015d2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015d6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015de:	694b      	ldr	r3, [r1, #20]
600015e0:	4a31      	ldr	r2, [pc, #196]	; (600016a8 <configure_external_ram+0x308>)
600015e2:	07df      	lsls	r7, r3, #31
600015e4:	d5fb      	bpl.n	600015de <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015e6:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ec:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ee:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015f0:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015f2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015f6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fe:	694b      	ldr	r3, [r1, #20]
60001600:	4a29      	ldr	r2, [pc, #164]	; (600016a8 <configure_external_ram+0x308>)
60001602:	07de      	lsls	r6, r3, #31
60001604:	d5fb      	bpl.n	600015fe <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001606:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001608:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000160c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001610:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001612:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001614:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001618:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000161c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001620:	694b      	ldr	r3, [r1, #20]
60001622:	4a21      	ldr	r2, [pc, #132]	; (600016a8 <configure_external_ram+0x308>)
60001624:	07dd      	lsls	r5, r3, #31
60001626:	d5fb      	bpl.n	60001620 <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001628:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000162e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001632:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001634:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001636:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000163e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001642:	694b      	ldr	r3, [r1, #20]
60001644:	4a18      	ldr	r2, [pc, #96]	; (600016a8 <configure_external_ram+0x308>)
60001646:	07dc      	lsls	r4, r3, #31
60001648:	d5fb      	bpl.n	60001642 <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164a:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001650:	4822      	ldr	r0, [pc, #136]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001652:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001654:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001656:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000165a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000165e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001662:	694b      	ldr	r3, [r1, #20]
60001664:	4a10      	ldr	r2, [pc, #64]	; (600016a8 <configure_external_ram+0x308>)
60001666:	07d8      	lsls	r0, r3, #31
60001668:	d5fb      	bpl.n	60001662 <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
6000166a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000166e:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001672:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001674:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001676:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001678:	428b      	cmp	r3, r1
6000167a:	d035      	beq.n	600016e8 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
6000167c:	4b18      	ldr	r3, [pc, #96]	; (600016e0 <configure_external_ram+0x340>)
6000167e:	2208      	movs	r2, #8
60001680:	701a      	strb	r2, [r3, #0]
60001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001684:	401f8000 	.word	0x401f8000
60001688:	000170f9 	.word	0x000170f9
6000168c:	0001b0f9 	.word	0x0001b0f9
60001690:	000110f9 	.word	0x000110f9
60001694:	000100f9 	.word	0x000100f9
60001698:	401f8400 	.word	0x401f8400
6000169c:	400fc000 	.word	0x400fc000
600016a0:	1ffffcff 	.word	0x1ffffcff
600016a4:	a0000300 	.word	0xa0000300
600016a8:	402a4000 	.word	0x402a4000
600016ac:	ffff0012 	.word	0xffff0012
600016b0:	00f737ff 	.word	0x00f737ff
600016b4:	7cf0ff00 	.word	0x7cf0ff00
600016b8:	80000040 	.word	0x80000040
600016bc:	830f00ff 	.word	0x830f00ff
600016c0:	00020063 	.word	0x00020063
600016c4:	402a4200 	.word	0x402a4200
600016c8:	402a4300 	.word	0x402a4300
600016cc:	5af05af0 	.word	0x5af05af0
600016d0:	3018049f 	.word	0x3018049f
600016d4:	26013206 	.word	0x26013206
600016d8:	0a180638 	.word	0x0a180638
600016dc:	00030004 	.word	0x00030004
600016e0:	200021a4 	.word	0x200021a4
600016e4:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016e8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016f0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016f2:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016fc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001700:	694b      	ldr	r3, [r1, #20]
60001702:	4a04      	ldr	r2, [pc, #16]	; (60001714 <configure_external_ram+0x374>)
60001704:	07db      	lsls	r3, r3, #31
60001706:	d5fb      	bpl.n	60001700 <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001708:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000170a:	4b03      	ldr	r3, [pc, #12]	; (60001718 <configure_external_ram+0x378>)
6000170c:	2110      	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000170e:	6150      	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001710:	7019      	strb	r1, [r3, #0]
60001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001714:	402a4000 	.word	0x402a4000
60001718:	200021a4 	.word	0x200021a4

6000171c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000171c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000171e:	4a17      	ldr	r2, [pc, #92]	; (6000177c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001720:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001722:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001726:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000172a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000172e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001732:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001736:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001738:	f013 0f02 	tst.w	r3, #2
6000173c:	d006      	beq.n	6000174c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000173e:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001740:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001742:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001744:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001746:	f013 0f02 	tst.w	r3, #2
6000174a:	d1f8      	bne.n	6000173e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000174c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001750:	d101      	bne.n	60001756 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001752:	6155      	str	r5, [r2, #20]
			continue;
60001754:	e7ef      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001756:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000175a:	d101      	bne.n	60001760 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000175c:	6156      	str	r6, [r2, #20]
			continue;
6000175e:	e7ea      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001760:	2b00      	cmp	r3, #0
60001762:	dae8      	bge.n	60001736 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001764:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001768:	d001      	beq.n	6000176e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000176a:	6191      	str	r1, [r2, #24]
			continue;
6000176c:	e7e3      	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000176e:	065b      	lsls	r3, r3, #25
60001770:	d401      	bmi.n	60001776 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001772:	6157      	str	r7, [r2, #20]
			continue;
60001774:	e7df      	b.n	60001736 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001776:	bcf0      	pop	{r4, r5, r6, r7}
60001778:	4770      	bx	lr
6000177a:	bf00      	nop
6000177c:	400d8000 	.word	0x400d8000

60001780 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001780:	4a3b      	ldr	r2, [pc, #236]	; (60001870 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001782:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001786:	493b      	ldr	r1, [pc, #236]	; (60001874 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001788:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000178c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000178e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001792:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001794:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001898 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001798:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000179a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000179e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017a2:	4f35      	ldr	r7, [pc, #212]	; (60001878 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017a4:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017a6:	f3c3 240b 	ubfx	r4, r3, #8, #12
600017aa:	4e34      	ldr	r6, [pc, #208]	; (6000187c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017ac:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017b0:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017b4:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017b8:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017c4:	ee07 4a90 	vmov	s15, r4
600017c8:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017cc:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ce:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017d2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017d6:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017da:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017dc:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017e4:	4d26      	ldr	r5, [pc, #152]	; (60001880 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017e6:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017ea:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017ec:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017f4:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017f6:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600017fa:	4e22      	ldr	r6, [pc, #136]	; (60001884 <tempmon_init+0x104>)
600017fc:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600017fe:	4922      	ldr	r1, [pc, #136]	; (60001888 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001800:	4c22      	ldr	r4, [pc, #136]	; (6000188c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001802:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001806:	ee07 3a90 	vmov	s15, r3
6000180a:	4b21      	ldr	r3, [pc, #132]	; (60001890 <tempmon_init+0x110>)
6000180c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001818:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000181c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001820:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001824:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001828:	ee15 3a90 	vmov	r3, s11
6000182c:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001830:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001834:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001838:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000183a:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000183e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001846:	430b      	orrs	r3, r1
60001848:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000184c:	ee17 3a90 	vmov	r3, s15
60001850:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001858:	430b      	orrs	r3, r1
6000185a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000185e:	6813      	ldr	r3, [r2, #0]
60001860:	f043 0302 	orr.w	r3, r3, #2
60001864:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001866:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001868:	4b0a      	ldr	r3, [pc, #40]	; (60001894 <tempmon_init+0x114>)
6000186a:	2201      	movs	r2, #1
6000186c:	601a      	str	r2, [r3, #0]
6000186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001870:	400d8180 	.word	0x400d8180
60001874:	401f4400 	.word	0x401f4400
60001878:	200021b0 	.word	0x200021b0
6000187c:	200021b4 	.word	0x200021b4
60001880:	200021ac 	.word	0x200021ac
60001884:	20002800 	.word	0x20002800
60001888:	0fff0000 	.word	0x0fff0000
6000188c:	e000e440 	.word	0xe000e440
60001890:	00004c35 	.word	0x00004c35
60001894:	e000e108 	.word	0xe000e108
60001898:	200021a8 	.word	0x200021a8

6000189c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000189c:	4b30      	ldr	r3, [pc, #192]	; (60001960 <usb_init+0xc4>)
6000189e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600018a2:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600018a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018a8:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600018ac:	f000 f910 	bl	60001ad0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b0:	492c      	ldr	r1, [pc, #176]	; (60001964 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018b2:	482d      	ldr	r0, [pc, #180]	; (60001968 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018b4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018b8:	4c2c      	ldr	r4, [pc, #176]	; (6000196c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018ba:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018be:	4b2c      	ldr	r3, [pc, #176]	; (60001970 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018c0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018c4:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018c8:	6822      	ldr	r2, [r4, #0]
600018ca:	4013      	ands	r3, r2
600018cc:	b91b      	cbnz	r3, 600018d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600018ce:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600018d2:	079a      	lsls	r2, r3, #30
600018d4:	d01a      	beq.n	6000190c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018d6:	4b24      	ldr	r3, [pc, #144]	; (60001968 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600018d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600018dc:	4a23      	ldr	r2, [pc, #140]	; (6000196c <usb_init+0xd0>)
600018de:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018e0:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018e2:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600018e6:	f041 0102 	orr.w	r1, r1, #2
600018ea:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600018ee:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600018f2:	079b      	lsls	r3, r3, #30
600018f4:	d4fb      	bmi.n	600018ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600018f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600018fa:	491e      	ldr	r1, [pc, #120]	; (60001974 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600018fc:	4b1b      	ldr	r3, [pc, #108]	; (6000196c <usb_init+0xd0>)
600018fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001902:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001904:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001906:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001908:	f000 f8ea 	bl	60001ae0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000190c:	4d1a      	ldr	r5, [pc, #104]	; (60001978 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000190e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001910:	4b16      	ldr	r3, [pc, #88]	; (6000196c <usb_init+0xd0>)
60001912:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001916:	4c14      	ldr	r4, [pc, #80]	; (60001968 <usb_init+0xcc>)
60001918:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000191a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000191c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000191e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001920:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001922:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001926:	f44f 7220 	mov.w	r2, #640	; 0x280
6000192a:	f000 f8e1 	bl	60001af0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000192e:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001932:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001936:	f240 1343 	movw	r3, #323	; 0x143
6000193a:	4a10      	ldr	r2, [pc, #64]	; (6000197c <usb_init+0xe0>)
6000193c:	4910      	ldr	r1, [pc, #64]	; (60001980 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000193e:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001940:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001942:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001946:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000194a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000194e:	4a0d      	ldr	r2, [pc, #52]	; (60001984 <usb_init+0xe8>)
60001950:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001954:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001956:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001958:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
6000195c:	bd70      	pop	{r4, r5, r6, pc}
6000195e:	bf00      	nop
60001960:	400d8000 	.word	0x400d8000
60001964:	400fc000 	.word	0x400fc000
60001968:	402e0000 	.word	0x402e0000
6000196c:	400d9000 	.word	0x400d9000
60001970:	001e1c00 	.word	0x001e1c00
60001974:	e000e28c 	.word	0xe000e28c
60001978:	20004000 	.word	0x20004000
6000197c:	20002800 	.word	0x20002800
60001980:	00004da1 	.word	0x00004da1
60001984:	e000e10c 	.word	0xe000e10c

60001988 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001988:	4b11      	ldr	r3, [pc, #68]	; (600019d0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000198a:	4912      	ldr	r1, [pc, #72]	; (600019d4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000198c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000198e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001990:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001994:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001996:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001998:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000199c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000199e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019a0:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600019a4:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019a6:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019a8:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019ac:	061b      	lsls	r3, r3, #24
600019ae:	d4fc      	bmi.n	600019aa <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019b0:	4b09      	ldr	r3, [pc, #36]	; (600019d8 <analog_init+0x50>)
600019b2:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019b6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019b8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ba:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019bc:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019be:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019c0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600019c4:	d1fb      	bne.n	600019be <analog_init+0x36>
	calibrating = 0;
600019c6:	4a05      	ldr	r2, [pc, #20]	; (600019dc <analog_init+0x54>)
600019c8:	7013      	strb	r3, [r2, #0]
}
600019ca:	bc30      	pop	{r4, r5}
600019cc:	4770      	bx	lr
600019ce:	bf00      	nop
600019d0:	400fc000 	.word	0x400fc000
600019d4:	400c4000 	.word	0x400c4000
600019d8:	400c8000 	.word	0x400c8000
600019dc:	20002511 	.word	0x20002511

600019e0 <SdFile::make83Name(char const*, unsigned char*)::data>:
600019e0:	5e3e3c7c 2f3f3d2b 2c3b5d5b 005c222a     |<>^+=?/[];,*"\.

600019f0 <usb_string_product_name_default>:
600019f0:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001a00:	00610069 0000006c                       i.a.l...

60001a08 <usb_string_manufacturer_name_default>:
60001a08:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001a18:	00690075 006f006e                       u.i.n.o.

60001a20 <string0>:
60001a20:	04090304                                ....

60001a24 <usb_config_descriptor_12>:
60001a24:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a34:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a44:	00062405 82050701 10001003 00010409     .$..............
60001a54:	00000a02 03050700 00004002 02840507     .........@......
60001a64:	00000040                                @...

60001a68 <usb_config_descriptor_480>:
60001a68:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001a78:	24050001 05011000 01010124 06022404     ...$....$....$..
60001a88:	00062405 82050701 05001003 00010409     .$..............
60001a98:	00000a02 03050700 00020002 02840507     ................
60001aa8:	00000200                                ....

60001aac <qualifier_descriptor>:
60001aac:	0200060a 40000002 00000001                       .......@..

60001ab6 <_serialEventUSB2_default>:
	...

60001ab7 <_serialEventUSB1_default>:
	...

60001ab8 <_serialEvent_default>:
	...

60001ab9 <_serialEvent4_default>:
	...

60001aba <_serialEvent5_default>:
60001aba:	b5f8ff00                                         ..

60001abc <_init>:
60001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001abe:	bf00      	nop
60001ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ac2:	bc08      	pop	{r3}
60001ac4:	469e      	mov	lr, r3
60001ac6:	4770      	bx	lr

60001ac8 <__startup_early_hook_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__startup_early_hook_veneer+0x4>
60001acc:	00004b71 	.word	0x00004b71

60001ad0 <__usb_init_serialnumber_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__usb_init_serialnumber_veneer+0x4>
60001ad4:	00005559 	.word	0x00005559

60001ad8 <__main_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__main_veneer+0x4>
60001adc:	0000659d 	.word	0x0000659d

60001ae0 <__delay_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__delay_veneer+0x4>
60001ae4:	000049b5 	.word	0x000049b5

60001ae8 <__pwm_init_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__pwm_init_veneer+0x4>
60001aec:	00006efd 	.word	0x00006efd

60001af0 <__memset_veneer>:
60001af0:	f85f f000 	ldr.w	pc, [pc]	; 60001af4 <__memset_veneer+0x4>
60001af4:	00008779 	.word	0x00008779

60001af8 <__set_arm_clock_veneer>:
60001af8:	f85f f000 	ldr.w	pc, [pc]	; 60001afc <__set_arm_clock_veneer+0x4>
60001afc:	00006be9 	.word	0x00006be9

60001b00 <__startup_late_hook_veneer>:
60001b00:	f85f f000 	ldr.w	pc, [pc]	; 60001b04 <__startup_late_hook_veneer+0x4>
60001b04:	00004b75 	.word	0x00004b75

60001b08 <____libc_init_array_veneer>:
60001b08:	f85f f000 	ldr.w	pc, [pc]	; 60001b0c <____libc_init_array_veneer+0x4>
60001b0c:	00008005 	.word	0x00008005

60001b10 <__init_array_start>:
60001b10:	00000045 	.word	0x00000045
60001b14:	00000271 	.word	0x00000271
60001b18:	00001d05 	.word	0x00001d05
60001b1c:	00001d49 	.word	0x00001d49
60001b20:	00001f29 	.word	0x00001f29
60001b24:	0000227d 	.word	0x0000227d
60001b28:	00002799 	.word	0x00002799
60001b2c:	00003675 	.word	0x00003675

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x11>

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xd>
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
      2e:	f3af 8000 	nop.w
      32:	2301      	movs	r3, #1
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	1ab0      	subs	r0, r6, r2
      3a:	2000      	movs	r0, #0
      3c:	00000000 	.word	0x00000000
}
      40:	dcc4      	bgt.n	ffffffcc <_flexram_bank_config+0x5555551d>
	...

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	push	{r4, lr}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af 8000 	nop.w
      52:	4808      	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	cbnz	r3, 5a <frame_dummy+0x16>
      58:	4b07bd10 	.word	0x4b07bd10
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	00000000 	.word	0x00000000
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	1ab4      	subs	r4, r6, r2
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	0000dcc4 	.word	0x0000dcc4
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	1ab0      	subs	r0, r6, r2
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <setup>:
      7c:	f640b510 	.word	0xf640b510
      80:	31b8      	adds	r1, #184	; 0xb8
      82:	b082      	sub	sp, #8
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      84:	f0024838 	.word	0xf0024838



void setup() {
    
    DebugTool.begin(true);
      88:	f83d f44f 	pldw	[sp, <undefined>]
      8c:	483631e1 	.word	0x483631e1
      90:	f002 f834 	bl	20fc <VisualMicroDebug::begin(unsigned long)>
      94:	48342101 	.word	0x48342101
      98:	f002 f812 	bl	20c0 <VisualMicroDebug::outPacketStart(bool)>
      9c:	d1562800 	.word	0xd1562800
      a0:	2100      	movs	r1, #0
      a2:	4831      	.short	0x4831
      a4:	2201      	movs	r2, #1
      a6:	f002      	.short	0xf002
      a8:	f8cb 2101 	str.w	r2, [fp, #257]	; 0x101
      ac:	482e      	ldr	r0, [pc, #184]	; (168 <setup+0xec>)
      ae:	f002      	.short	0xf002
      b0:	f807 b130 	strb.w	fp, [r7, <undefined>]
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      b4:	2106      	movs	r1, #6
      b6:	482d      	ldr	r0, [pc, #180]	; (16c <setup+0xf0>)
      b8:	fd98f005 	.word	0xfd98f005
      bc:	482a      	ldr	r0, [pc, #168]	; (168 <setup+0xec>)
      be:	f002      	.short	0xf002
      c0:	f81b 2001 	ldrb.w	r2, [fp, r1]
    ExceptionHandler.begin();
	
      c4:	f88af001 	.word	0xf88af001
    GeneralSPIConfiguration.beginAllSPI(3);
      c8:	f000 f96a 	bl	3a0 <GlobalExceptionHandler::begin()>
    
    MPU9250.SetBus(1,10);
      cc:	f0002003 	.word	0xf0002003
      d0:	fe09 210a 	cdp2	1, 0, cr2, cr9, cr10, {0}
    
    SDCardReader.begin(BUILTIN_SDCARD);
      d4:	f0012001 	.word	0xf0012001
      d8:	f943 20fe 	vst4.<illegal width 64>	{d18-d21}, [r3 :256], lr
    SDCardReader.ReadFlightParameters();
    SDCardReader.ReadCalibrationData();
      dc:	f9bef000 	.word	0xf9bef000

      e0:	f000 fa9c 	bl	61c <SDCard::ReadFlightParameters()>
    AccelGathering.begin((uint8_t)(*SDCardReader.getParameters(0)).FlightParam[0][1]);
      e4:	fa0ef000 	.word	0xfa0ef000
    CompasGathering.begin((uint8_t)(*SDCardReader.getParameters(0)).FlightParam[0][2]);    

      e8:	2000      	movs	r0, #0
      ea:	f000      	.short	0xf000
      ec:	fa03 edd0 			; <UNDEFINED> instruction: 0xfa03edd0
      f0:	481f7a01 	.word	0x481f7a01
      f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      f8:	edcd 7a01 	vstr	s15, [sp, #4]
      fc:	1004f89d 	.word	0x1004f89d
     100:	f001 ff04 	bl	1f0c <ScheduledGatheringObject::begin(unsigned char)>
    MPU9250.begin(SDCardReader.getParameters(1),SDCardReader.getParameters(2));
     104:	f0002000 	.word	0xf0002000
     108:	f9f5 edd0 	ldr??.w	lr, [r5, #3536]	; 0xdd0
     10c:	48197a02 	.word	0x48197a02
     110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     114:	7a01edcd 	.word	0x7a01edcd
     118:	1004f89d 	.word	0x1004f89d
     11c:	f001 fef6 	bl	1f0c <ScheduledGatheringObject::begin(unsigned char)>

    
     120:	f0002001 	.word	0xf0002001
     124:	f9e7 4604 	vld3.16	{d20[0],d21[0],d22[0]}, [r7], r4
     128:	f0002002 	.word	0xf0002002
     12c:	f9e3 4601 	vld3.16	{d20[0],d21[0],d22[0]}, [r3], r1
     130:	f0014620 	.word	0xf0014620
     134:	fc49 2000 	mcrr2	0, 0, r2, r9, cr0

    ScheduledGatherer.begin(SDCardReader.getParameters(0));
    
    
     138:	f9dcf000 	.word	0xf9dcf000
     13c:	f001 fe9a 	bl	1e74 <DataGathering::begin(FlightParameter*)>
    GPSDev.begin();
    SBUSDev.begin(); 

     140:	fe24f000 	.word	0xfe24f000



}
unsigned long i = 0;
int k = 0;
     144:	b002      	add	sp, #8
     146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    
    
    GPSDev.begin();
    SBUSDev.begin(); 


     14a:	f001 bde9 	b.w	1d20 <SBUSHandler::begin()>
     14e:	2110      	movs	r1, #16
     150:	4809      	ldr	r0, [pc, #36]	; (178 <setup+0xfc>)
     152:	f005 fd4b 	bl	5bec <usb_serial_write>



void setup() {
    
    DebugTool.begin(true);
     156:	210a      	movs	r1, #10
     158:	f0014803 	.word	0xf0014803
     15c:	ff27 4802 	vsub.i32	d4, d7, d2
     160:	ffcaf001 	.word	0xffcaf001
     164:	e79c      	b.n	a0 <setup+0x24>
     166:	bf00      	nop
     168:	20001ed0 	.word	0x20001ed0
     16c:	0014      	movs	r4, r2
     16e:	2000      	.short	0x2000
     170:	1ad4      	subs	r4, r2, r3
     172:	2000      	movs	r0, #0
     174:	1acc      	subs	r4, r1, r3
     176:	2000      	movs	r0, #0
     178:	0000      	movs	r0, r0
     17a:	2000      	movs	r0, #0

0000017c <loop>:
float PitchAxisSin = 0;
float RollAxis = 0;
Quaternion Quat = {0,0,0,0};
void loop() {
    DebugTool.actualise();
    /*if(micros() >= i){
     17c:	b538      	push	{r3, r4, r5, lr}
     17e:	4c21      	.short	0x4c21
     180:	6823      	ldr	r3, [r4, #0]
     182:	b913      	.short	0xb913
     184:	6823      	ldr	r3, [r4, #0]
     186:	2b01      	.short	0x2b01
     188:	d91e      	bls.n	1c8 <loop+0x4c>
     18a:	4d1f      	.short	0x4d1f
     18c:	481f      	ldr	r0, [pc, #124]	; (20c <loop+0x90>)
     18e:	f001 ff19 	bl	1fc4 <VisualMicroDebug::DBG_Millis()>
     192:	682a      	ldr	r2, [r5, #0]
     194:	491e      	ldr	r1, [pc, #120]	; (210 <loop+0x94>)
     196:	4603      	.short	0x4603
     198:	4290      	cmp	r0, r2
     19a:	6008      	.short	0x6008
     19c:	d318      	bcc.n	1d0 <loop+0x54>
     19e:	1a9a      	subs	r2, r3, r2
     1a0:	2af9      	cmp	r2, #249	; 0xf9
     1a2:	d911      	bls.n	1c8 <loop+0x4c>
     1a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     1a8:	4818      	ldr	r0, [pc, #96]	; (20c <loop+0x90>)
     1aa:	602b      	.short	0x602b
     1ac:	f001 ff10 	bl	1fd0 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
     1b0:	48162101 	.word	0x48162101
     1b4:	f001 ff84 	bl	20c0 <VisualMicroDebug::outPacketStart(bool)>
     1b8:	4814b978 	.word	0x4814b978
     1bc:	2105      	movs	r1, #5
     1be:	f001 fef5 	bl	1fac <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     1c2:	4812      	ldr	r0, [pc, #72]	; (20c <loop+0x90>)
     1c4:	f001 ff68 	bl	2098 <VisualMicroDebug::OnBreakPointEnd()>

    k++;
    */
}


     1c8:	4038e8bd 	.word	0x4038e8bd
float RollAxis = 0;
Quaternion Quat = {0,0,0,0};
void loop() {
    DebugTool.actualise();
    /*if(micros() >= i){
        i = i + 1000000;
     1cc:	f001 b870 	b.w	12b0 <Debugger::actualise()>
float PitchAxisSin = 0;
float RollAxis = 0;
Quaternion Quat = {0,0,0,0};
void loop() {
    DebugTool.actualise();
    /*if(micros() >= i){
     1d0:	e8bd602b 	.word	0xe8bd602b

    k++;
    */
}


     1d4:	4038      	ands	r0, r7
float RollAxis = 0;
Quaternion Quat = {0,0,0,0};
void loop() {
    DebugTool.actualise();
    /*if(micros() >= i){
        i = i + 1000000;
     1d6:	f001      	.short	0xf001
     1d8:	b86b      			; <UNDEFINED> instruction: 0xb86b
float PitchAxisSin = 0;
float RollAxis = 0;
Quaternion Quat = {0,0,0,0};
void loop() {
    DebugTool.actualise();
    /*if(micros() >= i){
     1da:	2101      	.short	0x2101
     1dc:	480b      	ldr	r0, [pc, #44]	; (20c <loop+0x90>)
     1de:	f001      	.short	0xf001
     1e0:	ff0d 2101 	vrhadd.u8	d2, d13, d1
     1e4:	f005480b 	.word	0xf005480b
     1e8:	fd01 6821 	stc2	8, cr6, [r1, #-132]	; 0xffffff7c

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     1ec:	2300      	movs	r3, #0
     1ee:	220a      	.short	0x220a
     1f0:	4809      	ldr	r0, [pc, #36]	; (218 <loop+0x9c>)
     1f2:	f006 fa27 	bl	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     1f6:	4805      	.short	0x4805
     1f8:	f001 ff40 	bl	207c <VisualMicroDebug::OnBreakPointPrintEnd()>
     1fc:	4803      	ldr	r0, [pc, #12]	; (20c <loop+0x90>)
     1fe:	f001 ff7b 	bl	20f8 <VisualMicroDebug::outPacketEnd()>
     202:	e7da      	b.n	1ba <loop+0x3e>
     204:	21a0      	movs	r1, #160	; 0xa0
     206:	2000      	movs	r0, #0
     208:	1ad0      	subs	r0, r2, r3
     20a:	2000      	movs	r0, #0
     20c:	1ed0      	subs	r0, r2, #3
     20e:	2000      	movs	r0, #0
     210:	1ad8      	subs	r0, r3, r3
     212:	2000      	movs	r0, #0
     214:	001c      	movs	r4, r3
     216:	2000      	movs	r0, #0
     218:	10e4      	asrs	r4, r4, #3
     21a:	2000      	movs	r0, #0

0000021c <ScheduledGathering()>:



void ScheduledGathering(){
    
    //if(!(*MPU0250.GetPointerOfVariable()).DataReady) ExceptionHandler.Error(0x08,SAMPLINGERROR);
     21c:	b570      	push	{r4, r5, r6, lr}
    SensorGatParam StartParam = GYRO;
    SensorGatParam StopParam = GYRO;
   
    if(AccelGathering.IsExecuted()){

        StartParam = ACCEL;
     21e:	4812      	.short	0x4812



void ScheduledGathering(){
    
    //if(!(*MPU0250.GetPointerOfVariable()).DataReady) ExceptionHandler.Error(0x08,SAMPLINGERROR);
     220:	b082      	sub	sp, #8
    SensorGatParam StartParam = GYRO;
    SensorGatParam StopParam = GYRO;
   
    if(AccelGathering.IsExecuted()){

        StartParam = ACCEL;
     222:	f001 fe75 	bl	1f10 <ScheduledGatheringObject::IsExecuted()>
     226:	b1d8      	cbz	r0, 260 <ScheduledGathering()+0x44>
  

     228:	263b2400 	.word	0x263b2400
     22c:	4625      	mov	r5, r4
    }

    if(CompasGathering.IsExecuted()){
        StopParam = COMPAS;
    
     22e:	480f      	ldr	r0, [pc, #60]	; (26c <ScheduledGathering()+0x50>)
     230:	f001 fe6e 	bl	1f10 <ScheduledGatheringObject::IsExecuted()>
    }
     234:	2800      	cmp	r0, #0
     236:	f88d      	.short	0xf88d
     238:	6004      	str	r4, [r0, #0]
     23a:	bf0c      	.short	0xbf0c
     23c:	2307      	moveq	r3, #7
     23e:	230a      	.short	0x230a
     240:	f88d 5005 	strb.w	r5, [sp, #5]
     244:	3006f88d 	.word	0x3006f88d
     248:	f88d 4007 	strb.w	r4, [sp, #7]
 

    MPU9250.readSensor(MergeSensor(StartParam,StopParam));
    (*MPU9250.GetPointerOfVariable()).DataReady = true;

     24c:	f0019801 	.word	0xf0019801
     250:	fa6f f001 	ror.w	r0, pc, r1
}
     254:	fd53 2301 	ldc2lne	3, cr2, [r3, #-4]
     258:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c


     25c:	b002      	add	sp, #8
     25e:	bd70      	.short	0xbd70
    
    //if(!(*MPU0250.GetPointerOfVariable()).DataReady) ExceptionHandler.Error(0x08,SAMPLINGERROR);

    SensorGatParam StartParam = GYRO;
    SensorGatParam StopParam = GYRO;
   
     260:	2402      	movs	r4, #2
     262:	2504      	.short	0x2504
     264:	2643      	movs	r6, #67	; 0x43
     266:	e7e2      	b.n	22e <ScheduledGathering()+0x12>
     268:	1ad4      	subs	r4, r2, r3
     26a:	2000      	movs	r0, #0
     26c:	1acc      	subs	r4, r1, r3
     26e:	2000      	movs	r0, #0

00000270 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__>:
    MPU9250.readSensor(MergeSensor(StartParam,StopParam));
    (*MPU9250.GetPointerOfVariable()).DataReady = true;

}


     270:	4804b508 	.word	0x4804b508
volatile bool DataAvailable = false;


ScheduledGatheringObject AccelGathering;
ScheduledGatheringObject CompasGathering;

     274:	f001 fdfa 	bl	1e6c <ScheduledGatheringObject::ScheduledGatheringObject()>

     278:	4803      	ldr	r0, [pc, #12]	; (288 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0x18>)
    MPU9250.readSensor(MergeSensor(StartParam,StopParam));
    (*MPU9250.GetPointerOfVariable()).DataReady = true;

}


     27a:	e8bd      	.short	0xe8bd
     27c:	4008      	ands	r0, r1


ScheduledGatheringObject AccelGathering;
ScheduledGatheringObject CompasGathering;


     27e:	f001      	.short	0xf001
     280:	bdf5      	pop	{r0, r2, r4, r5, r6, r7, pc}
     282:	bf00      	.short	0xbf00
     284:	1ad4      	subs	r4, r2, r3
     286:	2000      	.short	0x2000
     288:	1acc      	subs	r4, r1, r3
     28a:	2000      	.short	0x2000

0000028c <SystemHandling::CalibrateSensor(int)>:
}




void SystemHandling::CalibrateSensor(int SensorID){
     28c:	b500      	push	{lr}
     28e:	b085      	.short	0xb085

    switch (SensorID){
     290:	2804      	cmp	r0, #4
     292:	d813      	bhi.n	2bc <SystemHandling::CalibrateSensor(int)+0x30>
     294:	f000e8df 	.word	0xf000e8df
     298:	2715      	movs	r7, #21
     29a:	4b39      	.short	0x4b39
     29c:	0003      	movs	r3, r0
    case 3 :
        DebugTool.Display("Calibrating Compass\n");
        MPU9250.calibrateSensor(COMPAS,NumberOfIterationForCalibration);
    break;
    case 4 :
        DebugTool.Display("Calibrating all\n");
     29e:	492d      	.short	0x492d
     2a0:	4668      	mov	r0, sp
     2a2:	f006      	.short	0xf006
     2a4:	fb2b 4668 			; <UNDEFINED> instruction: 0xfb2b4668
     2a8:	ffcef000 	.word	0xffcef000
     2ac:	4668      	mov	r0, sp
     2ae:	f006 fae5 	bl	687c <String::~String()>
        MPU9250.calibrateSensor(ALL,NumberOfIterationForCalibration);
     2b2:	4b29      	.short	0x4b29
     2b4:	2164      	movs	r1, #100	; 0x64
     2b6:	6818      	.short	0x6818
     2b8:	f001 f88e 	bl	13d8 <IMU9250::calibrateSensor(SensorGatParam, int)>
    break;
    

    }
}
     2bc:	f85db005 	.word	0xf85db005
     2c0:	fb04 4926 			; <UNDEFINED> instruction: 0xfb044926

void SystemHandling::CalibrateSensor(int SensorID){

    switch (SensorID){
    case 0 :
        DebugTool.Display("Calibrating Accel\n");
     2c4:	f0064668 	.word	0xf0064668
     2c8:	fb19 4668 			; <UNDEFINED> instruction: 0xfb194668
     2cc:	ffbcf000 	.word	0xffbcf000
     2d0:	4668      	mov	r0, sp
     2d2:	f006 fad3 	bl	687c <String::~String()>
        MPU9250.calibrateSensor(ACCEL,NumberOfIterationForCalibration);
     2d6:	4b22      	.short	0x4b22
     2d8:	2164      	movs	r1, #100	; 0x64
     2da:	6818      	.short	0x6818
     2dc:	f001 f87c 	bl	13d8 <IMU9250::calibrateSensor(SensorGatParam, int)>
        MPU9250.calibrateSensor(ALL,NumberOfIterationForCalibration);
    break;
    

    }
}
     2e0:	b005      	add	sp, #20
     2e2:	f85d      	.short	0xf85d
     2e4:	fb04 491f 	mls	r9, r4, pc, r4
    case 0 :
        DebugTool.Display("Calibrating Accel\n");
        MPU9250.calibrateSensor(ACCEL,NumberOfIterationForCalibration);
    break;
    case 1 :
        DebugTool.Display("Calibrating Temperature\n");
     2e8:	f0064668 	.word	0xf0064668
     2ec:	fb07 4668 			; <UNDEFINED> instruction: 0xfb074668
     2f0:	ffaaf000 	.word	0xffaaf000
     2f4:	4668      	mov	r0, sp
     2f6:	f006      	.short	0xf006
     2f8:	fac1 4b1b 			; <UNDEFINED> instruction: 0xfac14b1b
        MPU9250.calibrateSensor(TEMP,NumberOfIterationForCalibration);
     2fc:	68182164 	.word	0x68182164
     300:	f001 f86a 	bl	13d8 <IMU9250::calibrateSensor(SensorGatParam, int)>
        MPU9250.calibrateSensor(ALL,NumberOfIterationForCalibration);
    break;
    

    }
}
     304:	f85db005 	.word	0xf85db005
     308:	fb04 4918 	mls	r9, r4, r8, r4
    case 1 :
        DebugTool.Display("Calibrating Temperature\n");
        MPU9250.calibrateSensor(TEMP,NumberOfIterationForCalibration);
    break;
    case 2 :
        DebugTool.Display("Calibrating Gyroscope\n");
     30c:	4668      	mov	r0, sp
     30e:	f006      	.short	0xf006
     310:	faf5 4668 			; <UNDEFINED> instruction: 0xfaf54668
     314:	ff98f000 	.word	0xff98f000
     318:	4668      	mov	r0, sp
     31a:	f006      	.short	0xf006
     31c:	faaf 4b14 			; <UNDEFINED> instruction: 0xfaaf4b14
        MPU9250.calibrateSensor(GYRO,NumberOfIterationForCalibration);
     320:	68182164 	.word	0x68182164
     324:	f001 f858 	bl	13d8 <IMU9250::calibrateSensor(SensorGatParam, int)>
        MPU9250.calibrateSensor(ALL,NumberOfIterationForCalibration);
    break;
    

    }
}
     328:	b005      	add	sp, #20
     32a:	f85d fb04 	ldr.w	pc, [sp], #4
    case 2 :
        DebugTool.Display("Calibrating Gyroscope\n");
        MPU9250.calibrateSensor(GYRO,NumberOfIterationForCalibration);
    break;
    case 3 :
        DebugTool.Display("Calibrating Compass\n");
     32e:	4911      	ldr	r1, [pc, #68]	; (374 <SystemHandling::CalibrateSensor(int)+0xe8>)
     330:	f0064668 	.word	0xf0064668
     334:	fae3 4668 			; <UNDEFINED> instruction: 0xfae34668
     338:	f000 ff86 	bl	1248 <Debugger::Display(String)>
     33c:	f0064668 	.word	0xf0064668
     340:	fa9d 4b0d 			; <UNDEFINED> instruction: 0xfa9d4b0d
        MPU9250.calibrateSensor(COMPAS,NumberOfIterationForCalibration);
     344:	68182164 	.word	0x68182164
     348:	f001 f846 	bl	13d8 <IMU9250::calibrateSensor(SensorGatParam, int)>
        MPU9250.calibrateSensor(ALL,NumberOfIterationForCalibration);
    break;
    

    }
}
     34c:	b005      	add	sp, #20
     34e:	f85d      	.short	0xf85d
     350:	fb04 bf00 	mla	pc, r4, r0, fp
     354:	20000094 	.word	0x20000094
     358:	0028      	movs	r0, r5
     35a:	2000      	.short	0x2000
     35c:	0034      	movs	r4, r6
     35e:	2000      	.short	0x2000
     360:	0020      	movs	r0, r4
     362:	2000      	.short	0x2000
     364:	0048      	lsls	r0, r1, #1
     366:	2000      	.short	0x2000
     368:	00a8      	lsls	r0, r5, #2
     36a:	2000      	movs	r0, #0
     36c:	0064      	lsls	r4, r4, #1
     36e:	2000      	.short	0x2000
     370:	002c      	movs	r4, r5
     372:	2000      	.short	0x2000
     374:	007c      	lsls	r4, r7, #1
     376:	2000      	movs	r0, #0
     378:	0030      	movs	r0, r6
     37a:	2000      	.short	0x2000

0000037c <SystemHandling::StartGathering()>:


}
void SystemHandling::StartGathering(){

    ScheduledGatherer.Scheduling(true);
     37c:	2001      	movs	r0, #1
     37e:	f001      	.short	0xf001
     380:	bda7      	pop	{r0, r1, r2, r5, r7, pc}
     382:	bf00      	.short	0xbf00

00000384 <SystemHandling::StopGathering()>:

}
void SystemHandling::StopGathering(){

    ScheduledGatherer.Scheduling(false);
     384:	2000      	movs	r0, #0
     386:	f001      	.short	0xf001
     388:	bda3      	pop	{r0, r1, r5, r7, pc}
     38a:	bf00      	.short	0xbf00

0000038c <SystemHandling::RadioFailsafe(bool)>:

}

void SystemHandling::RadioFailsafe(bool failsafeValue){

    if(failsafeValue){
     38c:	b900      	cbnz	r0, 390 <SystemHandling::RadioFailsafe(bool)+0x4>
     38e:	4770      	.short	0x4770

        ExceptionHandler.Error(0x0C,FAILSAFE);
     390:	4b02      	ldr	r3, [pc, #8]	; (39c <SystemHandling::RadioFailsafe(bool)+0x10>)
     392:	200c      	movs	r0, #12
     394:	f0007819 	.word	0xf0007819
     398:	b80f      			; <UNDEFINED> instruction: 0xb80f
     39a:	bf00      	.short	0xbf00
     39c:	0024      	movs	r4, r4
     39e:	2000      	.short	0x2000

000003a0 <GlobalExceptionHandler::begin()>:

GlobalExceptionHandler::GlobalExceptionHandler(){

}

void GlobalExceptionHandler::begin(){
     3a0:	b508      	push	{r3, lr}
    
    pinMode(13,OUTPUT);
     3a2:	2101      	movs	r1, #1
     3a4:	f004200d 	.word	0xf004200d
     3a8:	fb97 2100 			; <UNDEFINED> instruction: 0xfb972100
    digitalWrite(13,LOW);
     3ac:	e8bd200d 	.word	0xe8bd200d

}
     3b0:	4008      	ands	r0, r1
}

void GlobalExceptionHandler::begin(){
    
    pinMode(13,OUTPUT);
    digitalWrite(13,LOW);
     3b2:	f004      	.short	0xf004
     3b4:	bb8b      	cbnz	r3, 41a <GlobalExceptionHandler::Error(unsigned char, ErrorType)+0x62>
     3b6:	bf00      	nop

000003b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>:
}


void GlobalExceptionHandler::Error(uint8_t ExceptionID,ErrorType Err){
    
    switch(Err.ErrorTypeID){
     3b8:	b2c9      	uxtb	r1, r1
     3ba:	2901      	.short	0x2901
    digitalWrite(13,LOW);

}


void GlobalExceptionHandler::Error(uint8_t ExceptionID,ErrorType Err){
     3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    
    switch(Err.ErrorTypeID){
     3be:	d034      	.short	0xd034
     3c0:	d322      	bcc.n	408 <GlobalExceptionHandler::Error(unsigned char, ErrorType)+0x50>
     3c2:	2904      	cmp	r1, #4
     3c4:	d1174607 	.word	0xd1174607

        break;
        case 4:
           

            if(LastExceptionCountTime+TimeUnitForExceptionTimeOut < millis()){
     3c8:	4d20      	ldr	r5, [pc, #128]	; (44c <GlobalExceptionHandler::Error(unsigned char, ErrorType)+0x94>)
     3ca:	4e21      	ldr	r6, [pc, #132]	; (450 <GlobalExceptionHandler::Error(unsigned char, ErrorType)+0x98>)
     3cc:	682b      	ldr	r3, [r5, #0]
     3ce:	6832      	ldr	r2, [r6, #0]
     3d0:	737af503 	.word	0x737af503
     3d4:	4293      	cmp	r3, r2
     3d6:	d314      	.short	0xd314
                
                ExceptionCount = 0;

            } 
            else if(ExceptionCount >= numberOfCumulatedExceptionInDefinedTimeOut){
     3d8:	4c1e      	ldr	r4, [pc, #120]	; (454 <GlobalExceptionHandler::Error(unsigned char, ErrorType)+0x9c>)
     3da:	f240      	.short	0xf240
     3dc:	22ed      	movs	r2, #237	; 0xed
     3de:	6823      	.short	0x6823
     3e0:	4293      	cmp	r3, r2
     3e2:	dd05      	.short	0xdd05

                Error(0x06,FATALERROR);
     3e4:	4b1c      	ldr	r3, [pc, #112]	; (458 <GlobalExceptionHandler::Error(unsigned char, ErrorType)+0xa0>)
     3e6:	2006      	.short	0x2006
     3e8:	7819      	ldrb	r1, [r3, #0]
     3ea:	f7ff      	.short	0xf7ff
     3ec:	ffe5 6823 	vmlal.u32	q11, d5, d19
     3f0:	68323301 	.word	0x68323301
             }

            LastExceptionCountTime = millis();
            ExceptionCount++;
     3f4:	6023      	str	r3, [r4, #0]
            else if(ExceptionCount >= numberOfCumulatedExceptionInDefinedTimeOut){

                Error(0x06,FATALERROR);
             }

            LastExceptionCountTime = millis();
     3f6:	602a      	.short	0x602a
    
    
    
    }

    DebugTool.DisplayError(ExceptionID);
     3f8:	4638      	mov	r0, r7
    
   

}
     3fa:	e8bd      	.short	0xe8bd
     3fc:	40f8      	lsrs	r0, r7
    
    
    
    }

    DebugTool.DisplayError(ExceptionID);
     3fe:	f000      	.short	0xf000
     400:	bf2f      	iteee	cs
     402:	2301      	.short	0x2301
     404:	4c13      	ldr	r4, [pc, #76]	; (454 <GlobalExceptionHandler::Error(unsigned char, ErrorType)+0x9c>)
     406:	e7f4      	.short	0xe7f4

void GlobalExceptionHandler::Error(uint8_t ExceptionID,ErrorType Err){
    
    switch(Err.ErrorTypeID){
        case 0:
            DebugTool.DisplayError(ExceptionID);
     408:	f000 ff2a 	bl	1260 <Debugger::DisplayError(unsigned char)>	; unpredictable branch in IT block

             while(true){
                
                digitalWrite(13,HIGH);
     40c:	200d2101 	.word	0x200d2101
     410:	f004 fb5c 	bl	4acc <digitalWrite>	; unpredictable branch in IT block

                delay(100);
     414:	f0042064 	.word	0xf0042064
     418:	facd 2100 			; <UNDEFINED> instruction: 0xfacd2100
                digitalWrite(13,LOW);
     41c:	f004200d 	.word	0xf004200d
     420:	fb55 2064 			; <UNDEFINED> instruction: 0xfb552064
                delay(100);
     424:	fac6f004 	.word	0xfac6f004
     428:	e7f0      	b.n	40c <GlobalExceptionHandler::Error(unsigned char, ErrorType)+0x54>	; unpredictable branch in IT block

            }

        break;
        case 1:

            DebugTool.DisplayError(ExceptionID);
     42a:	f000      	.short	0xf000
     42c:	ff19 2101 	vrhadd.u16	d2, d9, d1
             while(true){
                
                digitalWrite(13,HIGH);
     430:	f004200d 	.word	0xf004200d
     434:	fb4b 2064 			; <UNDEFINED> instruction: 0xfb4b2064
                delay(100);
     438:	fabcf004 	.word	0xfabcf004
                digitalWrite(13,LOW);
     43c:	2100      	movs	r1, #0
     43e:	200d      	.short	0x200d
     440:	f004 fb44 	bl	4acc <digitalWrite>	; unpredictable branch in IT block

                delay(100);
     444:	f0042064 	.word	0xf0042064
     448:	fab5 e7f0 			; <UNDEFINED> instruction: 0xfab5e7f0
     44c:	20001ae0 	.word	0x20001ae0
     450:	21a0      	movs	r1, #160	; 0xa0
     452:	2000      	.short	0x2000
     454:	1adc      	subs	r4, r3, r3
     456:	2000      	.short	0x2000
     458:	00ac      	lsls	r4, r5, #2
     45a:	2000      	movcs	r0, #0

0000045c <SDCard::begin(int)>:

SDCard::SDCard(){

}

void SDCard::begin(int SDCSPin){
     45c:	4603b538 	.word	0x4603b538
    CSPin = SDCSPin;
     460:	4c11      	ldr	r4, [pc, #68]	; (4a8 <SDCard::begin(int)+0x4c>)
    pinMode(CSPin,OUTPUT);
     462:	2101      	movcc	r1, #1
     464:	b2c0      	uxtbcc	r0, r0
SDCard::SDCard(){

}

void SDCard::begin(int SDCSPin){
    CSPin = SDCSPin;
     466:	6023      	strcc	r3, [r4, #0]
    pinMode(CSPin,OUTPUT);
     468:	f004 fb36 	bl	4ad8 <pinMode>
    
    if(!SD.begin(CSPin)){
     46c:	7821      	ldrb	r1, [r4, #0]
     46e:	480f      	ldr	r0, [pc, #60]	; (4ac <SDCard::begin(int)+0x50>)
     470:	f858f002 	.word	0xf858f002
     474:	b190      	cbz	r0, 49c <SDCard::begin(int)+0x40>
     476:	4c0e      	.short	0x4c0e
    }
    for(int i = 0;i < NumberOfParametersLoaded;i ++){
        for(int j = 0;j < ParameterListY;j ++){
            for(int k = 0; k < ParameterListX;k ++){

                FP[i].FlightParam[j][k] = 255;
     478:	490e      	ldr	r1, [pc, #56]	; (4b4 <SDCard::begin(int)+0x58>)
     47a:	f504 7520 	add.w	r5, r4, #640	; 0x280

SDCard::SDCard(){

}

void SDCard::begin(int SDCSPin){
     47e:	4623      	mov	r3, r4
     480:	2000      	movs	r0, #0
     482:	f103 0228 	add.w	r2, r3, #40	; 0x28
    }
    for(int i = 0;i < NumberOfParametersLoaded;i ++){
        for(int j = 0;j < ParameterListY;j ++){
            for(int k = 0; k < ParameterListX;k ++){

                FP[i].FlightParam[j][k] = 255;
     486:	f843 1b04 	str.w	r1, [r3], #4
        ExceptionHandler.Error(0x01,INITERROR);

    }
    for(int i = 0;i < NumberOfParametersLoaded;i ++){
        for(int j = 0;j < ParameterListY;j ++){
            for(int k = 0; k < ParameterListX;k ++){
     48a:	4293      	cmp	r3, r2
     48c:	d1fb      	bne.n	486 <SDCard::begin(int)+0x2a>

        ExceptionHandler.Error(0x01,INITERROR);

    }
    for(int i = 0;i < NumberOfParametersLoaded;i ++){
        for(int j = 0;j < ParameterListY;j ++){
     48e:	3001      	adds	r0, #1
     490:	d1f62804 	.word	0xd1f62804
     494:	34a0      	adds	r4, #160	; 0xa0
    if(!SD.begin(CSPin)){

        ExceptionHandler.Error(0x01,INITERROR);

    }
    for(int i = 0;i < NumberOfParametersLoaded;i ++){
     496:	42a5      	.short	0x42a5
     498:	d1f1      	bne.n	47e <SDCard::begin(int)+0x22>
    }



    
}
     49a:	bd38      	pop	{r3, r4, r5, pc}
    CSPin = SDCSPin;
    pinMode(CSPin,OUTPUT);
    
    if(!SD.begin(CSPin)){

        ExceptionHandler.Error(0x01,INITERROR);
     49c:	20014b06 	.word	0x20014b06
     4a0:	7819      	ldrb	r1, [r3, #0]
     4a2:	f7ff      	.short	0xf7ff
     4a4:	ff89 e7e6 			; <UNDEFINED> instruction: 0xff89e7e6
     4a8:	20001d68 	.word	0x20001d68
     4ac:	1f18      	subs	r0, r3, #4
     4ae:	2000      	movs	r0, #0
     4b0:	1ae4      	subs	r4, r4, r3
     4b2:	2000      	.short	0x2000
     4b4:	0000      	movs	r0, r0
     4b6:	437f      	.short	0x437f
     4b8:	00f0      	lsls	r0, r6, #3
     4ba:	2000      	.short	0x2000

000004bc <SDCard::SetCalibrationPointer(unsigned char*, unsigned int)>:
    }


}

void SDCard::SetCalibrationPointer(uint8_t *VariablePointer,size_t Size){
     4bc:	b570      	push	{r4, r5, r6, lr}
    if(RecordPointerPosition > NumberOfArraysToLog){
     4be:	4c0a      	.short	0x4c0a
    }


}

void SDCard::SetCalibrationPointer(uint8_t *VariablePointer,size_t Size){
     4c0:	4606      	mov	r6, r0
     4c2:	460d      	.short	0x460d
    if(RecordPointerPosition > NumberOfArraysToLog){
     4c4:	6823      	ldr	r3, [r4, #0]
     4c6:	2b0a      	.short	0x2b0a
     4c8:	dd05      	ble.n	4d6 <SDCard::SetCalibrationPointer(unsigned char*, unsigned int)+0x1a>

        ExceptionHandler.Error(0x04,INITERROR);
     4ca:	4b08      	.short	0x4b08
     4cc:	2004      	movs	r0, #4
     4ce:	7819      	ldrb	r1, [r3, #0]
     4d0:	ff72f7ff 	.word	0xff72f7ff
     4d4:	6823      	ldr	r3, [r4, #0]

    }

    SS[RecordPointerPosition].SizeOfElement = Size;
     4d6:	4a06      	ldr	r2, [pc, #24]	; (4f0 <SDCard::SetCalibrationPointer(unsigned char*, unsigned int)+0x34>)
    SS[RecordPointerPosition].VariablePointer = VariablePointer;
    RecordPointerPosition ++;
     4d8:	1c58      	adds	r0, r3, #1

        ExceptionHandler.Error(0x04,INITERROR);

    }

    SS[RecordPointerPosition].SizeOfElement = Size;
     4da:	eb02      	.short	0xeb02
     4dc:	01c3      	lsls	r3, r0, #7
    SS[RecordPointerPosition].VariablePointer = VariablePointer;
     4de:	f842      	.short	0xf842
     4e0:	6033      	str	r3, [r6, #0]
    RecordPointerPosition ++;
     4e2:	6020      	str	r0, [r4, #0]

        ExceptionHandler.Error(0x04,INITERROR);

    }

    SS[RecordPointerPosition].SizeOfElement = Size;
     4e4:	604d      	str	r5, [r1, #4]
     4e6:	bd70      	.short	0xbd70
     4e8:	1d64      	adds	r4, r4, #5
     4ea:	2000      	.short	0x2000
     4ec:	00f0      	lsls	r0, r6, #3
     4ee:	2000      	.short	0x2000
     4f0:	1d6c      	adds	r4, r5, #5
     4f2:	2000      	.short	0x2000

000004f4 <SDCard::getParameters(int)>:



FlightParameter* SDCard::getParameters(int ParameterID){
 
return &FP[ParameterID];
     4f4:	4b02      	ldr	r3, [pc, #8]	; (500 <SDCard::getParameters(int)+0xc>)
     4f6:	eb00      	.short	0xeb00
     4f8:	0080      	lsls	r0, r0, #2

     4fa:	eb03      	.short	0xeb03
     4fc:	1040      	asrs	r0, r0, #1
     4fe:	4770      	.short	0x4770
     500:	1ae4      	subs	r4, r4, r3
     502:	2000      	.short	0x2000

00000504 <SDCard::ReadCalibrationData()>:


    
}

void SDCard::ReadCalibrationData(){
     504:	b5f0      	push	{r4, r5, r6, r7, lr}
     506:	b089      	.short	0xb089
    
    File CalibrationData = SD.open(CalibrationDataFile,FILE_READ);
     508:	2301      	movs	r3, #1
     50a:	4a13      	.short	0x4a13
     50c:	4668      	mov	r0, sp
     50e:	4913      	.short	0x4913
     510:	f002 f8bc 	bl	268c <SDClass::open(char const*, unsigned char)>

    if(CalibrationData){
     514:	f0014668 	.word	0xf0014668
     518:	ff7b b1b8 	vbif	d27, d27, d24
        
        for(int i = 0;i < RecordPointerPosition;i ++){
     51c:	68334e10 	.word	0x68334e10
     520:	2b00      	cmp	r3, #0
     522:	dd0d      	.short	0xdd0d
     524:	4f0f      	ldr	r7, [pc, #60]	; (564 <SDCard::ReadCalibrationData()+0x60>)
     526:	2400      	.short	0x2400
     528:	463d      	mov	r5, r7

            CalibrationData.read((uint8_t *)SS[i].VariablePointer,SS[i].SizeOfElement);
     52a:	88aa      	.short	0x88aa
     52c:	4668      	mov	r0, sp
     52e:	f857      	.short	0xf857
     530:	1034      	asrs	r4, r6, #32
    
    File CalibrationData = SD.open(CalibrationDataFile,FILE_READ);

    if(CalibrationData){
        
        for(int i = 0;i < RecordPointerPosition;i ++){
     532:	3401      	.short	0x3401

            CalibrationData.read((uint8_t *)SS[i].VariablePointer,SS[i].SizeOfElement);
     534:	f001 ff58 	bl	23e8 <File::read(void*, unsigned short)>
    
    File CalibrationData = SD.open(CalibrationDataFile,FILE_READ);

    if(CalibrationData){
        
        for(int i = 0;i < RecordPointerPosition;i ++){
     538:	35086833 	.word	0x35086833
     53c:	42a3      	cmp	r3, r4
     53e:	dcf4      	.short	0xdcf4

            CalibrationData.read((uint8_t *)SS[i].VariablePointer,SS[i].SizeOfElement);

        }
        CalibrationData.flush();
     540:	4668      	mov	r0, sp
     542:	f001      	.short	0xf001
     544:	ff07 4668 	vmax.u8	q2, <illegal reg q3.5>, q12
        CalibrationData.close();
     548:	ff54f001 	.word	0xff54f001
    
}

void SDCard::ReadCalibrationData(){
    
    File CalibrationData = SD.open(CalibrationDataFile,FILE_READ);
     54c:	4668      	mov	r0, sp
     54e:	f001      	.short	0xf001
     550:	ff49 b009 	vhadd.u8	d27, d9, d9
        CalibrationData.close();

    }


}
     554:	bf00bdf0 	.word	0xbf00bdf0
     558:	00b0      	lsls	r0, r6, #2
     55a:	2000      	.short	0x2000
     55c:	1f18      	subs	r0, r3, #4
     55e:	2000      	.short	0x2000
     560:	1d64      	adds	r4, r4, #5
     562:	2000      	.short	0x2000
     564:	1d6c      	adds	r4, r5, #5
     566:	2000      	.short	0x2000

00000568 <SDCard::WriteCalibrationData()>:


void SDCard::WriteCalibrationData(){
     568:	b5f0      	push	{r4, r5, r6, r7, lr}
     56a:	b08d      	.short	0xb08d
    SD.remove(CalibrationDataFile);
     56c:	4924      	ldr	r1, [pc, #144]	; (600 <SDCard::WriteCalibrationData()+0x98>)
     56e:	4825      	ldr	r0, [pc, #148]	; (604 <SDCard::WriteCalibrationData()+0x9c>)
     570:	f904f002 	.word	0xf904f002
    DebugTool.Display("SDCard : Saving ...\n");
     574:	4924      	ldr	r1, [pc, #144]	; (608 <SDCard::WriteCalibrationData()+0xa0>)
     576:	a804      	.short	0xa804
     578:	f006 f9c0 	bl	68fc <String::String(char const*)>
     57c:	a804      	add	r0, sp, #16
     57e:	f000      	.short	0xf000
     580:	fe63 a804 	cdp2	8, 6, cr10, cr3, cr4, {0}
     584:	f97af006 	.word	0xf97af006
    File CalibrationData = SD.open(CalibrationDataFile,FILE_WRITE);
     588:	a804      	add	r0, sp, #16
     58a:	2313      	.short	0x2313
     58c:	4a1c      	ldr	r2, [pc, #112]	; (600 <SDCard::WriteCalibrationData()+0x98>)
     58e:	491d      	ldr	r1, [pc, #116]	; (604 <SDCard::WriteCalibrationData()+0x9c>)
     590:	f002 f87c 	bl	268c <SDClass::open(char const*, unsigned char)>
    
    if(CalibrationData){
     594:	a804      	add	r0, sp, #16
     596:	f001 ff3b 	bl	2410 <File::operator bool()>
     59a:	b330      	cbz	r0, 5ea <SDCard::WriteCalibrationData()+0x82>

        for(int i = 0;i < RecordPointerPosition;i ++){
     59c:	4e1b      	ldr	r6, [pc, #108]	; (60c <SDCard::WriteCalibrationData()+0xa4>)
     59e:	6833      	ldr	r3, [r6, #0]
     5a0:	2b00      	cmp	r3, #0
     5a2:	dd0d      	ble.n	5c0 <SDCard::WriteCalibrationData()+0x58>
     5a4:	4f1a      	ldr	r7, [pc, #104]	; (610 <SDCard::WriteCalibrationData()+0xa8>)
     5a6:	2400      	movs	r4, #0
     5a8:	463d      	mov	r5, r7

            CalibrationData.write((const uint8_t *)SS[i].VariablePointer,SS[i].SizeOfElement);
     5aa:	686a      	ldr	r2, [r5, #4]
     5ac:	a804      	add	r0, sp, #16
     5ae:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
    DebugTool.Display("SDCard : Saving ...\n");
    File CalibrationData = SD.open(CalibrationDataFile,FILE_WRITE);
    
    if(CalibrationData){

        for(int i = 0;i < RecordPointerPosition;i ++){
     5b2:	3401      	adds	r4, #1

            CalibrationData.write((const uint8_t *)SS[i].VariablePointer,SS[i].SizeOfElement);
     5b4:	f001 fe88 	bl	22c8 <File::write(unsigned char const*, unsigned int)>
    DebugTool.Display("SDCard : Saving ...\n");
    File CalibrationData = SD.open(CalibrationDataFile,FILE_WRITE);
    
    if(CalibrationData){

        for(int i = 0;i < RecordPointerPosition;i ++){
     5b8:	6833      	ldr	r3, [r6, #0]
     5ba:	3508      	adds	r5, #8
     5bc:	42a3      	cmp	r3, r4
     5be:	dcf4      	bgt.n	5aa <SDCard::WriteCalibrationData()+0x42>

            CalibrationData.write((const uint8_t *)SS[i].VariablePointer,SS[i].SizeOfElement);

        }
        CalibrationData.flush();
     5c0:	a804      	add	r0, sp, #16
     5c2:	f001 fec7 	bl	2354 <File::flush()>
        CalibrationData.close();
     5c6:	a804      	add	r0, sp, #16
     5c8:	f001 ff14 	bl	23f4 <File::close()>

        DebugTool.Display("SDCard : Saved\n");
     5cc:	4911      	ldr	r1, [pc, #68]	; (614 <SDCard::WriteCalibrationData()+0xac>)
     5ce:	4668      	mov	r0, sp
     5d0:	f006 f994 	bl	68fc <String::String(char const*)>
     5d4:	4668      	mov	r0, sp
     5d6:	f000 fe37 	bl	1248 <Debugger::Display(String)>
     5da:	4668      	mov	r0, sp
     5dc:	f006 f94e 	bl	687c <String::~String()>


void SDCard::WriteCalibrationData(){
    SD.remove(CalibrationDataFile);
    DebugTool.Display("SDCard : Saving ...\n");
    File CalibrationData = SD.open(CalibrationDataFile,FILE_WRITE);
     5e0:	a804      	add	r0, sp, #16
     5e2:	f001 feff 	bl	23e4 <File::~File()>
        ExceptionHandler.Error(0x03,INITERROR);

    }


}
     5e6:	b00d      	add	sp, #52	; 0x34
     5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        DebugTool.Display("SDCard : Saved\n");
    
    }
    else{

        ExceptionHandler.Error(0x03,INITERROR);
     5ea:	4b0b      	ldr	r3, [pc, #44]	; (618 <SDCard::WriteCalibrationData()+0xb0>)
     5ec:	2003      	movs	r0, #3
     5ee:	7819      	ldrb	r1, [r3, #0]
     5f0:	f7ff fee2 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>


void SDCard::WriteCalibrationData(){
    SD.remove(CalibrationDataFile);
    DebugTool.Display("SDCard : Saving ...\n");
    File CalibrationData = SD.open(CalibrationDataFile,FILE_WRITE);
     5f4:	a804      	add	r0, sp, #16
     5f6:	f001 fef5 	bl	23e4 <File::~File()>
        ExceptionHandler.Error(0x03,INITERROR);

    }


}
     5fa:	b00d      	add	sp, #52	; 0x34
     5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5fe:	bf00      	nop
     600:	200000b0 	.word	0x200000b0
     604:	20001f18 	.word	0x20001f18
     608:	200000b8 	.word	0x200000b8
     60c:	20001d64 	.word	0x20001d64
     610:	20001d6c 	.word	0x20001d6c
     614:	200000d0 	.word	0x200000d0
     618:	200000f0 	.word	0x200000f0

0000061c <SDCard::ReadFlightParameters()>:
    RecordPointerPosition ++;


}

void SDCard::ReadFlightParameters(){    // 7% de mémoire consomé ici.
     61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     620:	b08b      	sub	sp, #44	; 0x2c

    File FlightParameterFile = SD.open(FlightParametersDirectory,FILE_READ);
     622:	2301      	movs	r3, #1
     624:	4a5d      	ldr	r2, [pc, #372]	; (79c <SDCard::ReadFlightParameters()+0x180>)
     626:	a802      	add	r0, sp, #8
     628:	495d      	ldr	r1, [pc, #372]	; (7a0 <SDCard::ReadFlightParameters()+0x184>)
     62a:	f002 f82f 	bl	268c <SDClass::open(char const*, unsigned char)>
    if(FlightParameterFile){
     62e:	a802      	add	r0, sp, #8
     630:	f001 feee 	bl	2410 <File::operator bool()>
     634:	2800      	cmp	r0, #0
     636:	d07f      	beq.n	738 <SDCard::ReadFlightParameters()+0x11c>
        bool PassLine = false;
        int ParameterReaded = 0;
        
        int ParameterCoordinate[2] = {0,0};
        char CharBuffer[ParameterCharSize] = "";
     638:	2300      	movs	r3, #0
     63a:	f8df 9170 	ldr.w	r9, [pc, #368]	; 7ac <SDCard::ReadFlightParameters()+0x190>

                    ParameterCoordinate[1] ++;
                    ParameterCoordinate[0] = 0;
                    if(ParameterCoordinate[1] >= ParameterListY){

                        ExceptionHandler.Error(0x03,INITERROR);
     63e:	f8df b168 	ldr.w	fp, [pc, #360]	; 7a8 <SDCard::ReadFlightParameters()+0x18c>
    File FlightParameterFile = SD.open(FlightParametersDirectory,FILE_READ);
    if(FlightParameterFile){
        bool PassLine = false;
        int ParameterReaded = 0;
        
        int ParameterCoordinate[2] = {0,0};
     642:	461d      	mov	r5, r3
     644:	461f      	mov	r7, r3
void SDCard::ReadFlightParameters(){    // 7% de mémoire consomé ici.

    File FlightParameterFile = SD.open(FlightParametersDirectory,FILE_READ);
    if(FlightParameterFile){
        bool PassLine = false;
        int ParameterReaded = 0;
     646:	461e      	mov	r6, r3

void SDCard::ReadFlightParameters(){    // 7% de mémoire consomé ici.

    File FlightParameterFile = SD.open(FlightParametersDirectory,FILE_READ);
    if(FlightParameterFile){
        bool PassLine = false;
     648:	461c      	mov	r4, r3
     64a:	4698      	mov	r8, r3
     64c:	469a      	mov	sl, r3
        int ParameterReaded = 0;
        
        int ParameterCoordinate[2] = {0,0};
        char CharBuffer[ParameterCharSize] = "";
     64e:	9300      	str	r3, [sp, #0]
     650:	f88d 3004 	strb.w	r3, [sp, #4]

        while(FlightParameterFile.available()){
     654:	a802      	add	r0, sp, #8
     656:	f001 fe2b 	bl	22b0 <File::available()>
     65a:	b1c8      	cbz	r0, 690 <SDCard::ReadFlightParameters()+0x74>
            
            char ReadedCharacter = FlightParameterFile.read();
     65c:	a802      	add	r0, sp, #8
     65e:	f001 fe45 	bl	22ec <File::read()>
     662:	b2c3      	uxtb	r3, r0

            if(ReadedCharacter == '#'){
     664:	2b23      	cmp	r3, #35	; 0x23
     666:	d02f      	beq.n	6c8 <SDCard::ReadFlightParameters()+0xac>

                PassLine = true;
                continue;
            }
            else if(ReadedCharacter == '\r'){
     668:	2b0d      	cmp	r3, #13
     66a:	d0f3      	beq.n	654 <SDCard::ReadFlightParameters()+0x38>

                continue;

            }
            else if(ReadedCharacter == '\n'){
     66c:	2b0a      	cmp	r3, #10
     66e:	d02d      	beq.n	6cc <SDCard::ReadFlightParameters()+0xb0>

                PassLine = false;
              
                continue;
            }
            else if(!PassLine){
     670:	2c00      	cmp	r4, #0
     672:	d1ef      	bne.n	654 <SDCard::ReadFlightParameters()+0x38>
                
                if(ReadedCharacter == ','){
     674:	2b2c      	cmp	r3, #44	; 0x2c
     676:	d06a      	beq.n	74e <SDCard::ReadFlightParameters()+0x132>
                        
                    }
                    continue;

                }
                else if(ReadedCharacter == '/'){
     678:	2b2f      	cmp	r3, #47	; 0x2f
     67a:	d02a      	beq.n	6d2 <SDCard::ReadFlightParameters()+0xb6>
                    continue;

                }
                else{
                  
                    sprintf(CharBuffer,"%s%c",CharBuffer,ReadedCharacter);
     67c:	466a      	mov	r2, sp
     67e:	4949      	ldr	r1, [pc, #292]	; (7a4 <SDCard::ReadFlightParameters()+0x188>)
     680:	4668      	mov	r0, sp
     682:	f008 fad5 	bl	8c30 <sprintf>
        int ParameterReaded = 0;
        
        int ParameterCoordinate[2] = {0,0};
        char CharBuffer[ParameterCharSize] = "";

        while(FlightParameterFile.available()){
     686:	a802      	add	r0, sp, #8
     688:	f001 fe12 	bl	22b0 <File::available()>
     68c:	2800      	cmp	r0, #0
     68e:	d1e5      	bne.n	65c <SDCard::ReadFlightParameters()+0x40>
            }

       
        }

        FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     690:	4456      	add	r6, sl
     692:	4445      	add	r5, r8
     694:	4668      	mov	r0, sp
     696:	ea4f 08c6 	mov.w	r8, r6, lsl #3
     69a:	f007 fc9f 	bl	7fdc <atof>
     69e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     6a2:	eb08 0545 	add.w	r5, r8, r5, lsl #1
        FlightParameterFile.flush();
     6a6:	a802      	add	r0, sp, #8
            }

       
        }

        FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     6a8:	443d      	add	r5, r7
     6aa:	eb09 0585 	add.w	r5, r9, r5, lsl #2
     6ae:	ed85 0a00 	vstr	s0, [r5]
        FlightParameterFile.flush();
     6b2:	f001 fe4f 	bl	2354 <File::flush()>
        FlightParameterFile.close();
     6b6:	a802      	add	r0, sp, #8
     6b8:	f001 fe9c 	bl	23f4 <File::close()>

}

void SDCard::ReadFlightParameters(){    // 7% de mémoire consomé ici.

    File FlightParameterFile = SD.open(FlightParametersDirectory,FILE_READ);
     6bc:	a802      	add	r0, sp, #8
     6be:	f001 fe91 	bl	23e4 <File::~File()>

        ExceptionHandler.Error(0x02,INITERROR);

    }

}
     6c2:	b00b      	add	sp, #44	; 0x2c
     6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            
            char ReadedCharacter = FlightParameterFile.read();

            if(ReadedCharacter == '#'){

                PassLine = true;
     6c8:	2401      	movs	r4, #1
     6ca:	e7c3      	b.n	654 <SDCard::ReadFlightParameters()+0x38>
                continue;

            }
            else if(ReadedCharacter == '\n'){
                
                if(!PassLine){
     6cc:	b1d4      	cbz	r4, 704 <SDCard::ReadFlightParameters()+0xe8>
                    ParameterReaded ++;
                    ParameterCoordinate[0] = 0;
                    ParameterCoordinate[1] = 0;
                }

                PassLine = false;
     6ce:	2400      	movs	r4, #0
     6d0:	e7c0      	b.n	654 <SDCard::ReadFlightParameters()+0x38>
                    continue;

                }
                else if(ReadedCharacter == '/'){
                    
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     6d2:	4668      	mov	r0, sp
     6d4:	44a8      	add	r8, r5
     6d6:	f007 fc81 	bl	7fdc <atof>
     6da:	eb0a 0306 	add.w	r3, sl, r6

                    strcpy(CharBuffer,"");

                    ParameterCoordinate[1] ++;
     6de:	3501      	adds	r5, #1
                    continue;

                }
                else if(ReadedCharacter == '/'){
                    
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     6e0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     6e4:	00db      	lsls	r3, r3, #3

                    strcpy(CharBuffer,"");
     6e6:	f88d 4000 	strb.w	r4, [sp]

                    ParameterCoordinate[1] ++;
                    ParameterCoordinate[0] = 0;
                    if(ParameterCoordinate[1] >= ParameterListY){
     6ea:	2d03      	cmp	r5, #3
                    continue;

                }
                else if(ReadedCharacter == '/'){
                    
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     6ec:	eb03 0848 	add.w	r8, r3, r8, lsl #1
     6f0:	4447      	add	r7, r8
     6f2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
     6f6:	ed87 0a00 	vstr	s0, [r7]

                    strcpy(CharBuffer,"");

                    ParameterCoordinate[1] ++;
                    ParameterCoordinate[0] = 0;
                    if(ParameterCoordinate[1] >= ParameterListY){
     6fa:	dc45      	bgt.n	788 <SDCard::ReadFlightParameters()+0x16c>
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);

                    strcpy(CharBuffer,"");

                    ParameterCoordinate[1] ++;
                    ParameterCoordinate[0] = 0;
     6fc:	4627      	mov	r7, r4
     6fe:	ea4f 0885 	mov.w	r8, r5, lsl #2
     702:	e7a7      	b.n	654 <SDCard::ReadFlightParameters()+0x38>
            }
            else if(ReadedCharacter == '\n'){
                
                if(!PassLine){
                
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     704:	44b2      	add	sl, r6
     706:	4668      	mov	r0, sp
     708:	f007 fc68 	bl	7fdc <atof>
     70c:	eb08 0305 	add.w	r3, r8, r5
     710:	ea4f 0aca 	mov.w	sl, sl, lsl #3
     714:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
                

                    strcpy(CharBuffer,"");

                    
                    ParameterReaded ++;
     718:	3601      	adds	r6, #1
                
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
                
                

                    strcpy(CharBuffer,"");
     71a:	f88d 4000 	strb.w	r4, [sp]
            }
            else if(ReadedCharacter == '\n'){
                
                if(!PassLine){
                
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     71e:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
                    strcpy(CharBuffer,"");

                    
                    ParameterReaded ++;
                    ParameterCoordinate[0] = 0;
                    ParameterCoordinate[1] = 0;
     722:	4625      	mov	r5, r4
     724:	46a0      	mov	r8, r4
     726:	ea4f 0a86 	mov.w	sl, r6, lsl #2
            }
            else if(ReadedCharacter == '\n'){
                
                if(!PassLine){
                
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     72a:	443b      	add	r3, r7

                    strcpy(CharBuffer,"");

                    
                    ParameterReaded ++;
                    ParameterCoordinate[0] = 0;
     72c:	4627      	mov	r7, r4
            }
            else if(ReadedCharacter == '\n'){
                
                if(!PassLine){
                
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     72e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
     732:	ed83 0a00 	vstr	s0, [r3]
     736:	e78d      	b.n	654 <SDCard::ReadFlightParameters()+0x38>
        FlightParameterFile.close();

    }
    else{

        ExceptionHandler.Error(0x02,INITERROR);
     738:	4b1b      	ldr	r3, [pc, #108]	; (7a8 <SDCard::ReadFlightParameters()+0x18c>)
     73a:	2002      	movs	r0, #2
     73c:	7819      	ldrb	r1, [r3, #0]
     73e:	f7ff fe3b 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>

}

void SDCard::ReadFlightParameters(){    // 7% de mémoire consomé ici.

    File FlightParameterFile = SD.open(FlightParametersDirectory,FILE_READ);
     742:	a802      	add	r0, sp, #8
     744:	f001 fe4e 	bl	23e4 <File::~File()>

        ExceptionHandler.Error(0x02,INITERROR);

    }

}
     748:	b00b      	add	sp, #44	; 0x2c
     74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            }
            else if(!PassLine){
                
                if(ReadedCharacter == ','){

                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     74e:	4668      	mov	r0, sp
     750:	f007 fc44 	bl	7fdc <atof>
     754:	eb0a 0206 	add.w	r2, sl, r6
     758:	eb08 0305 	add.w	r3, r8, r5
     75c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     760:	00d2      	lsls	r2, r2, #3
                    
                    
                    strcpy(CharBuffer,"");
     762:	f88d 4000 	strb.w	r4, [sp]
            }
            else if(!PassLine){
                
                if(ReadedCharacter == ','){

                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     766:	eb02 0343 	add.w	r3, r2, r3, lsl #1
     76a:	443b      	add	r3, r7
                    
                    
                    strcpy(CharBuffer,"");

                    ParameterCoordinate[0] ++;
     76c:	3701      	adds	r7, #1
            }
            else if(!PassLine){
                
                if(ReadedCharacter == ','){

                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     76e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
                    
                    
                    strcpy(CharBuffer,"");

                    ParameterCoordinate[0] ++;
                    if(ParameterCoordinate[0] >= ParameterListX){
     772:	2f09      	cmp	r7, #9
            }
            else if(!PassLine){
                
                if(ReadedCharacter == ','){

                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);
     774:	ed83 0a00 	vstr	s0, [r3]
                    
                    
                    strcpy(CharBuffer,"");

                    ParameterCoordinate[0] ++;
                    if(ParameterCoordinate[0] >= ParameterListX){
     778:	f77f af6c 	ble.w	654 <SDCard::ReadFlightParameters()+0x38>

                        ExceptionHandler.Error(0x03,INITERROR);
     77c:	f89b 1000 	ldrb.w	r1, [fp]
     780:	2003      	movs	r0, #3
     782:	f7ff fe19 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>
     786:	e765      	b.n	654 <SDCard::ReadFlightParameters()+0x38>

                    ParameterCoordinate[1] ++;
                    ParameterCoordinate[0] = 0;
                    if(ParameterCoordinate[1] >= ParameterListY){

                        ExceptionHandler.Error(0x03,INITERROR);
     788:	f89b 1000 	ldrb.w	r1, [fp]
     78c:	2003      	movs	r0, #3
     78e:	f7ff fe13 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>
                    FP[ParameterReaded].FlightParam[ParameterCoordinate[1]][ParameterCoordinate[0]] = atof(CharBuffer);

                    strcpy(CharBuffer,"");

                    ParameterCoordinate[1] ++;
                    ParameterCoordinate[0] = 0;
     792:	4627      	mov	r7, r4
     794:	ea4f 0885 	mov.w	r8, r5, lsl #2
     798:	e75c      	b.n	654 <SDCard::ReadFlightParameters()+0x38>
     79a:	bf00      	nop
     79c:	200000e0 	.word	0x200000e0
     7a0:	20001f18 	.word	0x20001f18
     7a4:	200000e8 	.word	0x200000e8
     7a8:	200000f0 	.word	0x200000f0
     7ac:	20001ae4 	.word	0x20001ae4

000007b0 <SPIDev::SPIDev()>:
#include "SPIElement.h"




SPIDev::SPIDev(){
     7b0:	b410      	push	{r4}
     7b2:	2400      	movs	r4, #0
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     7b4:	4903      	ldr	r1, [pc, #12]	; (7c4 <SPIDev::SPIDev()+0x14>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     7b6:	2207      	movs	r2, #7
     7b8:	7084      	strb	r4, [r0, #2]
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     7ba:	6041      	str	r1, [r0, #4]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     7bc:	6082      	str	r2, [r0, #8]


}
     7be:	f85d 4b04 	ldr.w	r4, [sp], #4
     7c2:	4770      	bx	lr
     7c4:	003d0900 	.word	0x003d0900

000007c8 <SPIDev::SPIInitParam(unsigned char, unsigned char, SPISettings)>:

void SPIDev::SPIInitParam(uint8_t CSPinForModule,uint8_t SpiUsedForTheCommunication,SPISettings SettingsForSPIComm){
     7c8:	b082      	sub	sp, #8
     7ca:	b430      	push	{r4, r5}
     7cc:	4604      	mov	r4, r0
     7ce:	a802      	add	r0, sp, #8
     7d0:	460d      	mov	r5, r1
     7d2:	f840 3f04 	str.w	r3, [r0, #4]!
    
    DeviceBusSettings = SettingsForSPIComm;
     7d6:	1d23      	adds	r3, r4, #4
     7d8:	c803      	ldmia	r0, {r0, r1}
     7da:	e883 0003 	stmia.w	r3, {r0, r1}
    CSPin = CSPinForModule;
     7de:	7065      	strb	r5, [r4, #1]
    UseSpiNumber = SpiUsedForTheCommunication;
     7e0:	7022      	strb	r2, [r4, #0]
    
}
     7e2:	bc30      	pop	{r4, r5}
     7e4:	b002      	add	sp, #8
     7e6:	4770      	bx	lr

000007e8 <SPIDev::begin()>:

void SPIDev::begin(){
     7e8:	b510      	push	{r4, lr}
     7ea:	4604      	mov	r4, r0
    
    pinMode(CSPin,OUTPUT);
     7ec:	2101      	movs	r1, #1
     7ee:	7840      	ldrb	r0, [r0, #1]
     7f0:	f004 f972 	bl	4ad8 <pinMode>
    digitalWrite(CSPin,HIGH);
     7f4:	2101      	movs	r1, #1
     7f6:	7860      	ldrb	r0, [r4, #1]
     7f8:	f004 f968 	bl	4acc <digitalWrite>
    
    if(UseSpiNumber > GeneralSPIConfiguration.NumberOfDefinedSPI){
     7fc:	4a09      	ldr	r2, [pc, #36]	; (824 <SPIDev::begin()+0x3c>)
     7fe:	7823      	ldrb	r3, [r4, #0]
     800:	6811      	ldr	r1, [r2, #0]
     802:	428b      	cmp	r3, r1
     804:	dc00      	bgt.n	808 <SPIDev::begin()+0x20>
     806:	bd10      	pop	{r4, pc}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     808:	4807      	ldr	r0, [pc, #28]	; (828 <SPIDev::begin()+0x40>)
     80a:	f005 ff5b 	bl	66c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     80e:	4806      	ldr	r0, [pc, #24]	; (828 <SPIDev::begin()+0x40>)
     810:	f005 ff08 	bl	6624 <Print::println()>
       Serial.println(GeneralSPIConfiguration.NumberOfDefinedSPI);
        ExceptionHandler.Error(0x08,INITERROR);
     814:	4b05      	ldr	r3, [pc, #20]	; (82c <SPIDev::begin()+0x44>)
     816:	2008      	movs	r0, #8
     818:	7819      	ldrb	r1, [r3, #0]

    }

}
     81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pinMode(CSPin,OUTPUT);
    digitalWrite(CSPin,HIGH);
    
    if(UseSpiNumber > GeneralSPIConfiguration.NumberOfDefinedSPI){
       Serial.println(GeneralSPIConfiguration.NumberOfDefinedSPI);
        ExceptionHandler.Error(0x08,INITERROR);
     81e:	f7ff bdcb 	b.w	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>
     822:	bf00      	nop
     824:	20001dbc 	.word	0x20001dbc
     828:	200010e4 	.word	0x200010e4
     82c:	20000104 	.word	0x20000104

00000830 <SPIDev::beginTransaction()>:

    }

}

void SPIDev::beginTransaction(){
     830:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(UseSpiNumber == 1){
     832:	7803      	ldrb	r3, [r0, #0]
     834:	2b01      	cmp	r3, #1
     836:	f000 80c9 	beq.w	9cc <SPIDev::beginTransaction()+0x19c>

        SPI.beginTransaction(DeviceBusSettings);

    }
    else if(UseSpiNumber == 2){
     83a:	2b02      	cmp	r3, #2
     83c:	d06f      	beq.n	91e <SPIDev::beginTransaction()+0xee>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     83e:	4b97      	ldr	r3, [pc, #604]	; (a9c <SPIDev::beginTransaction()+0x26c>)
     840:	6845      	ldr	r5, [r0, #4]
     842:	7cda      	ldrb	r2, [r3, #19]
     844:	6884      	ldr	r4, [r0, #8]
     846:	2a00      	cmp	r2, #0
     848:	d12f      	bne.n	8aa <SPIDev::beginTransaction()+0x7a>
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     84a:	689a      	ldr	r2, [r3, #8]
     84c:	4993      	ldr	r1, [pc, #588]	; (a9c <SPIDev::beginTransaction()+0x26c>)
     84e:	42aa      	cmp	r2, r5
     850:	d061      	beq.n	916 <SPIDev::beginTransaction()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     852:	4a93      	ldr	r2, [pc, #588]	; (aa0 <SPIDev::beginTransaction()+0x270>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     854:	4e93      	ldr	r6, [pc, #588]	; (aa4 <SPIDev::beginTransaction()+0x274>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     856:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     858:	608d      	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     85a:	f3c2 1101 	ubfx	r1, r2, #4, #2
     85e:	f3c2 6282 	ubfx	r2, r2, #26, #3
     862:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
     866:	3201      	adds	r2, #1
     868:	fbb1 f1f2 	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     86c:	2d00      	cmp	r5, #0
     86e:	d054      	beq.n	91a <SPIDev::beginTransaction()+0xea>
     870:	fbb1 f2f5 	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
     874:	b14a      	cbz	r2, 88a <SPIDev::beginTransaction()+0x5a>
     876:	fbb1 f1f2 	udiv	r1, r1, r2
     87a:	42a9      	cmp	r1, r5
     87c:	f200 80a4 	bhi.w	9c8 <SPIDev::beginTransaction()+0x198>
			if (d > 257) d= 257;  // max div
     880:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
     884:	f0c0 8120 	bcc.w	ac8 <SPIDev::beginTransaction()+0x298>
     888:	4a87      	ldr	r2, [pc, #540]	; (aa8 <SPIDev::beginTransaction()+0x278>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     88a:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     88c:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     88e:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     890:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
     892:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     894:	611e      	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     896:	625d      	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
     898:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     89a:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     89c:	6119      	str	r1, [r3, #16]
    else {

        SPI2.beginTransaction(DeviceBusSettings);

    }
    digitalWrite(CSPin,LOW);
     89e:	7840      	ldrb	r0, [r0, #1]
     8a0:	2100      	movs	r1, #0
}
     8a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    else {

        SPI2.beginTransaction(DeviceBusSettings);

    }
    digitalWrite(CSPin,LOW);
     8a6:	f004 b911 	b.w	4acc <digitalWrite>
	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
			__disable_irq();
     8aa:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     8ac:	7cd9      	ldrb	r1, [r3, #19]
     8ae:	07ce      	lsls	r6, r1, #31
     8b0:	460a      	mov	r2, r1
     8b2:	d508      	bpl.n	8c6 <SPIDev::beginTransaction()+0x96>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     8b4:	f8df e20c 	ldr.w	lr, [pc, #524]	; ac4 <SPIDev::beginTransaction()+0x294>
     8b8:	695f      	ldr	r7, [r3, #20]
     8ba:	f8de 6000 	ldr.w	r6, [lr]
     8be:	403e      	ands	r6, r7
     8c0:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     8c2:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
     8c6:	078f      	lsls	r7, r1, #30
     8c8:	d506      	bpl.n	8d8 <SPIDev::beginTransaction()+0xa8>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     8ca:	4e78      	ldr	r6, [pc, #480]	; (aac <SPIDev::beginTransaction()+0x27c>)
     8cc:	6999      	ldr	r1, [r3, #24]
     8ce:	6837      	ldr	r7, [r6, #0]
     8d0:	7cda      	ldrb	r2, [r3, #19]
     8d2:	4039      	ands	r1, r7
     8d4:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     8d6:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
     8d8:	0756      	lsls	r6, r2, #29
     8da:	d506      	bpl.n	8ea <SPIDev::beginTransaction()+0xba>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     8dc:	4e74      	ldr	r6, [pc, #464]	; (ab0 <SPIDev::beginTransaction()+0x280>)
     8de:	69d9      	ldr	r1, [r3, #28]
     8e0:	6837      	ldr	r7, [r6, #0]
     8e2:	7cda      	ldrb	r2, [r3, #19]
     8e4:	4039      	ands	r1, r7
     8e6:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     8e8:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
     8ea:	0711      	lsls	r1, r2, #28
     8ec:	d506      	bpl.n	8fc <SPIDev::beginTransaction()+0xcc>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     8ee:	4e71      	ldr	r6, [pc, #452]	; (ab4 <SPIDev::beginTransaction()+0x284>)
     8f0:	6a19      	ldr	r1, [r3, #32]
     8f2:	6837      	ldr	r7, [r6, #0]
     8f4:	7cda      	ldrb	r2, [r3, #19]
     8f6:	4039      	ands	r1, r7
     8f8:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     8fa:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
     8fc:	06d2      	lsls	r2, r2, #27
     8fe:	d505      	bpl.n	90c <SPIDev::beginTransaction()+0xdc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     900:	496d      	ldr	r1, [pc, #436]	; (ab8 <SPIDev::beginTransaction()+0x288>)
     902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     904:	680e      	ldr	r6, [r1, #0]
     906:	4032      	ands	r2, r6
     908:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     90a:	600a      	str	r2, [r1, #0]
			}
			__enable_irq();
     90c:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     90e:	689a      	ldr	r2, [r3, #8]
     910:	4962      	ldr	r1, [pc, #392]	; (a9c <SPIDev::beginTransaction()+0x26c>)
     912:	42aa      	cmp	r2, r5
     914:	d19d      	bne.n	852 <SPIDev::beginTransaction()+0x22>
     916:	68ca      	ldr	r2, [r1, #12]
     918:	e7b8      	b.n	88c <SPIDev::beginTransaction()+0x5c>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     91a:	460a      	mov	r2, r1
     91c:	e7aa      	b.n	874 <SPIDev::beginTransaction()+0x44>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     91e:	4b67      	ldr	r3, [pc, #412]	; (abc <SPIDev::beginTransaction()+0x28c>)
     920:	6845      	ldr	r5, [r0, #4]
     922:	7cda      	ldrb	r2, [r3, #19]
     924:	6884      	ldr	r4, [r0, #8]
     926:	2a00      	cmp	r2, #0
     928:	d031      	beq.n	98e <SPIDev::beginTransaction()+0x15e>
			__disable_irq();
     92a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     92c:	7cd9      	ldrb	r1, [r3, #19]
     92e:	07ce      	lsls	r6, r1, #31
     930:	460a      	mov	r2, r1
     932:	d508      	bpl.n	946 <SPIDev::beginTransaction()+0x116>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     934:	f8df e18c 	ldr.w	lr, [pc, #396]	; ac4 <SPIDev::beginTransaction()+0x294>
     938:	695f      	ldr	r7, [r3, #20]
     93a:	f8de 6000 	ldr.w	r6, [lr]
     93e:	403e      	ands	r6, r7
     940:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     942:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
     946:	078f      	lsls	r7, r1, #30
     948:	d506      	bpl.n	958 <SPIDev::beginTransaction()+0x128>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     94a:	4e58      	ldr	r6, [pc, #352]	; (aac <SPIDev::beginTransaction()+0x27c>)
     94c:	6999      	ldr	r1, [r3, #24]
     94e:	6837      	ldr	r7, [r6, #0]
     950:	7cda      	ldrb	r2, [r3, #19]
     952:	4039      	ands	r1, r7
     954:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     956:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
     958:	0756      	lsls	r6, r2, #29
     95a:	d506      	bpl.n	96a <SPIDev::beginTransaction()+0x13a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     95c:	4e54      	ldr	r6, [pc, #336]	; (ab0 <SPIDev::beginTransaction()+0x280>)
     95e:	69d9      	ldr	r1, [r3, #28]
     960:	6837      	ldr	r7, [r6, #0]
     962:	7cda      	ldrb	r2, [r3, #19]
     964:	4039      	ands	r1, r7
     966:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     968:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
     96a:	0711      	lsls	r1, r2, #28
     96c:	d506      	bpl.n	97c <SPIDev::beginTransaction()+0x14c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     96e:	4e51      	ldr	r6, [pc, #324]	; (ab4 <SPIDev::beginTransaction()+0x284>)
     970:	6a19      	ldr	r1, [r3, #32]
     972:	6837      	ldr	r7, [r6, #0]
     974:	7cda      	ldrb	r2, [r3, #19]
     976:	4039      	ands	r1, r7
     978:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     97a:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
     97c:	06d7      	lsls	r7, r2, #27
     97e:	d505      	bpl.n	98c <SPIDev::beginTransaction()+0x15c>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     980:	494d      	ldr	r1, [pc, #308]	; (ab8 <SPIDev::beginTransaction()+0x288>)
     982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     984:	680e      	ldr	r6, [r1, #0]
     986:	4032      	ands	r2, r6
     988:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     98a:	600a      	str	r2, [r1, #0]
			}
			__enable_irq();
     98c:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     98e:	689a      	ldr	r2, [r3, #8]
     990:	494a      	ldr	r1, [pc, #296]	; (abc <SPIDev::beginTransaction()+0x28c>)
     992:	4295      	cmp	r5, r2
     994:	d0bf      	beq.n	916 <SPIDev::beginTransaction()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     996:	4a42      	ldr	r2, [pc, #264]	; (aa0 <SPIDev::beginTransaction()+0x270>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     998:	4e42      	ldr	r6, [pc, #264]	; (aa4 <SPIDev::beginTransaction()+0x274>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     99a:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     99c:	608d      	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     99e:	f3c2 1101 	ubfx	r1, r2, #4, #2
     9a2:	f3c2 6282 	ubfx	r2, r2, #26, #3
     9a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
     9aa:	3201      	adds	r2, #1
     9ac:	fbb1 f1f2 	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     9b0:	2d00      	cmp	r5, #0
     9b2:	d06c      	beq.n	a8e <SPIDev::beginTransaction()+0x25e>
     9b4:	fbb1 f2f5 	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
     9b8:	2a00      	cmp	r2, #0
     9ba:	f43f af66 	beq.w	88a <SPIDev::beginTransaction()+0x5a>
     9be:	fbb1 f1f2 	udiv	r1, r1, r2
     9c2:	428d      	cmp	r5, r1
     9c4:	f4bf af5c 	bcs.w	880 <SPIDev::beginTransaction()+0x50>
     9c8:	3201      	adds	r2, #1
     9ca:	e759      	b.n	880 <SPIDev::beginTransaction()+0x50>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     9cc:	4b3c      	ldr	r3, [pc, #240]	; (ac0 <SPIDev::beginTransaction()+0x290>)
     9ce:	6841      	ldr	r1, [r0, #4]
     9d0:	7cda      	ldrb	r2, [r3, #19]
     9d2:	6885      	ldr	r5, [r0, #8]
     9d4:	2a00      	cmp	r2, #0
     9d6:	d031      	beq.n	a3c <SPIDev::beginTransaction()+0x20c>
			__disable_irq();
     9d8:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     9da:	7cdc      	ldrb	r4, [r3, #19]
     9dc:	07e6      	lsls	r6, r4, #31
     9de:	4622      	mov	r2, r4
     9e0:	d508      	bpl.n	9f4 <SPIDev::beginTransaction()+0x1c4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     9e2:	f8df e0e0 	ldr.w	lr, [pc, #224]	; ac4 <SPIDev::beginTransaction()+0x294>
     9e6:	695f      	ldr	r7, [r3, #20]
     9e8:	f8de 6000 	ldr.w	r6, [lr]
     9ec:	403e      	ands	r6, r7
     9ee:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     9f0:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
     9f4:	07a7      	lsls	r7, r4, #30
     9f6:	d506      	bpl.n	a06 <SPIDev::beginTransaction()+0x1d6>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     9f8:	4e2c      	ldr	r6, [pc, #176]	; (aac <SPIDev::beginTransaction()+0x27c>)
     9fa:	699c      	ldr	r4, [r3, #24]
     9fc:	6837      	ldr	r7, [r6, #0]
     9fe:	7cda      	ldrb	r2, [r3, #19]
     a00:	403c      	ands	r4, r7
     a02:	62dc      	str	r4, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     a04:	6034      	str	r4, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
     a06:	0756      	lsls	r6, r2, #29
     a08:	d506      	bpl.n	a18 <SPIDev::beginTransaction()+0x1e8>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     a0a:	4e29      	ldr	r6, [pc, #164]	; (ab0 <SPIDev::beginTransaction()+0x280>)
     a0c:	69dc      	ldr	r4, [r3, #28]
     a0e:	6837      	ldr	r7, [r6, #0]
     a10:	7cda      	ldrb	r2, [r3, #19]
     a12:	403c      	ands	r4, r7
     a14:	631c      	str	r4, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     a16:	6034      	str	r4, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
     a18:	0714      	lsls	r4, r2, #28
     a1a:	d506      	bpl.n	a2a <SPIDev::beginTransaction()+0x1fa>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     a1c:	4e25      	ldr	r6, [pc, #148]	; (ab4 <SPIDev::beginTransaction()+0x284>)
     a1e:	6a1c      	ldr	r4, [r3, #32]
     a20:	6837      	ldr	r7, [r6, #0]
     a22:	7cda      	ldrb	r2, [r3, #19]
     a24:	403c      	ands	r4, r7
     a26:	635c      	str	r4, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     a28:	6034      	str	r4, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
     a2a:	06d7      	lsls	r7, r2, #27
     a2c:	d505      	bpl.n	a3a <SPIDev::beginTransaction()+0x20a>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     a2e:	4c22      	ldr	r4, [pc, #136]	; (ab8 <SPIDev::beginTransaction()+0x288>)
     a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     a32:	6826      	ldr	r6, [r4, #0]
     a34:	4032      	ands	r2, r6
     a36:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     a38:	6022      	str	r2, [r4, #0]
			}
			__enable_irq();
     a3a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     a3c:	689a      	ldr	r2, [r3, #8]
     a3e:	4c20      	ldr	r4, [pc, #128]	; (ac0 <SPIDev::beginTransaction()+0x290>)
     a40:	428a      	cmp	r2, r1
     a42:	d028      	beq.n	a96 <SPIDev::beginTransaction()+0x266>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     a44:	4a16      	ldr	r2, [pc, #88]	; (aa0 <SPIDev::beginTransaction()+0x270>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     a46:	4e17      	ldr	r6, [pc, #92]	; (aa4 <SPIDev::beginTransaction()+0x274>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     a48:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     a4a:	60a1      	str	r1, [r4, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     a4c:	f3c2 1401 	ubfx	r4, r2, #4, #2
     a50:	f3c2 6282 	ubfx	r2, r2, #26, #3
     a54:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
     a58:	3201      	adds	r2, #1
     a5a:	fbb4 f4f2 	udiv	r4, r4, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     a5e:	b1c1      	cbz	r1, a92 <SPIDev::beginTransaction()+0x262>
     a60:	fbb4 f2f1 	udiv	r2, r4, r1

			if (d && clkhz/d > _clock) d++;
     a64:	b142      	cbz	r2, a78 <SPIDev::beginTransaction()+0x248>
     a66:	fbb4 f4f2 	udiv	r4, r4, r2
     a6a:	428c      	cmp	r4, r1
     a6c:	bf88      	it	hi
     a6e:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
     a70:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
     a74:	d333      	bcc.n	ade <SPIDev::beginTransaction()+0x2ae>
     a76:	4a0c      	ldr	r2, [pc, #48]	; (aa8 <SPIDev::beginTransaction()+0x278>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     a78:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     a7a:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     a7c:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     a7e:	2403      	movs	r4, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
     a80:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     a82:	611e      	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     a84:	625c      	str	r4, [r3, #36]	; 0x24
		port().CCR = _ccr;
     a86:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     a88:	661d      	str	r5, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     a8a:	6119      	str	r1, [r3, #16]
     a8c:	e707      	b.n	89e <SPIDev::beginTransaction()+0x6e>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     a8e:	460a      	mov	r2, r1
     a90:	e792      	b.n	9b8 <SPIDev::beginTransaction()+0x188>
     a92:	4622      	mov	r2, r4
     a94:	e7e6      	b.n	a64 <SPIDev::beginTransaction()+0x234>
     a96:	68e2      	ldr	r2, [r4, #12]
     a98:	e7ef      	b.n	a7a <SPIDev::beginTransaction()+0x24a>
     a9a:	bf00      	nop
     a9c:	20000ed8 	.word	0x20000ed8
     aa0:	400fc000 	.word	0x400fc000
     aa4:	200000f4 	.word	0x200000f4
     aa8:	007f7fff 	.word	0x007f7fff
     aac:	e000e184 	.word	0xe000e184
     ab0:	e000e188 	.word	0xe000e188
     ab4:	e000e18c 	.word	0xe000e18c
     ab8:	e000e190 	.word	0xe000e190
     abc:	20000e88 	.word	0x20000e88
     ac0:	20000e38 	.word	0x20000e38
     ac4:	e000e180 	.word	0xe000e180

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     ac8:	2a02      	cmp	r2, #2
     aca:	d915      	bls.n	af8 <SPIDev::beginTransaction()+0x2c8>
     acc:	3a02      	subs	r2, #2
     ace:	0855      	lsrs	r5, r2, #1
     ad0:	0429      	lsls	r1, r5, #16
     ad2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
     ad6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
     ada:	430a      	orrs	r2, r1
     adc:	e6d5      	b.n	88a <SPIDev::beginTransaction()+0x5a>
     ade:	2a02      	cmp	r2, #2
     ae0:	bf98      	it	ls
     ae2:	2200      	movls	r2, #0
     ae4:	d9c8      	bls.n	a78 <SPIDev::beginTransaction()+0x248>
     ae6:	3a02      	subs	r2, #2
     ae8:	0854      	lsrs	r4, r2, #1
     aea:	0421      	lsls	r1, r4, #16
     aec:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
     af0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
     af4:	430a      	orrs	r2, r1
     af6:	e7bf      	b.n	a78 <SPIDev::beginTransaction()+0x248>
     af8:	2200      	movs	r2, #0
     afa:	e6c6      	b.n	88a <SPIDev::beginTransaction()+0x5a>

00000afc <SPIDev::endTransaction()>:
}

void SPIDev::endTransaction(){
     afc:	b538      	push	{r3, r4, r5, lr}
     afe:	4604      	mov	r4, r0
    digitalWrite(CSPin,HIGH);
     b00:	2101      	movs	r1, #1
     b02:	7840      	ldrb	r0, [r0, #1]
     b04:	f003 ffe2 	bl	4acc <digitalWrite>

    if(UseSpiNumber == 1){
     b08:	7823      	ldrb	r3, [r4, #0]
     b0a:	2b01      	cmp	r3, #1
     b0c:	d024      	beq.n	b58 <SPIDev::endTransaction()+0x5c>

        SPI.endTransaction();
      
    }
    else if(UseSpiNumber == 2){
     b0e:	2b02      	cmp	r3, #2
     b10:	d02a      	beq.n	b68 <SPIDev::endTransaction()+0x6c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     b12:	4a19      	ldr	r2, [pc, #100]	; (b78 <SPIDev::endTransaction()+0x7c>)
     b14:	7cd3      	ldrb	r3, [r2, #19]
     b16:	4619      	mov	r1, r3
     b18:	b1db      	cbz	r3, b52 <SPIDev::endTransaction()+0x56>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     b1a:	07d8      	lsls	r0, r3, #31
     b1c:	d502      	bpl.n	b24 <SPIDev::endTransaction()+0x28>
     b1e:	6a95      	ldr	r5, [r2, #40]	; 0x28
     b20:	4816      	ldr	r0, [pc, #88]	; (b7c <SPIDev::endTransaction()+0x80>)
     b22:	6005      	str	r5, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     b24:	079b      	lsls	r3, r3, #30
     b26:	d503      	bpl.n	b30 <SPIDev::endTransaction()+0x34>
     b28:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
     b2a:	4b15      	ldr	r3, [pc, #84]	; (b80 <SPIDev::endTransaction()+0x84>)
     b2c:	7cd1      	ldrb	r1, [r2, #19]
     b2e:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     b30:	074d      	lsls	r5, r1, #29
     b32:	d503      	bpl.n	b3c <SPIDev::endTransaction()+0x40>
     b34:	6b10      	ldr	r0, [r2, #48]	; 0x30
     b36:	4b13      	ldr	r3, [pc, #76]	; (b84 <SPIDev::endTransaction()+0x88>)
     b38:	7cd1      	ldrb	r1, [r2, #19]
     b3a:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     b3c:	0708      	lsls	r0, r1, #28
     b3e:	d503      	bpl.n	b48 <SPIDev::endTransaction()+0x4c>
     b40:	6b50      	ldr	r0, [r2, #52]	; 0x34
     b42:	4b11      	ldr	r3, [pc, #68]	; (b88 <SPIDev::endTransaction()+0x8c>)
     b44:	7cd1      	ldrb	r1, [r2, #19]
     b46:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     b48:	06cb      	lsls	r3, r1, #27
     b4a:	d502      	bpl.n	b52 <SPIDev::endTransaction()+0x56>
     b4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
     b4e:	4b0f      	ldr	r3, [pc, #60]	; (b8c <SPIDev::endTransaction()+0x90>)
     b50:	601a      	str	r2, [r3, #0]

           SPI2.endTransaction();

    }

    DummyRead = false;
     b52:	2300      	movs	r3, #0
     b54:	70a3      	strb	r3, [r4, #2]
     b56:	bd38      	pop	{r3, r4, r5, pc}
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     b58:	4a0d      	ldr	r2, [pc, #52]	; (b90 <SPIDev::endTransaction()+0x94>)
     b5a:	7cd3      	ldrb	r3, [r2, #19]
     b5c:	4619      	mov	r1, r3
     b5e:	2b00      	cmp	r3, #0
     b60:	d0f7      	beq.n	b52 <SPIDev::endTransaction()+0x56>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     b62:	07d8      	lsls	r0, r3, #31
     b64:	d5de      	bpl.n	b24 <SPIDev::endTransaction()+0x28>
     b66:	e7da      	b.n	b1e <SPIDev::endTransaction()+0x22>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     b68:	4a0a      	ldr	r2, [pc, #40]	; (b94 <SPIDev::endTransaction()+0x98>)
     b6a:	7cd3      	ldrb	r3, [r2, #19]
     b6c:	4619      	mov	r1, r3
     b6e:	2b00      	cmp	r3, #0
     b70:	d0ef      	beq.n	b52 <SPIDev::endTransaction()+0x56>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     b72:	07d8      	lsls	r0, r3, #31
     b74:	d5d6      	bpl.n	b24 <SPIDev::endTransaction()+0x28>
     b76:	e7d2      	b.n	b1e <SPIDev::endTransaction()+0x22>
     b78:	20000ed8 	.word	0x20000ed8
     b7c:	e000e100 	.word	0xe000e100
     b80:	e000e104 	.word	0xe000e104
     b84:	e000e108 	.word	0xe000e108
     b88:	e000e10c 	.word	0xe000e10c
     b8c:	e000e110 	.word	0xe000e110
     b90:	20000e38 	.word	0x20000e38
     b94:	20000e88 	.word	0x20000e88

00000b98 <SPIDev::getRegister(unsigned char)>:

}
uint8_t SPIDev::getRegister(uint8_t RegisterToRead){
 
    if(!DummyRead){
     b98:	7883      	ldrb	r3, [r0, #2]
     b9a:	b9cb      	cbnz	r3, bd0 <SPIDev::getRegister(unsigned char)+0x38>

        DummyRead = true;
     b9c:	2201      	movs	r2, #1

        if(UseSpiNumber == 1){
     b9e:	7803      	ldrb	r3, [r0, #0]
     ba0:	4293      	cmp	r3, r2
}
uint8_t SPIDev::getRegister(uint8_t RegisterToRead){
 
    if(!DummyRead){

        DummyRead = true;
     ba2:	7082      	strb	r2, [r0, #2]

        if(UseSpiNumber == 1){
     ba4:	d02f      	beq.n	c06 <SPIDev::getRegister(unsigned char)+0x6e>
            SPI.transfer(RegisterToRead | READ_TOKEN);
                
           return SPI.transfer(0x00);
        
        }
        else if(UseSpiNumber == 2){
     ba6:	2b02      	cmp	r3, #2
     ba8:	d040      	beq.n	c2c <SPIDev::getRegister(unsigned char)+0x94>
     baa:	4b2f      	ldr	r3, [pc, #188]	; (c68 <SPIDev::getRegister(unsigned char)+0xd0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     bac:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     bb0:	681b      	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     bb2:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     bb6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     bba:	d0fb      	beq.n	bb4 <SPIDev::getRegister(unsigned char)+0x1c>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     bbc:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     bbe:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     bc0:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     bc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     bc4:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     bc8:	d0fb      	beq.n	bc2 <SPIDev::getRegister(unsigned char)+0x2a>
     bca:	6f58      	ldr	r0, [r3, #116]	; 0x74
     bcc:	b2c0      	uxtb	r0, r0
        }
        else {
                
            SPI2.transfer(RegisterToRead | READ_TOKEN);
            
            return SPI2.transfer(0x00);
     bce:	4770      	bx	lr

        }
    }
    else{
        if(UseSpiNumber == 1){
     bd0:	7803      	ldrb	r3, [r0, #0]
     bd2:	2b01      	cmp	r3, #1
     bd4:	d00c      	beq.n	bf0 <SPIDev::getRegister(unsigned char)+0x58>

            return SPI.transfer(0x00);

        }
        else if(UseSpiNumber == 2){
     bd6:	2b02      	cmp	r3, #2
     bd8:	d03b      	beq.n	c52 <SPIDev::getRegister(unsigned char)+0xba>
     bda:	4a23      	ldr	r2, [pc, #140]	; (c68 <SPIDev::getRegister(unsigned char)+0xd0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     bdc:	2300      	movs	r3, #0
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     bde:	6812      	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     be0:	6653      	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     be2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     be4:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
     be8:	d0fb      	beq.n	be2 <SPIDev::getRegister(unsigned char)+0x4a>
     bea:	6f50      	ldr	r0, [r2, #116]	; 0x74
     bec:	b2c0      	uxtb	r0, r0

        }

    }

}
     bee:	4770      	bx	lr
     bf0:	4a1e      	ldr	r2, [pc, #120]	; (c6c <SPIDev::getRegister(unsigned char)+0xd4>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     bf2:	2300      	movs	r3, #0
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     bf4:	6812      	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     bf6:	6653      	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     bf8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     bfa:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
     bfe:	d0fb      	beq.n	bf8 <SPIDev::getRegister(unsigned char)+0x60>
     c00:	6f50      	ldr	r0, [r2, #116]	; 0x74
     c02:	b2c0      	uxtb	r0, r0
     c04:	4770      	bx	lr
     c06:	4b19      	ldr	r3, [pc, #100]	; (c6c <SPIDev::getRegister(unsigned char)+0xd4>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c08:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     c0c:	681b      	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c0e:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     c10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     c12:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     c16:	d0fb      	beq.n	c10 <SPIDev::getRegister(unsigned char)+0x78>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c18:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     c1a:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c1c:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     c1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     c20:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     c24:	d0fb      	beq.n	c1e <SPIDev::getRegister(unsigned char)+0x86>
     c26:	6f58      	ldr	r0, [r3, #116]	; 0x74
     c28:	b2c0      	uxtb	r0, r0
        }
        else {
                
            SPI2.transfer(RegisterToRead | READ_TOKEN);
            
            return SPI2.transfer(0x00);
     c2a:	4770      	bx	lr
     c2c:	4b10      	ldr	r3, [pc, #64]	; (c70 <SPIDev::getRegister(unsigned char)+0xd8>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c2e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     c32:	681b      	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c34:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     c36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     c38:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     c3c:	d0fb      	beq.n	c36 <SPIDev::getRegister(unsigned char)+0x9e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c3e:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     c40:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c42:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     c44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     c46:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     c4a:	d0fb      	beq.n	c44 <SPIDev::getRegister(unsigned char)+0xac>
     c4c:	6f58      	ldr	r0, [r3, #116]	; 0x74
     c4e:	b2c0      	uxtb	r0, r0
     c50:	4770      	bx	lr
     c52:	4a07      	ldr	r2, [pc, #28]	; (c70 <SPIDev::getRegister(unsigned char)+0xd8>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c54:	2300      	movs	r3, #0
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     c56:	6812      	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c58:	6653      	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     c5a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     c5c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
     c60:	d0fb      	beq.n	c5a <SPIDev::getRegister(unsigned char)+0xc2>
     c62:	6f50      	ldr	r0, [r2, #116]	; 0x74
     c64:	b2c0      	uxtb	r0, r0

        }

    }

}
     c66:	4770      	bx	lr
     c68:	20000ed8 	.word	0x20000ed8
     c6c:	20000e38 	.word	0x20000e38
     c70:	20000e88 	.word	0x20000e88

00000c74 <SPIDev::setRegister(unsigned char, unsigned char)>:
void SPIDev::setRegister(uint8_t Register,uint8_t Message){
    if(UseSpiNumber == 1){
     c74:	7803      	ldrb	r3, [r0, #0]
     c76:	2b01      	cmp	r3, #1
     c78:	d010      	beq.n	c9c <SPIDev::setRegister(unsigned char, unsigned char)+0x28>

        SPI.transfer(Register);
        SPI.transfer(Message);
        
    }
    else if(UseSpiNumber == 2){
     c7a:	2b02      	cmp	r3, #2
     c7c:	d01d      	beq.n	cba <SPIDev::setRegister(unsigned char, unsigned char)+0x46>
     c7e:	4b16      	ldr	r3, [pc, #88]	; (cd8 <SPIDev::setRegister(unsigned char, unsigned char)+0x64>)
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     c80:	681b      	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c82:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     c84:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     c86:	f411 1ff8 	tst.w	r1, #2031616	; 0x1f0000
     c8a:	d0fb      	beq.n	c84 <SPIDev::setRegister(unsigned char, unsigned char)+0x10>
     c8c:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c8e:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     c92:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     c96:	d0fb      	beq.n	c90 <SPIDev::setRegister(unsigned char, unsigned char)+0x1c>
     c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
     c9a:	4770      	bx	lr
     c9c:	4b0f      	ldr	r3, [pc, #60]	; (cdc <SPIDev::setRegister(unsigned char, unsigned char)+0x68>)
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     c9e:	681b      	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     ca0:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     ca2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     ca4:	f411 1ff8 	tst.w	r1, #2031616	; 0x1f0000
     ca8:	d0fb      	beq.n	ca2 <SPIDev::setRegister(unsigned char, unsigned char)+0x2e>
     caa:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     cac:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     cb0:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     cb4:	d0fb      	beq.n	cae <SPIDev::setRegister(unsigned char, unsigned char)+0x3a>
     cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
     cb8:	4770      	bx	lr
     cba:	4b09      	ldr	r3, [pc, #36]	; (ce0 <SPIDev::setRegister(unsigned char, unsigned char)+0x6c>)
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     cbc:	681b      	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     cbe:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     cc0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     cc2:	f411 1ff8 	tst.w	r1, #2031616	; 0x1f0000
     cc6:	d0fb      	beq.n	cc0 <SPIDev::setRegister(unsigned char, unsigned char)+0x4c>
     cc8:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     cca:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     ccc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     cce:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     cd2:	d0fb      	beq.n	ccc <SPIDev::setRegister(unsigned char, unsigned char)+0x58>
     cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
     cd6:	4770      	bx	lr
     cd8:	20000ed8 	.word	0x20000ed8
     cdc:	20000e38 	.word	0x20000e38
     ce0:	20000e88 	.word	0x20000e88

00000ce4 <GeneralSPI::beginAllSPI(int)>:
    }
}

int GeneralSPI::NumberOfDefinedSPI = 0;

void GeneralSPI::beginAllSPI(int NumberOfUsedSPI){
     ce4:	b538      	push	{r3, r4, r5, lr}

    NumberOfDefinedSPI = NumberOfUsedSPI;

    for(int i = 1;i < NumberOfUsedSPI;i ++){
     ce6:	2801      	cmp	r0, #1

int GeneralSPI::NumberOfDefinedSPI = 0;

void GeneralSPI::beginAllSPI(int NumberOfUsedSPI){

    NumberOfDefinedSPI = NumberOfUsedSPI;
     ce8:	4b23      	ldr	r3, [pc, #140]	; (d78 <GeneralSPI::beginAllSPI(int)+0x94>)
     cea:	6018      	str	r0, [r3, #0]

    for(int i = 1;i < NumberOfUsedSPI;i ++){
     cec:	dd43      	ble.n	d76 <GeneralSPI::beginAllSPI(int)+0x92>
     cee:	4605      	mov	r5, r0
     cf0:	2401      	movs	r4, #1

        switch (i){
     cf2:	2c02      	cmp	r4, #2
        case 1:
          
            SPI.begin();
     cf4:	4821      	ldr	r0, [pc, #132]	; (d7c <GeneralSPI::beginAllSPI(int)+0x98>)

    NumberOfDefinedSPI = NumberOfUsedSPI;

    for(int i = 1;i < NumberOfUsedSPI;i ++){

        switch (i){
     cf6:	d013      	beq.n	d20 <GeneralSPI::beginAllSPI(int)+0x3c>
     cf8:	2c03      	cmp	r4, #3
     cfa:	d022      	beq.n	d42 <GeneralSPI::beginAllSPI(int)+0x5e>
     cfc:	2c01      	cmp	r4, #1
     cfe:	d132      	bne.n	d66 <GeneralSPI::beginAllSPI(int)+0x82>
        case 1:
          
            SPI.begin();
     d00:	f003 fca0 	bl	4644 <SPIClass::begin()>

            SPI.setMISO(MISOPIN_SPI0);
     d04:	210c      	movs	r1, #12
     d06:	481d      	ldr	r0, [pc, #116]	; (d7c <GeneralSPI::beginAllSPI(int)+0x98>)
     d08:	f003 fdea 	bl	48e0 <SPIClass::setMISO(unsigned char)>
            SPI.setMOSI(MOSIPIN_SPI0);
     d0c:	210b      	movs	r1, #11
     d0e:	481b      	ldr	r0, [pc, #108]	; (d7c <GeneralSPI::beginAllSPI(int)+0x98>)
     d10:	f003 fdb0 	bl	4874 <SPIClass::setMOSI(unsigned char)>
            SPI.setSCK(SCKPIN_SPI0);
     d14:	210d      	movs	r1, #13
     d16:	4819      	ldr	r0, [pc, #100]	; (d7c <GeneralSPI::beginAllSPI(int)+0x98>)
     d18:	f003 fe12 	bl	4940 <SPIClass::setSCK(unsigned char)>

void GeneralSPI::beginAllSPI(int NumberOfUsedSPI){

    NumberOfDefinedSPI = NumberOfUsedSPI;

    for(int i = 1;i < NumberOfUsedSPI;i ++){
     d1c:	2d02      	cmp	r5, #2
     d1e:	d02a      	beq.n	d76 <GeneralSPI::beginAllSPI(int)+0x92>
            SPI.setSCK(SCKPIN_SPI0);

            break;
        case 2:
          
            SPI1.begin();
     d20:	4817      	ldr	r0, [pc, #92]	; (d80 <GeneralSPI::beginAllSPI(int)+0x9c>)
     d22:	f003 fc8f 	bl	4644 <SPIClass::begin()>

            SPI1.setMISO(MISOPIN_SPI1);
     d26:	2101      	movs	r1, #1
     d28:	4815      	ldr	r0, [pc, #84]	; (d80 <GeneralSPI::beginAllSPI(int)+0x9c>)
     d2a:	f003 fdd9 	bl	48e0 <SPIClass::setMISO(unsigned char)>
            SPI1.setMOSI(MOSIPIN_SPI1);
     d2e:	211a      	movs	r1, #26
     d30:	4813      	ldr	r0, [pc, #76]	; (d80 <GeneralSPI::beginAllSPI(int)+0x9c>)
     d32:	f003 fd9f 	bl	4874 <SPIClass::setMOSI(unsigned char)>
            SPI1.setSCK(SCKPIN_SPI1);
     d36:	211b      	movs	r1, #27
     d38:	4811      	ldr	r0, [pc, #68]	; (d80 <GeneralSPI::beginAllSPI(int)+0x9c>)
     d3a:	f003 fe01 	bl	4940 <SPIClass::setSCK(unsigned char)>

void GeneralSPI::beginAllSPI(int NumberOfUsedSPI){

    NumberOfDefinedSPI = NumberOfUsedSPI;

    for(int i = 1;i < NumberOfUsedSPI;i ++){
     d3e:	2d03      	cmp	r5, #3
     d40:	dd19      	ble.n	d76 <GeneralSPI::beginAllSPI(int)+0x92>
            SPI1.setSCK(SCKPIN_SPI1);

            break;
        case 3:
          
            SPI2.begin();
     d42:	4810      	ldr	r0, [pc, #64]	; (d84 <GeneralSPI::beginAllSPI(int)+0xa0>)

void GeneralSPI::beginAllSPI(int NumberOfUsedSPI){

    NumberOfDefinedSPI = NumberOfUsedSPI;

    for(int i = 1;i < NumberOfUsedSPI;i ++){
     d44:	2404      	movs	r4, #4
            SPI1.setSCK(SCKPIN_SPI1);

            break;
        case 3:
          
            SPI2.begin();
     d46:	f003 fc7d 	bl	4644 <SPIClass::begin()>

            SPI2.setMISO(MISOPIN_SPI2);
     d4a:	210e      	movs	r1, #14
     d4c:	480d      	ldr	r0, [pc, #52]	; (d84 <GeneralSPI::beginAllSPI(int)+0xa0>)
     d4e:	f003 fdc7 	bl	48e0 <SPIClass::setMISO(unsigned char)>
            SPI2.setMOSI(MOSIPIN_SPI2);
     d52:	2102      	movs	r1, #2
     d54:	480b      	ldr	r0, [pc, #44]	; (d84 <GeneralSPI::beginAllSPI(int)+0xa0>)
     d56:	f003 fd8d 	bl	4874 <SPIClass::setMOSI(unsigned char)>
            SPI2.setSCK(SCKPIN_SPI2);
     d5a:	2103      	movs	r1, #3
     d5c:	4809      	ldr	r0, [pc, #36]	; (d84 <GeneralSPI::beginAllSPI(int)+0xa0>)
     d5e:	f003 fdef 	bl	4940 <SPIClass::setSCK(unsigned char)>

void GeneralSPI::beginAllSPI(int NumberOfUsedSPI){

    NumberOfDefinedSPI = NumberOfUsedSPI;

    for(int i = 1;i < NumberOfUsedSPI;i ++){
     d62:	42a5      	cmp	r5, r4
     d64:	dd07      	ble.n	d76 <GeneralSPI::beginAllSPI(int)+0x92>
            SPI2.setSCK(SCKPIN_SPI2);

            break;
        default:

            ExceptionHandler.Error(0x07,INITERROR);
     d66:	4b08      	ldr	r3, [pc, #32]	; (d88 <GeneralSPI::beginAllSPI(int)+0xa4>)

void GeneralSPI::beginAllSPI(int NumberOfUsedSPI){

    NumberOfDefinedSPI = NumberOfUsedSPI;

    for(int i = 1;i < NumberOfUsedSPI;i ++){
     d68:	3401      	adds	r4, #1
            SPI2.setSCK(SCKPIN_SPI2);

            break;
        default:

            ExceptionHandler.Error(0x07,INITERROR);
     d6a:	2007      	movs	r0, #7
     d6c:	7819      	ldrb	r1, [r3, #0]
     d6e:	f7ff fb23 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>

void GeneralSPI::beginAllSPI(int NumberOfUsedSPI){

    NumberOfDefinedSPI = NumberOfUsedSPI;

    for(int i = 1;i < NumberOfUsedSPI;i ++){
     d72:	42a5      	cmp	r5, r4
     d74:	dcbd      	bgt.n	cf2 <GeneralSPI::beginAllSPI(int)+0xe>
     d76:	bd38      	pop	{r3, r4, r5, pc}
     d78:	20001dbc 	.word	0x20001dbc
     d7c:	20000e38 	.word	0x20000e38
     d80:	20000e88 	.word	0x20000e88
     d84:	20000ed8 	.word	0x20000ed8
     d88:	20000104 	.word	0x20000104

00000d8c <GPSHandler::begin()>:

}

void GPSHandler::begin(){

    Serial5.begin(115200);
     d8c:	2200      	movs	r2, #0
     d8e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     d92:	4801      	ldr	r0, [pc, #4]	; (d98 <GPSHandler::begin()+0xc>)
     d94:	f005 b8f8 	b.w	5f88 <HardwareSerial::begin(unsigned long, unsigned short)>
     d98:	20001080 	.word	0x20001080

00000d9c <serialEvent5()>:



void serialEvent5(){

    char ReadedChar = Serial5.read();
     d9c:	4801      	ldr	r0, [pc, #4]	; (da4 <serialEvent5()+0x8>)
     d9e:	f005 b83f 	b.w	5e20 <HardwareSerial::read()>
     da2:	bf00      	nop
     da4:	20001080 	.word	0x20001080

00000da8 <Debugger::DisplayMenu()>:
    
    }

}

void Debugger::DisplayMenu(){
     da8:	b530      	push	{r4, r5, lr}
     daa:	2107      	movs	r1, #7
     dac:	b085      	sub	sp, #20
     dae:	48bc      	ldr	r0, [pc, #752]	; (10a0 <Debugger::DisplayMenu()+0x2f8>)
     db0:	f004 ff1c 	bl	5bec <usb_serial_write>
    Serial.print("\n=====\n");
    
    switch(MenuID){
     db4:	4abb      	ldr	r2, [pc, #748]	; (10a4 <Debugger::DisplayMenu()+0x2fc>)
     db6:	6813      	ldr	r3, [r2, #0]
     db8:	2b35      	cmp	r3, #53	; 0x35
     dba:	f000 8131 	beq.w	1020 <Debugger::DisplayMenu()+0x278>
     dbe:	dd1c      	ble.n	dfa <Debugger::DisplayMenu()+0x52>
     dc0:	f240 4161 	movw	r1, #1121	; 0x461
     dc4:	428b      	cmp	r3, r1
     dc6:	f000 813d 	beq.w	1044 <Debugger::DisplayMenu()+0x29c>
     dca:	dc3e      	bgt.n	e4a <Debugger::DisplayMenu()+0xa2>
     dcc:	2b70      	cmp	r3, #112	; 0x70
     dce:	d066      	beq.n	e9e <Debugger::DisplayMenu()+0xf6>
     dd0:	dd78      	ble.n	ec4 <Debugger::DisplayMenu()+0x11c>
     dd2:	2b71      	cmp	r3, #113	; 0x71
     dd4:	f000 8103 	beq.w	fde <Debugger::DisplayMenu()+0x236>
     dd8:	2b83      	cmp	r3, #131	; 0x83
     dda:	d04b      	beq.n	e74 <Debugger::DisplayMenu()+0xcc>
            
            SCB_AIRCR = 0x05FA0004;
        
        break;
        default:
            MenuID = 0;
     ddc:	2300      	movs	r3, #0
            Display("=1 Peripheral Management\n=2 display variables\n=3 interrupt system\n=4 Display Frequency\n=5 System Control\n");
     dde:	49b2      	ldr	r1, [pc, #712]	; (10a8 <Debugger::DisplayMenu()+0x300>)
     de0:	4668      	mov	r0, sp
     de2:	466c      	mov	r4, sp
            
            SCB_AIRCR = 0x05FA0004;
        
        break;
        default:
            MenuID = 0;
     de4:	6013      	str	r3, [r2, #0]
            Display("=1 Peripheral Management\n=2 display variables\n=3 interrupt system\n=4 Display Frequency\n=5 System Control\n");
     de6:	f005 fd89 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     dea:	4bb0      	ldr	r3, [pc, #704]	; (10ac <Debugger::DisplayMenu()+0x304>)
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	b1cb      	cbz	r3, e24 <Debugger::DisplayMenu()+0x7c>

        Serial.print(DisplayedText);
     df0:	4621      	mov	r1, r4
     df2:	48af      	ldr	r0, [pc, #700]	; (10b0 <Debugger::DisplayMenu()+0x308>)
     df4:	f005 fbf0 	bl	65d8 <Print::print(String const&)>
     df8:	e014      	b.n	e24 <Debugger::DisplayMenu()+0x7c>
}

void Debugger::DisplayMenu(){
    Serial.print("\n=====\n");
    
    switch(MenuID){
     dfa:	2b0d      	cmp	r3, #13
     dfc:	f000 80f5 	beq.w	fea <Debugger::DisplayMenu()+0x242>
     e00:	dc15      	bgt.n	e2e <Debugger::DisplayMenu()+0x86>
     e02:	2b02      	cmp	r3, #2
     e04:	d041      	beq.n	e8a <Debugger::DisplayMenu()+0xe2>
     e06:	dd4d      	ble.n	ea4 <Debugger::DisplayMenu()+0xfc>
     e08:	2b05      	cmp	r3, #5
     e0a:	f000 8122 	beq.w	1052 <Debugger::DisplayMenu()+0x2aa>
     e0e:	2b0b      	cmp	r3, #11
     e10:	d1e4      	bne.n	ddc <Debugger::DisplayMenu()+0x34>
            Display("=1 MPU9250\n=2 BN880Q\n=3 XM+ \n=4 PITOT Probe\n=5 Telemetry Emitter");
        
        break;
        case 11:
            
            Display("1= Calibration values\n2= Calibrate\n3= Save values\n");
     e12:	466c      	mov	r4, sp
     e14:	49a7      	ldr	r1, [pc, #668]	; (10b4 <Debugger::DisplayMenu()+0x30c>)
            GoBack();

        break;

        case 5:
            Display("=1 Start Gathering\n=2 Stop Gathering\n=3 Reset Board");
     e16:	4620      	mov	r0, r4
     e18:	f005 fd70 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     e1c:	4ba3      	ldr	r3, [pc, #652]	; (10ac <Debugger::DisplayMenu()+0x304>)
     e1e:	781b      	ldrb	r3, [r3, #0]
     e20:	2b00      	cmp	r3, #0
     e22:	d1e5      	bne.n	df0 <Debugger::DisplayMenu()+0x48>
            SCB_AIRCR = 0x05FA0004;
        
        break;
        default:
            MenuID = 0;
            Display("=1 Peripheral Management\n=2 display variables\n=3 interrupt system\n=4 Display Frequency\n=5 System Control\n");
     e24:	4620      	mov	r0, r4
     e26:	f005 fd29 	bl	687c <String::~String()>
        break;
    
    
    }

}
     e2a:	b005      	add	sp, #20
     e2c:	bd30      	pop	{r4, r5, pc}
}

void Debugger::DisplayMenu(){
    Serial.print("\n=====\n");
    
    switch(MenuID){
     e2e:	2b16      	cmp	r3, #22
     e30:	d022      	beq.n	e78 <Debugger::DisplayMenu()+0xd0>
     e32:	dd3c      	ble.n	eae <Debugger::DisplayMenu()+0x106>
     e34:	2b33      	cmp	r3, #51	; 0x33
     e36:	f000 80cc 	beq.w	fd2 <Debugger::DisplayMenu()+0x22a>
     e3a:	2b34      	cmp	r3, #52	; 0x34
     e3c:	d1ce      	bne.n	ddc <Debugger::DisplayMenu()+0x34>
        case 51:
            SystemHandler.StartGathering();
            GoBack();
        break;
        case 52:
            SystemHandler.StopGathering();
     e3e:	f7ff faa1 	bl	384 <SystemHandling::StopGathering()>
            GoBack();
     e42:	2000      	movs	r0, #0
     e44:	f000 f9ae 	bl	11a4 <Debugger::GoBack(bool)>

        break;
     e48:	e014      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
}

void Debugger::DisplayMenu(){
    Serial.print("\n=====\n");
    
    switch(MenuID){
     e4a:	f240 4163 	movw	r1, #1123	; 0x463
     e4e:	428b      	cmp	r3, r1
     e50:	d01e      	beq.n	e90 <Debugger::DisplayMenu()+0xe8>
     e52:	f2c0 80f0 	blt.w	1036 <Debugger::DisplayMenu()+0x28e>
     e56:	f240 4164 	movw	r1, #1124	; 0x464
     e5a:	428b      	cmp	r3, r1
     e5c:	f000 80e4 	beq.w	1028 <Debugger::DisplayMenu()+0x280>
     e60:	f240 4165 	movw	r1, #1125	; 0x465
     e64:	428b      	cmp	r3, r1
     e66:	d1b9      	bne.n	ddc <Debugger::DisplayMenu()+0x34>
            GoBack(true);
        
        break;
        case 1125:
            
            SystemHandler.CalibrateSensor(4);
     e68:	2004      	movs	r0, #4
     e6a:	f7ff fa0f 	bl	28c <SystemHandling::CalibrateSensor(int)>
            
            GoBack(true);
     e6e:	2001      	movs	r0, #1
     e70:	f000 f998 	bl	11a4 <Debugger::GoBack(bool)>
        break;
    
    
    }

}
     e74:	b005      	add	sp, #20
     e76:	bd30      	pop	{r4, r5, pc}
            GoBack();

        break;
        case 22:

            DisplayerToken[1] = !DisplayerToken[1];
     e78:	4a8f      	ldr	r2, [pc, #572]	; (10b8 <Debugger::DisplayMenu()+0x310>)
            GoBack();
     e7a:	2000      	movs	r0, #0
            GoBack();

        break;
        case 22:

            DisplayerToken[1] = !DisplayerToken[1];
     e7c:	7853      	ldrb	r3, [r2, #1]
     e7e:	f083 0301 	eor.w	r3, r3, #1
     e82:	7053      	strb	r3, [r2, #1]
            GoBack();
     e84:	f000 f98e 	bl	11a4 <Debugger::GoBack(bool)>

        break;
     e88:	e7f4      	b.n	e74 <Debugger::DisplayMenu()+0xcc>

        break;
        
        case 2:

            Display("1= Display Raw MPU Data\n2= Display Raw Radio Channel Value");
     e8a:	466c      	mov	r4, sp
     e8c:	498b      	ldr	r1, [pc, #556]	; (10bc <Debugger::DisplayMenu()+0x314>)
     e8e:	e7c2      	b.n	e16 <Debugger::DisplayMenu()+0x6e>
            GoBack(true);

        break;
        case 1123:
            
            SystemHandler.CalibrateSensor(2);
     e90:	2002      	movs	r0, #2
     e92:	f7ff f9fb 	bl	28c <SystemHandling::CalibrateSensor(int)>
            
            GoBack(true);
     e96:	2001      	movs	r0, #1
     e98:	f000 f984 	bl	11a4 <Debugger::GoBack(bool)>
        
        break;
     e9c:	e7ea      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
            GoBack();
        
        break;
        case 112:

            Display("=1 Accelerometer\n=2 Temperature\n=3 Gyroscope\n=4 Compass\n=5 ALL");
     e9e:	466c      	mov	r4, sp
     ea0:	4987      	ldr	r1, [pc, #540]	; (10c0 <Debugger::DisplayMenu()+0x318>)
     ea2:	e7b8      	b.n	e16 <Debugger::DisplayMenu()+0x6e>
}

void Debugger::DisplayMenu(){
    Serial.print("\n=====\n");
    
    switch(MenuID){
     ea4:	2b01      	cmp	r3, #1
     ea6:	d199      	bne.n	ddc <Debugger::DisplayMenu()+0x34>
        case 1:
       
            Display("=1 MPU9250\n=2 BN880Q\n=3 XM+ \n=4 PITOT Probe\n=5 Telemetry Emitter");
     ea8:	466c      	mov	r4, sp
     eaa:	4986      	ldr	r1, [pc, #536]	; (10c4 <Debugger::DisplayMenu()+0x31c>)
     eac:	e7b3      	b.n	e16 <Debugger::DisplayMenu()+0x6e>
}

void Debugger::DisplayMenu(){
    Serial.print("\n=====\n");
    
    switch(MenuID){
     eae:	2b15      	cmp	r3, #21
     eb0:	d194      	bne.n	ddc <Debugger::DisplayMenu()+0x34>
            Display("1= Display Raw MPU Data\n2= Display Raw Radio Channel Value");
            
        break;
        case 21:

            DisplayerToken[0] = !DisplayerToken[0];
     eb2:	4a81      	ldr	r2, [pc, #516]	; (10b8 <Debugger::DisplayMenu()+0x310>)
            GoBack();
     eb4:	2000      	movs	r0, #0
            Display("1= Display Raw MPU Data\n2= Display Raw Radio Channel Value");
            
        break;
        case 21:

            DisplayerToken[0] = !DisplayerToken[0];
     eb6:	7813      	ldrb	r3, [r2, #0]
     eb8:	f083 0301 	eor.w	r3, r3, #1
     ebc:	7013      	strb	r3, [r2, #0]
            GoBack();
     ebe:	f000 f971 	bl	11a4 <Debugger::GoBack(bool)>

        break;
     ec2:	e7d7      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
}

void Debugger::DisplayMenu(){
    Serial.print("\n=====\n");
    
    switch(MenuID){
     ec4:	2b6f      	cmp	r3, #111	; 0x6f
     ec6:	d189      	bne.n	ddc <Debugger::DisplayMenu()+0x34>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     ec8:	4d78      	ldr	r5, [pc, #480]	; (10ac <Debugger::DisplayMenu()+0x304>)
            
            Display("1= Calibration values\n2= Calibrate\n3= Save values\n");

        break;
        case 111:
            Display("=Global : ");
     eca:	4668      	mov	r0, sp
     ecc:	497e      	ldr	r1, [pc, #504]	; (10c8 <Debugger::DisplayMenu()+0x320>)
     ece:	466c      	mov	r4, sp
     ed0:	f005 fd14 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     ed4:	782b      	ldrb	r3, [r5, #0]
     ed6:	2b00      	cmp	r3, #0
     ed8:	f040 8126 	bne.w	1128 <Debugger::DisplayMenu()+0x380>
            
            Display("1= Calibration values\n2= Calibrate\n3= Save values\n");

        break;
        case 111:
            Display("=Global : ");
     edc:	4620      	mov	r0, r4
     ede:	f005 fccd 	bl	687c <String::~String()>
            Display(MPU9250.GetCalibrationValue(ALL));
     ee2:	4b7a      	ldr	r3, [pc, #488]	; (10cc <Debugger::DisplayMenu()+0x324>)
     ee4:	6818      	ldr	r0, [r3, #0]
     ee6:	f000 fa5f 	bl	13a8 <IMU9250::GetCalibrationValue(SensorGatParam)>
     eea:	4601      	mov	r1, r0
     eec:	4620      	mov	r0, r4
     eee:	f005 fd27 	bl	6940 <String::String(unsigned char)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     ef2:	782b      	ldrb	r3, [r5, #0]
     ef4:	2b00      	cmp	r3, #0
     ef6:	f040 8112 	bne.w	111e <Debugger::DisplayMenu()+0x376>
            Display("1= Calibration values\n2= Calibrate\n3= Save values\n");

        break;
        case 111:
            Display("=Global : ");
            Display(MPU9250.GetCalibrationValue(ALL));
     efa:	4620      	mov	r0, r4
     efc:	f005 fcbe 	bl	687c <String::~String()>
            Display("\n=Gyroscope : ");
     f00:	4973      	ldr	r1, [pc, #460]	; (10d0 <Debugger::DisplayMenu()+0x328>)
     f02:	4620      	mov	r0, r4
     f04:	f005 fcfa 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     f08:	782b      	ldrb	r3, [r5, #0]
     f0a:	2b00      	cmp	r3, #0
     f0c:	f040 8102 	bne.w	1114 <Debugger::DisplayMenu()+0x36c>

        break;
        case 111:
            Display("=Global : ");
            Display(MPU9250.GetCalibrationValue(ALL));
            Display("\n=Gyroscope : ");
     f10:	4620      	mov	r0, r4
     f12:	f005 fcb3 	bl	687c <String::~String()>
            Display(MPU9250.GetCalibrationValue(GYRO));
     f16:	4b6f      	ldr	r3, [pc, #444]	; (10d4 <Debugger::DisplayMenu()+0x32c>)
     f18:	6818      	ldr	r0, [r3, #0]
     f1a:	f000 fa45 	bl	13a8 <IMU9250::GetCalibrationValue(SensorGatParam)>
     f1e:	4601      	mov	r1, r0
     f20:	4620      	mov	r0, r4
     f22:	f005 fd0d 	bl	6940 <String::String(unsigned char)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     f26:	782b      	ldrb	r3, [r5, #0]
     f28:	2b00      	cmp	r3, #0
     f2a:	f040 80ee 	bne.w	110a <Debugger::DisplayMenu()+0x362>
        break;
        case 111:
            Display("=Global : ");
            Display(MPU9250.GetCalibrationValue(ALL));
            Display("\n=Gyroscope : ");
            Display(MPU9250.GetCalibrationValue(GYRO));
     f2e:	4620      	mov	r0, r4
     f30:	f005 fca4 	bl	687c <String::~String()>
            Display("\n=Temperature : ");
     f34:	4968      	ldr	r1, [pc, #416]	; (10d8 <Debugger::DisplayMenu()+0x330>)
     f36:	4620      	mov	r0, r4
     f38:	f005 fce0 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     f3c:	782b      	ldrb	r3, [r5, #0]
     f3e:	2b00      	cmp	r3, #0
     f40:	f040 80de 	bne.w	1100 <Debugger::DisplayMenu()+0x358>
        case 111:
            Display("=Global : ");
            Display(MPU9250.GetCalibrationValue(ALL));
            Display("\n=Gyroscope : ");
            Display(MPU9250.GetCalibrationValue(GYRO));
            Display("\n=Temperature : ");
     f44:	4620      	mov	r0, r4
     f46:	f005 fc99 	bl	687c <String::~String()>
            Display(MPU9250.GetCalibrationValue(TEMP));
     f4a:	4b64      	ldr	r3, [pc, #400]	; (10dc <Debugger::DisplayMenu()+0x334>)
     f4c:	6818      	ldr	r0, [r3, #0]
     f4e:	f000 fa2b 	bl	13a8 <IMU9250::GetCalibrationValue(SensorGatParam)>
     f52:	4601      	mov	r1, r0
     f54:	4620      	mov	r0, r4
     f56:	f005 fcf3 	bl	6940 <String::String(unsigned char)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     f5a:	782b      	ldrb	r3, [r5, #0]
     f5c:	2b00      	cmp	r3, #0
     f5e:	f040 8099 	bne.w	1094 <Debugger::DisplayMenu()+0x2ec>
            Display("=Global : ");
            Display(MPU9250.GetCalibrationValue(ALL));
            Display("\n=Gyroscope : ");
            Display(MPU9250.GetCalibrationValue(GYRO));
            Display("\n=Temperature : ");
            Display(MPU9250.GetCalibrationValue(TEMP));
     f62:	4620      	mov	r0, r4
     f64:	f005 fc8a 	bl	687c <String::~String()>
            Display("\n=Accelerometer : ");
     f68:	495d      	ldr	r1, [pc, #372]	; (10e0 <Debugger::DisplayMenu()+0x338>)
     f6a:	4620      	mov	r0, r4
     f6c:	f005 fcc6 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     f70:	782b      	ldrb	r3, [r5, #0]
     f72:	2b00      	cmp	r3, #0
     f74:	f040 8089 	bne.w	108a <Debugger::DisplayMenu()+0x2e2>
            Display(MPU9250.GetCalibrationValue(ALL));
            Display("\n=Gyroscope : ");
            Display(MPU9250.GetCalibrationValue(GYRO));
            Display("\n=Temperature : ");
            Display(MPU9250.GetCalibrationValue(TEMP));
            Display("\n=Accelerometer : ");
     f78:	4620      	mov	r0, r4
     f7a:	f005 fc7f 	bl	687c <String::~String()>
            Display(MPU9250.GetCalibrationValue(ACCEL));
     f7e:	4b59      	ldr	r3, [pc, #356]	; (10e4 <Debugger::DisplayMenu()+0x33c>)
     f80:	6818      	ldr	r0, [r3, #0]
     f82:	f000 fa11 	bl	13a8 <IMU9250::GetCalibrationValue(SensorGatParam)>
     f86:	4601      	mov	r1, r0
     f88:	4620      	mov	r0, r4
     f8a:	f005 fcd9 	bl	6940 <String::String(unsigned char)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     f8e:	782b      	ldrb	r3, [r5, #0]
     f90:	2b00      	cmp	r3, #0
     f92:	d175      	bne.n	1080 <Debugger::DisplayMenu()+0x2d8>
            Display("\n=Gyroscope : ");
            Display(MPU9250.GetCalibrationValue(GYRO));
            Display("\n=Temperature : ");
            Display(MPU9250.GetCalibrationValue(TEMP));
            Display("\n=Accelerometer : ");
            Display(MPU9250.GetCalibrationValue(ACCEL));
     f94:	4620      	mov	r0, r4
     f96:	f005 fc71 	bl	687c <String::~String()>
            Display("\n=COMPASS : ");
     f9a:	4953      	ldr	r1, [pc, #332]	; (10e8 <Debugger::DisplayMenu()+0x340>)
     f9c:	4620      	mov	r0, r4
     f9e:	f005 fcad 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     fa2:	782b      	ldrb	r3, [r5, #0]
     fa4:	2b00      	cmp	r3, #0
     fa6:	d166      	bne.n	1076 <Debugger::DisplayMenu()+0x2ce>
            Display(MPU9250.GetCalibrationValue(GYRO));
            Display("\n=Temperature : ");
            Display(MPU9250.GetCalibrationValue(TEMP));
            Display("\n=Accelerometer : ");
            Display(MPU9250.GetCalibrationValue(ACCEL));
            Display("\n=COMPASS : ");
     fa8:	4620      	mov	r0, r4
     faa:	f005 fc67 	bl	687c <String::~String()>
            Display(MPU9250.GetCalibrationValue(COMPAS));
     fae:	4b4f      	ldr	r3, [pc, #316]	; (10ec <Debugger::DisplayMenu()+0x344>)
     fb0:	6818      	ldr	r0, [r3, #0]
     fb2:	f000 f9f9 	bl	13a8 <IMU9250::GetCalibrationValue(SensorGatParam)>
     fb6:	4601      	mov	r1, r0
     fb8:	4620      	mov	r0, r4
     fba:	f005 fcc1 	bl	6940 <String::String(unsigned char)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     fbe:	782b      	ldrb	r3, [r5, #0]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d14e      	bne.n	1062 <Debugger::DisplayMenu()+0x2ba>
            Display("\n=Temperature : ");
            Display(MPU9250.GetCalibrationValue(TEMP));
            Display("\n=Accelerometer : ");
            Display(MPU9250.GetCalibrationValue(ACCEL));
            Display("\n=COMPASS : ");
            Display(MPU9250.GetCalibrationValue(COMPAS));
     fc4:	4620      	mov	r0, r4
     fc6:	f005 fc59 	bl	687c <String::~String()>
            
            GoBack();
     fca:	2000      	movs	r0, #0
     fcc:	f000 f8ea 	bl	11a4 <Debugger::GoBack(bool)>
        
        break;
     fd0:	e750      	b.n	e74 <Debugger::DisplayMenu()+0xcc>

        case 5:
            Display("=1 Start Gathering\n=2 Stop Gathering\n=3 Reset Board");
        break;
        case 51:
            SystemHandler.StartGathering();
     fd2:	f7ff f9d3 	bl	37c <SystemHandling::StartGathering()>
            GoBack();
     fd6:	2000      	movs	r0, #0
     fd8:	f000 f8e4 	bl	11a4 <Debugger::GoBack(bool)>
        break;
     fdc:	e74a      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
            GoBack(true);
        
        break;
        case 113:
            
            SDCardReader.WriteCalibrationData();
     fde:	f7ff fac3 	bl	568 <SDCard::WriteCalibrationData()>
            GoBack();
     fe2:	2000      	movs	r0, #0
     fe4:	f000 f8de 	bl	11a4 <Debugger::GoBack(bool)>
        
        break;
     fe8:	e744      	b.n	e74 <Debugger::DisplayMenu()+0xcc>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     fea:	4d30      	ldr	r5, [pc, #192]	; (10ac <Debugger::DisplayMenu()+0x304>)
        
        break;

        case 13:
        
            Display("FailsafeToken : ");
     fec:	4668      	mov	r0, sp
     fee:	4940      	ldr	r1, [pc, #256]	; (10f0 <Debugger::DisplayMenu()+0x348>)
     ff0:	466c      	mov	r4, sp
     ff2:	f005 fc83 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
     ff6:	782b      	ldrb	r3, [r5, #0]
     ff8:	bbc3      	cbnz	r3, 106c <Debugger::DisplayMenu()+0x2c4>
        
        break;

        case 13:
        
            Display("FailsafeToken : ");
     ffa:	4620      	mov	r0, r4
     ffc:	f005 fc3e 	bl	687c <String::~String()>
            Display(SBUSDev.getFailsafeValue());
    1000:	f000 fe98 	bl	1d34 <SBUSHandler::getFailsafeValue()>
    1004:	220a      	movs	r2, #10
    1006:	4601      	mov	r1, r0
    1008:	4620      	mov	r0, r4
    100a:	f005 fcad 	bl	6968 <String::String(int, unsigned char)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
    100e:	782b      	ldrb	r3, [r5, #0]
    1010:	bb13      	cbnz	r3, 1058 <Debugger::DisplayMenu()+0x2b0>
        break;

        case 13:
        
            Display("FailsafeToken : ");
            Display(SBUSDev.getFailsafeValue());
    1012:	4620      	mov	r0, r4
    1014:	f005 fc32 	bl	687c <String::~String()>
            GoBack(true);
    1018:	2001      	movs	r0, #1
    101a:	f000 f8c3 	bl	11a4 <Debugger::GoBack(bool)>
        
        break;
    101e:	e729      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
            GoBack();

        break;
        case 53:
            
            SCB_AIRCR = 0x05FA0004;
    1020:	4b34      	ldr	r3, [pc, #208]	; (10f4 <Debugger::DisplayMenu()+0x34c>)
    1022:	4a35      	ldr	r2, [pc, #212]	; (10f8 <Debugger::DisplayMenu()+0x350>)
    1024:	601a      	str	r2, [r3, #0]
        
        break;
    1026:	e725      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
            GoBack(true);
        
        break;
        case 1124:
            
            SystemHandler.CalibrateSensor(3);
    1028:	2003      	movs	r0, #3
    102a:	f7ff f92f 	bl	28c <SystemHandling::CalibrateSensor(int)>
            
            GoBack(true);
    102e:	2001      	movs	r0, #1
    1030:	f000 f8b8 	bl	11a4 <Debugger::GoBack(bool)>
        
        break;
    1034:	e71e      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
            GoBack(true);

        break;
        case 1122:
            
            SystemHandler.CalibrateSensor(1);
    1036:	2001      	movs	r0, #1
    1038:	f7ff f928 	bl	28c <SystemHandling::CalibrateSensor(int)>
            
            GoBack(true);
    103c:	2001      	movs	r0, #1
    103e:	f000 f8b1 	bl	11a4 <Debugger::GoBack(bool)>

        break;
    1042:	e717      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
            Display("=1 Accelerometer\n=2 Temperature\n=3 Gyroscope\n=4 Compass\n=5 ALL");

        break;
        case 1121:
            
            SystemHandler.CalibrateSensor(0);
    1044:	2000      	movs	r0, #0
    1046:	f7ff f921 	bl	28c <SystemHandling::CalibrateSensor(int)>
           
            GoBack(true);
    104a:	2001      	movs	r0, #1
    104c:	f000 f8aa 	bl	11a4 <Debugger::GoBack(bool)>

        break;
    1050:	e710      	b.n	e74 <Debugger::DisplayMenu()+0xcc>
            GoBack();

        break;

        case 5:
            Display("=1 Start Gathering\n=2 Stop Gathering\n=3 Reset Board");
    1052:	466c      	mov	r4, sp
    1054:	4929      	ldr	r1, [pc, #164]	; (10fc <Debugger::DisplayMenu()+0x354>)
    1056:	e6de      	b.n	e16 <Debugger::DisplayMenu()+0x6e>

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){

        Serial.print(DisplayedText);
    1058:	4621      	mov	r1, r4
    105a:	4815      	ldr	r0, [pc, #84]	; (10b0 <Debugger::DisplayMenu()+0x308>)
    105c:	f005 fabc 	bl	65d8 <Print::print(String const&)>
    1060:	e7d7      	b.n	1012 <Debugger::DisplayMenu()+0x26a>
    1062:	4621      	mov	r1, r4
    1064:	4812      	ldr	r0, [pc, #72]	; (10b0 <Debugger::DisplayMenu()+0x308>)
    1066:	f005 fab7 	bl	65d8 <Print::print(String const&)>
    106a:	e7ab      	b.n	fc4 <Debugger::DisplayMenu()+0x21c>
    106c:	4669      	mov	r1, sp
    106e:	4810      	ldr	r0, [pc, #64]	; (10b0 <Debugger::DisplayMenu()+0x308>)
    1070:	f005 fab2 	bl	65d8 <Print::print(String const&)>
    1074:	e7c1      	b.n	ffa <Debugger::DisplayMenu()+0x252>
    1076:	4621      	mov	r1, r4
    1078:	480d      	ldr	r0, [pc, #52]	; (10b0 <Debugger::DisplayMenu()+0x308>)
    107a:	f005 faad 	bl	65d8 <Print::print(String const&)>
    107e:	e793      	b.n	fa8 <Debugger::DisplayMenu()+0x200>
    1080:	4621      	mov	r1, r4
    1082:	480b      	ldr	r0, [pc, #44]	; (10b0 <Debugger::DisplayMenu()+0x308>)
    1084:	f005 faa8 	bl	65d8 <Print::print(String const&)>
    1088:	e784      	b.n	f94 <Debugger::DisplayMenu()+0x1ec>
    108a:	4621      	mov	r1, r4
    108c:	4808      	ldr	r0, [pc, #32]	; (10b0 <Debugger::DisplayMenu()+0x308>)
    108e:	f005 faa3 	bl	65d8 <Print::print(String const&)>
    1092:	e771      	b.n	f78 <Debugger::DisplayMenu()+0x1d0>
    1094:	4621      	mov	r1, r4
    1096:	4806      	ldr	r0, [pc, #24]	; (10b0 <Debugger::DisplayMenu()+0x308>)
    1098:	f005 fa9e 	bl	65d8 <Print::print(String const&)>
    109c:	e761      	b.n	f62 <Debugger::DisplayMenu()+0x1ba>
    109e:	bf00      	nop
    10a0:	20000118 	.word	0x20000118
    10a4:	20001dc0 	.word	0x20001dc0
    10a8:	200002b0 	.word	0x200002b0
    10ac:	20001dc4 	.word	0x20001dc4
    10b0:	200010e4 	.word	0x200010e4
    10b4:	20000164 	.word	0x20000164
    10b8:	20001dcc 	.word	0x20001dcc
    10bc:	20000240 	.word	0x20000240
    10c0:	200001ec 	.word	0x200001ec
    10c4:	20000120 	.word	0x20000120
    10c8:	20000198 	.word	0x20000198
    10cc:	2000010c 	.word	0x2000010c
    10d0:	200001a4 	.word	0x200001a4
    10d4:	20000110 	.word	0x20000110
    10d8:	200001b4 	.word	0x200001b4
    10dc:	200003a4 	.word	0x200003a4
    10e0:	200001c8 	.word	0x200001c8
    10e4:	20000108 	.word	0x20000108
    10e8:	200001dc 	.word	0x200001dc
    10ec:	20000114 	.word	0x20000114
    10f0:	2000022c 	.word	0x2000022c
    10f4:	e000ed0c 	.word	0xe000ed0c
    10f8:	05fa0004 	.word	0x05fa0004
    10fc:	2000027c 	.word	0x2000027c
    1100:	4621      	mov	r1, r4
    1102:	480c      	ldr	r0, [pc, #48]	; (1134 <Debugger::DisplayMenu()+0x38c>)
    1104:	f005 fa68 	bl	65d8 <Print::print(String const&)>
    1108:	e71c      	b.n	f44 <Debugger::DisplayMenu()+0x19c>
    110a:	4621      	mov	r1, r4
    110c:	4809      	ldr	r0, [pc, #36]	; (1134 <Debugger::DisplayMenu()+0x38c>)
    110e:	f005 fa63 	bl	65d8 <Print::print(String const&)>
    1112:	e70c      	b.n	f2e <Debugger::DisplayMenu()+0x186>
    1114:	4621      	mov	r1, r4
    1116:	4807      	ldr	r0, [pc, #28]	; (1134 <Debugger::DisplayMenu()+0x38c>)
    1118:	f005 fa5e 	bl	65d8 <Print::print(String const&)>
    111c:	e6f8      	b.n	f10 <Debugger::DisplayMenu()+0x168>
    111e:	4621      	mov	r1, r4
    1120:	4804      	ldr	r0, [pc, #16]	; (1134 <Debugger::DisplayMenu()+0x38c>)
    1122:	f005 fa59 	bl	65d8 <Print::print(String const&)>
    1126:	e6e8      	b.n	efa <Debugger::DisplayMenu()+0x152>
    1128:	4669      	mov	r1, sp
    112a:	4802      	ldr	r0, [pc, #8]	; (1134 <Debugger::DisplayMenu()+0x38c>)
    112c:	f005 fa54 	bl	65d8 <Print::print(String const&)>
    1130:	e6d4      	b.n	edc <Debugger::DisplayMenu()+0x134>
    1132:	bf00      	nop
    1134:	200010e4 	.word	0x200010e4

00001138 <serialEvent()>:
uint8_t DisplayMenu;
uint8_t DisplayElement;
VariableLogger Variables[1];
int MenuID = 0;
char buffer[3] = "";
void serialEvent(){
    1138:	b570      	push	{r4, r5, r6, lr}
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    113a:	f004 fd31 	bl	5ba0 <usb_serial_getchar>
    
    //while(Serial.available()){
        char ReadedChar = Serial.read();

        if(ReadedChar == '\n'){
    113e:	b2c3      	uxtb	r3, r0
    1140:	2b0a      	cmp	r3, #10
    1142:	d006      	beq.n	1152 <serialEvent()+0x1a>
            DebugTool.DisplayMenu();
             
        }
        else{

            sprintf(buffer,"%s%c",buffer,ReadedChar);
    1144:	4a14      	ldr	r2, [pc, #80]	; (1198 <serialEvent()+0x60>)
    1146:	4915      	ldr	r1, [pc, #84]	; (119c <serialEvent()+0x64>)
    1148:	4610      	mov	r0, r2
        }
        

    //}

}
    114a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DebugTool.DisplayMenu();
             
        }
        else{

            sprintf(buffer,"%s%c",buffer,ReadedChar);
    114e:	f007 bd6f 	b.w	8c30 <sprintf>
    
    //while(Serial.available()){
        char ReadedChar = Serial.read();

        if(ReadedChar == '\n'){
            if(MenuID <= 0){
    1152:	4d13      	ldr	r5, [pc, #76]	; (11a0 <serialEvent()+0x68>)

                MenuID = atof(buffer);
    1154:	4810      	ldr	r0, [pc, #64]	; (1198 <serialEvent()+0x60>)
    
    //while(Serial.available()){
        char ReadedChar = Serial.read();

        if(ReadedChar == '\n'){
            if(MenuID <= 0){
    1156:	682c      	ldr	r4, [r5, #0]
    1158:	2c00      	cmp	r4, #0
    115a:	dd15      	ble.n	1188 <serialEvent()+0x50>
                MenuID = atof(buffer);

            }
            else{
                
                MenuID = (MenuID*10)+atof(buffer);
    115c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1160:	f006 ff3c 	bl	7fdc <atof>
    1164:	0064      	lsls	r4, r4, #1
    1166:	ee07 4a90 	vmov	s15, r4
    116a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    116e:	ee37 0b00 	vadd.f64	d0, d7, d0
    1172:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    1176:	ed85 0a00 	vstr	s0, [r5]
            
            }

            strcpy(buffer,"");
    117a:	4b07      	ldr	r3, [pc, #28]	; (1198 <serialEvent()+0x60>)
    117c:	2200      	movs	r2, #0
    117e:	701a      	strb	r2, [r3, #0]
        }
        

    //}

}
    1180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            
            }

            strcpy(buffer,"");
    
            DebugTool.DisplayMenu();
    1184:	f7ff be10 	b.w	da8 <Debugger::DisplayMenu()>
        char ReadedChar = Serial.read();

        if(ReadedChar == '\n'){
            if(MenuID <= 0){

                MenuID = atof(buffer);
    1188:	f006 ff28 	bl	7fdc <atof>
    118c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    1190:	ed85 0a00 	vstr	s0, [r5]
    1194:	e7f1      	b.n	117a <serialEvent()+0x42>
    1196:	bf00      	nop
    1198:	20001dc8 	.word	0x20001dc8
    119c:	200000e8 	.word	0x200000e8
    11a0:	20001dc0 	.word	0x20001dc0

000011a4 <Debugger::GoBack(bool)>:

void Debugger::GoBack(bool BackTwoMenu){

    if(BackTwoMenu){

        MenuID = MenuID/100;
    11a4:	490a      	ldr	r1, [pc, #40]	; (11d0 <Debugger::GoBack(bool)+0x2c>)

}

void Debugger::GoBack(bool BackTwoMenu){

    if(BackTwoMenu){
    11a6:	b948      	cbnz	r0, 11bc <Debugger::GoBack(bool)+0x18>
        MenuID = MenuID/100;

    }
    else{
        
        MenuID = MenuID/10;
    11a8:	680b      	ldr	r3, [r1, #0]
    11aa:	4a0a      	ldr	r2, [pc, #40]	; (11d4 <Debugger::GoBack(bool)+0x30>)
    11ac:	fb82 0203 	smull	r0, r2, r2, r3
    11b0:	17db      	asrs	r3, r3, #31
    11b2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    11b6:	600b      	str	r3, [r1, #0]
        
    }
    DisplayMenu();
    11b8:	f7ff bdf6 	b.w	da8 <Debugger::DisplayMenu()>

void Debugger::GoBack(bool BackTwoMenu){

    if(BackTwoMenu){

        MenuID = MenuID/100;
    11bc:	680b      	ldr	r3, [r1, #0]
    11be:	4a06      	ldr	r2, [pc, #24]	; (11d8 <Debugger::GoBack(bool)+0x34>)
    11c0:	fb82 0203 	smull	r0, r2, r2, r3
    11c4:	17db      	asrs	r3, r3, #31
    11c6:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    11ca:	600b      	str	r3, [r1, #0]
    else{
        
        MenuID = MenuID/10;
        
    }
    DisplayMenu();
    11cc:	f7ff bdec 	b.w	da8 <Debugger::DisplayMenu()>
    11d0:	20001dc0 	.word	0x20001dc0
    11d4:	66666667 	.word	0x66666667
    11d8:	51eb851f 	.word	0x51eb851f

000011dc <Debugger::begin(bool)>:

}

void Debugger::begin(bool DebuggingActivated){
    11dc:	b538      	push	{r3, r4, r5, lr}

    DebuggingToolActivated = DebuggingActivated;
    11de:	4b12      	ldr	r3, [pc, #72]	; (1228 <Debugger::begin(bool)+0x4c>)
    11e0:	7018      	strb	r0, [r3, #0]
    if(DebuggingActivated){
    11e2:	b300      	cbz	r0, 1226 <Debugger::begin(bool)+0x4a>
    11e4:	4a11      	ldr	r2, [pc, #68]	; (122c <Debugger::begin(bool)+0x50>)
    11e6:	4912      	ldr	r1, [pc, #72]	; (1230 <Debugger::begin(bool)+0x54>)
    11e8:	4d12      	ldr	r5, [pc, #72]	; (1234 <Debugger::begin(bool)+0x58>)
    11ea:	4c13      	ldr	r4, [pc, #76]	; (1238 <Debugger::begin(bool)+0x5c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    11ec:	7813      	ldrb	r3, [r2, #0]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d0fc      	beq.n	11ec <Debugger::begin(bool)+0x10>
    11f2:	780b      	ldrb	r3, [r1, #0]
    11f4:	07db      	lsls	r3, r3, #31
    11f6:	d5f9      	bpl.n	11ec <Debugger::begin(bool)+0x10>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    11f8:	682b      	ldr	r3, [r5, #0]
    11fa:	6820      	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    11fc:	1a1b      	subs	r3, r3, r0
    11fe:	2b0e      	cmp	r3, #14
    1200:	d9f4      	bls.n	11ec <Debugger::begin(bool)+0x10>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1202:	212d      	movs	r1, #45	; 0x2d
    1204:	480d      	ldr	r0, [pc, #52]	; (123c <Debugger::begin(bool)+0x60>)
    1206:	f004 fcf1 	bl	5bec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    120a:	480d      	ldr	r0, [pc, #52]	; (1240 <Debugger::begin(bool)+0x64>)
    120c:	f005 fa0a 	bl	6624 <Print::println()>
    1210:	2118      	movs	r1, #24
    1212:	480c      	ldr	r0, [pc, #48]	; (1244 <Debugger::begin(bool)+0x68>)
    1214:	f004 fcea 	bl	5bec <usb_serial_write>
    1218:	4809      	ldr	r0, [pc, #36]	; (1240 <Debugger::begin(bool)+0x64>)
    121a:	f005 fa03 	bl	6624 <Print::println()>
    
    
    
    }

}
    121e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.begin(115200);
         
        Serial.println("Serial port connected , Passing in debug mode");
        Serial.println("\nDebugging Tool Loading\n");
        
        DisplayMenu();
    1222:	f7ff bdc1 	b.w	da8 <Debugger::DisplayMenu()>
    1226:	bd38      	pop	{r3, r4, r5, pc}
    1228:	20001dc4 	.word	0x20001dc4
    122c:	200021f0 	.word	0x200021f0
    1230:	20002348 	.word	0x20002348
    1234:	200021a0 	.word	0x200021a0
    1238:	20004288 	.word	0x20004288
    123c:	2000031c 	.word	0x2000031c
    1240:	200010e4 	.word	0x200010e4
    1244:	2000034c 	.word	0x2000034c

00001248 <Debugger::Display(String)>:

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
    1248:	4b03      	ldr	r3, [pc, #12]	; (1258 <Debugger::Display(String)+0x10>)
    124a:	781b      	ldrb	r3, [r3, #0]
    124c:	b903      	cbnz	r3, 1250 <Debugger::Display(String)+0x8>
    124e:	4770      	bx	lr

        Serial.print(DisplayedText);
    1250:	4601      	mov	r1, r0
    1252:	4802      	ldr	r0, [pc, #8]	; (125c <Debugger::Display(String)+0x14>)
    1254:	f005 b9c0 	b.w	65d8 <Print::print(String const&)>
    1258:	20001dc4 	.word	0x20001dc4
    125c:	200010e4 	.word	0x200010e4

00001260 <Debugger::DisplayError(unsigned char)>:
    


}

void Debugger::DisplayError(uint8_t ErrorID){
    1260:	b530      	push	{r4, r5, lr}
    1262:	b085      	sub	sp, #20

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
    1264:	4c0f      	ldr	r4, [pc, #60]	; (12a4 <Debugger::DisplayError(unsigned char)+0x44>)
    


}

void Debugger::DisplayError(uint8_t ErrorID){
    1266:	4605      	mov	r5, r0

    Display("\n\n########## Error : An Error Has Occurred ErrorID : ");
    1268:	490f      	ldr	r1, [pc, #60]	; (12a8 <Debugger::DisplayError(unsigned char)+0x48>)
    126a:	4668      	mov	r0, sp
    126c:	f005 fb46 	bl	68fc <String::String(char const*)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
    1270:	7823      	ldrb	r3, [r4, #0]
    1272:	b98b      	cbnz	r3, 1298 <Debugger::DisplayError(unsigned char)+0x38>

}

void Debugger::DisplayError(uint8_t ErrorID){

    Display("\n\n########## Error : An Error Has Occurred ErrorID : ");
    1274:	4668      	mov	r0, sp
    1276:	f005 fb01 	bl	687c <String::~String()>
    Display(ErrorID);
    127a:	4629      	mov	r1, r5
    127c:	4668      	mov	r0, sp
    127e:	f005 fb5f 	bl	6940 <String::String(unsigned char)>

}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){
    1282:	7823      	ldrb	r3, [r4, #0]
    1284:	b11b      	cbz	r3, 128e <Debugger::DisplayError(unsigned char)+0x2e>

        Serial.print(DisplayedText);
    1286:	4669      	mov	r1, sp
    1288:	4808      	ldr	r0, [pc, #32]	; (12ac <Debugger::DisplayError(unsigned char)+0x4c>)
    128a:	f005 f9a5 	bl	65d8 <Print::print(String const&)>
}

void Debugger::DisplayError(uint8_t ErrorID){

    Display("\n\n########## Error : An Error Has Occurred ErrorID : ");
    Display(ErrorID);
    128e:	4668      	mov	r0, sp
    1290:	f005 faf4 	bl	687c <String::~String()>

}
    1294:	b005      	add	sp, #20
    1296:	bd30      	pop	{r4, r5, pc}

void Debugger::Display(String DisplayedText){
  
    if(DebuggingToolActivated){

        Serial.print(DisplayedText);
    1298:	4669      	mov	r1, sp
    129a:	4804      	ldr	r0, [pc, #16]	; (12ac <Debugger::DisplayError(unsigned char)+0x4c>)
    129c:	f005 f99c 	bl	65d8 <Print::print(String const&)>
    12a0:	e7e8      	b.n	1274 <Debugger::DisplayError(unsigned char)+0x14>
    12a2:	bf00      	nop
    12a4:	20001dc4 	.word	0x20001dc4
    12a8:	20000368 	.word	0x20000368
    12ac:	200010e4 	.word	0x200010e4

000012b0 <Debugger::actualise()>:
    Display("\n\n########## Error : An Error Has Occurred ErrorID : ");
    Display(ErrorID);

}

void Debugger::actualise(){
    12b0:	b538      	push	{r3, r4, r5, lr}
    
    if(DebuggingToolActivated){
    12b2:	4b26      	ldr	r3, [pc, #152]	; (134c <Debugger::actualise()+0x9c>)
    12b4:	781b      	ldrb	r3, [r3, #0]
    12b6:	b123      	cbz	r3, 12c2 <Debugger::actualise()+0x12>
    
        if(DisplayerToken[0]){
    12b8:	4d25      	ldr	r5, [pc, #148]	; (1350 <Debugger::actualise()+0xa0>)
    12ba:	782b      	ldrb	r3, [r5, #0]
    12bc:	bb13      	cbnz	r3, 1304 <Debugger::actualise()+0x54>
                (*MPU9250.GetPointerOfVariable()).DataReady = false;

            }

        }
        if(DisplayerToken[1]){
    12be:	786b      	ldrb	r3, [r5, #1]
    12c0:	b903      	cbnz	r3, 12c4 <Debugger::actualise()+0x14>
    12c2:	bd38      	pop	{r3, r4, r5, pc}
            if((*SBUSDev.GetRadioChannel()).DataReady){
    12c4:	f000 fd3c 	bl	1d40 <SBUSHandler::GetRadioChannel()>
    12c8:	f890 3020 	ldrb.w	r3, [r0, #32]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d0f8      	beq.n	12c2 <Debugger::actualise()+0x12>
    12d0:	2400      	movs	r4, #0

                 for(int i = 0;i < 16;i ++){
                    
                    Serial.print((*SBUSDev.GetRadioChannel()).Channel[i]);
    12d2:	f000 fd35 	bl	1d40 <SBUSHandler::GetRadioChannel()>
    12d6:	4603      	mov	r3, r0
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    12d8:	481e      	ldr	r0, [pc, #120]	; (1354 <Debugger::actualise()+0xa4>)
    12da:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]

        }
        if(DisplayerToken[1]){
            if((*SBUSDev.GetRadioChannel()).DataReady){

                 for(int i = 0;i < 16;i ++){
    12de:	3401      	adds	r4, #1
    12e0:	b289      	uxth	r1, r1
    12e2:	f005 f9ef 	bl	66c4 <Print::print(long)>
    12e6:	2101      	movs	r1, #1
    12e8:	481b      	ldr	r0, [pc, #108]	; (1358 <Debugger::actualise()+0xa8>)
    12ea:	f004 fc7f 	bl	5bec <usb_serial_write>
    12ee:	2c10      	cmp	r4, #16
    12f0:	d1ef      	bne.n	12d2 <Debugger::actualise()+0x22>
                    Serial.print((*SBUSDev.GetRadioChannel()).Channel[i]);
                    Serial.print(" ");


                }
                Serial.println();
    12f2:	4818      	ldr	r0, [pc, #96]	; (1354 <Debugger::actualise()+0xa4>)
    12f4:	f005 f996 	bl	6624 <Print::println()>

                (*SBUSDev.GetRadioChannel()).DataReady = false;
    12f8:	f000 fd22 	bl	1d40 <SBUSHandler::GetRadioChannel()>
    12fc:	2300      	movs	r3, #0
    12fe:	f880 3020 	strb.w	r3, [r0, #32]
    1302:	bd38      	pop	{r3, r4, r5, pc}
    
    if(DebuggingToolActivated){
    
        if(DisplayerToken[0]){
    
            if((*MPU9250.GetPointerOfVariable()).DataReady){
    1304:	f000 fcfa 	bl	1cfc <IMU9250::GetPointerOfVariable()>
    1308:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    130c:	2b00      	cmp	r3, #0
    130e:	d0d6      	beq.n	12be <Debugger::actualise()+0xe>
    1310:	2400      	movs	r4, #0
                
                for(int i = 0;i < 10;i ++){

                    Serial.print((*MPU9250.GetPointerOfVariable()).OutputFloat[i]);
    1312:	f000 fcf3 	bl	1cfc <IMU9250::GetPointerOfVariable()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1316:	2102      	movs	r1, #2
    1318:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    
        if(DisplayerToken[0]){
    
            if((*MPU9250.GetPointerOfVariable()).DataReady){
                
                for(int i = 0;i < 10;i ++){
    131c:	3401      	adds	r4, #1
    131e:	480d      	ldr	r0, [pc, #52]	; (1354 <Debugger::actualise()+0xa4>)

                    Serial.print((*MPU9250.GetPointerOfVariable()).OutputFloat[i]);
    1320:	ed93 0a00 	vldr	s0, [r3]
    1324:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    1328:	f005 f9da 	bl	66e0 <Print::printFloat(double, unsigned char)>
    132c:	2101      	movs	r1, #1
    132e:	480b      	ldr	r0, [pc, #44]	; (135c <Debugger::actualise()+0xac>)
    1330:	f004 fc5c 	bl	5bec <usb_serial_write>
    
        if(DisplayerToken[0]){
    
            if((*MPU9250.GetPointerOfVariable()).DataReady){
                
                for(int i = 0;i < 10;i ++){
    1334:	2c0a      	cmp	r4, #10
    1336:	d1ec      	bne.n	1312 <Debugger::actualise()+0x62>
                    Serial.print((*MPU9250.GetPointerOfVariable()).OutputFloat[i]);
                    Serial.print(",");


                }
                Serial.println();
    1338:	4806      	ldr	r0, [pc, #24]	; (1354 <Debugger::actualise()+0xa4>)
    133a:	f005 f973 	bl	6624 <Print::println()>
                
                (*MPU9250.GetPointerOfVariable()).DataReady = false;
    133e:	f000 fcdd 	bl	1cfc <IMU9250::GetPointerOfVariable()>
    1342:	2300      	movs	r3, #0
    1344:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    1348:	e7b9      	b.n	12be <Debugger::actualise()+0xe>
    134a:	bf00      	nop
    134c:	20001dc4 	.word	0x20001dc4
    1350:	20001dcc 	.word	0x20001dcc
    1354:	200010e4 	.word	0x200010e4
    1358:	2000039c 	.word	0x2000039c
    135c:	200003a0 	.word	0x200003a0

00001360 <IMU9250::SetBus(unsigned char, unsigned char)>:

   

}

void IMU9250::SetBus(uint8_t SPINumberUsedForComm,uint8_t CSPin){
    1360:	b510      	push	{r4, lr}
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1362:	2407      	movs	r4, #7
    1364:	b084      	sub	sp, #16

    IMUSPI.SPIInitParam(CSPin,SPINumberUsedForComm,SPISettings(IMUSPISpeed,IMUSPIMode,IMUSPIBit));
    1366:	4602      	mov	r2, r0
    1368:	4b0b      	ldr	r3, [pc, #44]	; (1398 <IMU9250::SetBus(unsigned char, unsigned char)+0x38>)
    136a:	480c      	ldr	r0, [pc, #48]	; (139c <IMU9250::SetBus(unsigned char, unsigned char)+0x3c>)
    136c:	9400      	str	r4, [sp, #0]
    136e:	f7ff fa2b 	bl	7c8 <SPIDev::SPIInitParam(unsigned char, unsigned char, SPISettings)>
    SDCardReader.SetCalibrationPointer((uint8_t *)&Offsets,sizeof(Offsets));
    1372:	2114      	movs	r1, #20
    1374:	480a      	ldr	r0, [pc, #40]	; (13a0 <IMU9250::SetBus(unsigned char, unsigned char)+0x40>)
    1376:	f7ff f8a1 	bl	4bc <SDCard::SetCalibrationPointer(unsigned char*, unsigned int)>
    SDCardReader.SetCalibrationPointer((uint8_t *)&Linearity,sizeof(Linearity));
    137a:	2128      	movs	r1, #40	; 0x28
    137c:	4809      	ldr	r0, [pc, #36]	; (13a4 <IMU9250::SetBus(unsigned char, unsigned char)+0x44>)
    137e:	f7ff f89d 	bl	4bc <SDCard::SetCalibrationPointer(unsigned char*, unsigned int)>
    1382:	4b08      	ldr	r3, [pc, #32]	; (13a4 <IMU9250::SetBus(unsigned char, unsigned char)+0x44>)
    for(int i = 0;i < 10; i ++){

        Linearity[i] = 1;
    1384:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    1388:	f103 0228 	add.w	r2, r3, #40	; 0x28
    138c:	f843 1b04 	str.w	r1, [r3], #4
void IMU9250::SetBus(uint8_t SPINumberUsedForComm,uint8_t CSPin){

    IMUSPI.SPIInitParam(CSPin,SPINumberUsedForComm,SPISettings(IMUSPISpeed,IMUSPIMode,IMUSPIBit));
    SDCardReader.SetCalibrationPointer((uint8_t *)&Offsets,sizeof(Offsets));
    SDCardReader.SetCalibrationPointer((uint8_t *)&Linearity,sizeof(Linearity));
    for(int i = 0;i < 10; i ++){
    1390:	4293      	cmp	r3, r2
    1392:	d1fb      	bne.n	138c <IMU9250::SetBus(unsigned char, unsigned char)+0x2c>

        Linearity[i] = 1;

    }

}
    1394:	b004      	add	sp, #16
    1396:	bd10      	pop	{r4, pc}
    1398:	00f42400 	.word	0x00f42400
    139c:	20001e50 	.word	0x20001e50
    13a0:	20001dd0 	.word	0x20001dd0
    13a4:	20001e60 	.word	0x20001e60

000013a8 <IMU9250::GetCalibrationValue(SensorGatParam)>:

    setAK8963ToBrigeMode();

}

uint8_t IMU9250::GetCalibrationValue(SensorGatParam Sensor){
    13a8:	0e00      	lsrs	r0, r0, #24
    13aa:	b082      	sub	sp, #8
    13ac:	4b09      	ldr	r3, [pc, #36]	; (13d4 <IMU9250::GetCalibrationValue(SensorGatParam)+0x2c>)
        Serial.print(Linearity[i],3);
        Serial.print(" ");


    }*/
    if(Sensor.SensorID == 4){
    13ae:	2804      	cmp	r0, #4
    13b0:	d002      	beq.n	13b8 <IMU9250::GetCalibrationValue(SensorGatParam)+0x10>
        return GlobalCalibration;

    }
    else{
        
        return Calibration[Sensor.SensorID];
    13b2:	5c18      	ldrb	r0, [r3, r0]

    }


}
    13b4:	b002      	add	sp, #8
    13b6:	4770      	bx	lr
        Serial.print(Linearity[i],3);
        Serial.print(" ");


    }*/
    if(Sensor.SensorID == 4){
    13b8:	2002      	movs	r0, #2
    13ba:	1d19      	adds	r1, r3, #4
        uint8_t GlobalCalibration = 2;
        for(int i = 0;i < 4;i ++){

            if(Calibration[i] < GlobalCalibration){
    13bc:	f813 2b01 	ldrb.w	r2, [r3], #1
    13c0:	4282      	cmp	r2, r0
    13c2:	d201      	bcs.n	13c8 <IMU9250::GetCalibrationValue(SensorGatParam)+0x20>
    13c4:	2001      	movs	r0, #1
                
                GlobalCalibration = Calibration[i];

                if(GlobalCalibration == 0){
    13c6:	b11a      	cbz	r2, 13d0 <IMU9250::GetCalibrationValue(SensorGatParam)+0x28>


    }*/
    if(Sensor.SensorID == 4){
        uint8_t GlobalCalibration = 2;
        for(int i = 0;i < 4;i ++){
    13c8:	428b      	cmp	r3, r1
    13ca:	d1f7      	bne.n	13bc <IMU9250::GetCalibrationValue(SensorGatParam)+0x14>
        return Calibration[Sensor.SensorID];

    }


}
    13cc:	b002      	add	sp, #8
    13ce:	4770      	bx	lr
                
                GlobalCalibration = Calibration[i];

                if(GlobalCalibration == 0){

                    return 0;
    13d0:	4610      	mov	r0, r2
    13d2:	e7ef      	b.n	13b4 <IMU9250::GetCalibrationValue(SensorGatParam)+0xc>
    13d4:	20001e5c 	.word	0x20001e5c

000013d8 <IMU9250::calibrateSensor(SensorGatParam, int)>:

}



void IMU9250::calibrateSensor(SensorGatParam SensorToCalibrate,int NumberOfCalibrationIteration){
    13d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if(SensorToCalibrate.SensorID == 0){
    13dc:	0e03      	lsrs	r3, r0, #24

}



void IMU9250::calibrateSensor(SensorGatParam SensorToCalibrate,int NumberOfCalibrationIteration){
    13de:	4689      	mov	r9, r1
    13e0:	ed2d 8b04 	vpush	{d8-d9}
    13e4:	b087      	sub	sp, #28
    13e6:	9001      	str	r0, [sp, #4]

    if(SensorToCalibrate.SensorID == 0){
    13e8:	9300      	str	r3, [sp, #0]
    13ea:	d142      	bne.n	1472 <IMU9250::calibrateSensor(SensorGatParam, int)+0x9a>
        
        uint8_t NoCalibrate = 0;
        int MaxValue = 0;
        float TemporaryBuff[3] = {};
    13ec:	ad03      	add	r5, sp, #12
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    13ee:	2900      	cmp	r1, #0

    if(SensorToCalibrate.SensorID == 0){
        
        uint8_t NoCalibrate = 0;
        int MaxValue = 0;
        float TemporaryBuff[3] = {};
    13f0:	9303      	str	r3, [sp, #12]
    13f2:	606b      	str	r3, [r5, #4]
    13f4:	60ab      	str	r3, [r5, #8]
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    13f6:	dd5d      	ble.n	14b4 <IMU9250::calibrateSensor(SensorGatParam, int)+0xdc>
    13f8:	ee07 1a90 	vmov	s15, r1
    13fc:	ed9f 8abf 	vldr	s16, [pc, #764]	; 16fc <IMU9250::calibrateSensor(SensorGatParam, int)+0x324>
    1400:	4698      	mov	r8, r3
    1402:	461e      	mov	r6, r3
    1404:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    1408:	ee08 3a90 	vmov	s17, r3
    140c:	4fbc      	ldr	r7, [pc, #752]	; (1700 <IMU9250::calibrateSensor(SensorGatParam, int)+0x328>)
                
            IMUSPI.beginTransaction();
    140e:	48bd      	ldr	r0, [pc, #756]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    1410:	46aa      	mov	sl, r5
            uint8_t buff[2];
                
            for(int j = 0;j < 3;j ++){
    1412:	f04f 0b00 	mov.w	fp, #0
        uint8_t NoCalibrate = 0;
        int MaxValue = 0;
        float TemporaryBuff[3] = {};
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
                
            IMUSPI.beginTransaction();
    1416:	f7ff fa0b 	bl	830 <SPIDev::beginTransaction()>
            uint8_t buff[2];
                
            for(int j = 0;j < 3;j ++){
        
                buff[0] = IMUSPI.getRegister(ACCEL_OUT);    
    141a:	213b      	movs	r1, #59	; 0x3b
    141c:	48b9      	ldr	r0, [pc, #740]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    141e:	f7ff fbbb 	bl	b98 <SPIDev::getRegister(unsigned char)>
    1422:	4604      	mov	r4, r0
                buff[1] = IMUSPI.getRegister(0x00);
    1424:	2100      	movs	r1, #0
    1426:	48b7      	ldr	r0, [pc, #732]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    1428:	f7ff fbb6 	bl	b98 <SPIDev::getRegister(unsigned char)>
            
                //Offsets[j] += -((short)((buff[0] << 8) | (buff[1])))/NumberOfCalibrationIteration;
                TemporaryBuff[j] +=  -((short)((buff[0] << 8) | (buff[1])))/(float)NumberOfCalibrationIteration;

                if(TemporaryBuff[j] > MaxValue){
    142c:	eef8 6ae8 	vcvt.f32.s32	s13, s17
        
                buff[0] = IMUSPI.getRegister(ACCEL_OUT);    
                buff[1] = IMUSPI.getRegister(0x00);
            
                //Offsets[j] += -((short)((buff[0] << 8) | (buff[1])))/NumberOfCalibrationIteration;
                TemporaryBuff[j] +=  -((short)((buff[0] << 8) | (buff[1])))/(float)NumberOfCalibrationIteration;
    1430:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1434:	b200      	sxth	r0, r0
    1436:	4240      	negs	r0, r0
    1438:	ee07 0a90 	vmov	s15, r0
    143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1440:	ee87 7a89 	vdiv.f32	s14, s15, s18
    1444:	ee77 7a08 	vadd.f32	s15, s14, s16

                if(TemporaryBuff[j] > MaxValue){
    1448:	eef4 7ae6 	vcmpe.f32	s15, s13
        
                buff[0] = IMUSPI.getRegister(ACCEL_OUT);    
                buff[1] = IMUSPI.getRegister(0x00);
            
                //Offsets[j] += -((short)((buff[0] << 8) | (buff[1])))/NumberOfCalibrationIteration;
                TemporaryBuff[j] +=  -((short)((buff[0] << 8) | (buff[1])))/(float)NumberOfCalibrationIteration;
    144c:	ecea 7a01 	vstmia	sl!, {s15}

                if(TemporaryBuff[j] > MaxValue){
    1450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1454:	dd05      	ble.n	1462 <IMU9250::calibrateSensor(SensorGatParam, int)+0x8a>

                    MaxValue = Offsets[j];
    1456:	f937 301b 	ldrsh.w	r3, [r7, fp, lsl #1]
                    NoCalibrate = j;
    145a:	fa5f f88b 	uxtb.w	r8, fp
                //Offsets[j] += -((short)((buff[0] << 8) | (buff[1])))/NumberOfCalibrationIteration;
                TemporaryBuff[j] +=  -((short)((buff[0] << 8) | (buff[1])))/(float)NumberOfCalibrationIteration;

                if(TemporaryBuff[j] > MaxValue){

                    MaxValue = Offsets[j];
    145e:	ee08 3a90 	vmov	s17, r3
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
                
            IMUSPI.beginTransaction();
            uint8_t buff[2];
                
            for(int j = 0;j < 3;j ++){
    1462:	f10b 0b01 	add.w	fp, fp, #1
    1466:	f1bb 0f03 	cmp.w	fp, #3
    146a:	d017      	beq.n	149c <IMU9250::calibrateSensor(SensorGatParam, int)+0xc4>
    146c:	ed9a 8a00 	vldr	s16, [sl]
    1470:	e7d3      	b.n	141a <IMU9250::calibrateSensor(SensorGatParam, int)+0x42>
        }
        
        Offsets[NoCalibrate] = (short)(TemporaryBuff[NoCalibrate]);

    }
    else if(SensorToCalibrate.SensorID == 1){
    1472:	9b00      	ldr	r3, [sp, #0]
    1474:	2b01      	cmp	r3, #1
    1476:	d008      	beq.n	148a <IMU9250::calibrateSensor(SensorGatParam, int)+0xb2>



    }
    else if(SensorToCalibrate.SensorID == 2){
    1478:	2b02      	cmp	r3, #2
    147a:	d051      	beq.n	1520 <IMU9250::calibrateSensor(SensorGatParam, int)+0x148>
            }
        
        }
        
    }
    else if(SensorToCalibrate.SensorID == 3){
    147c:	9b00      	ldr	r3, [sp, #0]
    147e:	2b03      	cmp	r3, #3
    1480:	f000 80a2 	beq.w	15c8 <IMU9250::calibrateSensor(SensorGatParam, int)+0x1f0>
            Linearity[i+7] = moyenne/(float)abs(Extremums[0][i]-Extremums[1][i]);

        }

    }
    else if(SensorToCalibrate.SensorID == 4){
    1484:	9b00      	ldr	r3, [sp, #0]
    1486:	2b04      	cmp	r3, #4
    1488:	d03f      	beq.n	150a <IMU9250::calibrateSensor(SensorGatParam, int)+0x132>

        }

    }

    Calibration[SensorToCalibrate.SensorID] = 2;
    148a:	4b9f      	ldr	r3, [pc, #636]	; (1708 <IMU9250::calibrateSensor(SensorGatParam, int)+0x330>)
    148c:	2202      	movs	r2, #2
    148e:	9900      	ldr	r1, [sp, #0]
    1490:	545a      	strb	r2, [r3, r1]
    


}
    1492:	b007      	add	sp, #28
    1494:	ecbd 8b04 	vpop	{d8-d9}
    1498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            
                }
        
            }

            IMUSPI.endTransaction();
    149c:	4899      	ldr	r0, [pc, #612]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    if(SensorToCalibrate.SensorID == 0){
        
        uint8_t NoCalibrate = 0;
        int MaxValue = 0;
        float TemporaryBuff[3] = {};
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    149e:	3601      	adds	r6, #1
            
                }
        
            }

            IMUSPI.endTransaction();
    14a0:	f7ff fb2c 	bl	afc <SPIDev::endTransaction()>
            delay(10);
    14a4:	200a      	movs	r0, #10
    14a6:	f003 fa85 	bl	49b4 <delay>
    if(SensorToCalibrate.SensorID == 0){
        
        uint8_t NoCalibrate = 0;
        int MaxValue = 0;
        float TemporaryBuff[3] = {};
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    14aa:	45b1      	cmp	r9, r6
    14ac:	d005      	beq.n	14ba <IMU9250::calibrateSensor(SensorGatParam, int)+0xe2>
    14ae:	ed9d 8a03 	vldr	s16, [sp, #12]
    14b2:	e7ac      	b.n	140e <IMU9250::calibrateSensor(SensorGatParam, int)+0x36>
    14b4:	f8dd 8000 	ldr.w	r8, [sp]
    14b8:	4f91      	ldr	r7, [pc, #580]	; (1700 <IMU9250::calibrateSensor(SensorGatParam, int)+0x328>)

            }

                //Linearity[i] = 16384.0f/(Ranges[0]*MaxValue);
       
            TemporaryBuff[NoCalibrate] += TemporaryBuff[i]/2;
    14ba:	ab06      	add	r3, sp, #24
            IMUSPI.endTransaction();
            delay(10);

        }
        
        TemporaryBuff[NoCalibrate] = 0;
    14bc:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 16fc <IMU9250::calibrateSensor(SensorGatParam, int)+0x324>

            }

                //Linearity[i] = 16384.0f/(Ranges[0]*MaxValue);
       
            TemporaryBuff[NoCalibrate] += TemporaryBuff[i]/2;
    14c0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    14c4:	eb03 0288 	add.w	r2, r3, r8, lsl #2
            IMUSPI.endTransaction();
            delay(10);

        }
        
        TemporaryBuff[NoCalibrate] = 0;
    14c8:	eef0 7a47 	vmov.f32	s15, s14
        //Linearity[NoCalibrate] = 16384.0f/(Ranges[0]*MaxValue);

        for(int i = 0;i < 3; i ++){
    14cc:	2300      	movs	r3, #0

            }

                //Linearity[i] = 16384.0f/(Ranges[0]*MaxValue);
       
            TemporaryBuff[NoCalibrate] += TemporaryBuff[i]/2;
    14ce:	4611      	mov	r1, r2
            IMUSPI.endTransaction();
            delay(10);

        }
        
        TemporaryBuff[NoCalibrate] = 0;
    14d0:	ed02 7a03 	vstr	s14, [r2, #-12]

        for(int i = 0;i < 3; i ++){

                //Linearity[i] = 16384.0f/(Ranges[0]*MaxValue);
         
            if(i == NoCalibrate){
    14d4:	4598      	cmp	r8, r3
    14d6:	d00d      	beq.n	14f4 <IMU9250::calibrateSensor(SensorGatParam, int)+0x11c>

            }

                //Linearity[i] = 16384.0f/(Ranges[0]*MaxValue);
       
            TemporaryBuff[NoCalibrate] += TemporaryBuff[i]/2;
    14d8:	ed95 7a00 	vldr	s14, [r5]
    14dc:	eee7 7a26 	vfma.f32	s15, s14, s13
    14e0:	ed41 7a03 	vstr	s15, [r1, #-12]
            Offsets[i] = (short)TemporaryBuff[i];
    14e4:	ed95 7a00 	vldr	s14, [r5]
    14e8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    14ec:	ee17 2a10 	vmov	r2, s14
    14f0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        }
        
        TemporaryBuff[NoCalibrate] = 0;
        //Linearity[NoCalibrate] = 16384.0f/(Ranges[0]*MaxValue);

        for(int i = 0;i < 3; i ++){
    14f4:	3301      	adds	r3, #1
    14f6:	3504      	adds	r5, #4
    14f8:	2b03      	cmp	r3, #3
    14fa:	d1eb      	bne.n	14d4 <IMU9250::calibrateSensor(SensorGatParam, int)+0xfc>
            TemporaryBuff[NoCalibrate] += TemporaryBuff[i]/2;
            Offsets[i] = (short)TemporaryBuff[i];

        }
        
        Offsets[NoCalibrate] = (short)(TemporaryBuff[NoCalibrate]);
    14fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1500:	ee17 3a90 	vmov	r3, s15
    1504:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    1508:	e7bf      	b.n	148a <IMU9250::calibrateSensor(SensorGatParam, int)+0xb2>
    150a:	2400      	movs	r4, #0
        
        SensorGatParam Sns;        
        
        for(int i = 0;i < 4;i ++){
            
            Sns.SensorID = i;
    150c:	f88d 400f 	strb.w	r4, [sp, #15]
    }
    else if(SensorToCalibrate.SensorID == 4){
        
        SensorGatParam Sns;        
        
        for(int i = 0;i < 4;i ++){
    1510:	3401      	adds	r4, #1
            
            Sns.SensorID = i;
            calibrateSensor(Sns,NumberOfCalibrationIteration);
    1512:	9803      	ldr	r0, [sp, #12]
    1514:	4649      	mov	r1, r9
    1516:	f7ff ff5f 	bl	13d8 <IMU9250::calibrateSensor(SensorGatParam, int)>
    }
    else if(SensorToCalibrate.SensorID == 4){
        
        SensorGatParam Sns;        
        
        for(int i = 0;i < 4;i ++){
    151a:	2c04      	cmp	r4, #4
    151c:	d1f6      	bne.n	150c <IMU9250::calibrateSensor(SensorGatParam, int)+0x134>
    151e:	e7b4      	b.n	148a <IMU9250::calibrateSensor(SensorGatParam, int)+0xb2>



    }
    else if(SensorToCalibrate.SensorID == 2){
        float TemporaryBuff[3] = {};
    1520:	2300      	movs	r3, #0
    1522:	ad03      	add	r5, sp, #12
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    1524:	4299      	cmp	r1, r3



    }
    else if(SensorToCalibrate.SensorID == 2){
        float TemporaryBuff[3] = {};
    1526:	606b      	str	r3, [r5, #4]
    1528:	9303      	str	r3, [sp, #12]
    152a:	60ab      	str	r3, [r5, #8]
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    152c:	ddad      	ble.n	148a <IMU9250::calibrateSensor(SensorGatParam, int)+0xb2>
    152e:	ee07 1a90 	vmov	s15, r1
    1532:	4698      	mov	r8, r3
    1534:	ed9f 8a71 	vldr	s16, [pc, #452]	; 16fc <IMU9250::calibrateSensor(SensorGatParam, int)+0x324>
    1538:	f10d 0b18 	add.w	fp, sp, #24
    153c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    1540:	4f6f      	ldr	r7, [pc, #444]	; (1700 <IMU9250::calibrateSensor(SensorGatParam, int)+0x328>)
            
            IMUSPI.beginTransaction();
    1542:	4870      	ldr	r0, [pc, #448]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    1544:	462e      	mov	r6, r5
    1546:	f7ff f973 	bl	830 <SPIDev::beginTransaction()>
            uint8_t buff[2];
            
            for(int j = 0;j < 3;j ++){
        
                buff[0] = IMUSPI.getRegister(GYRO_OUT);    
    154a:	2143      	movs	r1, #67	; 0x43
    154c:	486d      	ldr	r0, [pc, #436]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    154e:	f7ff fb23 	bl	b98 <SPIDev::getRegister(unsigned char)>
    1552:	4604      	mov	r4, r0
                buff[1] = IMUSPI.getRegister(0x00);
    1554:	2100      	movs	r1, #0
    1556:	486b      	ldr	r0, [pc, #428]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    1558:	f7ff fb1e 	bl	b98 <SPIDev::getRegister(unsigned char)>
                
                TemporaryBuff[j] +=  -((short)((buff[0] << 8) | (buff[1])))/(float)NumberOfCalibrationIteration;
    155c:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
                //(float)(((short)((buff[0] << 8) | (buff[1])))/NumberOfCalibrationIteration);
                delay(1);
    1560:	2001      	movs	r0, #1
            for(int j = 0;j < 3;j ++){
        
                buff[0] = IMUSPI.getRegister(GYRO_OUT);    
                buff[1] = IMUSPI.getRegister(0x00);
                
                TemporaryBuff[j] +=  -((short)((buff[0] << 8) | (buff[1])))/(float)NumberOfCalibrationIteration;
    1562:	b224      	sxth	r4, r4
    1564:	4264      	negs	r4, r4
    1566:	ee07 4a90 	vmov	s15, r4
    156a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    156e:	ee87 7a89 	vdiv.f32	s14, s15, s18
    1572:	ee77 7a08 	vadd.f32	s15, s14, s16
    1576:	ece6 7a01 	vstmia	r6!, {s15}
                //(float)(((short)((buff[0] << 8) | (buff[1])))/NumberOfCalibrationIteration);
                delay(1);
    157a:	f003 fa1b 	bl	49b4 <delay>
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
            
            IMUSPI.beginTransaction();
            uint8_t buff[2];
            
            for(int j = 0;j < 3;j ++){
    157e:	45b3      	cmp	fp, r6
    1580:	d002      	beq.n	1588 <IMU9250::calibrateSensor(SensorGatParam, int)+0x1b0>
    1582:	ed96 8a00 	vldr	s16, [r6]
    1586:	e7e0      	b.n	154a <IMU9250::calibrateSensor(SensorGatParam, int)+0x172>
                TemporaryBuff[j] +=  -((short)((buff[0] << 8) | (buff[1])))/(float)NumberOfCalibrationIteration;
                //(float)(((short)((buff[0] << 8) | (buff[1])))/NumberOfCalibrationIteration);
                delay(1);
            }
        
            IMUSPI.endTransaction();
    1588:	485e      	ldr	r0, [pc, #376]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)


    }
    else if(SensorToCalibrate.SensorID == 2){
        float TemporaryBuff[3] = {};
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    158a:	f108 0801 	add.w	r8, r8, #1
                TemporaryBuff[j] +=  -((short)((buff[0] << 8) | (buff[1])))/(float)NumberOfCalibrationIteration;
                //(float)(((short)((buff[0] << 8) | (buff[1])))/NumberOfCalibrationIteration);
                delay(1);
            }
        
            IMUSPI.endTransaction();
    158e:	f7ff fab5 	bl	afc <SPIDev::endTransaction()>
            delay(10);
    1592:	200a      	movs	r0, #10
    1594:	f003 fa0e 	bl	49b4 <delay>
            for(int i = 0;i < 3;i ++){

                Offsets[i+4] = (short)TemporaryBuff[i];
    1598:	ed9d 8a03 	vldr	s16, [sp, #12]
    159c:	ed9d 7a04 	vldr	s14, [sp, #16]


    }
    else if(SensorToCalibrate.SensorID == 2){
        float TemporaryBuff[3] = {};
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    15a0:	45c1      	cmp	r9, r8
        
            IMUSPI.endTransaction();
            delay(10);
            for(int i = 0;i < 3;i ++){

                Offsets[i+4] = (short)TemporaryBuff[i];
    15a2:	eddd 7a05 	vldr	s15, [sp, #20]
    15a6:	eefd 6ac8 	vcvt.s32.f32	s13, s16
    15aa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    15ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    15b2:	ee16 1a90 	vmov	r1, s13
    15b6:	ee17 2a10 	vmov	r2, s14
    15ba:	ee17 3a90 	vmov	r3, s15
    15be:	8139      	strh	r1, [r7, #8]
    15c0:	817a      	strh	r2, [r7, #10]
    15c2:	81bb      	strh	r3, [r7, #12]


    }
    else if(SensorToCalibrate.SensorID == 2){
        float TemporaryBuff[3] = {};
        for(int i = 0;i < NumberOfCalibrationIteration;i ++){
    15c4:	d1bd      	bne.n	1542 <IMU9250::calibrateSensor(SensorGatParam, int)+0x16a>
    15c6:	e760      	b.n	148a <IMU9250::calibrateSensor(SensorGatParam, int)+0xb2>
    15c8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 172c <IMU9250::calibrateSensor(SensorGatParam, int)+0x354>
            {-32768,-32768,-32768},
            {32765,32765,32765}

        };
        uint8_t buff[2];
        unsigned long TimeElapsed = CompassCalibrationTime + millis();
    15cc:	f64e 2860 	movw	r8, #60000	; 0xea60
    else if(SensorToCalibrate.SensorID == 3){
        short Extremums[2][3] = {
            {-32768,-32768,-32768},
            {32765,32765,32765}

        };
    15d0:	4a4e      	ldr	r2, [pc, #312]	; (170c <IMU9250::calibrateSensor(SensorGatParam, int)+0x334>)
    15d2:	ad03      	add	r5, sp, #12
    15d4:	f8d9 1000 	ldr.w	r1, [r9]
    15d8:	f10d 0612 	add.w	r6, sp, #18
    15dc:	6810      	ldr	r0, [r2, #0]
    15de:	462b      	mov	r3, r5
        uint8_t buff[2];
        unsigned long TimeElapsed = CompassCalibrationTime + millis();
    15e0:	4488      	add	r8, r1
    else if(SensorToCalibrate.SensorID == 3){
        short Extremums[2][3] = {
            {-32768,-32768,-32768},
            {32765,32765,32765}

        };
    15e2:	6851      	ldr	r1, [r2, #4]
    15e4:	6892      	ldr	r2, [r2, #8]
    15e6:	c307      	stmia	r3!, {r0, r1, r2}
        uint8_t buff[2];
        unsigned long TimeElapsed = CompassCalibrationTime + millis();
        float moyenne = 0;
        short Measuredvalue;
        do{
            IMUSPI.beginTransaction();
    15e8:	4846      	ldr	r0, [pc, #280]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    15ea:	462f      	mov	r7, r5
    15ec:	46ab      	mov	fp, r5
    15ee:	f7ff f91f 	bl	830 <SPIDev::beginTransaction()>
            for(int i = 0;i < 3;i ++){
                buff[1] = IMUSPI.getRegister(COMPAS_OUT);    
    15f2:	2149      	movs	r1, #73	; 0x49
    15f4:	4843      	ldr	r0, [pc, #268]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    15f6:	f7ff facf 	bl	b98 <SPIDev::getRegister(unsigned char)>
    15fa:	4604      	mov	r4, r0
                buff[0] = IMUSPI.getRegister(0x00);
    15fc:	2100      	movs	r1, #0
    15fe:	4841      	ldr	r0, [pc, #260]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    1600:	f7ff faca 	bl	b98 <SPIDev::getRegister(unsigned char)>
                Measuredvalue = (short)((buff[0] << 8) | (buff[1]));
                if(Measuredvalue > Extremums[0][i]){
    1604:	f93b 3b02 	ldrsh.w	r3, [fp], #2
        do{
            IMUSPI.beginTransaction();
            for(int i = 0;i < 3;i ++){
                buff[1] = IMUSPI.getRegister(COMPAS_OUT);    
                buff[0] = IMUSPI.getRegister(0x00);
                Measuredvalue = (short)((buff[0] << 8) | (buff[1]));
    1608:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    160c:	b200      	sxth	r0, r0
                if(Measuredvalue > Extremums[0][i]){
    160e:	4298      	cmp	r0, r3

                    Extremums[0][i] = Measuredvalue;

                }
                if(Measuredvalue < Extremums[1][i]){
    1610:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
                buff[1] = IMUSPI.getRegister(COMPAS_OUT);    
                buff[0] = IMUSPI.getRegister(0x00);
                Measuredvalue = (short)((buff[0] << 8) | (buff[1]));
                if(Measuredvalue > Extremums[0][i]){

                    Extremums[0][i] = Measuredvalue;
    1614:	bfc8      	it	gt
    1616:	f82b 0c02 	strhgt.w	r0, [fp, #-2]

                }
                if(Measuredvalue < Extremums[1][i]){
    161a:	4283      	cmp	r3, r0

                    Extremums[1][i] = Measuredvalue;
    161c:	bfc8      	it	gt
    161e:	f8ab 0004 	strhgt.w	r0, [fp, #4]
        unsigned long TimeElapsed = CompassCalibrationTime + millis();
        float moyenne = 0;
        short Measuredvalue;
        do{
            IMUSPI.beginTransaction();
            for(int i = 0;i < 3;i ++){
    1622:	455e      	cmp	r6, fp
    1624:	d1e5      	bne.n	15f2 <IMU9250::calibrateSensor(SensorGatParam, int)+0x21a>
                    Extremums[1][i] = Measuredvalue;

                }

            }
            IMUSPI.endTransaction();
    1626:	4837      	ldr	r0, [pc, #220]	; (1704 <IMU9250::calibrateSensor(SensorGatParam, int)+0x32c>)
    1628:	f7ff fa68 	bl	afc <SPIDev::endTransaction()>
           delay(20); 
    162c:	2014      	movs	r0, #20
    162e:	f003 f9c1 	bl	49b4 <delay>
    1632:	f8d9 3000 	ldr.w	r3, [r9]
        };
        uint8_t buff[2];
        unsigned long TimeElapsed = CompassCalibrationTime + millis();
        float moyenne = 0;
        short Measuredvalue;
        do{
    1636:	4543      	cmp	r3, r8
    1638:	d3d6      	bcc.n	15e8 <IMU9250::calibrateSensor(SensorGatParam, int)+0x210>
    163a:	2105      	movs	r1, #5
    163c:	4834      	ldr	r0, [pc, #208]	; (1710 <IMU9250::calibrateSensor(SensorGatParam, int)+0x338>)
    163e:	f004 fad5 	bl	5bec <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1642:	4834      	ldr	r0, [pc, #208]	; (1714 <IMU9250::calibrateSensor(SensorGatParam, int)+0x33c>)
    1644:	462c      	mov	r4, r5
    1646:	f004 ffed 	bl	6624 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    164a:	f934 1b02 	ldrsh.w	r1, [r4], #2
    164e:	4831      	ldr	r0, [pc, #196]	; (1714 <IMU9250::calibrateSensor(SensorGatParam, int)+0x33c>)
    1650:	f005 f838 	bl	66c4 <Print::print(long)>
    1654:	2101      	movs	r1, #1
    1656:	4830      	ldr	r0, [pc, #192]	; (1718 <IMU9250::calibrateSensor(SensorGatParam, int)+0x340>)
    1658:	f004 fac8 	bl	5bec <usb_serial_write>
            IMUSPI.endTransaction();
           delay(20); 
        }
        while(TimeElapsed > millis());
        Serial.println("max: ");
        for(int i = 0;i < 3;i ++){
    165c:	42a6      	cmp	r6, r4
    165e:	d1f4      	bne.n	164a <IMU9250::calibrateSensor(SensorGatParam, int)+0x272>
    1660:	2105      	movs	r1, #5
    1662:	482e      	ldr	r0, [pc, #184]	; (171c <IMU9250::calibrateSensor(SensorGatParam, int)+0x344>)
    1664:	f004 fac2 	bl	5bec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1668:	482a      	ldr	r0, [pc, #168]	; (1714 <IMU9250::calibrateSensor(SensorGatParam, int)+0x33c>)
    166a:	ac04      	add	r4, sp, #16
    166c:	f10d 0816 	add.w	r8, sp, #22
    1670:	f004 ffd8 	bl	6624 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1674:	f934 1f02 	ldrsh.w	r1, [r4, #2]!
    1678:	4826      	ldr	r0, [pc, #152]	; (1714 <IMU9250::calibrateSensor(SensorGatParam, int)+0x33c>)
    167a:	f005 f823 	bl	66c4 <Print::print(long)>
    167e:	2101      	movs	r1, #1
    1680:	4825      	ldr	r0, [pc, #148]	; (1718 <IMU9250::calibrateSensor(SensorGatParam, int)+0x340>)
    1682:	f004 fab3 	bl	5bec <usb_serial_write>
            Serial.print(" ");

        }

        Serial.println("min: ");
        for(int i = 0;i < 3;i ++){
    1686:	45a0      	cmp	r8, r4
    1688:	d1f4      	bne.n	1674 <IMU9250::calibrateSensor(SensorGatParam, int)+0x29c>
    168a:	4825      	ldr	r0, [pc, #148]	; (1720 <IMU9250::calibrateSensor(SensorGatParam, int)+0x348>)
    168c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 16fc <IMU9250::calibrateSensor(SensorGatParam, int)+0x324>

        }
        for(int i = 0;i < 3;i ++){

            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
            moyenne += (float)(abs(Extremums[0][i]-Extremums[1][i])/3);
    1690:	4c24      	ldr	r4, [pc, #144]	; (1724 <IMU9250::calibrateSensor(SensorGatParam, int)+0x34c>)
            Serial.print(" ");

        }
        for(int i = 0;i < 3;i ++){

            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
    1692:	f935 3b02 	ldrsh.w	r3, [r5], #2
    1696:	3002      	adds	r0, #2
    1698:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
            moyenne += (float)(abs(Extremums[0][i]-Extremums[1][i])/3);
    169c:	1a5a      	subs	r2, r3, r1
            Serial.print(" ");

        }
        for(int i = 0;i < 3;i ++){

            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
    169e:	185b      	adds	r3, r3, r1
            moyenne += (float)(abs(Extremums[0][i]-Extremums[1][i])/3);
    16a0:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
            Serial.print(" ");

        }
        for(int i = 0;i < 3;i ++){

            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
    16a4:	bf48      	it	mi
    16a6:	3301      	addmi	r3, #1

            Serial.print(Extremums[1][i]);
            Serial.print(" ");

        }
        for(int i = 0;i < 3;i ++){
    16a8:	42ae      	cmp	r6, r5

            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
            moyenne += (float)(abs(Extremums[0][i]-Extremums[1][i])/3);
    16aa:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
            Serial.print(" ");

        }
        for(int i = 0;i < 3;i ++){

            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
    16ae:	ea4f 0363 	mov.w	r3, r3, asr #1
            moyenne += (float)(abs(Extremums[0][i]-Extremums[1][i])/3);
    16b2:	fb84 e201 	smull	lr, r2, r4, r1
            Serial.print(" ");

        }
        for(int i = 0;i < 3;i ++){

            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
    16b6:	f1c3 0300 	rsb	r3, r3, #0
            moyenne += (float)(abs(Extremums[0][i]-Extremums[1][i])/3);
    16ba:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
            Serial.print(" ");

        }
        for(int i = 0;i < 3;i ++){

            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
    16be:	8003      	strh	r3, [r0, #0]
            moyenne += (float)(abs(Extremums[0][i]-Extremums[1][i])/3);
    16c0:	ee07 2a90 	vmov	s15, r2
    16c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    16c8:	ee37 7a27 	vadd.f32	s14, s14, s15

            Serial.print(Extremums[1][i]);
            Serial.print(" ");

        }
        for(int i = 0;i < 3;i ++){
    16cc:	d1e1      	bne.n	1692 <IMU9250::calibrateSensor(SensorGatParam, int)+0x2ba>
    16ce:	4a16      	ldr	r2, [pc, #88]	; (1728 <IMU9250::calibrateSensor(SensorGatParam, int)+0x350>)
    16d0:	f102 000c 	add.w	r0, r2, #12

        }
        
        for(int i = 0;i < 3;i ++){

            Linearity[i+7] = moyenne/(float)abs(Extremums[0][i]-Extremums[1][i]);
    16d4:	f937 3b02 	ldrsh.w	r3, [r7], #2
    16d8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    16dc:	1a5b      	subs	r3, r3, r1
    16de:	2b00      	cmp	r3, #0
    16e0:	bfb8      	it	lt
    16e2:	425b      	neglt	r3, r3
    16e4:	ee07 3a90 	vmov	s15, r3
    16e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    16ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
    16f0:	ece2 6a01 	vstmia	r2!, {s13}
            Offsets[i+7] = -((Extremums[0][i]+Extremums[1][i])/2);
            moyenne += (float)(abs(Extremums[0][i]-Extremums[1][i])/3);

        }
        
        for(int i = 0;i < 3;i ++){
    16f4:	4282      	cmp	r2, r0
    16f6:	d1ed      	bne.n	16d4 <IMU9250::calibrateSensor(SensorGatParam, int)+0x2fc>
    16f8:	e6c7      	b.n	148a <IMU9250::calibrateSensor(SensorGatParam, int)+0xb2>
    16fa:	bf00      	nop
    16fc:	00000000 	.word	0x00000000
    1700:	20001dd0 	.word	0x20001dd0
    1704:	20001e50 	.word	0x20001e50
    1708:	20001e5c 	.word	0x20001e5c
    170c:	200003a8 	.word	0x200003a8
    1710:	200003b8 	.word	0x200003b8
    1714:	200010e4 	.word	0x200010e4
    1718:	2000039c 	.word	0x2000039c
    171c:	200003c0 	.word	0x200003c0
    1720:	20001ddc 	.word	0x20001ddc
    1724:	55555556 	.word	0x55555556
    1728:	20001e7c 	.word	0x20001e7c
    172c:	200021a0 	.word	0x200021a0

00001730 <IMU9250::readSensor(SensorGatParam)>:


}


void IMU9250::readSensor(SensorGatParam Param){
    1730:	f3c0 2307 	ubfx	r3, r0, #8, #8
    1734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1738:	b085      	sub	sp, #20
    173a:	461c      	mov	r4, r3
    173c:	f3c0 4a07 	ubfx	sl, r0, #16, #8
    1740:	fa5f f980 	uxtb.w	r9, r0
    1744:	9003      	str	r0, [sp, #12]
    uint8_t PotentialErrorCount = 0;
    IMUSPI.beginTransaction();
    1746:	483d      	ldr	r0, [pc, #244]	; (183c <IMU9250::readSensor(SensorGatParam)+0x10c>)
    1748:	9302      	str	r3, [sp, #8]
    174a:	f7ff f871 	bl	830 <SPIDev::beginTransaction()>
    uint8_t buff[2];
    
    for(int i = Param.BufferStartPosition;i < Param.BufferStopPosition;i ++){
    174e:	4554      	cmp	r4, sl
    1750:	da71      	bge.n	1836 <IMU9250::readSensor(SensorGatParam)+0x106>
    1752:	b222      	sxth	r2, r4
    1754:	493a      	ldr	r1, [pc, #232]	; (1840 <IMU9250::readSensor(SensorGatParam)+0x110>)
    1756:	4b3b      	ldr	r3, [pc, #236]	; (1844 <IMU9250::readSensor(SensorGatParam)+0x114>)
    1758:	4625      	mov	r5, r4
    175a:	eb01 0842 	add.w	r8, r1, r2, lsl #1
    175e:	4f3a      	ldr	r7, [pc, #232]	; (1848 <IMU9250::readSensor(SensorGatParam)+0x118>)
    1760:	0092      	lsls	r2, r2, #2
    1762:	2100      	movs	r1, #0
    1764:	f1a8 0802 	sub.w	r8, r8, #2
    1768:	4e38      	ldr	r6, [pc, #224]	; (184c <IMU9250::readSensor(SensorGatParam)+0x11c>)
    176a:	9101      	str	r1, [sp, #4]
    176c:	eb03 0b02 	add.w	fp, r3, r2
    1770:	4417      	add	r7, r2
    1772:	e036      	b.n	17e2 <IMU9250::readSensor(SensorGatParam)+0xb2>
        if(i > 6){

            buff[1] = IMUSPI.getRegister(Param.StartByte);    
    1774:	f7ff fa10 	bl	b98 <SPIDev::getRegister(unsigned char)>
            buff[0] = IMUSPI.getRegister(0x00);
    1778:	2100      	movs	r1, #0
    uint8_t buff[2];
    
    for(int i = Param.BufferStartPosition;i < Param.BufferStopPosition;i ++){
        if(i > 6){

            buff[1] = IMUSPI.getRegister(Param.StartByte);    
    177a:	4604      	mov	r4, r0
            buff[0] = IMUSPI.getRegister(0x00);
    177c:	482f      	ldr	r0, [pc, #188]	; (183c <IMU9250::readSensor(SensorGatParam)+0x10c>)
    177e:	f7ff fa0b 	bl	b98 <SPIDev::getRegister(unsigned char)>
    1782:	4602      	mov	r2, r0

            buff[0] = IMUSPI.getRegister(Param.StartByte);    
            buff[1] = IMUSPI.getRegister(0x00);

        }
        short Out = ((short)(buff[0] << 8) | (buff[1]));
    1784:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
        OutputValue.OutputShort[i] = (short)((Out+(short)Offsets[i])*Linearity[i]);
    1788:	f938 ef02 	ldrsh.w	lr, [r8, #2]!
    178c:	ecfb 7a01 	vldmia	fp!, {s15}
    1790:	f105 0114 	add.w	r1, r5, #20

            buff[0] = IMUSPI.getRegister(Param.StartByte);    
            buff[1] = IMUSPI.getRegister(0x00);

        }
        short Out = ((short)(buff[0] << 8) | (buff[1]));
    1794:	b224      	sxth	r4, r4
        OutputValue.OutputShort[i] = (short)((Out+(short)Offsets[i])*Linearity[i]);
        //OutputValue.OutputShort[i] = ((((short)(((buff[0] << 8) | (buff[1])))+Offsets[i]))*Linearity[i]);
        OutputValue.OutputFloat[i] =  OutputValue.OutputShort[i]*ConversionValue[i];
    1796:	ecf7 6a01 	vldmia	r7!, {s13}
    179a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
    179e:	3501      	adds	r5, #1
            buff[0] = IMUSPI.getRegister(Param.StartByte);    
            buff[1] = IMUSPI.getRegister(0x00);

        }
        short Out = ((short)(buff[0] << 8) | (buff[1]));
        OutputValue.OutputShort[i] = (short)((Out+(short)Offsets[i])*Linearity[i]);
    17a0:	eb0e 0304 	add.w	r3, lr, r4
        //OutputValue.OutputShort[i] = ((((short)(((buff[0] << 8) | (buff[1])))+Offsets[i]))*Linearity[i]);
        OutputValue.OutputFloat[i] =  OutputValue.OutputShort[i]*ConversionValue[i];
        
        
        if(Out == -1 || Out == 0){
    17a4:	3401      	adds	r4, #1
            buff[0] = IMUSPI.getRegister(Param.StartByte);    
            buff[1] = IMUSPI.getRegister(0x00);

        }
        short Out = ((short)(buff[0] << 8) | (buff[1]));
        OutputValue.OutputShort[i] = (short)((Out+(short)Offsets[i])*Linearity[i]);
    17a6:	ee07 3a10 	vmov	s14, r3
        //OutputValue.OutputShort[i] = ((((short)(((buff[0] << 8) | (buff[1])))+Offsets[i]))*Linearity[i]);
        OutputValue.OutputFloat[i] =  OutputValue.OutputShort[i]*ConversionValue[i];
        
        
        if(Out == -1 || Out == 0){
    17aa:	b2a4      	uxth	r4, r4
            buff[0] = IMUSPI.getRegister(Param.StartByte);    
            buff[1] = IMUSPI.getRegister(0x00);

        }
        short Out = ((short)(buff[0] << 8) | (buff[1]));
        OutputValue.OutputShort[i] = (short)((Out+(short)Offsets[i])*Linearity[i]);
    17ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        //OutputValue.OutputShort[i] = ((((short)(((buff[0] << 8) | (buff[1])))+Offsets[i]))*Linearity[i]);
        OutputValue.OutputFloat[i] =  OutputValue.OutputShort[i]*ConversionValue[i];
        
        
        if(Out == -1 || Out == 0){
    17b0:	2c01      	cmp	r4, #1
            buff[0] = IMUSPI.getRegister(Param.StartByte);    
            buff[1] = IMUSPI.getRegister(0x00);

        }
        short Out = ((short)(buff[0] << 8) | (buff[1]));
        OutputValue.OutputShort[i] = (short)((Out+(short)Offsets[i])*Linearity[i]);
    17b2:	ee27 7a27 	vmul.f32	s14, s14, s15
    17b6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    17ba:	edcd 7a00 	vstr	s15, [sp]
    17be:	f9bd 2000 	ldrsh.w	r2, [sp]
    17c2:	f826 2011 	strh.w	r2, [r6, r1, lsl #1]
        //OutputValue.OutputShort[i] = ((((short)(((buff[0] << 8) | (buff[1])))+Offsets[i]))*Linearity[i]);
        OutputValue.OutputFloat[i] =  OutputValue.OutputShort[i]*ConversionValue[i];
    17c6:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
    17ca:	b212      	sxth	r2, r2
    17cc:	ee07 2a90 	vmov	s15, r2
    17d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    17d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    17d8:	edc0 7a00 	vstr	s15, [r0]
        
        
        if(Out == -1 || Out == 0){
    17dc:	d90f      	bls.n	17fe <IMU9250::readSensor(SensorGatParam)+0xce>
void IMU9250::readSensor(SensorGatParam Param){
    uint8_t PotentialErrorCount = 0;
    IMUSPI.beginTransaction();
    uint8_t buff[2];
    
    for(int i = Param.BufferStartPosition;i < Param.BufferStopPosition;i ++){
    17de:	4555      	cmp	r5, sl
    17e0:	d014      	beq.n	180c <IMU9250::readSensor(SensorGatParam)+0xdc>
        if(i > 6){
    17e2:	2d06      	cmp	r5, #6
            buff[0] = IMUSPI.getRegister(0x00);


        }else{

            buff[0] = IMUSPI.getRegister(Param.StartByte);    
    17e4:	4649      	mov	r1, r9
    17e6:	4815      	ldr	r0, [pc, #84]	; (183c <IMU9250::readSensor(SensorGatParam)+0x10c>)
    uint8_t PotentialErrorCount = 0;
    IMUSPI.beginTransaction();
    uint8_t buff[2];
    
    for(int i = Param.BufferStartPosition;i < Param.BufferStopPosition;i ++){
        if(i > 6){
    17e8:	dcc4      	bgt.n	1774 <IMU9250::readSensor(SensorGatParam)+0x44>
            buff[0] = IMUSPI.getRegister(0x00);


        }else{

            buff[0] = IMUSPI.getRegister(Param.StartByte);    
    17ea:	f7ff f9d5 	bl	b98 <SPIDev::getRegister(unsigned char)>
            buff[1] = IMUSPI.getRegister(0x00);
    17ee:	2100      	movs	r1, #0
            buff[0] = IMUSPI.getRegister(0x00);


        }else{

            buff[0] = IMUSPI.getRegister(Param.StartByte);    
    17f0:	9000      	str	r0, [sp, #0]
            buff[1] = IMUSPI.getRegister(0x00);
    17f2:	4812      	ldr	r0, [pc, #72]	; (183c <IMU9250::readSensor(SensorGatParam)+0x10c>)
    17f4:	f7ff f9d0 	bl	b98 <SPIDev::getRegister(unsigned char)>
    17f8:	9a00      	ldr	r2, [sp, #0]
    17fa:	4604      	mov	r4, r0
    17fc:	e7c2      	b.n	1784 <IMU9250::readSensor(SensorGatParam)+0x54>
        OutputValue.OutputFloat[i] =  OutputValue.OutputShort[i]*ConversionValue[i];
        
        
        if(Out == -1 || Out == 0){

            PotentialErrorCount ++;
    17fe:	9b01      	ldr	r3, [sp, #4]
void IMU9250::readSensor(SensorGatParam Param){
    uint8_t PotentialErrorCount = 0;
    IMUSPI.beginTransaction();
    uint8_t buff[2];
    
    for(int i = Param.BufferStartPosition;i < Param.BufferStopPosition;i ++){
    1800:	4555      	cmp	r5, sl
        OutputValue.OutputFloat[i] =  OutputValue.OutputShort[i]*ConversionValue[i];
        
        
        if(Out == -1 || Out == 0){

            PotentialErrorCount ++;
    1802:	f103 0301 	add.w	r3, r3, #1
    1806:	b2db      	uxtb	r3, r3
    1808:	9301      	str	r3, [sp, #4]
void IMU9250::readSensor(SensorGatParam Param){
    uint8_t PotentialErrorCount = 0;
    IMUSPI.beginTransaction();
    uint8_t buff[2];
    
    for(int i = Param.BufferStartPosition;i < Param.BufferStopPosition;i ++){
    180a:	d1ea      	bne.n	17e2 <IMU9250::readSensor(SensorGatParam)+0xb2>
    180c:	f8dd b004 	ldr.w	fp, [sp, #4]

        }

    }
    
    IMUSPI.endTransaction();
    1810:	480a      	ldr	r0, [pc, #40]	; (183c <IMU9250::readSensor(SensorGatParam)+0x10c>)
    1812:	f7ff f973 	bl	afc <SPIDev::endTransaction()>

    if(PotentialErrorCount == (Param.BufferStopPosition-Param.BufferStartPosition)){
    1816:	9b02      	ldr	r3, [sp, #8]
    1818:	ebc3 0a0a 	rsb	sl, r3, sl
    181c:	45da      	cmp	sl, fp
    181e:	d002      	beq.n	1826 <IMU9250::readSensor(SensorGatParam)+0xf6>

        FIFORecordPosition ++;
    
    }*/

}
    1820:	b005      	add	sp, #20
    1822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    
    IMUSPI.endTransaction();

    if(PotentialErrorCount == (Param.BufferStopPosition-Param.BufferStartPosition)){

        ExceptionHandler.Error(0x05,SPIERROR);
    1826:	4b0a      	ldr	r3, [pc, #40]	; (1850 <IMU9250::readSensor(SensorGatParam)+0x120>)
    1828:	2005      	movs	r0, #5
    182a:	7819      	ldrb	r1, [r3, #0]

        FIFORecordPosition ++;
    
    }*/

}
    182c:	b005      	add	sp, #20
    182e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    IMUSPI.endTransaction();

    if(PotentialErrorCount == (Param.BufferStopPosition-Param.BufferStartPosition)){

        ExceptionHandler.Error(0x05,SPIERROR);
    1832:	f7fe bdc1 	b.w	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>
void IMU9250::readSensor(SensorGatParam Param){
    uint8_t PotentialErrorCount = 0;
    IMUSPI.beginTransaction();
    uint8_t buff[2];
    
    for(int i = Param.BufferStartPosition;i < Param.BufferStopPosition;i ++){
    1836:	f04f 0b00 	mov.w	fp, #0
    183a:	e7e9      	b.n	1810 <IMU9250::readSensor(SensorGatParam)+0xe0>
    183c:	20001e50 	.word	0x20001e50
    1840:	20001dd0 	.word	0x20001dd0
    1844:	20001e60 	.word	0x20001e60
    1848:	20001e28 	.word	0x20001e28
    184c:	20001de4 	.word	0x20001de4
    1850:	200003b4 	.word	0x200003b4

00001854 <IMU9250::readAK8963(unsigned char)>:
    
    }*/

}

uint8_t IMU9250::readAK8963(uint8_t Register){
    1854:	b538      	push	{r3, r4, r5, lr}
delay(1);
IMUSPI.beginTransaction();
    1856:	4c1f      	ldr	r4, [pc, #124]	; (18d4 <IMU9250::readAK8963(unsigned char)+0x80>)
    
    }*/

}

uint8_t IMU9250::readAK8963(uint8_t Register){
    1858:	4605      	mov	r5, r0
delay(1);
    185a:	2001      	movs	r0, #1
    185c:	f003 f8aa 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    1860:	4620      	mov	r0, r4
    1862:	f7fe ffe5 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(I2C_SLV0_ADDRSEL,AK8963_ADDR | 0x80);
    1866:	228c      	movs	r2, #140	; 0x8c
    1868:	2125      	movs	r1, #37	; 0x25
    186a:	4620      	mov	r0, r4
    186c:	f7ff fa02 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    1870:	4620      	mov	r0, r4
    1872:	f7ff f943 	bl	afc <SPIDev::endTransaction()>
delay(1);
    1876:	2001      	movs	r0, #1
    1878:	f003 f89c 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    187c:	4620      	mov	r0, r4
    187e:	f7fe ffd7 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(SLV0_REGISTERTOOP,Register);
    1882:	462a      	mov	r2, r5
    1884:	2126      	movs	r1, #38	; 0x26
    1886:	4620      	mov	r0, r4
    1888:	f7ff f9f4 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    188c:	4620      	mov	r0, r4
    188e:	f7ff f935 	bl	afc <SPIDev::endTransaction()>
delay(1);
    1892:	2001      	movs	r0, #1
    1894:	f003 f88e 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    1898:	4620      	mov	r0, r4
    189a:	f7fe ffc9 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(SLV0_CTRL,SLV_ENABLE | 0x01);
    189e:	2281      	movs	r2, #129	; 0x81
    18a0:	2127      	movs	r1, #39	; 0x27
    18a2:	4620      	mov	r0, r4
    18a4:	f7ff f9e6 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    18a8:	4620      	mov	r0, r4
    18aa:	f7ff f927 	bl	afc <SPIDev::endTransaction()>
delay(1);
    18ae:	2001      	movs	r0, #1
    18b0:	f003 f880 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    18b4:	4620      	mov	r0, r4
    18b6:	f7fe ffbb 	bl	830 <SPIDev::beginTransaction()>
uint8_t returnValue = IMUSPI.getRegister(0x49);
    18ba:	2149      	movs	r1, #73	; 0x49
    18bc:	4620      	mov	r0, r4
    18be:	f7ff f96b 	bl	b98 <SPIDev::getRegister(unsigned char)>
    18c2:	4605      	mov	r5, r0
IMUSPI.endTransaction();
    18c4:	4620      	mov	r0, r4
    18c6:	f7ff f919 	bl	afc <SPIDev::endTransaction()>
delay(1);
    18ca:	2001      	movs	r0, #1
    18cc:	f003 f872 	bl	49b4 <delay>

    return returnValue;
}
    18d0:	4628      	mov	r0, r5
    18d2:	bd38      	pop	{r3, r4, r5, pc}
    18d4:	20001e50 	.word	0x20001e50

000018d8 <IMU9250::writeAK8963(unsigned char, unsigned char)>:

void IMU9250::writeAK8963(uint8_t Register,uint8_t Message){
    18d8:	b570      	push	{r4, r5, r6, lr}

delay(1);
IMUSPI.beginTransaction();
    18da:	4c20      	ldr	r4, [pc, #128]	; (195c <IMU9250::writeAK8963(unsigned char, unsigned char)+0x84>)
delay(1);

    return returnValue;
}

void IMU9250::writeAK8963(uint8_t Register,uint8_t Message){
    18dc:	4606      	mov	r6, r0

delay(1);
    18de:	2001      	movs	r0, #1
delay(1);

    return returnValue;
}

void IMU9250::writeAK8963(uint8_t Register,uint8_t Message){
    18e0:	460d      	mov	r5, r1

delay(1);
    18e2:	f003 f867 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    18e6:	4620      	mov	r0, r4
    18e8:	f7fe ffa2 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(I2C_SLV0_ADDRSEL,AK8963_ADDR);
    18ec:	220c      	movs	r2, #12
    18ee:	2125      	movs	r1, #37	; 0x25
    18f0:	4620      	mov	r0, r4
    18f2:	f7ff f9bf 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    18f6:	4620      	mov	r0, r4
    18f8:	f7ff f900 	bl	afc <SPIDev::endTransaction()>
delay(1);
    18fc:	2001      	movs	r0, #1
    18fe:	f003 f859 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    1902:	4620      	mov	r0, r4
    1904:	f7fe ff94 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(SLV0_REGISTERTOOP,Register);
    1908:	4632      	mov	r2, r6
    190a:	2126      	movs	r1, #38	; 0x26
    190c:	4620      	mov	r0, r4
    190e:	f7ff f9b1 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    1912:	4620      	mov	r0, r4
    1914:	f7ff f8f2 	bl	afc <SPIDev::endTransaction()>
delay(1);
    1918:	2001      	movs	r0, #1
    191a:	f003 f84b 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    191e:	4620      	mov	r0, r4
    1920:	f7fe ff86 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(SLV0_DO,Message);
    1924:	462a      	mov	r2, r5
    1926:	2163      	movs	r1, #99	; 0x63
    1928:	4620      	mov	r0, r4
    192a:	f7ff f9a3 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    192e:	4620      	mov	r0, r4
    1930:	f7ff f8e4 	bl	afc <SPIDev::endTransaction()>
delay(1);
    1934:	2001      	movs	r0, #1
    1936:	f003 f83d 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    193a:	4620      	mov	r0, r4
    193c:	f7fe ff78 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(SLV0_CTRL,SLV_ENABLE | 0x01);
    1940:	4620      	mov	r0, r4
    1942:	2281      	movs	r2, #129	; 0x81
    1944:	2127      	movs	r1, #39	; 0x27
    1946:	f7ff f995 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    194a:	4620      	mov	r0, r4
    194c:	f7ff f8d6 	bl	afc <SPIDev::endTransaction()>
delay(1);
    1950:	2001      	movs	r0, #1
}
    1952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
IMUSPI.endTransaction();
delay(1);
IMUSPI.beginTransaction();
IMUSPI.setRegister(SLV0_CTRL,SLV_ENABLE | 0x01);
IMUSPI.endTransaction();
delay(1);
    1956:	f003 b82d 	b.w	49b4 <delay>
    195a:	bf00      	nop
    195c:	20001e50 	.word	0x20001e50

00001960 <IMU9250::setAK8963ToBrigeMode()>:
}

void IMU9250::setAK8963ToBrigeMode(){
    1960:	b510      	push	{r4, lr}
delay(1);
IMUSPI.beginTransaction();
    1962:	4c18      	ldr	r4, [pc, #96]	; (19c4 <IMU9250::setAK8963ToBrigeMode()+0x64>)
IMUSPI.endTransaction();
delay(1);
}

void IMU9250::setAK8963ToBrigeMode(){
delay(1);
    1964:	2001      	movs	r0, #1
    1966:	f003 f825 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    196a:	4620      	mov	r0, r4
    196c:	f7fe ff60 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(I2C_SLV0_ADDRSEL,AK8963_ADDR | 0x80);
    1970:	228c      	movs	r2, #140	; 0x8c
    1972:	2125      	movs	r1, #37	; 0x25
    1974:	4620      	mov	r0, r4
    1976:	f7ff f97d 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    197a:	4620      	mov	r0, r4
    197c:	f7ff f8be 	bl	afc <SPIDev::endTransaction()>
delay(1);
    1980:	2001      	movs	r0, #1
    1982:	f003 f817 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    1986:	4620      	mov	r0, r4
    1988:	f7fe ff52 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(SLV0_REGISTERTOOP,AK8963_MEASURE_OUT);
    198c:	2203      	movs	r2, #3
    198e:	2126      	movs	r1, #38	; 0x26
    1990:	4620      	mov	r0, r4
    1992:	f7ff f96f 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    1996:	4620      	mov	r0, r4
    1998:	f7ff f8b0 	bl	afc <SPIDev::endTransaction()>
delay(1);
    199c:	2001      	movs	r0, #1
    199e:	f003 f809 	bl	49b4 <delay>
IMUSPI.beginTransaction();
    19a2:	4620      	mov	r0, r4
    19a4:	f7fe ff44 	bl	830 <SPIDev::beginTransaction()>
IMUSPI.setRegister(SLV0_CTRL,SLV_ENABLE | 0x07);
    19a8:	4620      	mov	r0, r4
    19aa:	2287      	movs	r2, #135	; 0x87
    19ac:	2127      	movs	r1, #39	; 0x27
    19ae:	f7ff f961 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
IMUSPI.endTransaction();
    19b2:	4620      	mov	r0, r4
    19b4:	f7ff f8a2 	bl	afc <SPIDev::endTransaction()>
delay(1);
    19b8:	2001      	movs	r0, #1





}
    19ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
IMUSPI.endTransaction();
delay(1);
IMUSPI.beginTransaction();
IMUSPI.setRegister(SLV0_CTRL,SLV_ENABLE | 0x07);
IMUSPI.endTransaction();
delay(1);
    19be:	f002 bff9 	b.w	49b4 <delay>
    19c2:	bf00      	nop
    19c4:	20001e50 	.word	0x20001e50

000019c8 <IMU9250::begin(FlightParameter*, FlightParameter*)>:

}



void IMU9250::begin(FlightParameter *IMUBeginParameters,FlightParameter *CompasBeginParameters){
    19c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19cc:	4607      	mov	r7, r0
    
    IMUSPI.begin();
    19ce:	48c4      	ldr	r0, [pc, #784]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)

}



void IMU9250::begin(FlightParameter *IMUBeginParameters,FlightParameter *CompasBeginParameters){
    19d0:	460d      	mov	r5, r1
    19d2:	ed2d 8b04 	vpush	{d8-d9}
    19d6:	b082      	sub	sp, #8
    
    IMUSPI.begin();
    19d8:	f7fe ff06 	bl	7e8 <SPIDev::begin()>

    IMUSPI.beginTransaction();
    19dc:	48c0      	ldr	r0, [pc, #768]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    19de:	f7fe ff27 	bl	830 <SPIDev::beginTransaction()>
    if(IMUSPI.getRegister(IMU_ADRESS) != 0x71){
    19e2:	2175      	movs	r1, #117	; 0x75
    19e4:	48be      	ldr	r0, [pc, #760]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    19e6:	f7ff f8d7 	bl	b98 <SPIDev::getRegister(unsigned char)>
    19ea:	2871      	cmp	r0, #113	; 0x71
    19ec:	d004      	beq.n	19f8 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x30>

        ExceptionHandler.Error(0x0A,INITERROR);
    19ee:	4bbd      	ldr	r3, [pc, #756]	; (1ce4 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x31c>)
    19f0:	200a      	movs	r0, #10
    19f2:	7819      	ldrb	r1, [r3, #0]
    19f4:	f7fe fce0 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>

    }
    IMUSPI.endTransaction();
    19f8:	48b9      	ldr	r0, [pc, #740]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    19fa:	f107 0428 	add.w	r4, r7, #40	; 0x28
    19fe:	f7ff f87d 	bl	afc <SPIDev::endTransaction()>

    delay(1);
    1a02:	2001      	movs	r0, #1
    1a04:	f002 ffd6 	bl	49b4 <delay>

    IMUSPI.beginTransaction();
    1a08:	48b5      	ldr	r0, [pc, #724]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a0a:	f7fe ff11 	bl	830 <SPIDev::beginTransaction()>
    IMUSPI.setRegister(PWR_MANAGEMENT_1,RESET_IMU);
    1a0e:	2280      	movs	r2, #128	; 0x80
    1a10:	216b      	movs	r1, #107	; 0x6b
    1a12:	48b3      	ldr	r0, [pc, #716]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a14:	f7ff f92e 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
    IMUSPI.endTransaction();
    1a18:	48b1      	ldr	r0, [pc, #708]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a1a:	f7ff f86f 	bl	afc <SPIDev::endTransaction()>

    delay(1);
    1a1e:	2001      	movs	r0, #1
    1a20:	f002 ffc8 	bl	49b4 <delay>

    IMUSPI.beginTransaction();
    1a24:	48ae      	ldr	r0, [pc, #696]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a26:	f7fe ff03 	bl	830 <SPIDev::beginTransaction()>
    IMUSPI.setRegister(UNDER_I2C_SETUP,RESET_I2C);
    1a2a:	2202      	movs	r2, #2
    1a2c:	216a      	movs	r1, #106	; 0x6a
    1a2e:	48ac      	ldr	r0, [pc, #688]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a30:	f7ff f920 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
    IMUSPI.endTransaction();
    1a34:	48aa      	ldr	r0, [pc, #680]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a36:	f7ff f861 	bl	afc <SPIDev::endTransaction()>
    
    delay(1);
    1a3a:	2001      	movs	r0, #1
    1a3c:	f002 ffba 	bl	49b4 <delay>

    writeAK8963(0x0B,0x01);
    1a40:	2101      	movs	r1, #1
    1a42:	200b      	movs	r0, #11
    1a44:	f107 0650 	add.w	r6, r7, #80	; 0x50
    1a48:	f7ff ff46 	bl	18d8 <IMU9250::writeAK8963(unsigned char, unsigned char)>

    delay(1);
    1a4c:	2001      	movs	r0, #1

    //transfering Setup of IMU
    for(int i = 0;i < ParameterListX;i ++){
        
        if((*IMUBeginParameters).FlightParam[1][i] != 255){
    1a4e:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 1ce8 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x320>
            delay(1);

            IMUSPI.beginTransaction();
            if(IMUSPI.getRegister((uint8_t)(*IMUBeginParameters).FlightParam[1][i]) != (uint8_t)(*IMUBeginParameters).FlightParam[2][i]){

               ExceptionHandler.Error(0x09,INITERROR);
    1a52:	f8df 8290 	ldr.w	r8, [pc, #656]	; 1ce4 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x31c>
    
    delay(1);

    writeAK8963(0x0B,0x01);

    delay(1);
    1a56:	f002 ffad 	bl	49b4 <delay>
    1a5a:	e001      	b.n	1a60 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x98>

    //transfering Setup of IMU
    for(int i = 0;i < ParameterListX;i ++){
    1a5c:	42b4      	cmp	r4, r6
    1a5e:	d048      	beq.n	1af2 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x12a>
        
        if((*IMUBeginParameters).FlightParam[1][i] != 255){
    1a60:	ecf4 7a01 	vldmia	r4!, {s15}
    1a64:	eef4 7a48 	vcmp.f32	s15, s16
    1a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a6c:	d0f6      	beq.n	1a5c <IMU9250::begin(FlightParameter*, FlightParameter*)+0x94>
            
            IMUSPI.beginTransaction();
    1a6e:	489c      	ldr	r0, [pc, #624]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a70:	f7fe fede 	bl	830 <SPIDev::beginTransaction()>
            IMUSPI.setRegister((uint8_t)(*IMUBeginParameters).FlightParam[1][i],(uint8_t)(*IMUBeginParameters).FlightParam[2][i]);
    1a74:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    1a78:	ed54 7a01 	vldr	s15, [r4, #-4]
    1a7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    1a80:	4897      	ldr	r0, [pc, #604]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1a86:	ed8d 7a00 	vstr	s14, [sp]
    1a8a:	edcd 7a01 	vstr	s15, [sp, #4]
    1a8e:	f89d 2000 	ldrb.w	r2, [sp]
    1a92:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1a96:	f7ff f8ed 	bl	c74 <SPIDev::setRegister(unsigned char, unsigned char)>
            IMUSPI.endTransaction();
    1a9a:	4891      	ldr	r0, [pc, #580]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1a9c:	f7ff f82e 	bl	afc <SPIDev::endTransaction()>
            
            delay(1);
    1aa0:	2001      	movs	r0, #1
    1aa2:	f002 ff87 	bl	49b4 <delay>

            IMUSPI.beginTransaction();
    1aa6:	488e      	ldr	r0, [pc, #568]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1aa8:	f7fe fec2 	bl	830 <SPIDev::beginTransaction()>
            if(IMUSPI.getRegister((uint8_t)(*IMUBeginParameters).FlightParam[1][i]) != (uint8_t)(*IMUBeginParameters).FlightParam[2][i]){
    1aac:	ed54 7a01 	vldr	s15, [r4, #-4]
    1ab0:	488b      	ldr	r0, [pc, #556]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1ab6:	edcd 7a00 	vstr	s15, [sp]
    1aba:	f89d 1000 	ldrb.w	r1, [sp]
    1abe:	f7ff f86b 	bl	b98 <SPIDev::getRegister(unsigned char)>
    1ac2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    1ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1aca:	edcd 7a00 	vstr	s15, [sp]
    1ace:	f89d 3000 	ldrb.w	r3, [sp]
    1ad2:	4283      	cmp	r3, r0

               ExceptionHandler.Error(0x09,INITERROR);
    1ad4:	f04f 0009 	mov.w	r0, #9
            IMUSPI.endTransaction();
            
            delay(1);

            IMUSPI.beginTransaction();
            if(IMUSPI.getRegister((uint8_t)(*IMUBeginParameters).FlightParam[1][i]) != (uint8_t)(*IMUBeginParameters).FlightParam[2][i]){
    1ad8:	d003      	beq.n	1ae2 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x11a>

               ExceptionHandler.Error(0x09,INITERROR);
    1ada:	f898 1000 	ldrb.w	r1, [r8]
    1ade:	f7fe fc6b 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>

            }
       
            IMUSPI.endTransaction(); 
    1ae2:	487f      	ldr	r0, [pc, #508]	; (1ce0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x318>)
    1ae4:	f7ff f80a 	bl	afc <SPIDev::endTransaction()>
            delay(1);
    1ae8:	2001      	movs	r0, #1
    1aea:	f002 ff63 	bl	49b4 <delay>
    writeAK8963(0x0B,0x01);

    delay(1);

    //transfering Setup of IMU
    for(int i = 0;i < ParameterListX;i ++){
    1aee:	42b4      	cmp	r4, r6
    1af0:	d1b6      	bne.n	1a60 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x98>
            delay(1);

        }

    }
    if(readAK8963(AK8963_MODULE_ADDR) != 0x48){
    1af2:	2000      	movs	r0, #0
    1af4:	f7ff feae 	bl	1854 <IMU9250::readAK8963(unsigned char)>
    1af8:	2848      	cmp	r0, #72	; 0x48
    1afa:	d004      	beq.n	1b06 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x13e>

        ExceptionHandler.Error(0x0B,INITERROR);
    1afc:	4b79      	ldr	r3, [pc, #484]	; (1ce4 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x31c>)
    1afe:	200b      	movs	r0, #11
    1b00:	7819      	ldrb	r1, [r3, #0]
    1b02:	f7fe fc59 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>
    1b06:	f105 0428 	add.w	r4, r5, #40	; 0x28
    }


    for(int i = 0;i<ParameterListX;i ++){
        //Serial.println((uint8_t)(*CompasBeginParameters).FlightParam[1][i],HEX);
        if((*CompasBeginParameters).FlightParam[1][i] != 255){
    1b0a:	ed9f 8a77 	vldr	s16, [pc, #476]	; 1ce8 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x320>
    1b0e:	3550      	adds	r5, #80	; 0x50
            
            delay(1);

            if(readAK8963((uint8_t)(*CompasBeginParameters).FlightParam[0][i]) != (uint8_t)(*CompasBeginParameters).FlightParam[1][i]){

               ExceptionHandler.Error(0x09,INITERROR);
    1b10:	4e74      	ldr	r6, [pc, #464]	; (1ce4 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x31c>)
    1b12:	e001      	b.n	1b18 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x150>
        ExceptionHandler.Error(0x0B,INITERROR);

    }


    for(int i = 0;i<ParameterListX;i ++){
    1b14:	42ac      	cmp	r4, r5
    1b16:	d037      	beq.n	1b88 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x1c0>
        //Serial.println((uint8_t)(*CompasBeginParameters).FlightParam[1][i],HEX);
        if((*CompasBeginParameters).FlightParam[1][i] != 255){
    1b18:	ecf4 7a01 	vldmia	r4!, {s15}
    1b1c:	eef4 7a48 	vcmp.f32	s15, s16
    1b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b24:	d0f6      	beq.n	1b14 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x14c>
            
            writeAK8963((uint8_t)(*CompasBeginParameters).FlightParam[0][i],(uint8_t)(*CompasBeginParameters).FlightParam[1][i]);
    1b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1b2a:	ed14 7a0b 	vldr	s14, [r4, #-44]	; 0xffffffd4
    1b2e:	edcd 7a00 	vstr	s15, [sp]
    1b32:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    1b36:	f89d 1000 	ldrb.w	r1, [sp]
    1b3a:	edcd 7a01 	vstr	s15, [sp, #4]
    1b3e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1b42:	f7ff fec9 	bl	18d8 <IMU9250::writeAK8963(unsigned char, unsigned char)>
            
            delay(1);
    1b46:	2001      	movs	r0, #1
    1b48:	f002 ff34 	bl	49b4 <delay>

            if(readAK8963((uint8_t)(*CompasBeginParameters).FlightParam[0][i]) != (uint8_t)(*CompasBeginParameters).FlightParam[1][i]){
    1b4c:	ed54 7a0b 	vldr	s15, [r4, #-44]	; 0xffffffd4
    1b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1b54:	edcd 7a00 	vstr	s15, [sp]
    1b58:	f89d 0000 	ldrb.w	r0, [sp]
    1b5c:	f7ff fe7a 	bl	1854 <IMU9250::readAK8963(unsigned char)>
    1b60:	ed54 7a01 	vldr	s15, [r4, #-4]
    1b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1b68:	edcd 7a00 	vstr	s15, [sp]
    1b6c:	f89d 3000 	ldrb.w	r3, [sp]
    1b70:	4283      	cmp	r3, r0

               ExceptionHandler.Error(0x09,INITERROR);
    1b72:	f04f 0009 	mov.w	r0, #9
            
            writeAK8963((uint8_t)(*CompasBeginParameters).FlightParam[0][i],(uint8_t)(*CompasBeginParameters).FlightParam[1][i]);
            
            delay(1);

            if(readAK8963((uint8_t)(*CompasBeginParameters).FlightParam[0][i]) != (uint8_t)(*CompasBeginParameters).FlightParam[1][i]){
    1b76:	d002      	beq.n	1b7e <IMU9250::begin(FlightParameter*, FlightParameter*)+0x1b6>

               ExceptionHandler.Error(0x09,INITERROR);
    1b78:	7831      	ldrb	r1, [r6, #0]
    1b7a:	f7fe fc1d 	bl	3b8 <GlobalExceptionHandler::Error(unsigned char, ErrorType)>

            }

            delay(1);
    1b7e:	2001      	movs	r0, #1
    1b80:	f002 ff18 	bl	49b4 <delay>
        ExceptionHandler.Error(0x0B,INITERROR);

    }


    for(int i = 0;i<ParameterListX;i ++){
    1b84:	42ac      	cmp	r4, r5
    1b86:	d1c7      	bne.n	1b18 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x150>
    1b88:	f8df 9168 	ldr.w	r9, [pc, #360]	; 1cf4 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x32c>
        }


    }
 
    delay(1);
    1b8c:	2001      	movs	r0, #1
    1b8e:	f002 ff11 	bl	49b4 <delay>
    1b92:	2601      	movs	r6, #1
    1b94:	464d      	mov	r5, r9
    1b96:	2400      	movs	r4, #0
    1b98:	f8df a150 	ldr.w	sl, [pc, #336]	; 1cec <IMU9250::begin(FlightParameter*, FlightParameter*)+0x324>
                }

            }
            if(CalibrationValue == 3){

                Calibration[3] = 1;
    1b9c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 1cf8 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x330>
        

        }
        else if(i >= 4 && i < 7){

            ConversionValue[i] = 0.00762962f*pow(2,((*IMUBeginParameters).FlightParam[0][2]));
    1ba0:	ed9f 9b4b 	vldr	d9, [pc, #300]	; 1cd0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x308>
    for(int i = 0;i < 10;i ++){
            //Linearity[i] = 1;
            
        if(i < 3){

            ConversionValue[i] = 0.000598f*pow(2,((*IMUBeginParameters).FlightParam[0][0]));
    1ba4:	ed9f 8b4c 	vldr	d8, [pc, #304]	; 1cd8 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x310>
    1ba8:	e026      	b.n	1bf8 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x230>

                Calibration[0] = 1;

            }
        } 
        else if(i == 3){
    1baa:	2c03      	cmp	r4, #3
    1bac:	d079      	beq.n	1ca2 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x2da>

            }
        

        }
        else if(i >= 4 && i < 7){
    1bae:	1f23      	subs	r3, r4, #4
    1bb0:	2b02      	cmp	r3, #2
    1bb2:	d955      	bls.n	1c60 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x298>


        }
        else {

            ConversionValue[i] = 1*pow(2,((*IMUBeginParameters).FlightParam[0][3]));                 //TROUVER LES VALEURS DE CONVERSION COMPAS
    1bb4:	ed97 1a03 	vldr	s2, [r7, #12]
    1bb8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
    1bbc:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    1bc0:	f005 fafa 	bl	71b8 <pow>

            int CalibrationValue = 0;
    1bc4:	f9ba 300e 	ldrsh.w	r3, [sl, #14]


        }
        else {

            ConversionValue[i] = 1*pow(2,((*IMUBeginParameters).FlightParam[0][3]));                 //TROUVER LES VALEURS DE CONVERSION COMPAS
    1bc8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

            int CalibrationValue = 0;
            for(int j = 0;j < 3;j ++){

                if(Offsets[j+7] != 0){
    1bcc:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
        }
        else {

            ConversionValue[i] = 1*pow(2,((*IMUBeginParameters).FlightParam[0][3]));                 //TROUVER LES VALEURS DE CONVERSION COMPAS

            int CalibrationValue = 0;
    1bd0:	3300      	adds	r3, #0


        }
        else {

            ConversionValue[i] = 1*pow(2,((*IMUBeginParameters).FlightParam[0][3]));                 //TROUVER LES VALEURS DE CONVERSION COMPAS
    1bd2:	ed85 0a00 	vstr	s0, [r5]

            int CalibrationValue = 0;
    1bd6:	bf18      	it	ne
    1bd8:	2301      	movne	r3, #1
            for(int j = 0;j < 3;j ++){

                if(Offsets[j+7] != 0){
    1bda:	b102      	cbz	r2, 1bde <IMU9250::begin(FlightParameter*, FlightParameter*)+0x216>

                    CalibrationValue ++;
    1bdc:	3301      	adds	r3, #1
            ConversionValue[i] = 1*pow(2,((*IMUBeginParameters).FlightParam[0][3]));                 //TROUVER LES VALEURS DE CONVERSION COMPAS

            int CalibrationValue = 0;
            for(int j = 0;j < 3;j ++){

                if(Offsets[j+7] != 0){
    1bde:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    1be2:	b122      	cbz	r2, 1bee <IMU9250::begin(FlightParameter*, FlightParameter*)+0x226>
                    CalibrationValue ++;

                }

            }
            if(CalibrationValue == 3){
    1be4:	2b02      	cmp	r3, #2
    1be6:	d102      	bne.n	1bee <IMU9250::begin(FlightParameter*, FlightParameter*)+0x226>

                Calibration[3] = 1;
    1be8:	2301      	movs	r3, #1
    1bea:	f888 3003 	strb.w	r3, [r8, #3]
    }
 
    delay(1);

       
    for(int i = 0;i < 10;i ++){
    1bee:	2e0a      	cmp	r6, #10
    1bf0:	d022      	beq.n	1c38 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x270>
    1bf2:	3401      	adds	r4, #1
    1bf4:	3601      	adds	r6, #1
    1bf6:	3504      	adds	r5, #4
            //Linearity[i] = 1;
            
        if(i < 3){
    1bf8:	2c02      	cmp	r4, #2
    1bfa:	d8d6      	bhi.n	1baa <IMU9250::begin(FlightParameter*, FlightParameter*)+0x1e2>

            ConversionValue[i] = 0.000598f*pow(2,((*IMUBeginParameters).FlightParam[0][0]));
    1bfc:	ed97 1a00 	vldr	s2, [r7]
    1c00:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
    1c04:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    1c08:	f005 fad6 	bl	71b8 <pow>
    1c0c:	ee20 0b08 	vmul.f64	d0, d0, d8
    1c10:	4b36      	ldr	r3, [pc, #216]	; (1cec <IMU9250::begin(FlightParameter*, FlightParameter*)+0x324>)

            int CalibrationValue = 0;
    1c12:	2100      	movs	r1, #0
    1c14:	1d98      	adds	r0, r3, #6
    for(int i = 0;i < 10;i ++){
            //Linearity[i] = 1;
            
        if(i < 3){

            ConversionValue[i] = 0.000598f*pow(2,((*IMUBeginParameters).FlightParam[0][0]));
    1c16:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1c1a:	ed85 0a00 	vstr	s0, [r5]

            int CalibrationValue = 0;
            for(int j = 0;j < 3;j ++){

                if(Offsets[j] != 0){
    1c1e:	f933 2b02 	ldrsh.w	r2, [r3], #2
    1c22:	b102      	cbz	r2, 1c26 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x25e>

                    CalibrationValue ++;
    1c24:	3101      	adds	r1, #1
        if(i < 3){

            ConversionValue[i] = 0.000598f*pow(2,((*IMUBeginParameters).FlightParam[0][0]));

            int CalibrationValue = 0;
            for(int j = 0;j < 3;j ++){
    1c26:	4283      	cmp	r3, r0
    1c28:	d1f9      	bne.n	1c1e <IMU9250::begin(FlightParameter*, FlightParameter*)+0x256>
                    CalibrationValue ++;

                }

            }
            if(CalibrationValue == 3){
    1c2a:	2903      	cmp	r1, #3
    1c2c:	d1df      	bne.n	1bee <IMU9250::begin(FlightParameter*, FlightParameter*)+0x226>

                Calibration[0] = 1;
    1c2e:	2301      	movs	r3, #1
    }
 
    delay(1);

       
    for(int i = 0;i < 10;i ++){
    1c30:	2e0a      	cmp	r6, #10
                }

            }
            if(CalibrationValue == 3){

                Calibration[0] = 1;
    1c32:	f888 3000 	strb.w	r3, [r8]
    }
 
    delay(1);

       
    for(int i = 0;i < 10;i ++){
    1c36:	d1dc      	bne.n	1bf2 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x22a>
    1c38:	4a2d      	ldr	r2, [pc, #180]	; (1cf0 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x328>)
    1c3a:	f107 0110 	add.w	r1, r7, #16
    }
  
    //Set ranges of the IMU
    for(int i = 0;i < 4;i ++){

        Ranges[i] = (uint8_t)(*IMUBeginParameters).FlightParam[0][i];
    1c3e:	ecf7 7a01 	vldmia	r7!, {s15}
    1c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15

        }
    }
  
    //Set ranges of the IMU
    for(int i = 0;i < 4;i ++){
    1c46:	42b9      	cmp	r1, r7

        Ranges[i] = (uint8_t)(*IMUBeginParameters).FlightParam[0][i];
    1c48:	ee17 3a90 	vmov	r3, s15
    1c4c:	f802 3b01 	strb.w	r3, [r2], #1

        }
    }
  
    //Set ranges of the IMU
    for(int i = 0;i < 4;i ++){
    1c50:	d1f5      	bne.n	1c3e <IMU9250::begin(FlightParameter*, FlightParameter*)+0x276>
        
    } 

    setAK8963ToBrigeMode();

}
    1c52:	b002      	add	sp, #8
    1c54:	ecbd 8b04 	vpop	{d8-d9}
    1c58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

        Ranges[i] = (uint8_t)(*IMUBeginParameters).FlightParam[0][i];
        
    } 

    setAK8963ToBrigeMode();
    1c5c:	f7ff be80 	b.w	1960 <IMU9250::setAK8963ToBrigeMode()>
        

        }
        else if(i >= 4 && i < 7){

            ConversionValue[i] = 0.00762962f*pow(2,((*IMUBeginParameters).FlightParam[0][2]));
    1c60:	ed97 1a02 	vldr	s2, [r7, #8]
    1c64:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
    1c68:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    1c6c:	f005 faa4 	bl	71b8 <pow>
    1c70:	ee20 0b09 	vmul.f64	d0, d0, d9
            
            int CalibrationValue = 0;
    1c74:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
            for(int j = 0;j < 3;j ++){

                if(Offsets[j+4] != 0){
    1c78:	f9ba 200a 	ldrsh.w	r2, [sl, #10]
        }
        else if(i >= 4 && i < 7){

            ConversionValue[i] = 0.00762962f*pow(2,((*IMUBeginParameters).FlightParam[0][2]));
            
            int CalibrationValue = 0;
    1c7c:	3300      	adds	r3, #0
    1c7e:	bf18      	it	ne
    1c80:	2301      	movne	r3, #1
        

        }
        else if(i >= 4 && i < 7){

            ConversionValue[i] = 0.00762962f*pow(2,((*IMUBeginParameters).FlightParam[0][2]));
    1c82:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1c86:	ed85 0a00 	vstr	s0, [r5]
            
            int CalibrationValue = 0;
            for(int j = 0;j < 3;j ++){

                if(Offsets[j+4] != 0){
    1c8a:	b102      	cbz	r2, 1c8e <IMU9250::begin(FlightParameter*, FlightParameter*)+0x2c6>

                    CalibrationValue ++;
    1c8c:	3301      	adds	r3, #1
            ConversionValue[i] = 0.00762962f*pow(2,((*IMUBeginParameters).FlightParam[0][2]));
            
            int CalibrationValue = 0;
            for(int j = 0;j < 3;j ++){

                if(Offsets[j+4] != 0){
    1c8e:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
    1c92:	2a00      	cmp	r2, #0
    1c94:	d0ab      	beq.n	1bee <IMU9250::begin(FlightParameter*, FlightParameter*)+0x226>
                    CalibrationValue ++;

                }

            }
            if(CalibrationValue == 3){
    1c96:	2b02      	cmp	r3, #2
    1c98:	d1a9      	bne.n	1bee <IMU9250::begin(FlightParameter*, FlightParameter*)+0x226>

                Calibration[2] = 1;
    1c9a:	2301      	movs	r3, #1
    1c9c:	f888 3002 	strb.w	r3, [r8, #2]
    1ca0:	e7a5      	b.n	1bee <IMU9250::begin(FlightParameter*, FlightParameter*)+0x226>

            }
        } 
        else if(i == 3){

            ConversionValue[i] = 1*pow(2,((*IMUBeginParameters).FlightParam[0][1]));               //TROUVER LES VALEURS DE CONVERSION TEMPERATURE
    1ca2:	ed97 1a01 	vldr	s2, [r7, #4]
    1ca6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
    1caa:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    1cae:	f005 fa83 	bl	71b8 <pow>
    1cb2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

            if(Offsets[3] != 0){
    1cb6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]

            }
        } 
        else if(i == 3){

            ConversionValue[i] = 1*pow(2,((*IMUBeginParameters).FlightParam[0][1]));               //TROUVER LES VALEURS DE CONVERSION TEMPERATURE
    1cba:	ed89 0a03 	vstr	s0, [r9, #12]

            if(Offsets[3] != 0){
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d097      	beq.n	1bf2 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x22a>

                Calibration[1] = 1;
    1cc2:	2301      	movs	r3, #1
    1cc4:	f888 3001 	strb.w	r3, [r8, #1]
    1cc8:	e793      	b.n	1bf2 <IMU9250::begin(FlightParameter*, FlightParameter*)+0x22a>
    1cca:	bf00      	nop
    1ccc:	f3af 8000 	nop.w
    1cd0:	80000000 	.word	0x80000000
    1cd4:	3f7f403c 	.word	0x3f7f403c
    1cd8:	40000000 	.word	0x40000000
    1cdc:	3f439863 	.word	0x3f439863
    1ce0:	20001e50 	.word	0x20001e50
    1ce4:	200003c8 	.word	0x200003c8
    1ce8:	437f0000 	.word	0x437f0000
    1cec:	20001dd0 	.word	0x20001dd0
    1cf0:	20001e24 	.word	0x20001e24
    1cf4:	20001e28 	.word	0x20001e28
    1cf8:	20001e5c 	.word	0x20001e5c

00001cfc <IMU9250::GetPointerOfVariable()>:

    }
    
    return ReturnStructurePointer;*/

}
    1cfc:	4800      	ldr	r0, [pc, #0]	; (1d00 <IMU9250::GetPointerOfVariable()+0x4>)
    1cfe:	4770      	bx	lr
    1d00:	20001de4 	.word	0x20001de4

00001d04 <_GLOBAL__sub_I__ZN7IMU92506IMUSPIE>:
    1d04:	b508      	push	{r3, lr}
#include "IMU9250.h"

SPIDev IMU9250::IMUSPI;
    1d06:	4804      	ldr	r0, [pc, #16]	; (1d18 <_GLOBAL__sub_I__ZN7IMU92506IMUSPIE+0x14>)
    1d08:	f7fe fd52 	bl	7b0 <SPIDev::SPIDev()>
    size_t SizeOfElement;

};

//IMU
struct DataStructure {
    1d0c:	4b03      	ldr	r3, [pc, #12]	; (1d1c <_GLOBAL__sub_I__ZN7IMU92506IMUSPIE+0x18>)
    1d0e:	2200      	movs	r2, #0
    1d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    1d14:	bd08      	pop	{r3, pc}
    1d16:	bf00      	nop
    1d18:	20001e50 	.word	0x20001e50
    1d1c:	20001de4 	.word	0x20001de4

00001d20 <SBUSHandler::begin()>:

}

void SBUSHandler::begin(){

Serial4.begin(100000);
    1d20:	2200      	movs	r2, #0
    1d22:	4902      	ldr	r1, [pc, #8]	; (1d2c <SBUSHandler::begin()+0xc>)
    1d24:	4802      	ldr	r0, [pc, #8]	; (1d30 <SBUSHandler::begin()+0x10>)
    1d26:	f004 b92f 	b.w	5f88 <HardwareSerial::begin(unsigned long, unsigned short)>
    1d2a:	bf00      	nop
    1d2c:	000186a0 	.word	0x000186a0
    1d30:	20000fbc 	.word	0x20000fbc

00001d34 <SBUSHandler::getFailsafeValue()>:

}

bool SBUSHandler::getFailsafeValue(){

    return FailsafeToken;
    1d34:	4b01      	ldr	r3, [pc, #4]	; (1d3c <SBUSHandler::getFailsafeValue()+0x8>)
    1d36:	7818      	ldrb	r0, [r3, #0]

}
    1d38:	4770      	bx	lr
    1d3a:	bf00      	nop
    1d3c:	20000e28 	.word	0x20000e28

00001d40 <SBUSHandler::GetRadioChannel()>:

volatile RadioOut* SBUSHandler::GetRadioChannel(){

    return &ChannelOutput;

}
    1d40:	4800      	ldr	r0, [pc, #0]	; (1d44 <SBUSHandler::GetRadioChannel()+0x4>)
    1d42:	4770      	bx	lr
    1d44:	20001e88 	.word	0x20001e88

00001d48 <_GLOBAL__sub_I__ZN11SBUSHandlerC2Ev>:

};



struct RadioOut{
    1d48:	4b02      	ldr	r3, [pc, #8]	; (1d54 <_GLOBAL__sub_I__ZN11SBUSHandlerC2Ev+0xc>)
    1d4a:	2200      	movs	r2, #0
    1d4c:	f883 2020 	strb.w	r2, [r3, #32]
    1d50:	4770      	bx	lr
    1d52:	bf00      	nop
    1d54:	20001e88 	.word	0x20001e88

00001d58 <serialEvent4()>:
uint8_t SBUSHandler::Sentence[SENTENCE_SIZE];
volatile bool SBUSHandler::FailsafeToken = true;
uint8_t SBUSHandler::NumberOfRecordedBytes = 0;


void serialEvent4(){
    1d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    SBUSDev.InputByte[1] = SBUSDev.InputByte[0];
    1d5c:	4c39      	ldr	r4, [pc, #228]	; (1e44 <serialEvent4()+0xec>)
    SBUSDev.InputByte[0] = Serial4.read();
    1d5e:	483a      	ldr	r0, [pc, #232]	; (1e48 <serialEvent4()+0xf0>)
uint8_t SBUSHandler::NumberOfRecordedBytes = 0;


void serialEvent4(){

    SBUSDev.InputByte[1] = SBUSDev.InputByte[0];
    1d60:	7823      	ldrb	r3, [r4, #0]
    1d62:	7063      	strb	r3, [r4, #1]
    SBUSDev.InputByte[0] = Serial4.read();
    1d64:	f004 f85c 	bl	5e20 <HardwareSerial::read()>

    if((SBUSDev.InputByte[1] == 0x00 && SBUSDev.InputByte[0] == 0x0F) && SBUSDev.NumberOfRecordedBytes >= SENTENCE_ACCEPTATION_SIZE){
    1d68:	7863      	ldrb	r3, [r4, #1]


void serialEvent4(){

    SBUSDev.InputByte[1] = SBUSDev.InputByte[0];
    SBUSDev.InputByte[0] = Serial4.read();
    1d6a:	b2c0      	uxtb	r0, r0
    1d6c:	7020      	strb	r0, [r4, #0]

    if((SBUSDev.InputByte[1] == 0x00 && SBUSDev.InputByte[0] == 0x0F) && SBUSDev.NumberOfRecordedBytes >= SENTENCE_ACCEPTATION_SIZE){
    1d6e:	b90b      	cbnz	r3, 1d74 <serialEvent4()+0x1c>
    1d70:	280f      	cmp	r0, #15
    1d72:	d007      	beq.n	1d84 <serialEvent4()+0x2c>
    1d74:	4935      	ldr	r1, [pc, #212]	; (1e4c <serialEvent4()+0xf4>)
    1d76:	780b      	ldrb	r3, [r1, #0]
        SBUSDev.ChannelOutput.DataReady = true;
        
    }
    else{

        SBUSDev.Sentence[SBUSDev.NumberOfRecordedBytes] = SBUSDev.InputByte[0];
    1d78:	4c35      	ldr	r4, [pc, #212]	; (1e50 <serialEvent4()+0xf8>)
        SBUSDev.NumberOfRecordedBytes ++;
    1d7a:	1c5a      	adds	r2, r3, #1
        SBUSDev.ChannelOutput.DataReady = true;
        
    }
    else{

        SBUSDev.Sentence[SBUSDev.NumberOfRecordedBytes] = SBUSDev.InputByte[0];
    1d7c:	54e0      	strb	r0, [r4, r3]
        SBUSDev.NumberOfRecordedBytes ++;
    1d7e:	700a      	strb	r2, [r1, #0]


    }

}
    1d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
void serialEvent4(){

    SBUSDev.InputByte[1] = SBUSDev.InputByte[0];
    SBUSDev.InputByte[0] = Serial4.read();

    if((SBUSDev.InputByte[1] == 0x00 && SBUSDev.InputByte[0] == 0x0F) && SBUSDev.NumberOfRecordedBytes >= SENTENCE_ACCEPTATION_SIZE){
    1d84:	4931      	ldr	r1, [pc, #196]	; (1e4c <serialEvent4()+0xf4>)
    1d86:	780b      	ldrb	r3, [r1, #0]
    1d88:	2b15      	cmp	r3, #21
    1d8a:	d9f5      	bls.n	1d78 <serialEvent4()+0x20>
        SBUSDev.NumberOfRecordedBytes = 0;
    1d8c:	2300      	movs	r3, #0
    1d8e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1e54 <serialEvent4()+0xfc>
    1d92:	4f2f      	ldr	r7, [pc, #188]	; (1e50 <serialEvent4()+0xf8>)

        int ByteToRead = 0;
        int overByte = 0;
        for(int i = 0;i < NUMBER_OF_CHANNEL;i ++){

            SBUSDev.ChannelOutput.Channel[i] = map((uint16_t)(((uint32_t)((SBUSDev.Sentence[ByteToRead]) | (SBUSDev.Sentence[ByteToRead+1] << 8) | (SBUSDev.Sentence[ByteToRead+2]) << 16 ) >> (uint8_t)overByte ) & 0x07FF),192,1792,1000,2000);
    1d94:	f240 39e9 	movw	r9, #1001	; 0x3e9
    if((SBUSDev.InputByte[1] == 0x00 && SBUSDev.InputByte[0] == 0x0F) && SBUSDev.NumberOfRecordedBytes >= SENTENCE_ACCEPTATION_SIZE){
        SBUSDev.NumberOfRecordedBytes = 0;

        int ByteToRead = 0;
        int overByte = 0;
        for(int i = 0;i < NUMBER_OF_CHANNEL;i ++){
    1d98:	461c      	mov	r4, r3
    1d9a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1e58 <serialEvent4()+0x100>

    if((SBUSDev.InputByte[1] == 0x00 && SBUSDev.InputByte[0] == 0x0F) && SBUSDev.NumberOfRecordedBytes >= SENTENCE_ACCEPTATION_SIZE){
        SBUSDev.NumberOfRecordedBytes = 0;

        int ByteToRead = 0;
        int overByte = 0;
    1d9e:	461e      	mov	r6, r3
    SBUSDev.InputByte[0] = Serial4.read();

    if((SBUSDev.InputByte[1] == 0x00 && SBUSDev.InputByte[0] == 0x0F) && SBUSDev.NumberOfRecordedBytes >= SENTENCE_ACCEPTATION_SIZE){
        SBUSDev.NumberOfRecordedBytes = 0;

        int ByteToRead = 0;
    1da0:	461d      	mov	r5, r3
        int overByte = 0;
        for(int i = 0;i < NUMBER_OF_CHANNEL;i ++){

            SBUSDev.ChannelOutput.Channel[i] = map((uint16_t)(((uint32_t)((SBUSDev.Sentence[ByteToRead]) | (SBUSDev.Sentence[ByteToRead+1] << 8) | (SBUSDev.Sentence[ByteToRead+2]) << 16 ) >> (uint8_t)overByte ) & 0x07FF),192,1792,1000,2000);
    1da2:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 1e5c <serialEvent4()+0x104>

    SBUSDev.InputByte[1] = SBUSDev.InputByte[0];
    SBUSDev.InputByte[0] = Serial4.read();

    if((SBUSDev.InputByte[1] == 0x00 && SBUSDev.InputByte[0] == 0x0F) && SBUSDev.NumberOfRecordedBytes >= SENTENCE_ACCEPTATION_SIZE){
        SBUSDev.NumberOfRecordedBytes = 0;
    1da6:	700b      	strb	r3, [r1, #0]

        int ByteToRead = 0;
        int overByte = 0;
        for(int i = 0;i < NUMBER_OF_CHANNEL;i ++){

            SBUSDev.ChannelOutput.Channel[i] = map((uint16_t)(((uint32_t)((SBUSDev.Sentence[ByteToRead]) | (SBUSDev.Sentence[ByteToRead+1] << 8) | (SBUSDev.Sentence[ByteToRead+2]) << 16 ) >> (uint8_t)overByte ) & 0x07FF),192,1792,1000,2000);
    1da8:	1c68      	adds	r0, r5, #1
    1daa:	eb07 0e05 	add.w	lr, r7, r5
                
                break;
                    //Serial.println("la");
            }

            if(overByte != overByte%8){
    1dae:	f006 0107 	and.w	r1, r6, #7

        int ByteToRead = 0;
        int overByte = 0;
        for(int i = 0;i < NUMBER_OF_CHANNEL;i ++){

            SBUSDev.ChannelOutput.Channel[i] = map((uint16_t)(((uint32_t)((SBUSDev.Sentence[ByteToRead]) | (SBUSDev.Sentence[ByteToRead+1] << 8) | (SBUSDev.Sentence[ByteToRead+2]) << 16 ) >> (uint8_t)overByte ) & 0x07FF),192,1792,1000,2000);
    1db2:	5c3b      	ldrb	r3, [r7, r0]
    1db4:	f89e c002 	ldrb.w	ip, [lr, #2]
    1db8:	021b      	lsls	r3, r3, #8
    1dba:	f817 e005 	ldrb.w	lr, [r7, r5]
    1dbe:	3502      	adds	r5, #2
    1dc0:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    1dc4:	ea43 030e 	orr.w	r3, r3, lr
    1dc8:	fa5f fe86 	uxtb.w	lr, r6
    1dcc:	fa23 f30e 	lsr.w	r3, r3, lr
    1dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    1dd4:	3bc0      	subs	r3, #192	; 0xc0
    1dd6:	fb09 f303 	mul.w	r3, r9, r3
    1dda:	fb8b 2e03 	smull	r2, lr, fp, r3
    1dde:	17db      	asrs	r3, r3, #31
    1de0:	ebc3 232e 	rsb	r3, r3, lr, asr #8
    1de4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    1de8:	b29b      	uxth	r3, r3
    1dea:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]

            if(SBUSDev.ChannelOutput.Channel[i] == FAILSAFE_TOKEN){
    1dee:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    1df2:	b29b      	uxth	r3, r3
    1df4:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
    1df8:	d018      	beq.n	1e2c <serialEvent4()+0xd4>
                
                break;
                    //Serial.println("la");
            }

            if(overByte != overByte%8){
    1dfa:	42b1      	cmp	r1, r6
            }
        
            overByte += 3;
            ByteToRead ++;

             if(SBUSDev.FailsafeToken != false && i == 14){
    1dfc:	f89a 3000 	ldrb.w	r3, [sl]
                overByte = overByte%8;
                ByteToRead ++;

            }
        
            overByte += 3;
    1e00:	f101 0603 	add.w	r6, r1, #3
    1e04:	bf08      	it	eq
    1e06:	4605      	moveq	r5, r0
            ByteToRead ++;

             if(SBUSDev.FailsafeToken != false && i == 14){
    1e08:	2c0e      	cmp	r4, #14
    1e0a:	b2db      	uxtb	r3, r3
    1e0c:	d106      	bne.n	1e1c <serialEvent4()+0xc4>
    1e0e:	b12b      	cbz	r3, 1e1c <serialEvent4()+0xc4>
                
                SBUSDev.FailsafeToken = false;
    1e10:	2300      	movs	r3, #0
    1e12:	4a10      	ldr	r2, [pc, #64]	; (1e54 <serialEvent4()+0xfc>)
                SystemHandler.RadioFailsafe(false);
    1e14:	4618      	mov	r0, r3
            overByte += 3;
            ByteToRead ++;

             if(SBUSDev.FailsafeToken != false && i == 14){
                
                SBUSDev.FailsafeToken = false;
    1e16:	7013      	strb	r3, [r2, #0]
                SystemHandler.RadioFailsafe(false);
    1e18:	f7fe fab8 	bl	38c <SystemHandling::RadioFailsafe(bool)>
    if((SBUSDev.InputByte[1] == 0x00 && SBUSDev.InputByte[0] == 0x0F) && SBUSDev.NumberOfRecordedBytes >= SENTENCE_ACCEPTATION_SIZE){
        SBUSDev.NumberOfRecordedBytes = 0;

        int ByteToRead = 0;
        int overByte = 0;
        for(int i = 0;i < NUMBER_OF_CHANNEL;i ++){
    1e1c:	3401      	adds	r4, #1
    1e1e:	2c10      	cmp	r4, #16
    1e20:	d1c2      	bne.n	1da8 <serialEvent4()+0x50>
                SystemHandler.RadioFailsafe(false);

            }

        }
        SBUSDev.ChannelOutput.DataReady = true;
    1e22:	2301      	movs	r3, #1
    1e24:	f888 3020 	strb.w	r3, [r8, #32]
    1e28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

            SBUSDev.ChannelOutput.Channel[i] = map((uint16_t)(((uint32_t)((SBUSDev.Sentence[ByteToRead]) | (SBUSDev.Sentence[ByteToRead+1] << 8) | (SBUSDev.Sentence[ByteToRead+2]) << 16 ) >> (uint8_t)overByte ) & 0x07FF),192,1792,1000,2000);

            if(SBUSDev.ChannelOutput.Channel[i] == FAILSAFE_TOKEN){
                
                if(!SBUSDev.FailsafeToken){
    1e2c:	f89a 3000 	ldrb.w	r3, [sl]
    1e30:	4c08      	ldr	r4, [pc, #32]	; (1e54 <serialEvent4()+0xfc>)
    1e32:	2b00      	cmp	r3, #0
    1e34:	d1f5      	bne.n	1e22 <serialEvent4()+0xca>

                    SystemHandler.RadioFailsafe(true);
    1e36:	2001      	movs	r0, #1
    1e38:	f7fe faa8 	bl	38c <SystemHandling::RadioFailsafe(bool)>
                    SBUSDev.FailsafeToken = true;
    1e3c:	2301      	movs	r3, #1
    1e3e:	7023      	strb	r3, [r4, #0]
    1e40:	e7ef      	b.n	1e22 <serialEvent4()+0xca>
    1e42:	bf00      	nop
    1e44:	20001ec8 	.word	0x20001ec8
    1e48:	20000fbc 	.word	0x20000fbc
    1e4c:	20001eaa 	.word	0x20001eaa
    1e50:	20001eac 	.word	0x20001eac
    1e54:	20000e28 	.word	0x20000e28
    1e58:	20001e88 	.word	0x20001e88
    1e5c:	28ef35e3 	.word	0x28ef35e3

00001e60 <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    1e60:	b510      	push	{r4, lr}
    1e62:	4604      	mov	r4, r0
		end();
    1e64:	f004 fb6c 	bl	6540 <IntervalTimer::end()>
	}
    1e68:	4620      	mov	r0, r4
    1e6a:	bd10      	pop	{r4, pc}

00001e6c <ScheduledGatheringObject::ScheduledGatheringObject()>:



}

ScheduledGatheringObject::ScheduledGatheringObject(){
    1e6c:	2200      	movs	r2, #0
    1e6e:	7042      	strb	r2, [r0, #1]



}
    1e70:	4770      	bx	lr
    1e72:	bf00      	nop

00001e74 <DataGathering::begin(FlightParameter*)>:



void DataGathering::begin(FlightParameter* DataGatheringParameter){
 
SchedulingFrequency = (int)(*DataGatheringParameter).FlightParam[0][0];   
    1e74:	edd0 7a00 	vldr	s15, [r0]
	void update(double microseconds) {
		return update((float)microseconds);
	}
	void end();
	void priority(uint8_t n) {
		nvic_priority = n;
    1e78:	2200      	movs	r2, #0
    1e7a:	4b10      	ldr	r3, [pc, #64]	; (1ebc <DataGathering::begin(FlightParameter*)+0x48>)
    1e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1e80:	490f      	ldr	r1, [pc, #60]	; (1ec0 <DataGathering::begin(FlightParameter*)+0x4c>)
		if (channel) {
    1e82:	6818      	ldr	r0, [r3, #0]
	void update(double microseconds) {
		return update((float)microseconds);
	}
	void end();
	void priority(uint8_t n) {
		nvic_priority = n;
    1e84:	711a      	strb	r2, [r3, #4]
    1e86:	edc1 7a00 	vstr	s15, [r1]
		if (channel) {
    1e8a:	b1b0      	cbz	r0, 1eba <DataGathering::begin(FlightParameter*)+0x46>
			int index = channel - IMXRT_PIT_CHANNELS;
			nvic_priorites[index] = nvic_priority;
    1e8c:	4b0d      	ldr	r3, [pc, #52]	; (1ec4 <DataGathering::begin(FlightParameter*)+0x50>)
    1e8e:	490e      	ldr	r1, [pc, #56]	; (1ec8 <DataGathering::begin(FlightParameter*)+0x54>)
    1e90:	4403      	add	r3, r0
			uint8_t top_priority = nvic_priorites[0];
			for (uint8_t i=1; i < (sizeof(nvic_priorites)/sizeof(nvic_priorites[0])); i++) {
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
			}
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    1e92:	480e      	ldr	r0, [pc, #56]	; (1ecc <DataGathering::begin(FlightParameter*)+0x58>)
	void end();
	void priority(uint8_t n) {
		nvic_priority = n;
		if (channel) {
			int index = channel - IMXRT_PIT_CHANNELS;
			nvic_priorites[index] = nvic_priority;
    1e94:	111b      	asrs	r3, r3, #4





void DataGathering::begin(FlightParameter* DataGatheringParameter){
    1e96:	b410      	push	{r4}
    1e98:	54ca      	strb	r2, [r1, r3]
			uint8_t top_priority = nvic_priorites[0];
			for (uint8_t i=1; i < (sizeof(nvic_priorites)/sizeof(nvic_priorites[0])); i++) {
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    1e9a:	784b      	ldrb	r3, [r1, #1]
	void priority(uint8_t n) {
		nvic_priority = n;
		if (channel) {
			int index = channel - IMXRT_PIT_CHANNELS;
			nvic_priorites[index] = nvic_priority;
			uint8_t top_priority = nvic_priorites[0];
    1e9c:	780c      	ldrb	r4, [r1, #0]
			for (uint8_t i=1; i < (sizeof(nvic_priorites)/sizeof(nvic_priorites[0])); i++) {
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    1e9e:	788a      	ldrb	r2, [r1, #2]
    1ea0:	42a3      	cmp	r3, r4
    1ea2:	78c9      	ldrb	r1, [r1, #3]
    1ea4:	bf28      	it	cs
    1ea6:	4623      	movcs	r3, r4
    1ea8:	4293      	cmp	r3, r2
    1eaa:	bf28      	it	cs
    1eac:	4613      	movcs	r3, r2
    1eae:	428b      	cmp	r3, r1
    1eb0:	bf28      	it	cs
    1eb2:	460b      	movcs	r3, r1
			}
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    1eb4:	7003      	strb	r3, [r0, #0]
 
SchedulingFrequency = (int)(*DataGatheringParameter).FlightParam[0][0];   
mainTimer.priority(0);

}
    1eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
    1eba:	4770      	bx	lr
    1ebc:	20000e2c 	.word	0x20000e2c
    1ec0:	20001ecc 	.word	0x20001ecc
    1ec4:	bff7bf00 	.word	0xbff7bf00
    1ec8:	200010e0 	.word	0x200010e0
    1ecc:	e000e47a 	.word	0xe000e47a

00001ed0 <DataGathering::Scheduling(bool)>:

void DataGathering::Scheduling(bool State){
    if(State){
    1ed0:	b180      	cbz	r0, 1ef4 <DataGathering::Scheduling(bool)+0x24>
    
        mainTimer.begin(ScheduledGathering,SchedulingFrequency);
    1ed2:	4b0a      	ldr	r3, [pc, #40]	; (1efc <DataGathering::Scheduling(bool)+0x2c>)
    1ed4:	681a      	ldr	r2, [r3, #0]
		uint32_t cycles = (24000000 / 1000000) * microseconds - 1;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
	}
	bool begin(void (*funct)(), int microseconds) {
		if (microseconds < 0) return false;
    1ed6:	2a00      	cmp	r2, #0
    1ed8:	db03      	blt.n	1ee2 <DataGathering::Scheduling(bool)+0x12>
	}
	~IntervalTimer() {
		end();
	}
	bool begin(void (*funct)(), unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return false;
    1eda:	1e51      	subs	r1, r2, #1
    1edc:	4b08      	ldr	r3, [pc, #32]	; (1f00 <DataGathering::Scheduling(bool)+0x30>)
    1ede:	4299      	cmp	r1, r3
    1ee0:	d900      	bls.n	1ee4 <DataGathering::Scheduling(bool)+0x14>
    1ee2:	4770      	bx	lr
		uint32_t cycles = (24000000 / 1000000) * microseconds - 1;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
    1ee4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1ee8:	4906      	ldr	r1, [pc, #24]	; (1f04 <DataGathering::Scheduling(bool)+0x34>)
    1eea:	4807      	ldr	r0, [pc, #28]	; (1f08 <DataGathering::Scheduling(bool)+0x38>)
    1eec:	00d2      	lsls	r2, r2, #3
    1eee:	3a01      	subs	r2, #1
    1ef0:	f004 bac6 	b.w	6480 <IntervalTimer::beginCycles(void (*)(), unsigned long)>

    }
    else {

        mainTimer.end();
    1ef4:	4804      	ldr	r0, [pc, #16]	; (1f08 <DataGathering::Scheduling(bool)+0x38>)
    1ef6:	f004 bb23 	b.w	6540 <IntervalTimer::end()>
    1efa:	bf00      	nop
    1efc:	20001ecc 	.word	0x20001ecc
    1f00:	0aaaaaa9 	.word	0x0aaaaaa9
    1f04:	0000021d 	.word	0x0000021d
    1f08:	20000e2c 	.word	0x20000e2c

00001f0c <ScheduledGatheringObject::begin(unsigned char)>:



void ScheduledGatheringObject::begin(uint8_t Div){

    Divider = Div;
    1f0c:	7001      	strb	r1, [r0, #0]
    1f0e:	4770      	bx	lr

00001f10 <ScheduledGatheringObject::IsExecuted()>:

}

bool ScheduledGatheringObject::IsExecuted(){
    if(counter == Divider){
    1f10:	7843      	ldrb	r3, [r0, #1]

    Divider = Div;

}

bool ScheduledGatheringObject::IsExecuted(){
    1f12:	4602      	mov	r2, r0
    if(counter == Divider){
    1f14:	7801      	ldrb	r1, [r0, #0]
    1f16:	4299      	cmp	r1, r3
    1f18:	d003      	beq.n	1f22 <ScheduledGatheringObject::IsExecuted()+0x12>
        counter = 1;
        return true;
    }
    else {

        counter ++;
    1f1a:	3301      	adds	r3, #1
        return false;
    1f1c:	2000      	movs	r0, #0
        counter = 1;
        return true;
    }
    else {

        counter ++;
    1f1e:	7053      	strb	r3, [r2, #1]
        return false;

    }

}
    1f20:	4770      	bx	lr
}

bool ScheduledGatheringObject::IsExecuted(){
    if(counter == Divider){

        counter = 1;
    1f22:	2001      	movs	r0, #1
    1f24:	7050      	strb	r0, [r2, #1]
        return true;
    1f26:	4770      	bx	lr

00001f28 <_GLOBAL__sub_I__ZN13DataGathering19SchedulingFrequencyE>:
#include "DataGathering.h"

int DataGathering::SchedulingFrequency;
IntervalTimer DataGathering::mainTimer;
    1f28:	4a02      	ldr	r2, [pc, #8]	; (1f34 <_GLOBAL__sub_I__ZN13DataGathering19SchedulingFrequencyE+0xc>)
    1f2a:	4903      	ldr	r1, [pc, #12]	; (1f38 <_GLOBAL__sub_I__ZN13DataGathering19SchedulingFrequencyE+0x10>)
    1f2c:	4803      	ldr	r0, [pc, #12]	; (1f3c <_GLOBAL__sub_I__ZN13DataGathering19SchedulingFrequencyE+0x14>)
    1f2e:	f006 b84f 	b.w	7fd0 <__aeabi_atexit>
    1f32:	bf00      	nop
    1f34:	20000e24 	.word	0x20000e24
    1f38:	00001e61 	.word	0x00001e61
    1f3c:	20000e2c 	.word	0x20000e2c

00001f40 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>:
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}

// Work out if we have a DigitalPin Inbound
void VisualMicroDebug::digitalWriteMessageCheck()
    1f40:	b530      	push	{r4, r5, lr}
    1f42:	b083      	sub	sp, #12
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1f44:	f003 fe2c 	bl	5ba0 <usb_serial_getchar>
    1f48:	f003 fe2a 	bl	5ba0 <usb_serial_getchar>
    1f4c:	ad01      	add	r5, sp, #4
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
    1f4e:	b2c0      	uxtb	r0, r0
	int pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
    1f50:	283a      	cmp	r0, #58	; 0x3a
    1f52:	d007      	beq.n	1f64 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x24>
    1f54:	462c      	mov	r4, r5
			pinStr[pinCharRead] = nxt;
    1f56:	f804 0b01 	strb.w	r0, [r4], #1
    1f5a:	f003 fe21 	bl	5ba0 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
    1f5e:	b2c0      	uxtb	r0, r0
	int pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
    1f60:	283a      	cmp	r0, #58	; 0x3a
    1f62:	d1f8      	bne.n	1f56 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x16>
			pinStr[pinCharRead] = nxt;
			pinCharRead++;
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
    1f64:	4628      	mov	r0, r5
    1f66:	f006 f83d 	bl	7fe4 <atoi>
    1f6a:	4604      	mov	r4, r0
    1f6c:	f003 fe18 	bl	5ba0 <usb_serial_getchar>
		int state = read() - 48;
    1f70:	b2c0      	uxtb	r0, r0
    1f72:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
    1f76:	2901      	cmp	r1, #1
    1f78:	d802      	bhi.n	1f80 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x40>
    1f7a:	e011      	b.n	1fa0 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x60>
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
    1f7c:	280d      	cmp	r0, #13
    1f7e:	d004      	beq.n	1f8a <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x4a>
    1f80:	f003 fe0e 	bl	5ba0 <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
    1f84:	b2c0      	uxtb	r0, r0
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
    1f86:	280a      	cmp	r0, #10
    1f88:	d1f8      	bne.n	1f7c <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x3c>
        virtual int peek() { return usb_serial_peekchar(); }
    1f8a:	f003 fda7 	bl	5adc <usb_serial_peekchar>
			nxt = read();
		}
		if (peek() == '\n') {
    1f8e:	b2c0      	uxtb	r0, r0
    1f90:	280a      	cmp	r0, #10
    1f92:	d001      	beq.n	1f98 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x58>
			read();
		}
	}
}
    1f94:	b003      	add	sp, #12
    1f96:	bd30      	pop	{r4, r5, pc}
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1f98:	f003 fe02 	bl	5ba0 <usb_serial_getchar>
    1f9c:	b003      	add	sp, #12
    1f9e:	bd30      	pop	{r4, r5, pc}
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
    1fa0:	b2c9      	uxtb	r1, r1
    1fa2:	b2e0      	uxtb	r0, r4
    1fa4:	f002 fd92 	bl	4acc <digitalWrite>
    1fa8:	e7ea      	b.n	1f80 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x40>
    1faa:	bf00      	nop

00001fac <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
    1fac:	4804      	ldr	r0, [pc, #16]	; (1fc0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
    1fae:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1fb0:	4411      	add	r1, r2
    1fb2:	e001      	b.n	1fb8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1fb4:	4299      	cmp	r1, r3
    1fb6:	d302      	bcc.n	1fbe <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
    1fb8:	6803      	ldr	r3, [r0, #0]
    1fba:	429a      	cmp	r2, r3
    1fbc:	d9fa      	bls.n	1fb4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
    1fbe:	4770      	bx	lr
    1fc0:	200021a0 	.word	0x200021a0

00001fc4 <VisualMicroDebug::DBG_Millis()>:
    1fc4:	4b01      	ldr	r3, [pc, #4]	; (1fcc <VisualMicroDebug::DBG_Millis()+0x8>)
    1fc6:	6818      	ldr	r0, [r3, #0]
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
}
    1fc8:	4770      	bx	lr
    1fca:	bf00      	nop
    1fcc:	200021a0 	.word	0x200021a0

00001fd0 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
    1fd0:	4b09      	ldr	r3, [pc, #36]	; (1ff8 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x28>)
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    1fd2:	6882      	ldr	r2, [r0, #8]
    1fd4:	681b      	ldr	r3, [r3, #0]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    1fd6:	b510      	push	{r4, lr}
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    1fd8:	2400      	movs	r4, #0
void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
    1fda:	6101      	str	r1, [r0, #16]
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    1fdc:	60c2      	str	r2, [r0, #12]
{
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    1fde:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
    1fe0:	6083      	str	r3, [r0, #8]
        virtual int peek() { return usb_serial_peekchar(); }
    1fe2:	f003 fd7b 	bl	5adc <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	int pinCharRead = 0;
	if (nxtChar == 'd') {
    1fe6:	b2c0      	uxtb	r0, r0
    1fe8:	2864      	cmp	r0, #100	; 0x64
    1fea:	d000      	beq.n	1fee <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x1e>
    1fec:	bd10      	pop	{r4, pc}
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}
    1fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ff2:	f7ff bfa5 	b.w	1f40 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>
    1ff6:	bf00      	nop
    1ff8:	200021a0 	.word	0x200021a0

00001ffc <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:
		}
	}
}

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
    1ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2000:	4b19      	ldr	r3, [pc, #100]	; (2068 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x6c>)
    2002:	460e      	mov	r6, r1
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2004:	4c19      	ldr	r4, [pc, #100]	; (206c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x70>)
    2006:	4605      	mov	r5, r0
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2008:	2106      	movs	r1, #6
    200a:	4819      	ldr	r0, [pc, #100]	; (2070 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
    200c:	681f      	ldr	r7, [r3, #0]
    200e:	f003 fded 	bl	5bec <usb_serial_write>
    2012:	4631      	mov	r1, r6
    2014:	2300      	movs	r3, #0
    2016:	220a      	movs	r2, #10
    2018:	4620      	mov	r0, r4
    201a:	f004 fb13 	bl	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    201e:	4e15      	ldr	r6, [pc, #84]	; (2074 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
    2020:	2103      	movs	r1, #3
    2022:	4815      	ldr	r0, [pc, #84]	; (2078 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
    2024:	f003 fde2 	bl	5bec <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2028:	4639      	mov	r1, r7
    202a:	2300      	movs	r3, #0
    202c:	220a      	movs	r2, #10
    202e:	4620      	mov	r0, r4
    2030:	f004 fb08 	bl	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2034:	4630      	mov	r0, r6
    2036:	2101      	movs	r1, #1
    2038:	f003 fdd8 	bl	5bec <usb_serial_write>
    203c:	68a9      	ldr	r1, [r5, #8]
    203e:	2300      	movs	r3, #0
    2040:	220a      	movs	r2, #10
    2042:	1a79      	subs	r1, r7, r1
    2044:	4620      	mov	r0, r4
    2046:	f004 fafd 	bl	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    204a:	4630      	mov	r0, r6
    204c:	2101      	movs	r1, #1
    204e:	f003 fdcd 	bl	5bec <usb_serial_write>
    2052:	68ae      	ldr	r6, [r5, #8]
    2054:	68e9      	ldr	r1, [r5, #12]
    2056:	4620      	mov	r0, r4
    2058:	2300      	movs	r3, #0
    205a:	220a      	movs	r2, #10
    205c:	1a71      	subs	r1, r6, r1
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
    205e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2062:	f004 baef 	b.w	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2066:	bf00      	nop
    2068:	200021a0 	.word	0x200021a0
    206c:	200010e4 	.word	0x200010e4
    2070:	200003cc 	.word	0x200003cc
    2074:	200003d8 	.word	0x200003d8
    2078:	200003d4 	.word	0x200003d4

0000207c <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
    207c:	b508      	push	{r3, lr}
    207e:	2106      	movs	r1, #6
    2080:	4803      	ldr	r0, [pc, #12]	; (2090 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
    2082:	f003 fdb3 	bl	5bec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2086:	4803      	ldr	r0, [pc, #12]	; (2094 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif

#endif
}
    2088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    208c:	f004 baca 	b.w	6624 <Print::println()>
    2090:	200003dc 	.word	0x200003dc
    2094:	200010e4 	.word	0x200010e4

00002098 <VisualMicroDebug::OnBreakPointEnd()>:

void VisualMicroDebug::OnBreakPointEnd()
{
    2098:	b510      	push	{r4, lr}
    209a:	4604      	mov	r4, r0
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    209c:	f003 fd1e 	bl	5adc <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	int pinCharRead = 0;
	if (nxtChar == 'd') {
    20a0:	b2c0      	uxtb	r0, r0
    20a2:	2864      	cmp	r0, #100	; 0x64
    20a4:	d003      	beq.n	20ae <VisualMicroDebug::OnBreakPointEnd()+0x16>
    20a6:	4b05      	ldr	r3, [pc, #20]	; (20bc <VisualMicroDebug::OnBreakPointEnd()+0x24>)
    20a8:	681b      	ldr	r3, [r3, #0]

void VisualMicroDebug::OnBreakPointEnd()
{
	digitalWriteMessageCheck(); // Check for Digital Pin
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
    20aa:	60a3      	str	r3, [r4, #8]
    20ac:	bd10      	pop	{r4, pc}
    20ae:	f7ff ff47 	bl	1f40 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>
    20b2:	4b02      	ldr	r3, [pc, #8]	; (20bc <VisualMicroDebug::OnBreakPointEnd()+0x24>)
    20b4:	681b      	ldr	r3, [r3, #0]
    20b6:	60a3      	str	r3, [r4, #8]
    20b8:	bd10      	pop	{r4, pc}
    20ba:	bf00      	nop
    20bc:	200021a0 	.word	0x200021a0

000020c0 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    20c0:	b410      	push	{r4}
    20c2:	4a0c      	ldr	r2, [pc, #48]	; (20f4 <VisualMicroDebug::outPacketStart(bool)+0x34>)
    20c4:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
    20c6:	b971      	cbnz	r1, 20e6 <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    20c8:	6841      	ldr	r1, [r0, #4]
    20ca:	6813      	ldr	r3, [r2, #0]
    20cc:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    20ce:	2931      	cmp	r1, #49	; 0x31
    20d0:	d809      	bhi.n	20e6 <VisualMicroDebug::outPacketStart(bool)+0x26>
    20d2:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    20d4:	f100 0332 	add.w	r3, r0, #50	; 0x32
    20d8:	1a59      	subs	r1, r3, r1
    20da:	e001      	b.n	20e0 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    20dc:	4299      	cmp	r1, r3
    20de:	d302      	bcc.n	20e6 <VisualMicroDebug::outPacketStart(bool)+0x26>
    20e0:	6813      	ldr	r3, [r2, #0]
    20e2:	4298      	cmp	r0, r3
    20e4:	d9fa      	bls.n	20dc <VisualMicroDebug::outPacketStart(bool)+0x1c>
    20e6:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
    20e8:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    20ea:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    20ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    20f0:	4770      	bx	lr
    20f2:	bf00      	nop
    20f4:	200021a0 	.word	0x200021a0

000020f8 <VisualMicroDebug::outPacketEnd()>:
    20f8:	4770      	bx	lr
    20fa:	bf00      	nop

000020fc <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    20fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2100:	f002 bc58 	b.w	49b4 <delay>

00002104 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    2104:	2300      	movs	r3, #0
    2106:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    2108:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    210a:	b141      	cbz	r1, 211e <VisualMicroDebug::init(unsigned long)+0x1a>
    210c:	4804      	ldr	r0, [pc, #16]	; (2120 <VisualMicroDebug::init(unsigned long)+0x1c>)
    210e:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    2110:	4411      	add	r1, r2
    2112:	e001      	b.n	2118 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2114:	4299      	cmp	r1, r3
    2116:	d302      	bcc.n	211e <VisualMicroDebug::init(unsigned long)+0x1a>
    2118:	6803      	ldr	r3, [r0, #0]
    211a:	429a      	cmp	r2, r3
    211c:	d9fa      	bls.n	2114 <VisualMicroDebug::init(unsigned long)+0x10>
    211e:	4770      	bx	lr
    2120:	200021a0 	.word	0x200021a0

00002124 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    2124:	b538      	push	{r3, r4, r5, lr}
    2126:	4c0f      	ldr	r4, [pc, #60]	; (2164 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
    2128:	460d      	mov	r5, r1
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    212a:	2106      	movs	r1, #6
    212c:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    212e:	6043      	str	r3, [r0, #4]
    2130:	480d      	ldr	r0, [pc, #52]	; (2168 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
    2132:	f003 fd5b 	bl	5bec <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2136:	220a      	movs	r2, #10
    2138:	2300      	movs	r3, #0
    213a:	4629      	mov	r1, r5
    213c:	480b      	ldr	r0, [pc, #44]	; (216c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    213e:	f004 fa81 	bl	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2142:	2106      	movs	r1, #6
    2144:	480a      	ldr	r0, [pc, #40]	; (2170 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
    2146:	f003 fd51 	bl	5bec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    214a:	4808      	ldr	r0, [pc, #32]	; (216c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    214c:	f004 fa6a 	bl	6624 <Print::println()>
    2150:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    2152:	f102 0132 	add.w	r1, r2, #50	; 0x32
    2156:	e001      	b.n	215c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2158:	4299      	cmp	r1, r3
    215a:	d302      	bcc.n	2162 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
    215c:	6823      	ldr	r3, [r4, #0]
    215e:	429a      	cmp	r2, r3
    2160:	d9fa      	bls.n	2158 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
    2162:	bd38      	pop	{r3, r4, r5, pc}
    2164:	200021a0 	.word	0x200021a0
    2168:	200003e4 	.word	0x200003e4
    216c:	200010e4 	.word	0x200010e4
    2170:	200003ec 	.word	0x200003ec

00002174 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    2174:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    2176:	7e03      	ldrb	r3, [r0, #24]
    2178:	b90b      	cbnz	r3, 217e <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    217a:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    217c:	bd38      	pop	{r3, r4, r5, pc}
    217e:	460d      	mov	r5, r1
    2180:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2182:	f003 fccd 	bl	5b20 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    2186:	f010 0fff 	tst.w	r0, #255	; 0xff
    218a:	d101      	bne.n	2190 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    218c:	2065      	movs	r0, #101	; 0x65
    218e:	bd38      	pop	{r3, r4, r5, pc}
    2190:	f003 fcc6 	bl	5b20 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    2194:	f010 0fff 	tst.w	r0, #255	; 0xff
    2198:	d0f8      	beq.n	218c <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    219a:	f003 fd01 	bl	5ba0 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    219e:	b2c0      	uxtb	r0, r0
    21a0:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    21a4:	2b1e      	cmp	r3, #30
    21a6:	d8f3      	bhi.n	2190 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    21a8:	a201      	add	r2, pc, #4	; (adr r2, 21b0 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    21aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    21ae:	bf00      	nop
    21b0:	00002239 	.word	0x00002239
    21b4:	00002191 	.word	0x00002191
    21b8:	00002191 	.word	0x00002191
    21bc:	00002191 	.word	0x00002191
    21c0:	00002191 	.word	0x00002191
    21c4:	00002191 	.word	0x00002191
    21c8:	00002191 	.word	0x00002191
    21cc:	00002191 	.word	0x00002191
    21d0:	00002191 	.word	0x00002191
    21d4:	00002191 	.word	0x00002191
    21d8:	00002191 	.word	0x00002191
    21dc:	0000222d 	.word	0x0000222d
    21e0:	00002191 	.word	0x00002191
    21e4:	00002191 	.word	0x00002191
    21e8:	00002191 	.word	0x00002191
    21ec:	00002191 	.word	0x00002191
    21f0:	0000217b 	.word	0x0000217b
    21f4:	00002191 	.word	0x00002191
    21f8:	00002191 	.word	0x00002191
    21fc:	00002191 	.word	0x00002191
    2200:	00002191 	.word	0x00002191
    2204:	00002191 	.word	0x00002191
    2208:	00002191 	.word	0x00002191
    220c:	00002191 	.word	0x00002191
    2210:	00002191 	.word	0x00002191
    2214:	0000217b 	.word	0x0000217b
    2218:	00002191 	.word	0x00002191
    221c:	00002191 	.word	0x00002191
    2220:	00002191 	.word	0x00002191
    2224:	00002191 	.word	0x00002191
    2228:	0000217d 	.word	0x0000217d
		{

		case 'c':
			sendContinuedACK(breakPointId);
    222c:	4620      	mov	r0, r4
    222e:	4629      	mov	r1, r5
    2230:	f7ff ff78 	bl	2124 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    2234:	2063      	movs	r0, #99	; 0x63
    2236:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    2238:	2300      	movs	r3, #0
			return 'c';
    223a:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    223c:	7623      	strb	r3, [r4, #24]
    223e:	bd38      	pop	{r3, r4, r5, pc}

00002240 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    2240:	b570      	push	{r4, r5, r6, lr}
    2242:	4605      	mov	r5, r0
    2244:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    2246:	b1a9      	cbz	r1, 2274 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
    2248:	2301      	movs	r3, #1
    224a:	4c0b      	ldr	r4, [pc, #44]	; (2278 <VisualMicroDebug::start(bool, bool)+0x38>)
    224c:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    224e:	2100      	movs	r1, #0
    2250:	4628      	mov	r0, r5
    2252:	f7ff ff8f 	bl	2174 <VisualMicroDebug::breakWait(unsigned char)>
    2256:	2863      	cmp	r0, #99	; 0x63
    2258:	d00c      	beq.n	2274 <VisualMicroDebug::start(bool, bool)+0x34>
    225a:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    225c:	1c51      	adds	r1, r2, #1
    225e:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2260:	429a      	cmp	r2, r3
    2262:	d8f4      	bhi.n	224e <VisualMicroDebug::start(bool, bool)+0xe>
    2264:	4299      	cmp	r1, r3
    2266:	d2fa      	bcs.n	225e <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    2268:	2100      	movs	r1, #0
    226a:	4628      	mov	r0, r5
    226c:	f7ff ff82 	bl	2174 <VisualMicroDebug::breakWait(unsigned char)>
    2270:	2863      	cmp	r0, #99	; 0x63
    2272:	d1f2      	bne.n	225a <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    2274:	762e      	strb	r6, [r5, #24]
    2276:	bd70      	pop	{r4, r5, r6, pc}
    2278:	200021a0 	.word	0x200021a0

0000227c <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    227c:	4b03      	ldr	r3, [pc, #12]	; (228c <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    227e:	2200      	movs	r2, #0
    2280:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    2282:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    2284:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    2286:	615a      	str	r2, [r3, #20]
    2288:	4770      	bx	lr
    228a:	bf00      	nop
    228c:	20001ed0 	.word	0x20001ed0

00002290 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    2290:	2000      	movs	r0, #0
    2292:	4770      	bx	lr

00002294 <Print::flush()>:
	virtual void flush()				{ }
    2294:	4770      	bx	lr
    2296:	bf00      	nop

00002298 <File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    2298:	b510      	push	{r4, lr}
    229a:	b082      	sub	sp, #8
  return write(&val, 1);
    229c:	6804      	ldr	r4, [r0, #0]
    229e:	2201      	movs	r2, #1
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    22a0:	ab02      	add	r3, sp, #8
    22a2:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&val, 1);
    22a6:	4619      	mov	r1, r3
    22a8:	6863      	ldr	r3, [r4, #4]
    22aa:	4798      	blx	r3
}
    22ac:	b002      	add	sp, #8
    22ae:	bd10      	pop	{r4, pc}

000022b0 <File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    22b0:	69c0      	ldr	r0, [r0, #28]
    22b2:	b138      	cbz	r0, 22c4 <File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    22b4:	6983      	ldr	r3, [r0, #24]
    22b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
    22ba:	68c0      	ldr	r0, [r0, #12]
    22bc:	1a18      	subs	r0, r3, r0
    22be:	4290      	cmp	r0, r2
    22c0:	bf28      	it	cs
    22c2:	4610      	movcs	r0, r2
}
    22c4:	4770      	bx	lr
    22c6:	bf00      	nop

000022c8 <File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    22c8:	69c3      	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    22ca:	b510      	push	{r4, lr}
    22cc:	4604      	mov	r4, r0
  size_t t;
  if (!_file) {
    22ce:	b13b      	cbz	r3, 22e0 <File::write(unsigned char const*, unsigned int)+0x18>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    22d0:	2000      	movs	r0, #0
    22d2:	7118      	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    22d4:	69e0      	ldr	r0, [r4, #28]
    22d6:	f001 fd2b 	bl	3d30 <SdFile::write(void const*, unsigned int)>
    22da:	69e3      	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    22dc:	791b      	ldrb	r3, [r3, #4]
    22de:	b11b      	cbz	r3, 22e8 <File::write(unsigned char const*, unsigned int)+0x20>
    22e0:	2301      	movs	r3, #1

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    22e2:	2000      	movs	r0, #0
    22e4:	7123      	strb	r3, [r4, #4]
    22e6:	bd10      	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    22e8:	bd10      	pop	{r4, pc}
    22ea:	bf00      	nop

000022ec <File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    22ec:	69c0      	ldr	r0, [r0, #28]
    22ee:	b178      	cbz	r0, 2310 <File::read()+0x24>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    22f0:	2201      	movs	r2, #1
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    22f2:	b500      	push	{lr}
    22f4:	b083      	sub	sp, #12
    22f6:	f10d 0107 	add.w	r1, sp, #7
    22fa:	f001 faab 	bl	3854 <SdFile::read(void*, unsigned int)>
    22fe:	2801      	cmp	r0, #1
    2300:	bf0c      	ite	eq
    2302:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    2306:	f04f 30ff 	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    230a:	b003      	add	sp, #12
    230c:	f85d fb04 	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    2310:	f04f 30ff 	mov.w	r0, #4294967295
    2314:	4770      	bx	lr
    2316:	bf00      	nop

00002318 <File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    2318:	69c3      	ldr	r3, [r0, #28]
    231a:	b1c3      	cbz	r3, 234e <File::peek()+0x36>
    231c:	2201      	movs	r2, #1
    return 0;
  }
  return t;
}

int File::peek() {
    231e:	b510      	push	{r4, lr}
    2320:	b082      	sub	sp, #8
    2322:	4604      	mov	r4, r0
    2324:	4618      	mov	r0, r3
    2326:	f10d 0107 	add.w	r1, sp, #7
    232a:	f001 fa93 	bl	3854 <SdFile::read(void*, unsigned int)>
    232e:	2801      	cmp	r0, #1
    2330:	d003      	beq.n	233a <File::peek()+0x22>
    2332:	f04f 30ff 	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    2336:	b002      	add	sp, #8
    2338:	bd10      	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    233a:	69e0      	ldr	r0, [r4, #28]
    233c:	f89d 4007 	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    2340:	68c1      	ldr	r1, [r0, #12]
    2342:	3901      	subs	r1, #1
    2344:	f001 fb42 	bl	39cc <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    2348:	4620      	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    234a:	b002      	add	sp, #8
    234c:	bd10      	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    234e:	4618      	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    2350:	4770      	bx	lr
    2352:	bf00      	nop

00002354 <File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    2354:	69c0      	ldr	r0, [r0, #28]
    2356:	b108      	cbz	r0, 235c <File::flush()+0x8>
    _file->sync();
    2358:	f001 bb68 	b.w	3a2c <SdFile::sync()>
    235c:	4770      	bx	lr
    235e:	bf00      	nop

00002360 <File::File(SdFile, char const*)>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    2360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2364:	2300      	movs	r3, #0
    2366:	4605      	mov	r5, r0
    2368:	4c15      	ldr	r4, [pc, #84]	; (23c0 <File::File(SdFile, char const*)+0x60>)
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    236a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    236e:	712b      	strb	r3, [r5, #4]
    2370:	4690      	mov	r8, r2
    2372:	60a8      	str	r0, [r5, #8]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    2374:	2024      	movs	r0, #36	; 0x24

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    2376:	602c      	str	r4, [r5, #0]
    2378:	460c      	mov	r4, r1
    237a:	732b      	strb	r3, [r5, #12]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    237c:	f005 fe88 	bl	8090 <malloc>
    2380:	61e8      	str	r0, [r5, #28]
  if (_file) {
    2382:	b1c8      	cbz	r0, 23b8 <File::File(SdFile, char const*)+0x58>
    memcpy(_file, &f, sizeof(SdFile));
    2384:	4606      	mov	r6, r0
    2386:	f104 0e20 	add.w	lr, r4, #32
    238a:	6820      	ldr	r0, [r4, #0]
    238c:	3410      	adds	r4, #16
    238e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    2392:	4637      	mov	r7, r6
    2394:	f854 2c08 	ldr.w	r2, [r4, #-8]
    2398:	3610      	adds	r6, #16
    239a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    239e:	4574      	cmp	r4, lr
    23a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    23a2:	d1f2      	bne.n	238a <File::File(SdFile, char const*)+0x2a>
    23a4:	6820      	ldr	r0, [r4, #0]
    
    strncpy(_name, n, 12);
    23a6:	4641      	mov	r1, r8
    23a8:	220c      	movs	r2, #12

File::File(SdFile f, const char *n) {
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
  if (_file) {
    memcpy(_file, &f, sizeof(SdFile));
    23aa:	6030      	str	r0, [r6, #0]
    
    strncpy(_name, n, 12);
    23ac:	f105 000d 	add.w	r0, r5, #13
    23b0:	f006 fe04 	bl	8fbc <strncpy>
    _name[12] = 0;
    23b4:	2300      	movs	r3, #0
    23b6:	766b      	strb	r3, [r5, #25]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    23b8:	4628      	mov	r0, r5
    23ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23be:	bf00      	nop
    23c0:	20000444 	.word	0x20000444

000023c4 <File::File()>:
    23c4:	2200      	movs	r2, #0

File::File(void) {
    23c6:	4906      	ldr	r1, [pc, #24]	; (23e0 <File::File()+0x1c>)
    23c8:	b410      	push	{r4}
    23ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    23ce:	6001      	str	r1, [r0, #0]
    23d0:	7102      	strb	r2, [r0, #4]
    23d2:	6084      	str	r4, [r0, #8]
    23d4:	7302      	strb	r2, [r0, #12]
  _file = 0;
    23d6:	61c2      	str	r2, [r0, #28]
  _name[0] = 0;
    23d8:	7342      	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    23da:	f85d 4b04 	ldr.w	r4, [sp], #4
    23de:	4770      	bx	lr
    23e0:	20000444 	.word	0x20000444

000023e4 <File::~File()>:

File::~File(void) {
  //  Serial.print("Deleted file object");
}
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop

000023e8 <File::read(void*, unsigned short)>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    23e8:	69c0      	ldr	r0, [r0, #28]
    23ea:	b108      	cbz	r0, 23f0 <File::read(void*, unsigned short)+0x8>
    return _file->read(buf, nbyte);
    23ec:	f001 ba32 	b.w	3854 <SdFile::read(void*, unsigned int)>
  return 0;
}
    23f0:	4770      	bx	lr
    23f2:	bf00      	nop

000023f4 <File::close()>:
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
  if (_file) {
    23f4:	69c3      	ldr	r3, [r0, #28]
    23f6:	b153      	cbz	r3, 240e <File::close()+0x1a>
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    23f8:	b510      	push	{r4, lr}
    23fa:	4604      	mov	r4, r0
  if (_file) {
    _file->close();
    23fc:	4618      	mov	r0, r3
    23fe:	f001 f9b5 	bl	376c <SdFile::close()>
    free(_file); 
    2402:	69e0      	ldr	r0, [r4, #28]
    2404:	f005 fe4c 	bl	80a0 <free>
    _file = 0;
    2408:	2300      	movs	r3, #0
    240a:	61e3      	str	r3, [r4, #28]
    240c:	bd10      	pop	{r4, pc}
    240e:	4770      	bx	lr

00002410 <File::operator bool()>:
    */
  }
}

File::operator bool() {
  if (_file) 
    2410:	69c0      	ldr	r0, [r0, #28]
    2412:	b118      	cbz	r0, 241c <File::operator bool()+0xc>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    2414:	7980      	ldrb	r0, [r0, #6]
    2416:	3000      	adds	r0, #0
    2418:	bf18      	it	ne
    241a:	2001      	movne	r0, #1
    return  _file->isOpen();
  return false;
}
    241c:	4770      	bx	lr
    241e:	bf00      	nop

00002420 <callback_remove(SdFile&, char*, bool, void*)>:



boolean callback_remove(SdFile& parentDir, char *filePathComponent, 
			boolean isLastComponent, void *object) {
  if (isLastComponent) {
    2420:	b90a      	cbnz	r2, 2426 <callback_remove(SdFile&, char*, bool, void*)+0x6>
    return SdFile::remove(parentDir, filePathComponent);
  }
  return true;
    2422:	2001      	movs	r0, #1
    2424:	4770      	bx	lr
  */



boolean callback_remove(SdFile& parentDir, char *filePathComponent, 
			boolean isLastComponent, void *object) {
    2426:	b508      	push	{r3, lr}
  int8_t readDir(dir_t& dir) {return readDir(&dir);}  // NOLINT
  /** \deprecated Use:
   * static uint8_t SdFile::remove(SdFile* dirFile, const char* fileName);
   */
  static uint8_t remove(SdFile& dirFile, const char* fileName) {  // NOLINT
    return remove(&dirFile, fileName);
    2428:	f001 fc6a 	bl	3d00 <SdFile::remove(SdFile*, char const*)>
  if (isLastComponent) {
    return SdFile::remove(parentDir, filePathComponent);
    242c:	3000      	adds	r0, #0
    242e:	bf18      	it	ne
    2430:	2001      	movne	r0, #1
    2432:	bd08      	pop	{r3, pc}

00002434 <getNextPathComponent(char const*, unsigned int*, char*)>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    2434:	b5f0      	push	{r4, r5, r6, r7, lr}
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    2436:	680e      	ldr	r6, [r1, #0]
    2438:	f102 3eff 	add.w	lr, r2, #4294967295
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    243c:	2500      	movs	r5, #0
  int bufferOffset = 0;

  int offset = *p_offset;

  // Skip root or other separator
  if (path[offset] == '/') {
    243e:	5d83      	ldrb	r3, [r0, r6]
    2440:	2b2f      	cmp	r3, #47	; 0x2f
    offset++;
    2442:	bf08      	it	eq
    2444:	3601      	addeq	r6, #1
    2446:	1987      	adds	r7, r0, r6
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    2448:	783b      	ldrb	r3, [r7, #0]
    244a:	463c      	mov	r4, r7
    244c:	3701      	adds	r7, #1
	 && (path[offset] != '\0')) {
    244e:	2b2f      	cmp	r3, #47	; 0x2f
    2450:	d007      	beq.n	2462 <getNextPathComponent(char const*, unsigned int*, char*)+0x2e>
    2452:	b133      	cbz	r3, 2462 <getNextPathComponent(char const*, unsigned int*, char*)+0x2e>
    buffer[bufferOffset++] = path[offset++];
    2454:	3501      	adds	r5, #1
    2456:	3601      	adds	r6, #1
    2458:	f80e 3f01 	strb.w	r3, [lr, #1]!
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    245c:	2d0c      	cmp	r5, #12
    245e:	d1f3      	bne.n	2448 <getNextPathComponent(char const*, unsigned int*, char*)+0x14>
    2460:	1984      	adds	r4, r0, r6
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    2462:	2300      	movs	r3, #0
    2464:	5553      	strb	r3, [r2, r5]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    2466:	7823      	ldrb	r3, [r4, #0]
    2468:	2b2f      	cmp	r3, #47	; 0x2f
    246a:	d101      	bne.n	2470 <getNextPathComponent(char const*, unsigned int*, char*)+0x3c>
    246c:	3601      	adds	r6, #1
    246e:	1984      	adds	r4, r0, r6
    offset++;
  }

  *p_offset = offset;
    2470:	600e      	str	r6, [r1, #0]

  return (path[offset] != '\0');
    2472:	7820      	ldrb	r0, [r4, #0]
}
    2474:	3000      	adds	r0, #0
    2476:	bf18      	it	ne
    2478:	2001      	movne	r0, #1
    247a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000247c <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)>:
boolean walkPath(const char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2480:	4688      	mov	r8, r1
    2482:	b099      	sub	sp, #100	; 0x64
    2484:	2100      	movs	r1, #0
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2486:	4d26      	ldr	r5, [pc, #152]	; (2520 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0xa4>)
    2488:	4683      	mov	fp, r0
    248a:	4692      	mov	sl, r2
    248c:	4699      	mov	r9, r3
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    248e:	4644      	mov	r4, r8
    2490:	f88d 101c 	strb.w	r1, [sp, #28]
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    2494:	ae06      	add	r6, sp, #24
    2496:	f88d 101e 	strb.w	r1, [sp, #30]
    249a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    249e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    24a2:	9101      	str	r1, [sp, #4]
    24a4:	9506      	str	r5, [sp, #24]
    24a6:	950f      	str	r5, [sp, #60]	; 0x3c
    24a8:	e005      	b.n	24b6 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x3a>
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
      (*p_parent).close();
    24aa:	f001 f95f 	bl	376c <SdFile::close()>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    24ae:	b1fd      	cbz	r5, 24f0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    24b0:	4623      	mov	r3, r4
    24b2:	4634      	mov	r4, r6
    24b4:	461e      	mov	r6, r3
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    24b6:	aa02      	add	r2, sp, #8
    24b8:	a901      	add	r1, sp, #4
    24ba:	4658      	mov	r0, fp
    24bc:	f7ff ffba 	bl	2434 <getNextPathComponent(char const*, unsigned int*, char*)>

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    24c0:	f080 0201 	eor.w	r2, r0, #1
    24c4:	464b      	mov	r3, r9
    24c6:	a902      	add	r1, sp, #8
    24c8:	b2d2      	uxtb	r2, r2
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    24ca:	4605      	mov	r5, r0

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    24cc:	4620      	mov	r0, r4
    24ce:	47d0      	blx	sl
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    24d0:	4621      	mov	r1, r4

    if (!shouldContinue) {
    24d2:	4607      	mov	r7, r0
    24d4:	2301      	movs	r3, #1
    24d6:	aa02      	add	r2, sp, #8
    24d8:	b170      	cbz	r0, 24f8 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x7c>
    24da:	4630      	mov	r0, r6
        (*p_parent).close();
      }
      return false;
    }
    
    if (!moreComponents) {
    24dc:	b1ad      	cbz	r5, 250a <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x8e>
    24de:	f001 fbe5 	bl	3cac <SdFile::open(SdFile*, char const*, unsigned char)>
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    24e2:	4544      	cmp	r4, r8
    24e4:	4605      	mov	r5, r0
      (*p_parent).close();
    24e6:	4620      	mov	r0, r4
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    24e8:	d1df      	bne.n	24aa <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x2e>
      (*p_parent).close();
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    24ea:	b10d      	cbz	r5, 24f0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    24ec:	ac0f      	add	r4, sp, #60	; 0x3c
    24ee:	e7df      	b.n	24b0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x34>
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
        (*p_parent).close();
      }
      return false;
    24f0:	2000      	movs	r0, #0
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
}
    24f2:	b019      	add	sp, #100	; 0x64
    24f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    if (!shouldContinue) {
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    24f8:	4544      	cmp	r4, r8
    24fa:	d0f9      	beq.n	24f0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
        (*p_parent).close();
    24fc:	4620      	mov	r0, r4
    24fe:	f001 f935 	bl	376c <SdFile::close()>
      }
      return false;
    2502:	4638      	mov	r0, r7
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
}
    2504:	b019      	add	sp, #100	; 0x64
    2506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    250a:	4544      	cmp	r4, r8
    250c:	d006      	beq.n	251c <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0xa0>
    (*p_parent).close(); // TODO: Return/ handle different?
    250e:	4620      	mov	r0, r4
    2510:	f001 f92c 	bl	376c <SdFile::close()>
  }

  return true;
    2514:	2001      	movs	r0, #1
}
    2516:	b019      	add	sp, #100	; 0x64
    2518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
    251c:	2001      	movs	r0, #1
    251e:	e7e8      	b.n	24f2 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x76>
    2520:	2000046c 	.word	0x2000046c

00002524 <SDClass::begin(unsigned char)>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    2524:	b538      	push	{r3, r4, r5, lr}

    Return true if initialization succeeds, false otherwise.

   */

  if (root.isOpen()) root.close();
    2526:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    252a:	4604      	mov	r4, r0
    252c:	460d      	mov	r5, r1

    Return true if initialization succeeds, false otherwise.

   */

  if (root.isOpen()) root.close();
    252e:	b9cb      	cbnz	r3, 2564 <SDClass::begin(unsigned char)+0x40>
  Sd2Card(void) : type_(0) {}
  /* Initialize an SD flash memory card with the selected SPI clock rate
   * and the SD chip select pin.  */
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
    2530:	2dfe      	cmp	r5, #254	; 0xfe
    2532:	d01c      	beq.n	256e <SDClass::begin(unsigned char)+0x4a>
      uint8_t ret = SDHC_CardInit();
      type_ = SDHC_CardGetType();
      return (ret == 0) ? true : false;
    }
    #endif
    return SD_init(sckRateID, chipSelectPin);
    2534:	462a      	mov	r2, r5
    2536:	2101      	movs	r1, #1
    2538:	4620      	mov	r0, r4
    253a:	f000 fe29 	bl	3190 <Sd2Card::SD_init(unsigned char, unsigned char)>

  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    253e:	b908      	cbnz	r0, 2544 <SDClass::begin(unsigned char)+0x20>
    2540:	2000      	movs	r0, #0
    2542:	bd38      	pop	{r3, r4, r5, pc}
    2544:	1d25      	adds	r5, r4, #4
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    2546:	2201      	movs	r2, #1
    2548:	4621      	mov	r1, r4
    254a:	4628      	mov	r0, r5
    254c:	f001 fee6 	bl	431c <SdVolume::init(Sd2Card*, unsigned char)>
    2550:	b1c0      	cbz	r0, 2584 <SDClass::begin(unsigned char)+0x60>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    2552:	4629      	mov	r1, r5
    2554:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    2558:	f001 f952 	bl	3800 <SdFile::openRoot(SdVolume*)>
    255c:	3000      	adds	r0, #0
    255e:	bf18      	it	ne
    2560:	2001      	movne	r0, #1
    2562:	bd38      	pop	{r3, r4, r5, pc}

    Return true if initialization succeeds, false otherwise.

   */

  if (root.isOpen()) root.close();
    2564:	302c      	adds	r0, #44	; 0x2c
    2566:	f001 f901 	bl	376c <SdFile::close()>
  Sd2Card(void) : type_(0) {}
  /* Initialize an SD flash memory card with the selected SPI clock rate
   * and the SD chip select pin.  */
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
    256a:	2dfe      	cmp	r5, #254	; 0xfe
    256c:	d1e2      	bne.n	2534 <SDClass::begin(unsigned char)+0x10>
      chipSelectPin_ = BUILTIN_SDCARD;
    256e:	7025      	strb	r5, [r4, #0]
      uint8_t ret = SDHC_CardInit();
    2570:	f000 fb1c 	bl	2bac <SDHC_CardInit()>
    2574:	4605      	mov	r5, r0
      type_ = SDHC_CardGetType();
    2576:	f000 f9fd 	bl	2974 <SDHC_CardGetType()>
    257a:	70a0      	strb	r0, [r4, #2]
      return (ret == 0) ? true : false;
    257c:	fab5 f085 	clz	r0, r5
    2580:	0940      	lsrs	r0, r0, #5
    2582:	e7dc      	b.n	253e <SDClass::begin(unsigned char)+0x1a>
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    2584:	4602      	mov	r2, r0
    2586:	4621      	mov	r1, r4
    2588:	4628      	mov	r0, r5
    258a:	f001 fec7 	bl	431c <SdVolume::init(Sd2Card*, unsigned char)>

  return card.init(SPI_HALF_SPEED, csPin) &&
    258e:	2800      	cmp	r0, #0
    2590:	d1df      	bne.n	2552 <SDClass::begin(unsigned char)+0x2e>
         volume.init(card) &&
    2592:	2000      	movs	r0, #0
    2594:	bd38      	pop	{r3, r4, r5, pc}
    2596:	bf00      	nop

00002598 <SDClass::getParentDir(char const*, int*)>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    2598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    259c:	b099      	sub	sp, #100	; 0x64
    259e:	4692      	mov	sl, r2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    25a0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2688 <SDClass::getParentDir(char const*, int*)+0xf0>
    25a4:	2200      	movs	r2, #0
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    25a6:	ad06      	add	r5, sp, #24
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    25a8:	4607      	mov	r7, r0
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    25aa:	3104      	adds	r1, #4
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    25ac:	4690      	mov	r8, r2
    25ae:	4628      	mov	r0, r5
    25b0:	4654      	mov	r4, sl

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
    25b2:	ae0f      	add	r6, sp, #60	; 0x3c
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    25b4:	9301      	str	r3, [sp, #4]
    25b6:	f88d 201c 	strb.w	r2, [sp, #28]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    25ba:	f88d 201e 	strb.w	r2, [sp, #30]
    25be:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    25c2:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    25c6:	f8cd 9018 	str.w	r9, [sp, #24]
    25ca:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    25ce:	f001 f917 	bl	3800 <SdFile::openRoot(SdVolume*)>
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    25d2:	212f      	movs	r1, #47	; 0x2f
    25d4:	4620      	mov	r0, r4
    25d6:	f006 fb51 	bl	8c7c <strchr>
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    25da:	4621      	mov	r1, r4
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    25dc:	b348      	cbz	r0, 2632 <SDClass::getParentDir(char const*, int*)+0x9a>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    25de:	7822      	ldrb	r2, [r4, #0]
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    25e0:	1b03      	subs	r3, r0, r4
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    25e2:	a802      	add	r0, sp, #8
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    25e4:	2a2f      	cmp	r2, #47	; 0x2f
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    25e6:	b2db      	uxtb	r3, r3
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    25e8:	d043      	beq.n	2672 <SDClass::getParentDir(char const*, int*)+0xda>
    25ea:	2b0c      	cmp	r3, #12
    25ec:	bf28      	it	cs
    25ee:	230c      	movcs	r3, #12
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    25f0:	461a      	mov	r2, r3
    25f2:	469b      	mov	fp, r3
    if (! subdir->open(parent, subdirname, O_READ)) {
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    25f4:	441c      	add	r4, r3
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    25f6:	f006 fce1 	bl	8fbc <strncpy>
    subdirname[idx] = 0;
    25fa:	ab18      	add	r3, sp, #96	; 0x60

    // close the subdir (we reuse them) if open
    subdir->close();
    25fc:	4630      	mov	r0, r6
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    25fe:	445b      	add	r3, fp
    2600:	f803 8c58 	strb.w	r8, [r3, #-88]

    // close the subdir (we reuse them) if open
    subdir->close();
    2604:	f001 f8b2 	bl	376c <SdFile::close()>
    if (! subdir->open(parent, subdirname, O_READ)) {
    2608:	2301      	movs	r3, #1
    260a:	aa02      	add	r2, sp, #8
    260c:	4629      	mov	r1, r5
    260e:	4630      	mov	r0, r6
    2610:	f001 fb4c 	bl	3cac <SdFile::open(SdFile*, char const*, unsigned char)>
    2614:	2800      	cmp	r0, #0
    2616:	d02e      	beq.n	2676 <SDClass::getParentDir(char const*, int*)+0xde>
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    2618:	4628      	mov	r0, r5
    261a:	f001 f8a7 	bl	376c <SdFile::close()>
    261e:	462b      	mov	r3, r5
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    2620:	212f      	movs	r1, #47	; 0x2f
    2622:	4620      	mov	r0, r4
    // we reuse the objects, close it.
    parent->close();

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    2624:	4635      	mov	r5, r6
    2626:	461e      	mov	r6, r3
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    2628:	f006 fb28 	bl	8c7c <strchr>
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    262c:	4621      	mov	r1, r4
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    262e:	2800      	cmp	r0, #0
    2630:	d1d5      	bne.n	25de <SDClass::getParentDir(char const*, int*)+0x46>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    2632:	ebca 0404 	rsb	r4, sl, r4
    2636:	9801      	ldr	r0, [sp, #4]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    2638:	7929      	ldrb	r1, [r5, #4]
    263a:	6004      	str	r4, [r0, #0]
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    263c:	796a      	ldrb	r2, [r5, #5]
    263e:	79ab      	ldrb	r3, [r5, #6]
    2640:	68e8      	ldr	r0, [r5, #12]
    2642:	68ac      	ldr	r4, [r5, #8]
    2644:	692e      	ldr	r6, [r5, #16]
    2646:	7139      	strb	r1, [r7, #4]
    2648:	f895 e014 	ldrb.w	lr, [r5, #20]
    264c:	717a      	strb	r2, [r7, #5]
    264e:	69a9      	ldr	r1, [r5, #24]
    2650:	71bb      	strb	r3, [r7, #6]
    2652:	69ea      	ldr	r2, [r5, #28]
    2654:	6a2b      	ldr	r3, [r5, #32]
    2656:	60f8      	str	r0, [r7, #12]
  // parent is now the parent diretory of the file!
  return *parent;
}
    2658:	4638      	mov	r0, r7
    265a:	f8c7 9000 	str.w	r9, [r7]
    265e:	60bc      	str	r4, [r7, #8]
    2660:	613e      	str	r6, [r7, #16]
    2662:	f887 e014 	strb.w	lr, [r7, #20]
    2666:	61b9      	str	r1, [r7, #24]
    2668:	61fa      	str	r2, [r7, #28]
    266a:	623b      	str	r3, [r7, #32]
    266c:	b019      	add	sp, #100	; 0x64
    266e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
      filepath++;
    2672:	3401      	adds	r4, #1
    2674:	e7ad      	b.n	25d2 <SDClass::getParentDir(char const*, int*)+0x3a>
{
  public:
	constexpr Print() : write_error(0) {}
    2676:	7138      	strb	r0, [r7, #4]
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2678:	71b8      	strb	r0, [r7, #6]
  }

  *index = (int)(filepath - origpath);
  // parent is now the parent diretory of the file!
  return *parent;
}
    267a:	4638      	mov	r0, r7
    267c:	f8c7 9000 	str.w	r9, [r7]
    2680:	b019      	add	sp, #100	; 0x64
    2682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2686:	bf00      	nop
    2688:	2000046c 	.word	0x2000046c

0000268c <SDClass::open(char const*, unsigned char)>:


File SDClass::open(const char *filepath, uint8_t mode) {
    268c:	b5f0      	push	{r4, r5, r6, r7, lr}
    268e:	b09d      	sub	sp, #116	; 0x74
    2690:	4605      	mov	r5, r0
    2692:	461f      	mov	r7, r3
    2694:	4614      	mov	r4, r2
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    2696:	466b      	mov	r3, sp
    2698:	a801      	add	r0, sp, #4
    269a:	f7ff ff7d 	bl	2598 <SDClass::getParentDir(char const*, int*)>
  // no more subdirs!

  filepath += pathidx;
    269e:	9a00      	ldr	r2, [sp, #0]

  if (! filepath[0]) {
    26a0:	5ca3      	ldrb	r3, [r4, r2]

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
  // no more subdirs!

  filepath += pathidx;
    26a2:	4414      	add	r4, r2

  if (! filepath[0]) {
    26a4:	2b00      	cmp	r3, #0
    26a6:	d042      	beq.n	272e <SDClass::open(char const*, unsigned char)+0xa2>
    26a8:	2300      	movs	r3, #0
    26aa:	4e32      	ldr	r6, [pc, #200]	; (2774 <SDClass::open(char const*, unsigned char)+0xe8>)

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    26ac:	f89d 200a 	ldrb.w	r2, [sp, #10]
    26b0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    26b4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    26b8:	960a      	str	r6, [sp, #40]	; 0x28
    26ba:	2a00      	cmp	r2, #0
    26bc:	d031      	beq.n	2722 <SDClass::open(char const*, unsigned char)+0x96>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    26be:	463b      	mov	r3, r7
    26c0:	4622      	mov	r2, r4
    26c2:	a901      	add	r1, sp, #4
    26c4:	a80a      	add	r0, sp, #40	; 0x28
    26c6:	f001 faf1 	bl	3cac <SdFile::open(SdFile*, char const*, unsigned char)>
    return File();

  if ( ! file.open(parentdir, filepath, mode)) {
    26ca:	b350      	cbz	r0, 2722 <SDClass::open(char const*, unsigned char)+0x96>
    return File();
  }
  // close the parent
  parentdir.close();
    26cc:	a801      	add	r0, sp, #4
    26ce:	f001 f84d 	bl	376c <SdFile::close()>

  if (mode & (O_APPEND | O_WRITE)) 
    26d2:	f017 0f06 	tst.w	r7, #6
    26d6:	d147      	bne.n	2768 <SDClass::open(char const*, unsigned char)+0xdc>
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    26d8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    file.seekSet(file.fileSize());
  return File(file, filepath);
    26dc:	4622      	mov	r2, r4
    26de:	f89d 702e 	ldrb.w	r7, [sp, #46]	; 0x2e
    26e2:	a913      	add	r1, sp, #76	; 0x4c
    26e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    26e6:	4628      	mov	r0, r5
    26e8:	9613      	str	r6, [sp, #76]	; 0x4c
    26ea:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    26ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    26f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    26f2:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    26f6:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
    26fa:	9615      	str	r6, [sp, #84]	; 0x54
    26fc:	9416      	str	r4, [sp, #88]	; 0x58
    26fe:	9317      	str	r3, [sp, #92]	; 0x5c
    2700:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
    2704:	9e10      	ldr	r6, [sp, #64]	; 0x40
    2706:	9c11      	ldr	r4, [sp, #68]	; 0x44
    2708:	9b12      	ldr	r3, [sp, #72]	; 0x48
    270a:	f88d e050 	strb.w	lr, [sp, #80]	; 0x50
    270e:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
    2712:	9619      	str	r6, [sp, #100]	; 0x64
    2714:	941a      	str	r4, [sp, #104]	; 0x68
    2716:	931b      	str	r3, [sp, #108]	; 0x6c
    2718:	f7ff fe22 	bl	2360 <File::File(SdFile, char const*)>
}
    271c:	4628      	mov	r0, r5
    271e:	b01d      	add	sp, #116	; 0x74
    2720:	bdf0      	pop	{r4, r5, r6, r7, pc}
  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    return File();
    2722:	4628      	mov	r0, r5
    2724:	f7ff fe4e 	bl	23c4 <File::File()>
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
  return File(file, filepath);
}
    2728:	4628      	mov	r0, r5
    272a:	b01d      	add	sp, #116	; 0x74
    272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    272e:	f89d 3008 	ldrb.w	r3, [sp, #8]

  filepath += pathidx;

  if (! filepath[0]) {
    // it was the directory itself!
    return File(parentdir, "/");
    2732:	a913      	add	r1, sp, #76	; 0x4c
    2734:	4a0f      	ldr	r2, [pc, #60]	; (2774 <SDClass::open(char const*, unsigned char)+0xe8>)
    2736:	4628      	mov	r0, r5
    2738:	f89d 7009 	ldrb.w	r7, [sp, #9]
    273c:	f89d 600a 	ldrb.w	r6, [sp, #10]
    2740:	9c03      	ldr	r4, [sp, #12]
    2742:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    2746:	9213      	str	r2, [sp, #76]	; 0x4c
    2748:	9b04      	ldr	r3, [sp, #16]
    274a:	9a05      	ldr	r2, [sp, #20]
    274c:	f88d 7051 	strb.w	r7, [sp, #81]	; 0x51
    2750:	f88d 6052 	strb.w	r6, [sp, #82]	; 0x52
    2754:	9415      	str	r4, [sp, #84]	; 0x54
    2756:	9316      	str	r3, [sp, #88]	; 0x58
    2758:	9217      	str	r2, [sp, #92]	; 0x5c
    275a:	f89d 7018 	ldrb.w	r7, [sp, #24]
    275e:	9e07      	ldr	r6, [sp, #28]
    2760:	9c08      	ldr	r4, [sp, #32]
    2762:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2764:	4a04      	ldr	r2, [pc, #16]	; (2778 <SDClass::open(char const*, unsigned char)+0xec>)
    2766:	e7d2      	b.n	270e <SDClass::open(char const*, unsigned char)+0x82>
  }
  // close the parent
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
    2768:	a80a      	add	r0, sp, #40	; 0x28
    276a:	9910      	ldr	r1, [sp, #64]	; 0x40
    276c:	f001 f92e 	bl	39cc <SdFile::seekSet(unsigned long)>
    2770:	e7b2      	b.n	26d8 <SDClass::open(char const*, unsigned char)+0x4c>
    2772:	bf00      	nop
    2774:	2000046c 	.word	0x2000046c
    2778:	20000460 	.word	0x20000460

0000277c <SDClass::remove(char const*)>:
  
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
    277c:	b410      	push	{r4}
    277e:	460c      	mov	r4, r1
  return walkPath(filepath, root, callback_remove);
    2780:	2300      	movs	r3, #0
    2782:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    2786:	4a03      	ldr	r2, [pc, #12]	; (2794 <SDClass::remove(char const*)+0x18>)
    2788:	4620      	mov	r0, r4
}
    278a:	f85d 4b04 	ldr.w	r4, [sp], #4
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
  return walkPath(filepath, root, callback_remove);
    278e:	f7ff be75 	b.w	247c <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)>
    2792:	bf00      	nop
    2794:	00002421 	.word	0x00002421

00002798 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    2798:	4b06      	ldr	r3, [pc, #24]	; (27b4 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    279a:	2200      	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    279c:	2002      	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    279e:	4906      	ldr	r1, [pc, #24]	; (27b8 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    27a0:	709a      	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    27a2:	6058      	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    27a4:	62d9      	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    27a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
    27aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    27ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    27b2:	4770      	bx	lr
    27b4:	20001f18 	.word	0x20001f18
    27b8:	2000046c 	.word	0x2000046c

000027bc <sdhc_setSdclk(unsigned long)>:
    //IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    27bc:	4a26      	ldr	r2, [pc, #152]	; (2858 <sdhc_setSdclk(unsigned long)+0x9c>)
static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    27be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    27c2:	4b26      	ldr	r3, [pc, #152]	; (285c <sdhc_setSdclk(unsigned long)+0xa0>)
    //IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    27c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    27c6:	fb01 f000 	mul.w	r0, r1, r0
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    27ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27ce:	4924      	ldr	r1, [pc, #144]	; (2860 <sdhc_setSdclk(unsigned long)+0xa4>)
    27d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    27d4:	fba1 1303 	umull	r1, r3, r1, r3
 Serial.print("VEND_SPEC2:    "); Serial.println(SDHC_VENDOR2,HEX);    // Vendor Specific2 register
 #endif
}
*/

static void sdhc_setSdclk(uint32_t kHzMax) {
    27d8:	b4f0      	push	{r4, r5, r6, r7}
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    27da:	089b      	lsrs	r3, r3, #2
    27dc:	f3c2 24c2 	ubfx	r4, r2, #11, #3
    27e0:	4a20      	ldr	r2, [pc, #128]	; (2864 <sdhc_setSdclk(unsigned long)+0xa8>)
    27e2:	3401      	adds	r4, #1
    27e4:	fbb2 f3f3 	udiv	r3, r2, r3
    27e8:	fbb3 f4f4 	udiv	r4, r3, r4
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    27ec:	ebb0 1f14 	cmp.w	r0, r4, lsr #4
    27f0:	d22d      	bcs.n	284e <sdhc_setSdclk(unsigned long)+0x92>
    27f2:	2301      	movs	r3, #1
    27f4:	e001      	b.n	27fa <sdhc_setSdclk(unsigned long)+0x3e>
    27f6:	2bff      	cmp	r3, #255	; 0xff
    27f8:	d805      	bhi.n	2806 <sdhc_setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    27fa:	005b      	lsls	r3, r3, #1
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    27fc:	011a      	lsls	r2, r3, #4
    27fe:	fbb4 f2f2 	udiv	r2, r4, r2
    2802:	4290      	cmp	r0, r2
    2804:	d3f7      	bcc.n	27f6 <sdhc_setSdclk(unsigned long)+0x3a>
    2806:	085a      	lsrs	r2, r3, #1
    2808:	0217      	lsls	r7, r2, #8
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    280a:	fbb4 f2f3 	udiv	r2, r4, r3
    280e:	4290      	cmp	r0, r2
    2810:	d220      	bcs.n	2854 <sdhc_setSdclk(unsigned long)+0x98>
    2812:	0059      	lsls	r1, r3, #1
    2814:	2201      	movs	r2, #1
    dvs++;
    2816:	1c56      	adds	r6, r2, #1
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    2818:	fbb4 f5f1 	udiv	r5, r4, r1
    281c:	42a8      	cmp	r0, r5
    281e:	4419      	add	r1, r3
    2820:	d213      	bcs.n	284a <sdhc_setSdclk(unsigned long)+0x8e>
    2822:	2e10      	cmp	r6, #16
    2824:	4632      	mov	r2, r6
    2826:	d1f6      	bne.n	2816 <sdhc_setSdclk(unsigned long)+0x5a>
    2828:	23f0      	movs	r3, #240	; 0xf0
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    282a:	4c0f      	ldr	r4, [pc, #60]	; (2868 <sdhc_setSdclk(unsigned long)+0xac>)
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    282c:	480f      	ldr	r0, [pc, #60]	; (286c <sdhc_setSdclk(unsigned long)+0xb0>)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    282e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    2830:	4621      	mov	r1, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    2832:	4010      	ands	r0, r2
    2834:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
    2838:	ea40 0207 	orr.w	r2, r0, r7
    283c:	431a      	orrs	r2, r3
    283e:	62e2      	str	r2, [r4, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    2840:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    2842:	071b      	lsls	r3, r3, #28
    2844:	d5fc      	bpl.n	2840 <sdhc_setSdclk(unsigned long)+0x84>
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif

//  Serial.printf("setSdclk: %d %d : %x %x\n\r", f_pll, m_sdClkKhz, sdclkfs, dvs);
}
    2846:	bcf0      	pop	{r4, r5, r6, r7}
    2848:	4770      	bx	lr
    284a:	0113      	lsls	r3, r2, #4
    284c:	e7ed      	b.n	282a <sdhc_setSdclk(unsigned long)+0x6e>
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    284e:	2700      	movs	r7, #0

static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    2850:	2301      	movs	r3, #1
    2852:	e7da      	b.n	280a <sdhc_setSdclk(unsigned long)+0x4e>
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    2854:	2300      	movs	r3, #0
    2856:	e7e8      	b.n	282a <sdhc_setSdclk(unsigned long)+0x6e>
    2858:	400fc000 	.word	0x400fc000
    285c:	400d8000 	.word	0x400d8000
    2860:	aaaaaaab 	.word	0xaaaaaaab
    2864:	5e69ec00 	.word	0x5e69ec00
    2868:	402c0000 	.word	0x402c0000
    286c:	fff0000f 	.word	0xfff0000f

00002870 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    2870:	4b20      	ldr	r3, [pc, #128]	; (28f4 <SDHC_CMD_Do(unsigned long)+0x84>)
    2872:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    2874:	4619      	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    2876:	b410      	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    2878:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    287c:	461c      	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    287e:	631a      	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    2880:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    2882:	4b1c      	ldr	r3, [pc, #112]	; (28f4 <SDHC_CMD_Do(unsigned long)+0x84>)
    2884:	07d2      	lsls	r2, r2, #31
    2886:	d4fb      	bmi.n	2880 <SDHC_CMD_Do(unsigned long)+0x10>
    2888:	6a62      	ldr	r2, [r4, #36]	; 0x24
    288a:	0792      	lsls	r2, r2, #30
    288c:	d4f8      	bmi.n	2880 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    288e:	60d8      	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    2890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    2894:	4618      	mov	r0, r3
    2896:	e000      	b.n	289a <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    2898:	b1aa      	cbz	r2, 28c6 <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    289a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    289c:	3a01      	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    289e:	4b16      	ldr	r3, [pc, #88]	; (28f8 <SDHC_CMD_Do(unsigned long)+0x88>)
    28a0:	4c14      	ldr	r4, [pc, #80]	; (28f4 <SDHC_CMD_Do(unsigned long)+0x84>)
    28a2:	400b      	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    28a4:	2b00      	cmp	r3, #0
    28a6:	d0f7      	beq.n	2898 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    28a8:	b16a      	cbz	r2, 28c6 <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    28aa:	2b01      	cmp	r3, #1
    28ac:	d10b      	bne.n	28c6 <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    28ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    28b0:	f013 0f80 	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    28b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    28b6:	d00f      	beq.n	28d8 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    28b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    28bc:	2003      	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    28be:	6323      	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    28c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    28c4:	4770      	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    28c6:	4a0b      	ldr	r2, [pc, #44]	; (28f4 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    28c8:	2001      	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    28ca:	4b0c      	ldr	r3, [pc, #48]	; (28fc <SDHC_CMD_Do(unsigned long)+0x8c>)
    28cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
    28ce:	430b      	orrs	r3, r1
    28d0:	6313      	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    28d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    28d6:	4770      	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    28d8:	f413 3080 	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    28dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    28de:	d004      	beq.n	28ea <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    28e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    28e4:	2005      	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    28e6:	6323      	str	r3, [r4, #48]	; 0x30
    28e8:	e7f3      	b.n	28d2 <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    28ea:	f043 0301 	orr.w	r3, r3, #1
    28ee:	6323      	str	r3, [r4, #48]	; 0x30
    28f0:	e7ef      	b.n	28d2 <SDHC_CMD_Do(unsigned long)+0x62>
    28f2:	bf00      	nop
    28f4:	402c0000 	.word	0x402c0000
    28f8:	000e0001 	.word	0x000e0001
    28fc:	000f0001 	.word	0x000f0001

00002900 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    2900:	b570      	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2902:	4d0d      	ldr	r5, [pc, #52]	; (2938 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    2904:	2600      	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    2906:	480d      	ldr	r0, [pc, #52]	; (293c <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    2908:	f240 34e7 	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    290c:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    290e:	f7ff ffaf 	bl	2870 <SDHC_CMD_Do(unsigned long)>
    2912:	4603      	mov	r3, r0
    2914:	e006      	b.n	2924 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    2916:	b94b      	cbnz	r3, 292c <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2918:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    291a:	f7ff ffa9 	bl	2870 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    291e:	3c01      	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    2920:	4603      	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    2922:	d005      	beq.n	2930 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    2924:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    2926:	4805      	ldr	r0, [pc, #20]	; (293c <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    2928:	0752      	lsls	r2, r2, #29
    292a:	d4f4      	bmi.n	2916 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    292c:	4618      	mov	r0, r3
    292e:	bd70      	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    2930:	2800      	cmp	r0, #0
    2932:	bf08      	it	eq
    2934:	2005      	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    2936:	bd70      	pop	{r4, r5, r6, pc}
    2938:	402c0000 	.word	0x402c0000
    293c:	0cdb0000 	.word	0x0cdb0000

00002940 <SDHC_ACMD41_SendOperationCond(unsigned long)>:
  return result;
}

// ACMD 41 to send operation condition
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
    2940:	b538      	push	{r3, r4, r5, lr}
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2942:	4c09      	ldr	r4, [pc, #36]	; (2968 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x28>)
    2944:	2300      	movs	r3, #0
  return result;
}

// ACMD 41 to send operation condition
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
    2946:	4605      	mov	r5, r0
  SDHC_CMDARG = 0;
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2948:	4808      	ldr	r0, [pc, #32]	; (296c <SDHC_ACMD41_SendOperationCond(unsigned long)+0x2c>)
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    294a:	60a3      	str	r3, [r4, #8]
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    294c:	f7ff ff90 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    2950:	b100      	cbz	r0, 2954 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x14>
  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }

  return result;
}
    2952:	bd38      	pop	{r3, r4, r5, pc}
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    2954:	6923      	ldr	r3, [r4, #16]

  SDHC_CMDARG = cond;

  // Send 41CMD
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));
  result = SDHC_CMD_Do(xfertyp);
    2956:	4806      	ldr	r0, [pc, #24]	; (2970 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x30>)

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }

  SDHC_CMDARG = cond;
    2958:	60a5      	str	r5, [r4, #8]

  // Send 41CMD
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));
  result = SDHC_CMD_Do(xfertyp);
    295a:	f7ff ff89 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    295e:	2800      	cmp	r0, #0
    2960:	d1f7      	bne.n	2952 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x12>
    2962:	6923      	ldr	r3, [r4, #16]

  return result;
}
    2964:	bd38      	pop	{r3, r4, r5, pc}
    2966:	bf00      	nop
    2968:	402c0000 	.word	0x402c0000
    296c:	371a0000 	.word	0x371a0000
    2970:	29020000 	.word	0x29020000

00002974 <SDHC_CardGetType()>:
    Public functions

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
    2974:	4b07      	ldr	r3, [pc, #28]	; (2994 <SDHC_CardGetType()+0x20>)
    2976:	781a      	ldrb	r2, [r3, #0]
    2978:	b94a      	cbnz	r2, 298e <SDHC_CardGetType()+0x1a>
  if (sdCardDesc.version2 == 0) return 1; // SD_CARD_TYPE_SD1
    297a:	789a      	ldrb	r2, [r3, #2]
    297c:	b12a      	cbz	r2, 298a <SDHC_CardGetType()+0x16>
  if (sdCardDesc.highCapacity == 0) return 2; // SD_CARD_TYPE_SD2
    297e:	785b      	ldrb	r3, [r3, #1]
    2980:	2b00      	cmp	r3, #0
  return 3; // SD_CARD_TYPE_SDHC
    2982:	bf0c      	ite	eq
    2984:	2002      	moveq	r0, #2
    2986:	2003      	movne	r0, #3
    2988:	4770      	bx	lr

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
  if (sdCardDesc.version2 == 0) return 1; // SD_CARD_TYPE_SD1
    298a:	2001      	movs	r0, #1
  if (sdCardDesc.highCapacity == 0) return 2; // SD_CARD_TYPE_SD2
  return 3; // SD_CARD_TYPE_SDHC
}
    298c:	4770      	bx	lr
    Public functions

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
    298e:	2000      	movs	r0, #0
    2990:	4770      	bx	lr
    2992:	bf00      	nop
    2994:	20001f6c 	.word	0x20001f6c

00002998 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    2998:	4b38      	ldr	r3, [pc, #224]	; (2a7c <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    299a:	781a      	ldrb	r2, [r3, #0]
    299c:	b10a      	cbz	r2, 29a2 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    299e:	2003      	movs	r0, #3
    29a0:	4770      	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    29a2:	b570      	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    29a4:	785b      	ldrb	r3, [r3, #1]
    29a6:	4606      	mov	r6, r0
    29a8:	b903      	cbnz	r3, 29ac <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    29aa:	0249      	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    29ac:	4d34      	ldr	r5, [pc, #208]	; (2a80 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    29ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    29b2:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    29b6:	4833      	ldr	r0, [pc, #204]	; (2a84 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    29b8:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    29ba:	6cab      	ldr	r3, [r5, #72]	; 0x48
    29bc:	f043 0310 	orr.w	r3, r3, #16
    29c0:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    29c2:	60a9      	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    29c4:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    29c6:	f7ff ff53 	bl	2870 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    29ca:	2800      	cmp	r0, #0
    29cc:	d14d      	bne.n	2a6a <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    29ce:	462c      	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    29d0:	692b      	ldr	r3, [r5, #16]
    29d2:	f106 0240 	add.w	r2, r6, #64	; 0x40
    29d6:	f506 7010 	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    29da:	4629      	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    29dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    29de:	4e28      	ldr	r6, [pc, #160]	; (2a80 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    29e0:	f043 0520 	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    29e4:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    29e8:	6325      	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    29ea:	d13f      	bne.n	2a6c <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    29ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    29ee:	051d      	lsls	r5, r3, #20
    29f0:	d5fc      	bpl.n	29ec <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    29f2:	6a0b      	ldr	r3, [r1, #32]
    29f4:	3240      	adds	r2, #64	; 0x40
    29f6:	f842 3c80 	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    29fa:	6a0b      	ldr	r3, [r1, #32]
    29fc:	f842 3c7c 	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    2a00:	6a0b      	ldr	r3, [r1, #32]
    2a02:	f842 3c78 	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    2a06:	6a0b      	ldr	r3, [r1, #32]
    2a08:	f842 3c74 	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    2a0c:	6a0b      	ldr	r3, [r1, #32]
    2a0e:	f842 3c70 	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    2a12:	6a0b      	ldr	r3, [r1, #32]
    2a14:	f842 3c6c 	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    2a18:	6a0b      	ldr	r3, [r1, #32]
    2a1a:	f842 3c68 	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    2a1e:	6a0b      	ldr	r3, [r1, #32]
    2a20:	f842 3c64 	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    2a24:	6a0b      	ldr	r3, [r1, #32]
    2a26:	f842 3c60 	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    2a2a:	6a0b      	ldr	r3, [r1, #32]
    2a2c:	f842 3c5c 	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    2a30:	6a0b      	ldr	r3, [r1, #32]
    2a32:	f842 3c58 	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    2a36:	6a0b      	ldr	r3, [r1, #32]
    2a38:	f842 3c54 	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    2a3c:	6a0b      	ldr	r3, [r1, #32]
    2a3e:	f842 3c50 	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    2a42:	6a0b      	ldr	r3, [r1, #32]
    2a44:	f842 3c4c 	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    2a48:	6a0b      	ldr	r3, [r1, #32]
    2a4a:	f842 3c48 	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    2a4e:	6a0b      	ldr	r3, [r1, #32]
    2a50:	f842 3c44 	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    2a54:	4282      	cmp	r2, r0
    2a56:	d1c1      	bne.n	29dc <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    2a58:	2000      	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    2a5a:	4909      	ldr	r1, [pc, #36]	; (2a80 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    2a5c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2a5e:	4a08      	ldr	r2, [pc, #32]	; (2a80 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    2a60:	079b      	lsls	r3, r3, #30
    2a62:	d5fb      	bpl.n	2a5c <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    2a64:	4b08      	ldr	r3, [pc, #32]	; (2a88 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    2a66:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    2a68:	bd70      	pop	{r4, r5, r6, pc}
}
    2a6a:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    2a6c:	4a07      	ldr	r2, [pc, #28]	; (2a8c <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    2a6e:	431a      	orrs	r2, r3
    2a70:	6332      	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    2a72:	f7ff ff45 	bl	2900 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    2a76:	2001      	movs	r0, #1
    2a78:	e7ef      	b.n	2a5a <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    2a7a:	bf00      	nop
    2a7c:	20001f6c 	.word	0x20001f6c
    2a80:	402c0000 	.word	0x402c0000
    2a84:	113a0010 	.word	0x113a0010
    2a88:	01000022 	.word	0x01000022
    2a8c:	00700020 	.word	0x00700020

00002a90 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    2a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    2a92:	4b28      	ldr	r3, [pc, #160]	; (2b34 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    2a94:	781a      	ldrb	r2, [r3, #0]
    2a96:	b10a      	cbz	r2, 2a9c <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    2a98:	2003      	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    2a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    2a9c:	785b      	ldrb	r3, [r3, #1]
    2a9e:	4604      	mov	r4, r0
    2aa0:	b903      	cbnz	r3, 2aa4 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    2aa2:	0249      	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    2aa4:	4d24      	ldr	r5, [pc, #144]	; (2b38 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    2aa6:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2aaa:	4824      	ldr	r0, [pc, #144]	; (2b3c <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    2aac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    2aae:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    2ab0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    2ab2:	f023 0310 	bic.w	r3, r3, #16
    2ab6:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    2ab8:	60a9      	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    2aba:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2abc:	f7ff fed8 	bl	2870 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d1ea      	bne.n	2a9a <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    2ac4:	462a      	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2ac6:	692b      	ldr	r3, [r5, #16]
    2ac8:	f504 7700 	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    2acc:	462e      	mov	r6, r5
    2ace:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2ad0:	4919      	ldr	r1, [pc, #100]	; (2b38 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    2ad2:	06d8      	lsls	r0, r3, #27
    2ad4:	d5fb      	bpl.n	2ace <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2ad6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2ad8:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
    2adc:	d119      	bne.n	2b12 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    2ade:	f104 0140 	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    2ae2:	f854 3b04 	ldr.w	r3, [r4], #4
    2ae6:	4d14      	ldr	r5, [pc, #80]	; (2b38 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    2ae8:	42a1      	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    2aea:	6213      	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    2aec:	d1f9      	bne.n	2ae2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    2aee:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2af0:	f043 0310 	orr.w	r3, r3, #16
    2af4:	6333      	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2af6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2af8:	f413 00e0 	ands.w	r0, r3, #7340032	; 0x700000
    2afc:	d111      	bne.n	2b22 <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    2afe:	428f      	cmp	r7, r1
    2b00:	d1e5      	bne.n	2ace <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    2b02:	490d      	ldr	r1, [pc, #52]	; (2b38 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    2b04:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2b06:	4a0c      	ldr	r2, [pc, #48]	; (2b38 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    2b08:	079b      	lsls	r3, r3, #30
    2b0a:	d5fb      	bpl.n	2b04 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    2b0c:	4b0c      	ldr	r3, [pc, #48]	; (2b40 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    2b0e:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    2b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    2b12:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    2b14:	4b0b      	ldr	r3, [pc, #44]	; (2b44 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    2b16:	4313      	orrs	r3, r2
    2b18:	630b      	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    2b1a:	f7ff fef1 	bl	2900 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    2b1e:	2001      	movs	r0, #1
    2b20:	e7ef      	b.n	2b02 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    2b22:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    2b24:	4b07      	ldr	r3, [pc, #28]	; (2b44 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    2b26:	4313      	orrs	r3, r2
    2b28:	632b      	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    2b2a:	f7ff fee9 	bl	2900 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    2b2e:	2001      	movs	r0, #1
    2b30:	e7e7      	b.n	2b02 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    2b32:	bf00      	nop
    2b34:	20001f6c 	.word	0x20001f6c
    2b38:	402c0000 	.word	0x402c0000
    2b3c:	183a0000 	.word	0x183a0000
    2b40:	01000012 	.word	0x01000012
    2b44:	00700010 	.word	0x00700010

00002b48 <initClock()>:
  }
  
  void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    2b48:	4a16      	ldr	r2, [pc, #88]	; (2ba4 <initClock()+0x5c>)
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    2b4a:	4b17      	ldr	r3, [pc, #92]	; (2ba8 <initClock()+0x60>)
  }
  
  void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    2b4c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    2b50:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    2b54:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    2b58:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    2b5c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
    2b60:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    2b64:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    2b68:	f041 0118 	orr.w	r1, r1, #24
    2b6c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
    2b70:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    2b74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    2b78:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    2b7c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    2b80:	f042 020c 	orr.w	r2, r2, #12
    2b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    2b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2b8a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    2b8e:	625a      	str	r2, [r3, #36]	; 0x24
    //
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    2b90:	69da      	ldr	r2, [r3, #28]
    2b92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    2b96:	61da      	str	r2, [r3, #28]
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
    2b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2b9a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
    2b9e:	625a      	str	r2, [r3, #36]	; 0x24
    2ba0:	4770      	bx	lr
    2ba2:	bf00      	nop
    2ba4:	400d8000 	.word	0x400d8000
    2ba8:	400fc000 	.word	0x400fc000

00002bac <SDHC_CardInit()>:

//-----------------------------------------------------------------------------
// initialize the SDHC Controller and SD Card
// returns status of initialization(OK, nonInit, noCard, CardProtected)
uint8_t SDHC_CardInit(void)
{
    2bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

// initialize the SDHC Controller
// returns status of initialization(OK, nonInit, noCard, CardProtected)
static uint8_t SDHC_Init(void)
{
  initClock();
    2bb0:	f7ff ffca 	bl	2b48 <initClock()>
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    2bb4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    2bb8:	4ba9      	ldr	r3, [pc, #676]	; (2e60 <SDHC_CardInit()+0x2b4>)
    2bba:	2105      	movs	r1, #5
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    2bbc:	48a9      	ldr	r0, [pc, #676]	; (2e64 <SDHC_CardInit()+0x2b8>)
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    2bbe:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    2bc2:	4ca9      	ldr	r4, [pc, #676]	; (2e68 <SDHC_CardInit()+0x2bc>)
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    2bc4:	4602      	mov	r2, r0
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    2bc6:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    2bca:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    2bce:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    2bd2:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    2bd6:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    2bda:	6485      	str	r5, [r0, #72]	; 0x48
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    2bdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2bde:	431c      	orrs	r4, r3
    2be0:	62c4      	str	r4, [r0, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    2be2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2be4:	01dc      	lsls	r4, r3, #7
    2be6:	d4fc      	bmi.n	2be2 <SDHC_CardInit()+0x36>

  /* Set the SDHC initial baud rate divider and start */
  sdhc_setSdclk(400);
    2be8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2bec:	f7ff fde6 	bl	27bc <sdhc_setSdclk(unsigned long)>

  /* Poll inhibit bits */
  while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB)) ;
    2bf0:	4a9c      	ldr	r2, [pc, #624]	; (2e64 <SDHC_CardInit()+0x2b8>)
    2bf2:	6a53      	ldr	r3, [r2, #36]	; 0x24
    2bf4:	489b      	ldr	r0, [pc, #620]	; (2e64 <SDHC_CardInit()+0x2b8>)
    2bf6:	f013 0303 	ands.w	r3, r3, #3
    2bfa:	d1fa      	bne.n	2bf2 <SDHC_CardInit()+0x46>

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    2bfc:	4c98      	ldr	r4, [pc, #608]	; (2e60 <SDHC_CardInit()+0x2b4>)
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    2bfe:	f247 0588 	movw	r5, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    2c02:	f241 0788 	movw	r7, #4232	; 0x1088

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    2c06:	f44f 3681 	mov.w	r6, #66048	; 0x10200

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    2c0a:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    2c0e:	4602      	mov	r2, r0
#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    2c10:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    2c14:	f240 51dc 	movw	r1, #1500	; 0x5dc
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    2c18:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    2c1c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    2c20:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    2c24:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    2c28:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    2c2c:	f8c4 53c0 	str.w	r5, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    2c30:	f8c4 53ac 	str.w	r5, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    2c34:	f8c4 73b0 	str.w	r7, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    2c38:	f8c4 53b4 	str.w	r5, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    2c3c:	f8c4 53b8 	str.w	r5, [r4, #952]	; 0x3b8

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    2c40:	6046      	str	r6, [r0, #4]
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
    2c42:	6a83      	ldr	r3, [r0, #40]	; 0x28
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    2c44:	4c89      	ldr	r4, [pc, #548]	; (2e6c <SDHC_CardInit()+0x2c0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
	| (SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD );
    2c46:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    2c4a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    2c4e:	6283      	str	r3, [r0, #40]	; 0x28
    //SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
  //#endif

  /* Enable requests */
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    2c50:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2c52:	6303      	str	r3, [r0, #48]	; 0x30
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    2c54:	6344      	str	r4, [r0, #52]	; 0x34

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    2c56:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2c58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    2c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
    2c5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2c60:	4c80      	ldr	r4, [pc, #512]	; (2e64 <SDHC_CardInit()+0x2b8>)
    2c62:	0118      	lsls	r0, r3, #4
    2c64:	d4fb      	bmi.n	2c5e <SDHC_CardInit()+0xb2>
#endif

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    2c66:	3901      	subs	r1, #1
    2c68:	d1f5      	bne.n	2c56 <SDHC_CardInit()+0xaa>
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  // to do - check if this needed
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    2c6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2c70:	6323      	str	r3, [r4, #48]	; 0x30
  // Check card
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS) {
    2c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c74:	03da      	lsls	r2, r3, #15
    2c76:	d409      	bmi.n	2c8c <SDHC_CardInit()+0xe0>
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    2c78:	4b7d      	ldr	r3, [pc, #500]	; (2e70 <SDHC_CardInit()+0x2c4>)
    2c7a:	2202      	movs	r2, #2
  sdCardDesc.address = 0;
    2c7c:	6059      	str	r1, [r3, #4]
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
  // Check card
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS) {
    return 0;
  } else {
    return SDHC_STATUS_NODISK;
    2c7e:	4610      	mov	r0, r2

  resS = SDHC_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    2c80:	7059      	strb	r1, [r3, #1]
  sdCardDesc.version2 = 0;
    2c82:	7099      	strb	r1, [r3, #2]
  sdCardDesc.numBlocks = 0;
    2c84:	6099      	str	r1, [r3, #8]
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    2c86:	701a      	strb	r2, [r3, #0]
    2c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c8c:	4d78      	ldr	r5, [pc, #480]	; (2e70 <SDHC_CardInit()+0x2c4>)

  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);
    2c8e:	4608      	mov	r0, r1
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    2c90:	7029      	strb	r1, [r5, #0]
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    2c92:	7069      	strb	r1, [r5, #1]
  sdCardDesc.version2 = 0;
    2c94:	70a9      	strb	r1, [r5, #2]
  sdCardDesc.numBlocks = 0;

  if (resS)
    return resS;

  SDHC_IRQSIGEN = 0;
    2c96:	63a1      	str	r1, [r4, #56]	; 0x38
static int SDHC_CMD0_GoToIdle(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2c98:	60a1      	str	r1, [r4, #8]
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
    2c9a:	6069      	str	r1, [r5, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    2c9c:	60a9      	str	r1, [r5, #8]

  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);
    2c9e:	f7ff fde7 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2ca2:	b968      	cbnz	r0, 2cc0 <SDHC_CardInit()+0x114>
static int SDHC_CMD8_SetInterface(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = cond;
    2ca4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2ca8:	6922      	ldr	r2, [r4, #16]
  SDHC_CMDARG = cond;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2caa:	4872      	ldr	r0, [pc, #456]	; (2e74 <SDHC_CardInit()+0x2c8>)
static int SDHC_CMD8_SetInterface(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = cond;
    2cac:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2cae:	f7ff fddf 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2cb2:	b948      	cbnz	r0, 2cc8 <SDHC_CardInit()+0x11c>
    2cb4:	6923      	ldr	r3, [r4, #16]
    return SDHC_STATUS_NOINIT;
  }

  resR = SDHC_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) {
      if (SDHC_CMDRSP0 != 0x000001AA) {
    2cb6:	6923      	ldr	r3, [r4, #16]
    2cb8:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    2cbc:	f000 80c1 	beq.w	2e42 <SDHC_CardInit()+0x296>

  SDHC_IRQSIGEN = 0;

  resR = SDHC_CMD0_GoToIdle();
  if (resR) {
    sdCardDesc.status = SDHC_STATUS_NOINIT;
    2cc0:	2001      	movs	r0, #1
    2cc2:	7028      	strb	r0, [r5, #0]
    return SDHC_STATUS_NOINIT;
    2cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (SDHC_CMDRSP0 != 0x000001AA) {
        sdCardDesc.status = SDHC_STATUS_NOINIT;
        return SDHC_STATUS_NOINIT;
      }
      sdCardDesc.highCapacity = 1;
  } else if (resR == SDHC_RESULT_NO_RESPONSE) {
    2cc8:	2805      	cmp	r0, #5
    2cca:	d1f9      	bne.n	2cc0 <SDHC_CardInit()+0x114>
  } else {
    sdCardDesc.status = SDHC_STATUS_NOINIT;
    return SDHC_STATUS_NOINIT;
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    2ccc:	2000      	movs	r0, #0
    2cce:	f7ff fe37 	bl	2940 <SDHC_ACMD41_SendOperationCond(unsigned long)>
    2cd2:	2800      	cmp	r0, #0
    2cd4:	d1f4      	bne.n	2cc0 <SDHC_CardInit()+0x114>

  if (SDHC_CMDRSP0 & 0x300000) {
    2cd6:	4b63      	ldr	r3, [pc, #396]	; (2e64 <SDHC_CardInit()+0x2b8>)
    2cd8:	691a      	ldr	r2, [r3, #16]
    2cda:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    2cde:	d01e      	beq.n	2d1e <SDHC_CardInit()+0x172>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    2ce0:	786a      	ldrb	r2, [r5, #1]
    //
    uint32_t ii = 0;
    2ce2:	4604      	mov	r4, r0
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    2ce4:	4f64      	ldr	r7, [pc, #400]	; (2e78 <SDHC_CardInit()+0x2cc>)
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    2ce6:	461e      	mov	r6, r3
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    2ce8:	2a00      	cmp	r2, #0
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    2cea:	f8df 8190 	ldr.w	r8, [pc, #400]	; 2e7c <SDHC_CardInit()+0x2d0>
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    2cee:	bf08      	it	eq
    2cf0:	f44f 1740 	moveq.w	r7, #3145728	; 0x300000
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
    2cf4:	4638      	mov	r0, r7
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
    2cf6:	3401      	adds	r4, #1
      if (SDHC_ACMD41_SendOperationCond(condition)) {
    2cf8:	f7ff fe22 	bl	2940 <SDHC_ACMD41_SendOperationCond(unsigned long)>
    2cfc:	2800      	cmp	r0, #0
    2cfe:	f040 80a3 	bne.w	2e48 <SDHC_CardInit()+0x29c>
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    2d02:	4544      	cmp	r4, r8
    2d04:	6933      	ldr	r3, [r6, #16]
    2d06:	d801      	bhi.n	2d0c <SDHC_CardInit()+0x160>
    2d08:	2b00      	cmp	r3, #0
    2d0a:	daf3      	bge.n	2cf4 <SDHC_CardInit()+0x148>

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
    2d0c:	4b5b      	ldr	r3, [pc, #364]	; (2e7c <SDHC_CardInit()+0x2d0>)
    2d0e:	429c      	cmp	r4, r3
    2d10:	d803      	bhi.n	2d1a <SDHC_CardInit()+0x16e>
    2d12:	4b54      	ldr	r3, [pc, #336]	; (2e64 <SDHC_CardInit()+0x2b8>)
    2d14:	691b      	ldr	r3, [r3, #16]
    2d16:	005b      	lsls	r3, r3, #1
    2d18:	d401      	bmi.n	2d1e <SDHC_CardInit()+0x172>
      sdCardDesc.highCapacity = 0;
    2d1a:	2300      	movs	r3, #0
    2d1c:	706b      	strb	r3, [r5, #1]
static int SDHC_CMD2_Identify(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2d1e:	2300      	movs	r3, #0
    2d20:	4c50      	ldr	r4, [pc, #320]	; (2e64 <SDHC_CardInit()+0x2b8>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    2d22:	4857      	ldr	r0, [pc, #348]	; (2e80 <SDHC_CardInit()+0x2d4>)
static int SDHC_CMD2_Identify(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2d24:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    2d26:	f7ff fda3 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2d2a:	4603      	mov	r3, r0
    2d2c:	2800      	cmp	r0, #0
    2d2e:	d1c7      	bne.n	2cc0 <SDHC_CardInit()+0x114>
    2d30:	6922      	ldr	r2, [r4, #16]
  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2d32:	4854      	ldr	r0, [pc, #336]	; (2e84 <SDHC_CardInit()+0x2d8>)
static int SDHC_CMD3_GetAddress(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2d34:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2d36:	f7ff fd9b 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2d3a:	2800      	cmp	r0, #0
    2d3c:	d1c0      	bne.n	2cc0 <SDHC_CardInit()+0x114>
    2d3e:	6923      	ldr	r3, [r4, #16]
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    2d40:	4f51      	ldr	r7, [pc, #324]	; (2e88 <SDHC_CardInit()+0x2dc>)
    2d42:	6923      	ldr	r3, [r4, #16]
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN |
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    2d44:	4851      	ldr	r0, [pc, #324]	; (2e8c <SDHC_CardInit()+0x2e0>)
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    2d46:	401f      	ands	r7, r3
    2d48:	4e49      	ldr	r6, [pc, #292]	; (2e70 <SDHC_CardInit()+0x2c4>)
static int SDHC_CMD9_GetParameters(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    2d4a:	60a7      	str	r7, [r4, #8]
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    2d4c:	606f      	str	r7, [r5, #4]
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN |
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    2d4e:	f7ff fd8f 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {
    2d52:	2800      	cmp	r0, #0
    2d54:	d1b4      	bne.n	2cc0 <SDHC_CardInit()+0x114>
    //(void)SDHC_CMDRSP0;
    sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;
    2d56:	69a3      	ldr	r3, [r4, #24]
    2d58:	0e1b      	lsrs	r3, r3, #24
    2d5a:	70f3      	strb	r3, [r6, #3]
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (SDHC_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    2d5c:	69e3      	ldr	r3, [r4, #28]
    2d5e:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
    2d62:	d174      	bne.n	2e4e <SDHC_CardInit()+0x2a2>
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    2d64:	69a1      	ldr	r1, [r4, #24]
    c_size = SDHC_CMDRSP2 & 0x03;
    2d66:	69a3      	ldr	r3, [r4, #24]
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    2d68:	6960      	ldr	r0, [r4, #20]
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    2d6a:	f3c1 2103 	ubfx	r1, r1, #8, #4
    2d6e:	029a      	lsls	r2, r3, #10
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    c_size = SDHC_CMDRSP2 & 0x03;
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    2d70:	6963      	ldr	r3, [r4, #20]
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    2d72:	3909      	subs	r1, #9
    2d74:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    2d78:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    2d7c:	ea42 5290 	orr.w	r2, r2, r0, lsr #22
    2d80:	3302      	adds	r3, #2
    2d82:	3201      	adds	r2, #1
    2d84:	fa02 f303 	lsl.w	r3, r2, r3
    2d88:	408b      	lsls	r3, r1
    2d8a:	60b3      	str	r3, [r6, #8]
static int SDHC_CMD7_SelectCard(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    2d8c:	4e35      	ldr	r6, [pc, #212]	; (2e64 <SDHC_CardInit()+0x2b8>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    2d8e:	4840      	ldr	r0, [pc, #256]	; (2e90 <SDHC_CardInit()+0x2e4>)
static int SDHC_CMD7_SelectCard(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    2d90:	60b7      	str	r7, [r6, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    2d92:	f7ff fd6d 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {(void)SDHC_CMDRSP0; }
    2d96:	2800      	cmp	r0, #0
    2d98:	d192      	bne.n	2cc0 <SDHC_CardInit()+0x114>
static int SDHC_CMD16_SetBlockSize(uint32_t block_size)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = block_size;
    2d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) {(void)SDHC_CMDRSP0; }
    2d9e:	6932      	ldr	r2, [r6, #16]
  SDHC_CMDARG = block_size;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2da0:	483c      	ldr	r0, [pc, #240]	; (2e94 <SDHC_CardInit()+0x2e8>)
static int SDHC_CMD16_SetBlockSize(uint32_t block_size)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = block_size;
    2da2:	60b3      	str	r3, [r6, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2da4:	f7ff fd64 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2da8:	2800      	cmp	r0, #0
    2daa:	d189      	bne.n	2cc0 <SDHC_CardInit()+0x114>
    2dac:	6933      	ldr	r3, [r6, #16]
  SDHC_CMDARG = address;
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2dae:	483a      	ldr	r0, [pc, #232]	; (2e98 <SDHC_CardInit()+0x2ec>)
static int SDHC_ACMD6_SetBusWidth(uint32_t address, uint32_t width)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    2db0:	60b7      	str	r7, [r6, #8]
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2db2:	f7ff fd5d 	bl	2870 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
    2db6:	2800      	cmp	r0, #0
    2db8:	d182      	bne.n	2cc0 <SDHC_CardInit()+0x114>
  SDHC_CMDARG = width;
    2dba:	2302      	movs	r3, #2
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
    2dbc:	6932      	ldr	r2, [r6, #16]

  // Send CMD6
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2dbe:	4837      	ldr	r0, [pc, #220]	; (2e9c <SDHC_CardInit()+0x2f0>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
  SDHC_CMDARG = width;
    2dc0:	60b3      	str	r3, [r6, #8]

  // Send CMD6
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2dc2:	f7ff fd55 	bl	2870 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {  (void)SDHC_CMDRSP0; }
    2dc6:	4607      	mov	r7, r0
    2dc8:	2800      	cmp	r0, #0
    2dca:	f47f af79 	bne.w	2cc0 <SDHC_CardInit()+0x114>
    2dce:	6933      	ldr	r3, [r6, #16]
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    2dd0:	2305      	movs	r3, #5

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    2dd2:	6ab2      	ldr	r2, [r6, #40]	; 0x28

  // De-Init GPIO
  SDHC_ReleaseGPIO();

  // Set the SDHC default baud rate
  sdhc_setSdclk(25000);
    2dd4:	f246 10a8 	movw	r0, #25000	; 0x61a8
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    2dd8:	4c21      	ldr	r4, [pc, #132]	; (2e60 <SDHC_CardInit()+0x2b4>)

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    2dda:	f022 0206 	bic.w	r2, r2, #6
    2dde:	62b2      	str	r2, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    2de0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    2de2:	f042 0202 	orr.w	r2, r2, #2
    2de6:	62b2      	str	r2, [r6, #40]	; 0x28
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    2de8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    2dec:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    2df0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    2df4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    2df8:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    2dfc:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8

  // De-Init GPIO
  SDHC_ReleaseGPIO();

  // Set the SDHC default baud rate
  sdhc_setSdclk(25000);
    2e00:	f7ff fcdc 	bl	27bc <sdhc_setSdclk(unsigned long)>
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    2e04:	f247 0388 	movw	r3, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    2e08:	f241 0288 	movw	r2, #4232	; 0x1088

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    2e0c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    2e10:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    2e14:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    2e18:	f8c4 71c0 	str.w	r7, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    2e1c:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    2e20:	f8c4 71c8 	str.w	r7, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    2e24:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    2e28:	f8c4 33c0 	str.w	r3, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    2e2c:	f8c4 33ac 	str.w	r3, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    2e30:	f8c4 23b0 	str.w	r2, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    2e34:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    2e38:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
  // and SDHC_SetClock() for 50 MHz config

  // Init GPIO
  SDHC_InitGPIO();

  return sdCardDesc.status;
    2e3c:	7828      	ldrb	r0, [r5, #0]
    2e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (resR == SDHC_RESULT_OK) {
      if (SDHC_CMDRSP0 != 0x000001AA) {
        sdCardDesc.status = SDHC_STATUS_NOINIT;
        return SDHC_STATUS_NOINIT;
      }
      sdCardDesc.highCapacity = 1;
    2e42:	2301      	movs	r3, #1
    2e44:	706b      	strb	r3, [r5, #1]
    2e46:	e741      	b.n	2ccc <SDHC_CardInit()+0x120>
    2e48:	2001      	movs	r0, #1
    2e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    2e4e:	2301      	movs	r3, #1
    2e50:	70b3      	strb	r3, [r6, #2]
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    2e52:	6963      	ldr	r3, [r4, #20]
    sdCardDesc.numBlocks = (c_size + 1) << 10;
    2e54:	f3c3 2315 	ubfx	r3, r3, #8, #22
    2e58:	3301      	adds	r3, #1
    2e5a:	029b      	lsls	r3, r3, #10
    2e5c:	60b3      	str	r3, [r6, #8]
    2e5e:	e795      	b.n	2d8c <SDHC_CardInit()+0x1e0>
    2e60:	401f8000 	.word	0x401f8000
    2e64:	402c0000 	.word	0x402c0000
    2e68:	01008000 	.word	0x01008000
    2e6c:	117f00bb 	.word	0x117f00bb
    2e70:	20001f6c 	.word	0x20001f6c
    2e74:	081a0000 	.word	0x081a0000
    2e78:	40300000 	.word	0x40300000
    2e7c:	0001869f 	.word	0x0001869f
    2e80:	02090000 	.word	0x02090000
    2e84:	031a0000 	.word	0x031a0000
    2e88:	ffff0000 	.word	0xffff0000
    2e8c:	09090000 	.word	0x09090000
    2e90:	071b0000 	.word	0x071b0000
    2e94:	101a0000 	.word	0x101a0000
    2e98:	371a0000 	.word	0x371a0000
    2e9c:	061a0000 	.word	0x061a0000

00002ea0 <spiInit(unsigned char)>:

#elif defined(__IMXRT1052__)  || defined(__IMXRT1062__) || defined(__MKL26Z64__)
 #define USE_SPI_LIB
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    2ea0:	2805      	cmp	r0, #5
    2ea2:	d834      	bhi.n	2f0e <spiInit(unsigned char)+0x6e>
    2ea4:	e8df f000 	tbb	[pc, r0]
    2ea8:	231b130b 	.word	0x231b130b
    2eac:	032b      	.short	0x032b
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    2eae:	4b1c      	ldr	r3, [pc, #112]	; (2f20 <spiInit(unsigned char)+0x80>)
    2eb0:	2207      	movs	r2, #7
    2eb2:	491c      	ldr	r1, [pc, #112]	; (2f24 <spiInit(unsigned char)+0x84>)
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2eb4:	481c      	ldr	r0, [pc, #112]	; (2f28 <spiInit(unsigned char)+0x88>)
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    2eb6:	e883 0006 	stmia.w	r3, {r1, r2}
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2eba:	f001 bbc3 	b.w	4644 <SPIClass::begin()>
#ifdef __MKL26Z64__
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
#else
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    2ebe:	4b18      	ldr	r3, [pc, #96]	; (2f20 <spiInit(unsigned char)+0x80>)
    2ec0:	2207      	movs	r2, #7
    2ec2:	491a      	ldr	r1, [pc, #104]	; (2f2c <spiInit(unsigned char)+0x8c>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2ec4:	4818      	ldr	r0, [pc, #96]	; (2f28 <spiInit(unsigned char)+0x88>)
#ifdef __MKL26Z64__
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
#else
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    2ec6:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2eca:	f001 bbbb 	b.w	4644 <SPIClass::begin()>
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
#else
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    2ece:	4b14      	ldr	r3, [pc, #80]	; (2f20 <spiInit(unsigned char)+0x80>)
    2ed0:	2207      	movs	r2, #7
    2ed2:	4917      	ldr	r1, [pc, #92]	; (2f30 <spiInit(unsigned char)+0x90>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2ed4:	4814      	ldr	r0, [pc, #80]	; (2f28 <spiInit(unsigned char)+0x88>)
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
#else
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    2ed6:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2eda:	f001 bbb3 	b.w	4644 <SPIClass::begin()>
#else
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    2ede:	4b10      	ldr	r3, [pc, #64]	; (2f20 <spiInit(unsigned char)+0x80>)
    2ee0:	2207      	movs	r2, #7
    2ee2:	4914      	ldr	r1, [pc, #80]	; (2f34 <spiInit(unsigned char)+0x94>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2ee4:	4810      	ldr	r0, [pc, #64]	; (2f28 <spiInit(unsigned char)+0x88>)
#else
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    2ee6:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2eea:	f001 bbab 	b.w	4644 <SPIClass::begin()>
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    2eee:	4b0c      	ldr	r3, [pc, #48]	; (2f20 <spiInit(unsigned char)+0x80>)
    2ef0:	2207      	movs	r2, #7
    2ef2:	4911      	ldr	r1, [pc, #68]	; (2f38 <spiInit(unsigned char)+0x98>)
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2ef4:	480c      	ldr	r0, [pc, #48]	; (2f28 <spiInit(unsigned char)+0x88>)
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    2ef6:	e883 0006 	stmia.w	r3, {r1, r2}
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2efa:	f001 bba3 	b.w	4644 <SPIClass::begin()>
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    2efe:	4b08      	ldr	r3, [pc, #32]	; (2f20 <spiInit(unsigned char)+0x80>)
    2f00:	2207      	movs	r2, #7
    2f02:	490e      	ldr	r1, [pc, #56]	; (2f3c <spiInit(unsigned char)+0x9c>)
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2f04:	4808      	ldr	r0, [pc, #32]	; (2f28 <spiInit(unsigned char)+0x88>)
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
#endif
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    2f06:	e883 0006 	stmia.w	r3, {r1, r2}
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    2f0a:	f001 bb9b 	b.w	4644 <SPIClass::begin()>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    2f0e:	4b04      	ldr	r3, [pc, #16]	; (2f20 <spiInit(unsigned char)+0x80>)
    2f10:	2207      	movs	r2, #7
    2f12:	490b      	ldr	r1, [pc, #44]	; (2f40 <spiInit(unsigned char)+0xa0>)
  }
  SPI.begin();
    2f14:	4804      	ldr	r0, [pc, #16]	; (2f28 <spiInit(unsigned char)+0x88>)
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    2f16:	e883 0006 	stmia.w	r3, {r1, r2}
  }
  SPI.begin();
    2f1a:	f001 bb93 	b.w	4644 <SPIClass::begin()>
    2f1e:	bf00      	nop
    2f20:	20001f7c 	.word	0x20001f7c
    2f24:	001e8480 	.word	0x001e8480
    2f28:	20000e38 	.word	0x20000e38
    2f2c:	01808580 	.word	0x01808580
    2f30:	016e3600 	.word	0x016e3600
    2f34:	007a1200 	.word	0x007a1200
    2f38:	003d0900 	.word	0x003d0900
    2f3c:	002dc6c0 	.word	0x002dc6c0
    2f40:	00061a80 	.word	0x00061a80

00002f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    2f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f46:	4e27      	ldr	r6, [pc, #156]	; (2fe4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2f48:	27ff      	movs	r7, #255	; 0xff
    2f4a:	4d27      	ldr	r5, [pc, #156]	; (2fe8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    2f4c:	f8d6 e000 	ldr.w	lr, [r6]
    2f50:	682b      	ldr	r3, [r5, #0]
    2f52:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2f54:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2f56:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    2f5a:	d0fb      	beq.n	2f54 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    2f5c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    2f5e:	b2e4      	uxtb	r4, r4
    2f60:	2cff      	cmp	r4, #255	; 0xff
    2f62:	d005      	beq.n	2f70 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    2f64:	6834      	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    2f66:	ebce 0404 	rsb	r4, lr, r4
    2f6a:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    2f6e:	d3f0      	bcc.n	2f52 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2f70:	f041 0440 	orr.w	r4, r1, #64	; 0x40
    2f74:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2f76:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2f78:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    2f7c:	d0fb      	beq.n	2f76 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    2f7e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
    2f80:	2618      	movs	r6, #24
    2f82:	fa22 f406 	lsr.w	r4, r2, r6
    2f86:	b2e4      	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2f88:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2f8a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2f8c:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    2f90:	d0fb      	beq.n	2f8a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    2f92:	3e08      	subs	r6, #8
    2f94:	6f5c      	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    2f96:	f116 0f08 	cmn.w	r6, #8
    2f9a:	d1f2      	bne.n	2f82 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    2f9c:	b1f9      	cbz	r1, 2fde <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    2f9e:	2908      	cmp	r1, #8
    2fa0:	bf0c      	ite	eq
    2fa2:	2287      	moveq	r2, #135	; 0x87
    2fa4:	22ff      	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2fa6:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2fa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2faa:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    2fae:	d0fb      	beq.n	2fa8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    2fb0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    2fb2:	2100      	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2fb4:	24ff      	movs	r4, #255	; 0xff
    2fb6:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2fb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2fba:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    2fbe:	d0fb      	beq.n	2fb8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    2fc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    2fc2:	b2cb      	uxtb	r3, r1
    2fc4:	3101      	adds	r1, #1
    2fc6:	3bff      	subs	r3, #255	; 0xff
    2fc8:	b2d2      	uxtb	r2, r2
    2fca:	bf18      	it	ne
    2fcc:	2301      	movne	r3, #1
    2fce:	7042      	strb	r2, [r0, #1]
    2fd0:	ea13 13d2 	ands.w	r3, r3, r2, lsr #7
    2fd4:	d001      	beq.n	2fda <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    2fd6:	682b      	ldr	r3, [r5, #0]
    2fd8:	e7ed      	b.n	2fb6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    2fda:	4610      	mov	r0, r2
    2fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fde:	2295      	movs	r2, #149	; 0x95
    2fe0:	e7e1      	b.n	2fa6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    2fe2:	bf00      	nop
    2fe4:	200021a0 	.word	0x200021a0
    2fe8:	20000e38 	.word	0x20000e38

00002fec <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    2fec:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    2fee:	2101      	movs	r1, #1
    2ff0:	7800      	ldrb	r0, [r0, #0]
    2ff2:	f001 fd6b 	bl	4acc <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    2ff6:	4913      	ldr	r1, [pc, #76]	; (3044 <Sd2Card::chipSelectHigh()+0x58>)
    2ff8:	780b      	ldrb	r3, [r1, #0]
    2ffa:	b1eb      	cbz	r3, 3038 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    2ffc:	4a12      	ldr	r2, [pc, #72]	; (3048 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    2ffe:	2000      	movs	r0, #0
    3000:	7cd3      	ldrb	r3, [r2, #19]
    3002:	7008      	strb	r0, [r1, #0]
    3004:	4619      	mov	r1, r3
    3006:	b1bb      	cbz	r3, 3038 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    3008:	07d8      	lsls	r0, r3, #31
    300a:	d502      	bpl.n	3012 <Sd2Card::chipSelectHigh()+0x26>
    300c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    300e:	480f      	ldr	r0, [pc, #60]	; (304c <Sd2Card::chipSelectHigh()+0x60>)
    3010:	6004      	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    3012:	079b      	lsls	r3, r3, #30
    3014:	d503      	bpl.n	301e <Sd2Card::chipSelectHigh()+0x32>
    3016:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    3018:	4b0d      	ldr	r3, [pc, #52]	; (3050 <Sd2Card::chipSelectHigh()+0x64>)
    301a:	7cd1      	ldrb	r1, [r2, #19]
    301c:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    301e:	074c      	lsls	r4, r1, #29
    3020:	d503      	bpl.n	302a <Sd2Card::chipSelectHigh()+0x3e>
    3022:	6b10      	ldr	r0, [r2, #48]	; 0x30
    3024:	4b0b      	ldr	r3, [pc, #44]	; (3054 <Sd2Card::chipSelectHigh()+0x68>)
    3026:	7cd1      	ldrb	r1, [r2, #19]
    3028:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    302a:	0708      	lsls	r0, r1, #28
    302c:	d405      	bmi.n	303a <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    302e:	06cb      	lsls	r3, r1, #27
    3030:	d502      	bpl.n	3038 <Sd2Card::chipSelectHigh()+0x4c>
    3032:	6b92      	ldr	r2, [r2, #56]	; 0x38
    3034:	4b08      	ldr	r3, [pc, #32]	; (3058 <Sd2Card::chipSelectHigh()+0x6c>)
    3036:	601a      	str	r2, [r3, #0]
    3038:	bd10      	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    303a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    303c:	4b07      	ldr	r3, [pc, #28]	; (305c <Sd2Card::chipSelectHigh()+0x70>)
    303e:	7cd1      	ldrb	r1, [r2, #19]
    3040:	6018      	str	r0, [r3, #0]
    3042:	e7f4      	b.n	302e <Sd2Card::chipSelectHigh()+0x42>
    3044:	20001f84 	.word	0x20001f84
    3048:	20000e38 	.word	0x20000e38
    304c:	e000e100 	.word	0xe000e100
    3050:	e000e104 	.word	0xe000e104
    3054:	e000e108 	.word	0xe000e108
    3058:	e000e110 	.word	0xe000e110
    305c:	e000e10c 	.word	0xe000e10c

00003060 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    3060:	4a40      	ldr	r2, [pc, #256]	; (3164 <Sd2Card::chipSelectLow()+0x104>)
    3062:	7813      	ldrb	r3, [r2, #0]
    3064:	b11b      	cbz	r3, 306e <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3066:	7800      	ldrb	r0, [r0, #0]
    3068:	2100      	movs	r1, #0
    306a:	f001 bd2f 	b.w	4acc <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    306e:	4b3e      	ldr	r3, [pc, #248]	; (3168 <Sd2Card::chipSelectLow()+0x108>)
    3070:	493e      	ldr	r1, [pc, #248]	; (316c <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    3072:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    3074:	2401      	movs	r4, #1
    3076:	7cde      	ldrb	r6, [r3, #19]
    3078:	680d      	ldr	r5, [r1, #0]
    307a:	7014      	strb	r4, [r2, #0]
    307c:	684c      	ldr	r4, [r1, #4]
    307e:	2e00      	cmp	r6, #0
    3080:	d031      	beq.n	30e6 <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    3082:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3084:	7cd9      	ldrb	r1, [r3, #19]
    3086:	07ce      	lsls	r6, r1, #31
    3088:	460a      	mov	r2, r1
    308a:	d508      	bpl.n	309e <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    308c:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 318c <Sd2Card::chipSelectLow()+0x12c>
    3090:	695f      	ldr	r7, [r3, #20]
    3092:	f8de 6000 	ldr.w	r6, [lr]
    3096:	403e      	ands	r6, r7
    3098:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    309a:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    309e:	078f      	lsls	r7, r1, #30
    30a0:	d506      	bpl.n	30b0 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    30a2:	4e33      	ldr	r6, [pc, #204]	; (3170 <Sd2Card::chipSelectLow()+0x110>)
    30a4:	6999      	ldr	r1, [r3, #24]
    30a6:	6837      	ldr	r7, [r6, #0]
    30a8:	7cda      	ldrb	r2, [r3, #19]
    30aa:	4039      	ands	r1, r7
    30ac:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    30ae:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    30b0:	0756      	lsls	r6, r2, #29
    30b2:	d506      	bpl.n	30c2 <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    30b4:	4e2f      	ldr	r6, [pc, #188]	; (3174 <Sd2Card::chipSelectLow()+0x114>)
    30b6:	69d9      	ldr	r1, [r3, #28]
    30b8:	6837      	ldr	r7, [r6, #0]
    30ba:	7cda      	ldrb	r2, [r3, #19]
    30bc:	4039      	ands	r1, r7
    30be:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    30c0:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    30c2:	0711      	lsls	r1, r2, #28
    30c4:	d506      	bpl.n	30d4 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    30c6:	4e2c      	ldr	r6, [pc, #176]	; (3178 <Sd2Card::chipSelectLow()+0x118>)
    30c8:	6a19      	ldr	r1, [r3, #32]
    30ca:	6837      	ldr	r7, [r6, #0]
    30cc:	7cda      	ldrb	r2, [r3, #19]
    30ce:	4039      	ands	r1, r7
    30d0:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    30d2:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    30d4:	06d2      	lsls	r2, r2, #27
    30d6:	d505      	bpl.n	30e4 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    30d8:	4928      	ldr	r1, [pc, #160]	; (317c <Sd2Card::chipSelectLow()+0x11c>)
    30da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    30dc:	680e      	ldr	r6, [r1, #0]
    30de:	4032      	ands	r2, r6
    30e0:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    30e2:	600a      	str	r2, [r1, #0]
			}
			__enable_irq();
    30e4:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    30e6:	689a      	ldr	r2, [r3, #8]
    30e8:	491f      	ldr	r1, [pc, #124]	; (3168 <Sd2Card::chipSelectLow()+0x108>)
    30ea:	42aa      	cmp	r2, r5
    30ec:	d02b      	beq.n	3146 <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    30ee:	4a24      	ldr	r2, [pc, #144]	; (3180 <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    30f0:	4e24      	ldr	r6, [pc, #144]	; (3184 <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    30f2:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    30f4:	608d      	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    30f6:	f3c2 1101 	ubfx	r1, r2, #4, #2
    30fa:	f3c2 6282 	ubfx	r2, r2, #26, #3
    30fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    3102:	3201      	adds	r2, #1
    3104:	fbb1 f1f2 	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    3108:	b1dd      	cbz	r5, 3142 <Sd2Card::chipSelectLow()+0xe2>
    310a:	fbb1 f2f5 	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
    310e:	b142      	cbz	r2, 3122 <Sd2Card::chipSelectLow()+0xc2>
    3110:	fbb1 f1f2 	udiv	r1, r1, r2
    3114:	42a9      	cmp	r1, r5
    3116:	bf88      	it	hi
    3118:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    311a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    311e:	d314      	bcc.n	314a <Sd2Card::chipSelectLow()+0xea>
    3120:	4a19      	ldr	r2, [pc, #100]	; (3188 <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3122:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3124:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    3126:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3128:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    312a:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    312c:	611e      	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    312e:	625d      	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
    3130:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    3132:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    3134:	6119      	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3136:	2100      	movs	r1, #0
    3138:	7800      	ldrb	r0, [r0, #0]
}
    313a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    313e:	f001 bcc5 	b.w	4acc <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    3142:	460a      	mov	r2, r1
    3144:	e7e3      	b.n	310e <Sd2Card::chipSelectLow()+0xae>
    3146:	68ca      	ldr	r2, [r1, #12]
    3148:	e7ec      	b.n	3124 <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    314a:	2a02      	cmp	r2, #2
    314c:	bf98      	it	ls
    314e:	2200      	movls	r2, #0
    3150:	d9e7      	bls.n	3122 <Sd2Card::chipSelectLow()+0xc2>
    3152:	3a02      	subs	r2, #2
    3154:	0855      	lsrs	r5, r2, #1
    3156:	0429      	lsls	r1, r5, #16
    3158:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    315c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    3160:	430a      	orrs	r2, r1
    3162:	e7de      	b.n	3122 <Sd2Card::chipSelectLow()+0xc2>
    3164:	20001f84 	.word	0x20001f84
    3168:	20000e38 	.word	0x20000e38
    316c:	20001f7c 	.word	0x20001f7c
    3170:	e000e184 	.word	0xe000e184
    3174:	e000e188 	.word	0xe000e188
    3178:	e000e18c 	.word	0xe000e18c
    317c:	e000e190 	.word	0xe000e190
    3180:	400fc000 	.word	0x400fc000
    3184:	200000f4 	.word	0x200000f4
    3188:	007f7fff 	.word	0x007f7fff
    318c:	e000e180 	.word	0xe000e180

00003190 <Sd2Card::SD_init(unsigned char, unsigned char)>:
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    3190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  type_ = 0;
    3194:	2300      	movs	r3, #0
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    3196:	4605      	mov	r5, r0
    3198:	4eb1      	ldr	r6, [pc, #708]	; (3460 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d0>)
    319a:	4689      	mov	r9, r1
  type_ = 0;
  chipSelectPin_ = chipSelectPin;
    319c:	7002      	strb	r2, [r0, #0]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    319e:	2101      	movs	r1, #1
    31a0:	4610      	mov	r0, r2
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
  type_ = 0;
    31a2:	70ab      	strb	r3, [r5, #2]
    31a4:	6837      	ldr	r7, [r6, #0]
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    31a6:	f001 fc91 	bl	4acc <digitalWrite>
  pinMode(chipSelectPin_, OUTPUT);
    31aa:	7828      	ldrb	r0, [r5, #0]
    31ac:	2101      	movs	r1, #1
    31ae:	f001 fc93 	bl	4ad8 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    31b2:	2101      	movs	r1, #1
    31b4:	7828      	ldrb	r0, [r5, #0]
    31b6:	f001 fc89 	bl	4acc <digitalWrite>
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    31ba:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 3478 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e8>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    31be:	4aa9      	ldr	r2, [pc, #676]	; (3464 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d4>)
    31c0:	2307      	movs	r3, #7
    31c2:	4ca9      	ldr	r4, [pc, #676]	; (3468 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d8>)
  }
  SPI.begin();
    31c4:	4640      	mov	r0, r8
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    31c6:	e884 000c 	stmia.w	r4, {r2, r3}
  }
  SPI.begin();
    31ca:	f001 fa3b 	bl	4644 <SPIClass::begin()>
#if defined(USE_TEENSY3_SPI)
  spiBegin();
  spiInit(6);
#elif defined(USE_SPI_LIB)
  spiInit(6);
  pinMode(SS_PIN, OUTPUT);
    31ce:	2101      	movs	r1, #1
    31d0:	200a      	movs	r0, #10
    31d2:	f001 fc81 	bl	4ad8 <pinMode>
  digitalWrite(SS_PIN, HIGH); // disable any SPI device using hardware SS pin  
    31d6:	200a      	movs	r0, #10
    31d8:	2101      	movs	r1, #1
    31da:	f001 fc77 	bl	4acc <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    31de:	f898 0013 	ldrb.w	r0, [r8, #19]
    31e2:	e894 4004 	ldmia.w	r4, {r2, lr}
    31e6:	2800      	cmp	r0, #0
    31e8:	d03a      	beq.n	3260 <Sd2Card::SD_init(unsigned char, unsigned char)+0xd0>
			__disable_irq();
    31ea:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    31ec:	f898 0013 	ldrb.w	r0, [r8, #19]
    31f0:	07c4      	lsls	r4, r0, #31
    31f2:	4603      	mov	r3, r0
    31f4:	d50a      	bpl.n	320c <Sd2Card::SD_init(unsigned char, unsigned char)+0x7c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    31f6:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 34a0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x310>
    31fa:	f8d8 4014 	ldr.w	r4, [r8, #20]
    31fe:	f8dc 1000 	ldr.w	r1, [ip]
    3202:	4021      	ands	r1, r4
    3204:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    3208:	f8cc 1000 	str.w	r1, [ip]
			}
			if (interruptMasksUsed & 0x02) {
    320c:	0780      	lsls	r0, r0, #30
    320e:	d509      	bpl.n	3224 <Sd2Card::SD_init(unsigned char, unsigned char)+0x94>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3210:	4896      	ldr	r0, [pc, #600]	; (346c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2dc>)
    3212:	f8d8 1018 	ldr.w	r1, [r8, #24]
    3216:	6804      	ldr	r4, [r0, #0]
    3218:	f898 3013 	ldrb.w	r3, [r8, #19]
    321c:	4021      	ands	r1, r4
    321e:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    3222:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x04) {
    3224:	0759      	lsls	r1, r3, #29
    3226:	d509      	bpl.n	323c <Sd2Card::SD_init(unsigned char, unsigned char)+0xac>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3228:	4891      	ldr	r0, [pc, #580]	; (3470 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e0>)
    322a:	f8d8 101c 	ldr.w	r1, [r8, #28]
    322e:	6804      	ldr	r4, [r0, #0]
    3230:	f898 3013 	ldrb.w	r3, [r8, #19]
    3234:	4021      	ands	r1, r4
    3236:	f8c8 1030 	str.w	r1, [r8, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    323a:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x08) {
    323c:	071c      	lsls	r4, r3, #28
    323e:	d509      	bpl.n	3254 <Sd2Card::SD_init(unsigned char, unsigned char)+0xc4>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3240:	488c      	ldr	r0, [pc, #560]	; (3474 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e4>)
    3242:	f8d8 1020 	ldr.w	r1, [r8, #32]
    3246:	6804      	ldr	r4, [r0, #0]
    3248:	f898 3013 	ldrb.w	r3, [r8, #19]
    324c:	4021      	ands	r1, r4
    324e:	f8c8 1034 	str.w	r1, [r8, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    3252:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x10) {
    3254:	06d8      	lsls	r0, r3, #27
    3256:	f100 80a8 	bmi.w	33aa <Sd2Card::SD_init(unsigned char, unsigned char)+0x21a>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    325a:	b662      	cpsie	i
    325c:	f898 0013 	ldrb.w	r0, [r8, #19]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    3260:	f8d8 3008 	ldr.w	r3, [r8, #8]
    3264:	4984      	ldr	r1, [pc, #528]	; (3478 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e8>)
    3266:	4293      	cmp	r3, r2
    3268:	f000 80c0 	beq.w	33ec <Sd2Card::SD_init(unsigned char, unsigned char)+0x25c>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    326c:	4b83      	ldr	r3, [pc, #524]	; (347c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2ec>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    326e:	4c84      	ldr	r4, [pc, #528]	; (3480 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f0>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    3270:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    3272:	608a      	str	r2, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3274:	f3c3 1101 	ubfx	r1, r3, #4, #2
    3278:	f3c3 6382 	ubfx	r3, r3, #26, #3
    327c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    3280:	3301      	adds	r3, #1
    3282:	fbb1 f1f3 	udiv	r1, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    3286:	2a00      	cmp	r2, #0
    3288:	f000 808d 	beq.w	33a6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x216>
    328c:	fbb1 f3f2 	udiv	r3, r1, r2

			if (d && clkhz/d > _clock) d++;
    3290:	b14b      	cbz	r3, 32a6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x116>
    3292:	fbb1 f1f3 	udiv	r1, r1, r3
    3296:	4291      	cmp	r1, r2
    3298:	bf88      	it	hi
    329a:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    329c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    32a0:	f0c0 80d0 	bcc.w	3444 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2b4>
    32a4:	4b77      	ldr	r3, [pc, #476]	; (3484 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f4>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    32a6:	f8c8 300c 	str.w	r3, [r8, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    32aa:	f8d8 2000 	ldr.w	r2, [r8]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    32ae:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    32b0:	2103      	movs	r1, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    32b2:	f04f 0c01 	mov.w	ip, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    32b6:	6114      	str	r4, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    32b8:	240a      	movs	r4, #10
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    32ba:	6251      	str	r1, [r2, #36]	; 0x24
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    32bc:	21ff      	movs	r1, #255	; 0xff

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    32be:	6413      	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    32c0:	f8c2 e060 	str.w	lr, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    32c4:	f8c2 c010 	str.w	ip, [r2, #16]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    32c8:	6651      	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    32ca:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    32cc:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    32d0:	d0fb      	beq.n	32ca <Sd2Card::SD_init(unsigned char, unsigned char)+0x13a>
    32d2:	3c01      	subs	r4, #1
    32d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
#endif  // not USE_TEENSY3_SPI
  // must supply min of 74 clock cycles with CS high.
#ifdef SPI_HAS_TRANSACTION
  SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    32d6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    32da:	d1f5      	bne.n	32c8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x138>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    32dc:	b328      	cbz	r0, 332a <Sd2Card::SD_init(unsigned char, unsigned char)+0x19a>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    32de:	07c1      	lsls	r1, r0, #31
    32e0:	d505      	bpl.n	32ee <Sd2Card::SD_init(unsigned char, unsigned char)+0x15e>
    32e2:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    32e6:	4b68      	ldr	r3, [pc, #416]	; (3488 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f8>)
    32e8:	f898 0013 	ldrb.w	r0, [r8, #19]
    32ec:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    32ee:	0782      	lsls	r2, r0, #30
    32f0:	d505      	bpl.n	32fe <Sd2Card::SD_init(unsigned char, unsigned char)+0x16e>
    32f2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    32f6:	4b65      	ldr	r3, [pc, #404]	; (348c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2fc>)
    32f8:	f898 0013 	ldrb.w	r0, [r8, #19]
    32fc:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    32fe:	0743      	lsls	r3, r0, #29
    3300:	d505      	bpl.n	330e <Sd2Card::SD_init(unsigned char, unsigned char)+0x17e>
    3302:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    3306:	4b62      	ldr	r3, [pc, #392]	; (3490 <Sd2Card::SD_init(unsigned char, unsigned char)+0x300>)
    3308:	f898 0013 	ldrb.w	r0, [r8, #19]
    330c:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    330e:	0701      	lsls	r1, r0, #28
    3310:	d505      	bpl.n	331e <Sd2Card::SD_init(unsigned char, unsigned char)+0x18e>
    3312:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    3316:	4b5f      	ldr	r3, [pc, #380]	; (3494 <Sd2Card::SD_init(unsigned char, unsigned char)+0x304>)
    3318:	f898 0013 	ldrb.w	r0, [r8, #19]
    331c:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    331e:	06c2      	lsls	r2, r0, #27
    3320:	d503      	bpl.n	332a <Sd2Card::SD_init(unsigned char, unsigned char)+0x19a>
    3322:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    3326:	4b5c      	ldr	r3, [pc, #368]	; (3498 <Sd2Card::SD_init(unsigned char, unsigned char)+0x308>)
    3328:	601a      	str	r2, [r3, #0]
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
    332a:	4628      	mov	r0, r5
    332c:	f7ff fe98 	bl	3060 <Sd2Card::chipSelectLow()>
    3330:	e004      	b.n	333c <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ac>
    3332:	6833      	ldr	r3, [r6, #0]
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    3334:	1bdb      	subs	r3, r3, r7
    3336:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    333a:	d851      	bhi.n	33e0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x250>
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    333c:	2200      	movs	r2, #0
    333e:	4628      	mov	r0, r5
    3340:	4611      	mov	r1, r2
    3342:	f7ff fdff 	bl	2f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3346:	2801      	cmp	r0, #1
    3348:	4682      	mov	sl, r0
    334a:	7068      	strb	r0, [r5, #1]
    334c:	d1f1      	bne.n	3332 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1a2>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_CMD0
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    334e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    3352:	2108      	movs	r1, #8
    3354:	4628      	mov	r0, r5
    3356:	f7ff fdf5 	bl	2f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    335a:	0743      	lsls	r3, r0, #29
    335c:	d52e      	bpl.n	33bc <Sd2Card::SD_init(unsigned char, unsigned char)+0x22c>
    type_ = SD_CARD_TYPE_SD1;
    335e:	f885 a002 	strb.w	sl, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    3362:	f04f 0a00 	mov.w	sl, #0
    3366:	e004      	b.n	3372 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1e2>
    3368:	6833      	ldr	r3, [r6, #0]
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    336a:	1bdb      	subs	r3, r3, r7
    336c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    3370:	d836      	bhi.n	33e0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x250>
  // private functions
  uint8_t SD_init(uint8_t sckRateID, uint8_t chipSelectPin);
  uint8_t SD_readBlock(uint32_t block, uint8_t* dst);
  uint8_t SD_writeBlock(uint32_t blockNumber, const uint8_t* src);
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    3372:	2200      	movs	r2, #0
    3374:	2137      	movs	r1, #55	; 0x37
    3376:	4628      	mov	r0, r5
    3378:	f7ff fde4 	bl	2f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    337c:	4652      	mov	r2, sl
    337e:	2129      	movs	r1, #41	; 0x29
    3380:	4628      	mov	r0, r5
    3382:	f7ff fddf 	bl	2f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    3386:	7068      	strb	r0, [r5, #1]
    3388:	2800      	cmp	r0, #0
    338a:	d1ed      	bne.n	3368 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1d8>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    338c:	78ab      	ldrb	r3, [r5, #2]
    338e:	2b02      	cmp	r3, #2
    3390:	d033      	beq.n	33fa <Sd2Card::SD_init(unsigned char, unsigned char)+0x26a>
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    3392:	4628      	mov	r0, r5
  return setSckRate(sckRateID);
    3394:	2401      	movs	r4, #1
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    3396:	f7ff fe29 	bl	2fec <Sd2Card::chipSelectHigh()>
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
#if defined(USE_TEENSY3_SPI) || defined(USE_SPI_LIB)
  spiInit(sckRateID);
    339a:	4648      	mov	r0, r9
    339c:	f7ff fd80 	bl	2ea0 <spiInit(unsigned char)>
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
  return false;
}
    33a0:	4620      	mov	r0, r4
    33a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    33a6:	460b      	mov	r3, r1
    33a8:	e772      	b.n	3290 <Sd2Card::SD_init(unsigned char, unsigned char)+0x100>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    33aa:	493c      	ldr	r1, [pc, #240]	; (349c <Sd2Card::SD_init(unsigned char, unsigned char)+0x30c>)
    33ac:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    33b0:	6808      	ldr	r0, [r1, #0]
    33b2:	4003      	ands	r3, r0
    33b4:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    33b8:	600b      	str	r3, [r1, #0]
    33ba:	e74e      	b.n	325a <Sd2Card::SD_init(unsigned char, unsigned char)+0xca>
    33bc:	2104      	movs	r1, #4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    33be:	20ff      	movs	r0, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    33c0:	f8d8 2000 	ldr.w	r2, [r8]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    33c4:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    33c6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    33c8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    33cc:	d0fb      	beq.n	33c6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x236>
    33ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
    33d0:	1e4b      	subs	r3, r1, #1
    33d2:	b2d2      	uxtb	r2, r2
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type_ = SD_CARD_TYPE_SD1;
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    33d4:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
    33d8:	706a      	strb	r2, [r5, #1]
    33da:	d1f1      	bne.n	33c0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x230>
    if (status_ != 0XAA) {
    33dc:	2aaa      	cmp	r2, #170	; 0xaa
    33de:	d007      	beq.n	33f0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x260>
  }
  chipSelectHigh();
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
    33e0:	4628      	mov	r0, r5
    33e2:	f7ff fe03 	bl	2fec <Sd2Card::chipSelectHigh()>
  return false;
}
    33e6:	4620      	mov	r0, r4
    33e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33ec:	68cb      	ldr	r3, [r1, #12]
    33ee:	e75c      	b.n	32aa <Sd2Card::SD_init(unsigned char, unsigned char)+0x11a>
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    33f0:	2302      	movs	r3, #2
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    33f2:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    33f6:	70ab      	strb	r3, [r5, #2]
    33f8:	e7bb      	b.n	3372 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1e2>
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    33fa:	4602      	mov	r2, r0
    33fc:	213a      	movs	r1, #58	; 0x3a
    33fe:	4628      	mov	r0, r5
    3400:	f7ff fda0 	bl	2f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3404:	2800      	cmp	r0, #0
    3406:	d1eb      	bne.n	33e0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x250>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3408:	f8d8 3000 	ldr.w	r3, [r8]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    340c:	22ff      	movs	r2, #255	; 0xff
    340e:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    3410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    3412:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    3416:	d0fb      	beq.n	3410 <Sd2Card::SD_init(unsigned char, unsigned char)+0x280>
    3418:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    341a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    341e:	2ac0      	cmp	r2, #192	; 0xc0
    3420:	d103      	bne.n	342a <Sd2Card::SD_init(unsigned char, unsigned char)+0x29a>
    3422:	2303      	movs	r3, #3
    3424:	70ab      	strb	r3, [r5, #2]
    3426:	f8d8 3000 	ldr.w	r3, [r8]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    342a:	2103      	movs	r1, #3
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    342c:	20ff      	movs	r0, #255	; 0xff
    342e:	6658      	str	r0, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    3430:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    3432:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    3436:	d0fb      	beq.n	3430 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2a0>
    3438:	3901      	subs	r1, #1
    343a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    343c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    3440:	d1f5      	bne.n	342e <Sd2Card::SD_init(unsigned char, unsigned char)+0x29e>
    3442:	e7a6      	b.n	3392 <Sd2Card::SD_init(unsigned char, unsigned char)+0x202>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    3444:	2b02      	cmp	r3, #2
    3446:	d801      	bhi.n	344c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2bc>
    3448:	2300      	movs	r3, #0
    344a:	e72c      	b.n	32a6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x116>
    344c:	3b02      	subs	r3, #2
    344e:	0859      	lsrs	r1, r3, #1
    3450:	040a      	lsls	r2, r1, #16
    3452:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3456:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    345a:	4313      	orrs	r3, r2
    345c:	e723      	b.n	32a6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x116>
    345e:	bf00      	nop
    3460:	200021a0 	.word	0x200021a0
    3464:	00061a80 	.word	0x00061a80
    3468:	20001f7c 	.word	0x20001f7c
    346c:	e000e184 	.word	0xe000e184
    3470:	e000e188 	.word	0xe000e188
    3474:	e000e18c 	.word	0xe000e18c
    3478:	20000e38 	.word	0x20000e38
    347c:	400fc000 	.word	0x400fc000
    3480:	200000f4 	.word	0x200000f4
    3484:	007f7fff 	.word	0x007f7fff
    3488:	e000e100 	.word	0xe000e100
    348c:	e000e104 	.word	0xe000e104
    3490:	e000e108 	.word	0xe000e108
    3494:	e000e10c 	.word	0xe000e10c
    3498:	e000e110 	.word	0xe000e110
    349c:	e000e190 	.word	0xe000e190
    34a0:	e000e180 	.word	0xe000e180

000034a4 <Sd2Card::waitStartBlock()>:
    34a4:	490f      	ldr	r1, [pc, #60]	; (34e4 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    34a6:	b470      	push	{r4, r5, r6}
    34a8:	4d0f      	ldr	r5, [pc, #60]	; (34e8 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    34aa:	24ff      	movs	r4, #255	; 0xff
    34ac:	680e      	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    34ae:	682a      	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    34b0:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    34b2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    34b4:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    34b8:	d0fb      	beq.n	34b2 <Sd2Card::waitStartBlock()+0xe>
    34ba:	6f53      	ldr	r3, [r2, #116]	; 0x74
    34bc:	b2db      	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    34be:	2bff      	cmp	r3, #255	; 0xff
    34c0:	7043      	strb	r3, [r0, #1]
    34c2:	d107      	bne.n	34d4 <Sd2Card::waitStartBlock()+0x30>
    34c4:	680b      	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    34c6:	1b9b      	subs	r3, r3, r6
    34c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    34cc:	d9ef      	bls.n	34ae <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    34ce:	2000      	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    34d0:	bc70      	pop	{r4, r5, r6}
    34d2:	4770      	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    34d4:	f1a3 00fe 	sub.w	r0, r3, #254	; 0xfe
    34d8:	fab0 f080 	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    34dc:	bc70      	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    34de:	0940      	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop
    34e4:	200021a0 	.word	0x200021a0
    34e8:	20000e38 	.word	0x20000e38

000034ec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    34ec:	b570      	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    34ee:	7883      	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    34f0:	460d      	mov	r5, r1
    34f2:	4604      	mov	r4, r0
    34f4:	4616      	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    34f6:	2b03      	cmp	r3, #3
    34f8:	bf18      	it	ne
    34fa:	024d      	lslne	r5, r1, #9
  chipSelectLow();
    34fc:	f7ff fdb0 	bl	3060 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    3500:	2111      	movs	r1, #17
    3502:	462a      	mov	r2, r5
    3504:	4620      	mov	r0, r4
    3506:	f7ff fd1d 	bl	2f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    350a:	b918      	cbnz	r0, 3514 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    350c:	4620      	mov	r0, r4
    350e:	f7ff ffc9 	bl	34a4 <Sd2Card::waitStartBlock()>
    3512:	b920      	cbnz	r0, 351e <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    3514:	4620      	mov	r0, r4
    3516:	f7ff fd69 	bl	2fec <Sd2Card::chipSelectHigh()>
  return false;
    351a:	2000      	movs	r0, #0
}
    351c:	bd70      	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    351e:	4d11      	ldr	r5, [pc, #68]	; (3564 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    3520:	f44f 7200 	mov.w	r2, #512	; 0x200
    3524:	21ff      	movs	r1, #255	; 0xff
    3526:	4630      	mov	r0, r6
    3528:	f005 f926 	bl	8778 <memset>
    352c:	f44f 7300 	mov.w	r3, #512	; 0x200
    3530:	4632      	mov	r2, r6
    3532:	4628      	mov	r0, r5
    3534:	4631      	mov	r1, r6
    3536:	f001 fa39 	bl	49ac <SPIClass::transfer(void const*, void*, unsigned int)>
    353a:	682b      	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    353c:	22ff      	movs	r2, #255	; 0xff
    353e:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    3540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    3542:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    3546:	d0fb      	beq.n	3540 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    3548:	22ff      	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    354a:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    354c:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    354e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    3550:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    3554:	d0fb      	beq.n	354e <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    3556:	4620      	mov	r0, r4
    3558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    355a:	f7ff fd47 	bl	2fec <Sd2Card::chipSelectHigh()>
  return true;
    355e:	2001      	movs	r0, #1
    3560:	bd70      	pop	{r4, r5, r6, pc}
    3562:	bf00      	nop
    3564:	20000e38 	.word	0x20000e38

00003568 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    3568:	4b1b      	ldr	r3, [pc, #108]	; (35d8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    356a:	b410      	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    356c:	681c      	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    356e:	6661      	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    3570:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    3572:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    3576:	d0fb      	beq.n	3570 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    3578:	1e51      	subs	r1, r2, #1
    357a:	6f63      	ldr	r3, [r4, #116]	; 0x74
    357c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    3580:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    3584:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    3586:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    3588:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    358c:	d0fb      	beq.n	3586 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    358e:	4291      	cmp	r1, r2
    3590:	6f63      	ldr	r3, [r4, #116]	; 0x74
    3592:	d1f5      	bne.n	3580 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    3594:	23ff      	movs	r3, #255	; 0xff
    3596:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    3598:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    359a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    359e:	d0fb      	beq.n	3598 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    35a0:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    35a2:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    35a4:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    35a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    35a8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    35ac:	d0fb      	beq.n	35a6 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    35ae:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    35b0:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    35b2:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    35b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    35b6:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    35ba:	d0fb      	beq.n	35b4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    35bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
    35be:	b2db      	uxtb	r3, r3
    35c0:	f003 021f 	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    35c4:	7043      	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    35c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    35ca:	f1a2 0005 	sub.w	r0, r2, #5
    35ce:	fab0 f080 	clz	r0, r0
    35d2:	0940      	lsrs	r0, r0, #5
    35d4:	4770      	bx	lr
    35d6:	bf00      	nop
    35d8:	20000e38 	.word	0x20000e38

000035dc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    35dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35de:	4605      	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    35e0:	b169      	cbz	r1, 35fe <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    35e2:	7883      	ldrb	r3, [r0, #2]
    35e4:	460c      	mov	r4, r1
    35e6:	4616      	mov	r6, r2
    35e8:	2b03      	cmp	r3, #3
    35ea:	bf18      	it	ne
    35ec:	024c      	lslne	r4, r1, #9
  chipSelectLow();
    35ee:	f7ff fd37 	bl	3060 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    35f2:	2118      	movs	r1, #24
    35f4:	4622      	mov	r2, r4
    35f6:	4628      	mov	r0, r5
    35f8:	f7ff fca4 	bl	2f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    35fc:	b120      	cbz	r0, 3608 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    35fe:	4628      	mov	r0, r5
    3600:	f7ff fcf4 	bl	2fec <Sd2Card::chipSelectHigh()>
  return false;
    3604:	2000      	movs	r0, #0
}
    3606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    3608:	4632      	mov	r2, r6
    360a:	21fe      	movs	r1, #254	; 0xfe
    360c:	4628      	mov	r0, r5
    360e:	f7ff ffab 	bl	3568 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    3612:	2800      	cmp	r0, #0
    3614:	d0f3      	beq.n	35fe <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    3616:	4915      	ldr	r1, [pc, #84]	; (366c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    3618:	20ff      	movs	r0, #255	; 0xff
    361a:	4e15      	ldr	r6, [pc, #84]	; (3670 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    361c:	680f      	ldr	r7, [r1, #0]
    361e:	6832      	ldr	r2, [r6, #0]
    3620:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    3622:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    3624:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    3628:	d0fb      	beq.n	3622 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    362a:	6f54      	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    362c:	b2e4      	uxtb	r4, r4
    362e:	2cff      	cmp	r4, #255	; 0xff
    3630:	d005      	beq.n	363e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    3632:	680b      	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    3634:	1bdb      	subs	r3, r3, r7
    3636:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    363a:	d3f1      	bcc.n	3620 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    363c:	e7df      	b.n	35fe <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    363e:	2200      	movs	r2, #0
    3640:	210d      	movs	r1, #13
    3642:	4628      	mov	r0, r5
    3644:	f7ff fc7e 	bl	2f44 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3648:	2800      	cmp	r0, #0
    364a:	d1d8      	bne.n	35fe <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    364c:	6832      	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    364e:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    3650:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    3652:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    3656:	d0fb      	beq.n	3650 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    3658:	6f53      	ldr	r3, [r2, #116]	; 0x74
    365a:	f013 0fff 	tst.w	r3, #255	; 0xff
    365e:	d1ce      	bne.n	35fe <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    3660:	4628      	mov	r0, r5
    3662:	f7ff fcc3 	bl	2fec <Sd2Card::chipSelectHigh()>
  return true;
    3666:	2001      	movs	r0, #1
    3668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    366a:	bf00      	nop
    366c:	200021a0 	.word	0x200021a0
    3670:	20000e38 	.word	0x20000e38

00003674 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    3674:	4b02      	ldr	r3, [pc, #8]	; (3680 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    3676:	2207      	movs	r2, #7
    3678:	4902      	ldr	r1, [pc, #8]	; (3684 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    367a:	e883 0006 	stmia.w	r3, {r1, r2}
    367e:	4770      	bx	lr
    3680:	20001f7c 	.word	0x20001f7c
    3684:	003d0900 	.word	0x003d0900

00003688 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    3688:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    368a:	f990 3005 	ldrsb.w	r3, [r0, #5]
    368e:	2b00      	cmp	r3, #0
    3690:	db03      	blt.n	369a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    3692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    3696:	f000 bc4f 	b.w	3f38 <SdVolume::cacheFlush()>
    369a:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    369c:	2101      	movs	r1, #1
    369e:	6900      	ldr	r0, [r0, #16]
    36a0:	f000 fc8a 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    36a4:	b300      	cbz	r0, 36e8 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    36a6:	7d25      	ldrb	r5, [r4, #20]
    36a8:	4b10      	ldr	r3, [pc, #64]	; (36ec <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    36aa:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    36ae:	d01b      	beq.n	36e8 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    36b0:	79a3      	ldrb	r3, [r4, #6]
    36b2:	2b01      	cmp	r3, #1
    36b4:	d915      	bls.n	36e2 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    36b6:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    36b8:	490d      	ldr	r1, [pc, #52]	; (36f0 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    36ba:	0c1a      	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    36bc:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    36be:	680b      	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    36c0:	82aa      	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    36c2:	b133      	cbz	r3, 36d2 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    36c4:	f105 0116 	add.w	r1, r5, #22
    36c8:	f105 0018 	add.w	r0, r5, #24
    36cc:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    36ce:	8b2b      	ldrh	r3, [r5, #24]
    36d0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    36d2:	7963      	ldrb	r3, [r4, #5]
    36d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    36d8:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    36da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    36de:	f000 bc2b 	b.w	3f38 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    36e2:	69a3      	ldr	r3, [r4, #24]
    36e4:	61eb      	str	r3, [r5, #28]
    36e6:	e7e6      	b.n	36b6 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    36e8:	2000      	movs	r0, #0
    36ea:	bd38      	pop	{r3, r4, r5, pc}
    36ec:	20001f94 	.word	0x20001f94
    36f0:	20001f88 	.word	0x20001f88

000036f4 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    36f4:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    36f6:	f100 0208 	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    36fa:	4604      	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    36fc:	2101      	movs	r1, #1
    36fe:	6a00      	ldr	r0, [r0, #32]
    3700:	f000 fd50 	bl	41a4 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    3704:	b150      	cbz	r0, 371c <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    3706:	69e3      	ldr	r3, [r4, #28]
    3708:	b93b      	cbnz	r3, 371a <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    370a:	7963      	ldrb	r3, [r4, #5]
    370c:	2001      	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    370e:	68a2      	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    3710:	f063 037f 	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    3714:	61e2      	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    3716:	7163      	strb	r3, [r4, #5]
    3718:	bd10      	pop	{r4, pc}
  }
  return true;
    371a:	2001      	movs	r0, #1
}
    371c:	bd10      	pop	{r4, pc}
    371e:	bf00      	nop

00003720 <SdFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    3720:	b570      	push	{r4, r5, r6, lr}
    3722:	4606      	mov	r6, r0
  if (!addCluster()) return false;
    3724:	f7ff ffe6 	bl	36f4 <SdFile::addCluster()>
    3728:	b198      	cbz	r0, 3752 <SdFile::addDirCluster()+0x32>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    372a:	6a32      	ldr	r2, [r6, #32]
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    372c:	68b5      	ldr	r5, [r6, #8]
    372e:	7c11      	ldrb	r1, [r2, #16]
    3730:	3d02      	subs	r5, #2
    3732:	6953      	ldr	r3, [r2, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    3734:	7914      	ldrb	r4, [r2, #4]
    3736:	408d      	lsls	r5, r1
    3738:	3b01      	subs	r3, #1
    373a:	b174      	cbz	r4, 375a <SdFile::addDirCluster()+0x3a>
    373c:	441d      	add	r5, r3
    373e:	e002      	b.n	3746 <SdFile::addDirCluster()+0x26>
    3740:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    3744:	d007      	beq.n	3756 <SdFile::addDirCluster()+0x36>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    3746:	1960      	adds	r0, r4, r5
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    3748:	3c01      	subs	r4, #1
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    374a:	f000 fca5 	bl	4098 <SdVolume::cacheZeroBlock(unsigned long)>
    374e:	2800      	cmp	r0, #0
    3750:	d1f6      	bne.n	3740 <SdFile::addDirCluster()+0x20>
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;
    3752:	2000      	movs	r0, #0
    3754:	bd70      	pop	{r4, r5, r6, pc}
    3756:	6a33      	ldr	r3, [r6, #32]
    3758:	7c19      	ldrb	r1, [r3, #16]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    375a:	f44f 7200 	mov.w	r2, #512	; 0x200
    375e:	69b4      	ldr	r4, [r6, #24]
    3760:	2001      	movs	r0, #1
    3762:	fa02 f301 	lsl.w	r3, r2, r1
    3766:	4423      	add	r3, r4
    3768:	61b3      	str	r3, [r6, #24]
  return true;
}
    376a:	bd70      	pop	{r4, r5, r6, pc}

0000376c <SdFile::close()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    376c:	7982      	ldrb	r2, [r0, #6]
    376e:	b90a      	cbnz	r2, 3774 <SdFile::close()+0x8>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    3770:	2000      	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    3772:	4770      	bx	lr
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    3774:	b510      	push	{r4, lr}
    3776:	4604      	mov	r4, r0
    3778:	f7ff ff86 	bl	3688 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  if (!sync())return false;
    377c:	b118      	cbz	r0, 3786 <SdFile::close()+0x1a>
  type_ = FAT_FILE_TYPE_CLOSED;
    377e:	2300      	movs	r3, #0
  return true;
    3780:	2001      	movs	r0, #1
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
  type_ = FAT_FILE_TYPE_CLOSED;
    3782:	71a3      	strb	r3, [r4, #6]
  return true;
}
    3784:	bd10      	pop	{r4, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    3786:	2000      	movs	r0, #0
    3788:	bd10      	pop	{r4, pc}
    378a:	bf00      	nop

0000378c <SdFile::make83Name(char const*, unsigned char*)>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    378c:	b4f0      	push	{r4, r5, r6, r7}
    378e:	1e4b      	subs	r3, r1, #1
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    3790:	2420      	movs	r4, #32
    3792:	f101 020a 	add.w	r2, r1, #10
    3796:	f803 4f01 	strb.w	r4, [r3, #1]!
    379a:	4293      	cmp	r3, r2
    379c:	d1fb      	bne.n	3796 <SdFile::make83Name(char const*, unsigned char*)+0xa>
    379e:	3801      	subs	r0, #1
    37a0:	2500      	movs	r5, #0
    37a2:	2607      	movs	r6, #7
  i = 0;
  while ((c = *str++) != '\0') {
    37a4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    37a8:	b314      	cbz	r4, 37f0 <SdFile::make83Name(char const*, unsigned char*)+0x64>
    if (c == '.') {
    37aa:	2c2e      	cmp	r4, #46	; 0x2e
    37ac:	d01b      	beq.n	37e6 <SdFile::make83Name(char const*, unsigned char*)+0x5a>
    37ae:	4a13      	ldr	r2, [pc, #76]	; (37fc <SdFile::make83Name(char const*, unsigned char*)+0x70>)
    37b0:	237c      	movs	r3, #124	; 0x7c
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    37b2:	429c      	cmp	r4, r3
    37b4:	d014      	beq.n	37e0 <SdFile::make83Name(char const*, unsigned char*)+0x54>
    37b6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    37ba:	2b00      	cmp	r3, #0
    37bc:	d1f9      	bne.n	37b2 <SdFile::make83Name(char const*, unsigned char*)+0x26>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    37be:	f1a4 0321 	sub.w	r3, r4, #33	; 0x21
    37c2:	2b5d      	cmp	r3, #93	; 0x5d
    37c4:	d80c      	bhi.n	37e0 <SdFile::make83Name(char const*, unsigned char*)+0x54>
    37c6:	42ae      	cmp	r6, r5
    37c8:	d30a      	bcc.n	37e0 <SdFile::make83Name(char const*, unsigned char*)+0x54>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    37ca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    37ce:	1c6f      	adds	r7, r5, #1
    37d0:	194a      	adds	r2, r1, r5
    37d2:	2b19      	cmp	r3, #25
    37d4:	b2fd      	uxtb	r5, r7
    37d6:	d801      	bhi.n	37dc <SdFile::make83Name(char const*, unsigned char*)+0x50>
    37d8:	3c20      	subs	r4, #32
    37da:	b2e4      	uxtb	r4, r4
    37dc:	7014      	strb	r4, [r2, #0]
    37de:	e7e1      	b.n	37a4 <SdFile::make83Name(char const*, unsigned char*)+0x18>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    37e0:	2000      	movs	r0, #0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    37e2:	bcf0      	pop	{r4, r5, r6, r7}
    37e4:	4770      	bx	lr
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    37e6:	2e0a      	cmp	r6, #10
    37e8:	d0fa      	beq.n	37e0 <SdFile::make83Name(char const*, unsigned char*)+0x54>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    37ea:	2508      	movs	r5, #8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    37ec:	260a      	movs	r6, #10
    37ee:	e7d9      	b.n	37a4 <SdFile::make83Name(char const*, unsigned char*)+0x18>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    37f0:	7808      	ldrb	r0, [r1, #0]
    37f2:	3820      	subs	r0, #32
    37f4:	bf18      	it	ne
    37f6:	2001      	movne	r0, #1
    37f8:	e7f3      	b.n	37e2 <SdFile::make83Name(char const*, unsigned char*)+0x56>
    37fa:	bf00      	nop
    37fc:	600019e0 	.word	0x600019e0

00003800 <SdFile::openRoot(SdVolume*)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    3800:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) return false;
    3802:	7983      	ldrb	r3, [r0, #6]
    3804:	b93b      	cbnz	r3, 3816 <SdFile::openRoot(SdVolume*)+0x16>
    3806:	f891 2020 	ldrb.w	r2, [r1, #32]
    380a:	460d      	mov	r5, r1
    380c:	4604      	mov	r4, r0

  if (vol->fatType() == 16) {
    380e:	2a10      	cmp	r2, #16
    3810:	d003      	beq.n	381a <SdFile::openRoot(SdVolume*)+0x1a>
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    3812:	2a20      	cmp	r2, #32
    3814:	d011      	beq.n	383a <SdFile::openRoot(SdVolume*)+0x3a>
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;
    3816:	2000      	movs	r0, #0
    3818:	bd38      	pop	{r3, r4, r5, pc}

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    381a:	2202      	movs	r2, #2
    firstCluster_ = 0;
    381c:	61c3      	str	r3, [r0, #28]
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    381e:	7182      	strb	r2, [r0, #6]
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
    3820:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
    3822:	015b      	lsls	r3, r3, #5
    3824:	6183      	str	r3, [r0, #24]
  vol_ = vol;
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    3826:	2300      	movs	r3, #0
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    3828:	2201      	movs	r2, #1
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    382a:	6225      	str	r5, [r4, #32]
  curPosition_ = 0;

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
  return true;
    382c:	4610      	mov	r0, r2
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    382e:	7162      	strb	r2, [r4, #5]

  // set to start of file
  curCluster_ = 0;
    3830:	60a3      	str	r3, [r4, #8]
  curPosition_ = 0;
    3832:	60e3      	str	r3, [r4, #12]

  // root has no directory entry
  dirBlock_ = 0;
    3834:	6123      	str	r3, [r4, #16]
  dirIndex_ = 0;
    3836:	7523      	strb	r3, [r4, #20]
  return true;
}
    3838:	bd38      	pop	{r3, r4, r5, pc}
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    383a:	2303      	movs	r3, #3
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    383c:	f100 0218 	add.w	r2, r0, #24
    3840:	4608      	mov	r0, r1
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    3842:	71a3      	strb	r3, [r4, #6]
    3844:	6a49      	ldr	r1, [r1, #36]	; 0x24
    firstCluster_ = vol->rootDirStart();
    3846:	61e1      	str	r1, [r4, #28]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    3848:	f000 fc7c 	bl	4144 <SdVolume::chainSize(unsigned long, unsigned long*) const>
    384c:	2800      	cmp	r0, #0
    384e:	d1ea      	bne.n	3826 <SdFile::openRoot(SdVolume*)+0x26>
    3850:	e7e1      	b.n	3816 <SdFile::openRoot(SdVolume*)+0x16>
    3852:	bf00      	nop

00003854 <SdFile::read(void*, unsigned int)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    3854:	7983      	ldrb	r3, [r0, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    3856:	b913      	cbnz	r3, 385e <SdFile::read(void*, unsigned int)+0xa>
    3858:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    385c:	4770      	bx	lr
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    385e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3862:	468b      	mov	fp, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    3864:	7941      	ldrb	r1, [r0, #5]
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    3866:	b083      	sub	sp, #12
    3868:	4605      	mov	r5, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    386a:	07c9      	lsls	r1, r1, #31
    386c:	d55a      	bpl.n	3924 <SdFile::read(void*, unsigned int)+0xd0>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    386e:	68c1      	ldr	r1, [r0, #12]
    3870:	6984      	ldr	r4, [r0, #24]
    3872:	1a64      	subs	r4, r4, r1
    3874:	4294      	cmp	r4, r2
    3876:	bf28      	it	cs
    3878:	4614      	movcs	r4, r2
    387a:	4626      	mov	r6, r4
    387c:	9401      	str	r4, [sp, #4]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    387e:	2c00      	cmp	r4, #0
    3880:	d068      	beq.n	3954 <SdFile::read(void*, unsigned int)+0x100>
    3882:	461a      	mov	r2, r3
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    3884:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 3984 <SdFile::read(void*, unsigned int)+0x130>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    3888:	4f3d      	ldr	r7, [pc, #244]	; (3980 <SdFile::read(void*, unsigned int)+0x12c>)

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    388a:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    388e:	2a02      	cmp	r2, #2
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    3890:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 3988 <SdFile::read(void*, unsigned int)+0x134>
    3894:	d041      	beq.n	391a <SdFile::read(void*, unsigned int)+0xc6>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3896:	6a28      	ldr	r0, [r5, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3898:	7904      	ldrb	r4, [r0, #4]
    389a:	3c01      	subs	r4, #1
    389c:	ea04 2451 	and.w	r4, r4, r1, lsr #9
    38a0:	b2e4      	uxtb	r4, r4
      if (offset == 0 && blockOfCluster == 0) {
    38a2:	f1ba 0f00 	cmp.w	sl, #0
    38a6:	d161      	bne.n	396c <SdFile::read(void*, unsigned int)+0x118>
    38a8:	2c00      	cmp	r4, #0
    38aa:	d15f      	bne.n	396c <SdFile::read(void*, unsigned int)+0x118>
        // start of new cluster
        if (curPosition_ == 0) {
    38ac:	2900      	cmp	r1, #0
    38ae:	d155      	bne.n	395c <SdFile::read(void*, unsigned int)+0x108>
          // use first cluster in file
          curCluster_ = firstCluster_;
    38b0:	69e9      	ldr	r1, [r5, #28]
    38b2:	60a9      	str	r1, [r5, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    38b4:	3902      	subs	r1, #2
    38b6:	7c02      	ldrb	r2, [r0, #16]
    38b8:	6940      	ldr	r0, [r0, #20]
    38ba:	fa01 f202 	lsl.w	r2, r1, r2
    38be:	1821      	adds	r1, r4, r0
    38c0:	4411      	add	r1, r2
    }
    int32_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    38c2:	f5ca 7400 	rsb	r4, sl, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    38c6:	796a      	ldrb	r2, [r5, #5]
    38c8:	42b4      	cmp	r4, r6
    38ca:	bfa8      	it	ge
    38cc:	4634      	movge	r4, r6
    38ce:	0653      	lsls	r3, r2, #25
    38d0:	d42d      	bmi.n	392e <SdFile::read(void*, unsigned int)+0xda>
    38d2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    38d6:	d02a      	beq.n	392e <SdFile::read(void*, unsigned int)+0xda>
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    38d8:	4608      	mov	r0, r1
    38da:	2100      	movs	r1, #0
    38dc:	f000 fb6c 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    38e0:	b300      	cbz	r0, 3924 <SdFile::read(void*, unsigned int)+0xd0>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    38e2:	eb0a 0e09 	add.w	lr, sl, r9
      uint8_t* end = src + n;
    38e6:	eb0e 0004 	add.w	r0, lr, r4
      while (src != end) *dst++ = *src++;
    38ea:	4586      	cmp	lr, r0
    38ec:	d00b      	beq.n	3906 <SdFile::read(void*, unsigned int)+0xb2>
    38ee:	f10b 32ff 	add.w	r2, fp, #4294967295
    38f2:	4673      	mov	r3, lr
    38f4:	f813 1b01 	ldrb.w	r1, [r3], #1
    38f8:	4298      	cmp	r0, r3
    38fa:	f802 1f01 	strb.w	r1, [r2, #1]!
    38fe:	d1f9      	bne.n	38f4 <SdFile::read(void*, unsigned int)+0xa0>
    3900:	ebce 0000 	rsb	r0, lr, r0
    3904:	4483      	add	fp, r0
    }
    curPosition_ += n;
    3906:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    3908:	1b36      	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    390a:	4421      	add	r1, r4
    390c:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    390e:	d021      	beq.n	3954 <SdFile::read(void*, unsigned int)+0x100>
    3910:	79aa      	ldrb	r2, [r5, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    3912:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    3916:	2a02      	cmp	r2, #2
    3918:	d1bd      	bne.n	3896 <SdFile::read(void*, unsigned int)+0x42>
    391a:	6a2a      	ldr	r2, [r5, #32]
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    391c:	6a50      	ldr	r0, [r2, #36]	; 0x24
    391e:	eb00 2151 	add.w	r1, r0, r1, lsr #9
    3922:	e7ce      	b.n	38c2 <SdFile::read(void*, unsigned int)+0x6e>
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    3924:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    3928:	b003      	add	sp, #12
    392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    392e:	683a      	ldr	r2, [r7, #0]
    3930:	4291      	cmp	r1, r2
    3932:	d0d1      	beq.n	38d8 <SdFile::read(void*, unsigned int)+0x84>
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    3934:	f8d8 0000 	ldr.w	r0, [r8]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3938:	7803      	ldrb	r3, [r0, #0]
    393a:	2bfe      	cmp	r3, #254	; 0xfe
    393c:	d018      	beq.n	3970 <SdFile::read(void*, unsigned int)+0x11c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    393e:	465a      	mov	r2, fp
    3940:	f7ff fdd4 	bl	34ec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
      if (!vol_->readBlock(block, dst)) return -1;
    3944:	2800      	cmp	r0, #0
    3946:	d0ed      	beq.n	3924 <SdFile::read(void*, unsigned int)+0xd0>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    3948:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    394a:	1b36      	subs	r6, r6, r4
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    394c:	44a3      	add	fp, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    394e:	4421      	add	r1, r4
    3950:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    3952:	d1dd      	bne.n	3910 <SdFile::read(void*, unsigned int)+0xbc>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    3954:	9801      	ldr	r0, [sp, #4]
}
    3956:	b003      	add	sp, #12
    3958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    395c:	f105 0208 	add.w	r2, r5, #8
    3960:	68a9      	ldr	r1, [r5, #8]
    3962:	f000 fbb5 	bl	40d0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3966:	2800      	cmp	r0, #0
    3968:	d0dc      	beq.n	3924 <SdFile::read(void*, unsigned int)+0xd0>
    396a:	6a28      	ldr	r0, [r5, #32]
    396c:	68a9      	ldr	r1, [r5, #8]
    396e:	e7a1      	b.n	38b4 <SdFile::read(void*, unsigned int)+0x60>
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    3970:	4658      	mov	r0, fp
    3972:	f7ff f811 	bl	2998 <SDHC_CardReadBlock(void*, unsigned long)>
    3976:	fab0 f080 	clz	r0, r0
    397a:	0940      	lsrs	r0, r0, #5
    397c:	e7e2      	b.n	3944 <SdFile::read(void*, unsigned int)+0xf0>
    397e:	bf00      	nop
    3980:	20000e34 	.word	0x20000e34
    3984:	20001f94 	.word	0x20001f94
    3988:	20001f90 	.word	0x20001f90

0000398c <SdFile::readDirCache()>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    398c:	7983      	ldrb	r3, [r0, #6]
    398e:	2b01      	cmp	r3, #1
    3990:	d917      	bls.n	39c2 <SdFile::readDirCache()+0x36>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    3992:	68c3      	ldr	r3, [r0, #12]
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3994:	2201      	movs	r2, #1
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    3996:	b530      	push	{r4, r5, lr}
    3998:	b083      	sub	sp, #12
    399a:	4604      	mov	r4, r0
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    399c:	f3c3 1543 	ubfx	r5, r3, #5, #4
    39a0:	f10d 0107 	add.w	r1, sp, #7
    39a4:	f7ff ff56 	bl	3854 <SdFile::read(void*, unsigned int)>
    39a8:	2801      	cmp	r0, #1
    39aa:	d002      	beq.n	39b2 <SdFile::readDirCache()+0x26>

  // use read to locate and cache block
  if (read() < 0) return NULL;
    39ac:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    39ae:	b003      	add	sp, #12
    39b0:	bd30      	pop	{r4, r5, pc}

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    39b2:	68e3      	ldr	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    39b4:	4804      	ldr	r0, [pc, #16]	; (39c8 <SdFile::readDirCache()+0x3c>)

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    39b6:	331f      	adds	r3, #31

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    39b8:	eb00 1045 	add.w	r0, r0, r5, lsl #5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    39bc:	60e3      	str	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    39be:	b003      	add	sp, #12
    39c0:	bd30      	pop	{r4, r5, pc}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    39c2:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    39c4:	4770      	bx	lr
    39c6:	bf00      	nop
    39c8:	20001f94 	.word	0x20001f94

000039cc <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    39cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ce:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    39d0:	b113      	cbz	r3, 39d8 <SdFile::seekSet(unsigned long)+0xc>
    39d2:	6982      	ldr	r2, [r0, #24]
    39d4:	428a      	cmp	r2, r1
    39d6:	d201      	bcs.n	39dc <SdFile::seekSet(unsigned long)+0x10>
    39d8:	2000      	movs	r0, #0
    39da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    39dc:	2b02      	cmp	r3, #2
    39de:	460f      	mov	r7, r1
    39e0:	4605      	mov	r5, r0
    39e2:	d01c      	beq.n	3a1e <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    39e4:	b1f7      	cbz	r7, 3a24 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    39e6:	6a2b      	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    39e8:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    39ea:	68e9      	ldr	r1, [r5, #12]
    39ec:	7c1b      	ldrb	r3, [r3, #16]
    39ee:	1e4a      	subs	r2, r1, #1
    39f0:	3309      	adds	r3, #9
    39f2:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    39f4:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    39f6:	42a2      	cmp	r2, r4
    39f8:	d802      	bhi.n	3a00 <SdFile::seekSet(unsigned long)+0x34>
    39fa:	b109      	cbz	r1, 3a00 <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    39fc:	1aa4      	subs	r4, r4, r2
    39fe:	e001      	b.n	3a04 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    3a00:	69eb      	ldr	r3, [r5, #28]
    3a02:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    3a04:	f105 0608 	add.w	r6, r5, #8
    3a08:	e006      	b.n	3a18 <SdFile::seekSet(unsigned long)+0x4c>
    3a0a:	68a9      	ldr	r1, [r5, #8]
    3a0c:	3c01      	subs	r4, #1
    3a0e:	6a28      	ldr	r0, [r5, #32]
    3a10:	f000 fb5e 	bl	40d0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3a14:	2800      	cmp	r0, #0
    3a16:	d0df      	beq.n	39d8 <SdFile::seekSet(unsigned long)+0xc>
    3a18:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3a1a:	2c00      	cmp	r4, #0
    3a1c:	d1f5      	bne.n	3a0a <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    3a1e:	60ef      	str	r7, [r5, #12]
    return true;
    3a20:	2001      	movs	r0, #1
    3a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    3a24:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    3a26:	2001      	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    3a28:	60ef      	str	r7, [r5, #12]
    return true;
    3a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003a2c <SdFile::sync()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    3a2c:	7983      	ldrb	r3, [r0, #6]
    3a2e:	b10b      	cbz	r3, 3a34 <SdFile::sync()+0x8>
    3a30:	f7ff be2a 	b.w	3688 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    3a34:	4618      	mov	r0, r3
    3a36:	4770      	bx	lr

00003a38 <SdFile::truncate(unsigned long)>:
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    3a38:	7983      	ldrb	r3, [r0, #6]
    3a3a:	2b01      	cmp	r3, #1
    3a3c:	d001      	beq.n	3a42 <SdFile::truncate(unsigned long)+0xa>
    3a3e:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    3a40:	4770      	bx	lr
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    3a42:	b5f0      	push	{r4, r5, r6, r7, lr}
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    3a44:	7945      	ldrb	r5, [r0, #5]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    3a46:	b083      	sub	sp, #12
    3a48:	4602      	mov	r2, r0
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    3a4a:	07ac      	lsls	r4, r5, #30
    3a4c:	d51c      	bpl.n	3a88 <SdFile::truncate(unsigned long)+0x50>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    3a4e:	6985      	ldr	r5, [r0, #24]
    3a50:	460c      	mov	r4, r1
    3a52:	428d      	cmp	r5, r1
    3a54:	d318      	bcc.n	3a88 <SdFile::truncate(unsigned long)+0x50>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    3a56:	b1d5      	cbz	r5, 3a8e <SdFile::truncate(unsigned long)+0x56>
    3a58:	4625      	mov	r5, r4

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    3a5a:	68d6      	ldr	r6, [r2, #12]
    3a5c:	4614      	mov	r4, r2

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    3a5e:	f7ff ffb5 	bl	39cc <SdFile::seekSet(unsigned long)>
    3a62:	b188      	cbz	r0, 3a88 <SdFile::truncate(unsigned long)+0x50>

  if (length == 0) {
    3a64:	b9b5      	cbnz	r5, 3a94 <SdFile::truncate(unsigned long)+0x5c>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    3a66:	69e1      	ldr	r1, [r4, #28]
    3a68:	6a20      	ldr	r0, [r4, #32]
    3a6a:	f000 fc27 	bl	42bc <SdVolume::freeChain(unsigned long)>
    3a6e:	b158      	cbz	r0, 3a88 <SdFile::truncate(unsigned long)+0x50>
    firstCluster_ = 0;
    3a70:	61e5      	str	r5, [r4, #28]
    3a72:	e022      	b.n	3aba <SdFile::truncate(unsigned long)+0x82>
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;

    if (!vol_->isEOC(toFree)) {
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    3a74:	f000 fc22 	bl	42bc <SdVolume::freeChain(unsigned long)>
    3a78:	b130      	cbz	r0, 3a88 <SdFile::truncate(unsigned long)+0x50>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    3a7a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    3a7e:	68a1      	ldr	r1, [r4, #8]
    3a80:	6a20      	ldr	r0, [r4, #32]
    3a82:	f000 fc09 	bl	4298 <SdVolume::fatPut(unsigned long, unsigned long)>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    3a86:	b9c0      	cbnz	r0, 3aba <SdFile::truncate(unsigned long)+0x82>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    3a88:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    3a8a:	b003      	add	sp, #12
    3a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    3a8e:	4618      	mov	r0, r3

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    3a90:	b003      	add	sp, #12
    3a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    3a94:	aa01      	add	r2, sp, #4
    3a96:	68a1      	ldr	r1, [r4, #8]
    3a98:	6a20      	ldr	r0, [r4, #32]
    3a9a:	f000 fb19 	bl	40d0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3a9e:	2800      	cmp	r0, #0
    3aa0:	d0f2      	beq.n	3a88 <SdFile::truncate(unsigned long)+0x50>

    if (!vol_->isEOC(toFree)) {
    3aa2:	6a20      	ldr	r0, [r4, #32]
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3aa4:	f64f 72f8 	movw	r2, #65528	; 0xfff8
    3aa8:	4b0e      	ldr	r3, [pc, #56]	; (3ae4 <SdFile::truncate(unsigned long)+0xac>)
    3aaa:	f890 7020 	ldrb.w	r7, [r0, #32]
    3aae:	9901      	ldr	r1, [sp, #4]
    3ab0:	2f10      	cmp	r7, #16
    3ab2:	bf08      	it	eq
    3ab4:	4613      	moveq	r3, r2
    3ab6:	4299      	cmp	r1, r3
    3ab8:	d3dc      	bcc.n	3a74 <SdFile::truncate(unsigned long)+0x3c>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    3aba:	7963      	ldrb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    3abc:	79a2      	ldrb	r2, [r4, #6]
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    3abe:	f063 037f 	orn	r3, r3, #127	; 0x7f

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    3ac2:	61a5      	str	r5, [r4, #24]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    3ac4:	7163      	strb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    3ac6:	2a00      	cmp	r2, #0
    3ac8:	d0de      	beq.n	3a88 <SdFile::truncate(unsigned long)+0x50>
    3aca:	4620      	mov	r0, r4
    3acc:	f7ff fddc 	bl	3688 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    3ad0:	2800      	cmp	r0, #0
    3ad2:	d0d9      	beq.n	3a88 <SdFile::truncate(unsigned long)+0x50>

  // set file to correct position
  return seekSet(newPos);
    3ad4:	42b5      	cmp	r5, r6
    3ad6:	4629      	mov	r1, r5
    3ad8:	4620      	mov	r0, r4
    3ada:	bf28      	it	cs
    3adc:	4631      	movcs	r1, r6
    3ade:	f7ff ff75 	bl	39cc <SdFile::seekSet(unsigned long)>
    3ae2:	e7d2      	b.n	3a8a <SdFile::truncate(unsigned long)+0x52>
    3ae4:	0ffffff8 	.word	0x0ffffff8

00003ae8 <SdFile::openCachedEntry(unsigned char, unsigned char)>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    3ae8:	b538      	push	{r3, r4, r5, lr}
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    3aea:	4b1d      	ldr	r3, [pc, #116]	; (3b60 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x78>)
    3aec:	eb03 1341 	add.w	r3, r3, r1, lsl #5

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    3af0:	7add      	ldrb	r5, [r3, #11]
    3af2:	f015 0f11 	tst.w	r5, #17
    3af6:	d002      	beq.n	3afe <SdFile::openCachedEntry(unsigned char, unsigned char)+0x16>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    3af8:	f012 0f42 	tst.w	r2, #66	; 0x42
    3afc:	d11e      	bne.n	3b3c <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    3afe:	4615      	mov	r5, r2
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume::cacheBlockNumber_;
    3b00:	4a18      	ldr	r2, [pc, #96]	; (3b64 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x7c>)
  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    3b02:	7501      	strb	r1, [r0, #20]
    3b04:	4604      	mov	r4, r0
  dirBlock_ = SdVolume::cacheBlockNumber_;
    3b06:	6812      	ldr	r2, [r2, #0]
    3b08:	6102      	str	r2, [r0, #16]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;
    3b0a:	8a9a      	ldrh	r2, [r3, #20]
    3b0c:	8b59      	ldrh	r1, [r3, #26]
    3b0e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    3b12:	61c1      	str	r1, [r0, #28]
    3b14:	7ad8      	ldrb	r0, [r3, #11]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    3b16:	f010 0018 	ands.w	r0, r0, #24
    3b1a:	d10d      	bne.n	3b38 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x50>
    fileSize_ = p->fileSize;
    3b1c:	69da      	ldr	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    3b1e:	2301      	movs	r3, #1
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    3b20:	61a2      	str	r2, [r4, #24]
    type_ = FAT_FILE_TYPE_NORMAL;
    3b22:	71a3      	strb	r3, [r4, #6]
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    3b24:	f005 030f 	and.w	r3, r5, #15

  // set to start of file
  curCluster_ = 0;
    3b28:	2100      	movs	r1, #0
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    3b2a:	7163      	strb	r3, [r4, #5]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    3b2c:	066b      	lsls	r3, r5, #25
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);

  // set to start of file
  curCluster_ = 0;
    3b2e:	60a1      	str	r1, [r4, #8]
  curPosition_ = 0;
    3b30:	60e1      	str	r1, [r4, #12]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    3b32:	d40f      	bmi.n	3b54 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x6c>
  return true;
    3b34:	2001      	movs	r0, #1
}
    3b36:	bd38      	pop	{r3, r4, r5, pc}

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    3b38:	2810      	cmp	r0, #16
    3b3a:	d001      	beq.n	3b40 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x58>
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    3b3c:	2000      	movs	r0, #0
    3b3e:	bd38      	pop	{r3, r4, r5, pc}
  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    3b40:	f104 0218 	add.w	r2, r4, #24
    3b44:	6a20      	ldr	r0, [r4, #32]
    3b46:	f000 fafd 	bl	4144 <SdVolume::chainSize(unsigned long, unsigned long*) const>
    3b4a:	2800      	cmp	r0, #0
    3b4c:	d0f6      	beq.n	3b3c <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    type_ = FAT_FILE_TYPE_SUBDIR;
    3b4e:	2304      	movs	r3, #4
    3b50:	71a3      	strb	r3, [r4, #6]
    3b52:	e7e7      	b.n	3b24 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x3c>
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    3b54:	4620      	mov	r0, r4
  return true;
}
    3b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    3b5a:	f7ff bf6d 	b.w	3a38 <SdFile::truncate(unsigned long)>
    3b5e:	bf00      	nop
    3b60:	20001f94 	.word	0x20001f94
    3b64:	20000e34 	.word	0x20000e34

00003b68 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    3b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b6c:	b084      	sub	sp, #16
    3b6e:	4680      	mov	r8, r0
    3b70:	460c      	mov	r4, r1
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    3b72:	4610      	mov	r0, r2
    3b74:	ae01      	add	r6, sp, #4
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    3b76:	469a      	mov	sl, r3
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    3b78:	4631      	mov	r1, r6
    3b7a:	f7ff fe07 	bl	378c <SdFile::make83Name(char const*, unsigned char*)>
    3b7e:	b3a8      	cbz	r0, 3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    3b80:	2200      	movs	r2, #0
  vol_ = dirFile->vol_;
    3b82:	6a21      	ldr	r1, [r4, #32]
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    3b84:	f8df 9120 	ldr.w	r9, [pc, #288]	; 3ca8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x140>

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
  vol_ = dirFile->vol_;
    3b88:	f8c8 1020 	str.w	r1, [r8, #32]
    3b8c:	4613      	mov	r3, r2
    3b8e:	60a2      	str	r2, [r4, #8]
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    3b90:	4617      	mov	r7, r2
    3b92:	60e2      	str	r2, [r4, #12]
    3b94:	e007      	b.n	3ba6 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3e>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    3b96:	f1be 0fe5 	cmp.w	lr, #229	; 0xe5
    3b9a:	d016      	beq.n	3bca <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x62>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    3b9c:	f004 fd56 	bl	864c <memcmp>
    3ba0:	2800      	cmp	r0, #0
    3ba2:	d038      	beq.n	3c16 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xae>
    3ba4:	68e3      	ldr	r3, [r4, #12]

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    3ba6:	69a2      	ldr	r2, [r4, #24]
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    3ba8:	4620      	mov	r0, r4
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    3baa:	f3c3 1543 	ubfx	r5, r3, #5, #4

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    3bae:	429a      	cmp	r2, r3
    3bb0:	d920      	bls.n	3bf4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x8c>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    3bb2:	f7ff feeb 	bl	398c <SdFile::readDirCache()>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    3bb6:	220b      	movs	r2, #11

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;
    3bb8:	4603      	mov	r3, r0
    3bba:	b1b8      	cbz	r0, 3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    3bbc:	f890 e000 	ldrb.w	lr, [r0]
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    3bc0:	4601      	mov	r1, r0
    3bc2:	4630      	mov	r0, r6
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    3bc4:	f1be 0f00 	cmp.w	lr, #0
    3bc8:	d1e5      	bne.n	3b96 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x2e>
      // remember first empty slot
      if (!emptyFound) {
    3bca:	b93f      	cbnz	r7, 3bdc <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x74>
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    3bcc:	f8d9 2000 	ldr.w	r2, [r9]

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
    3bd0:	f888 5014 	strb.w	r5, [r8, #20]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    3bd4:	f8c8 2010 	str.w	r2, [r8, #16]
    3bd8:	f893 e000 	ldrb.w	lr, [r3]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    3bdc:	2701      	movs	r7, #1
    3bde:	f1be 0f00 	cmp.w	lr, #0
    3be2:	d1df      	bne.n	3ba4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3c>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    3be4:	f00a 0312 	and.w	r3, sl, #18
    3be8:	2b12      	cmp	r3, #18
    3bea:	d01e      	beq.n	3c2a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xc2>
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    3bec:	2000      	movs	r0, #0
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    3bee:	b004      	add	sp, #16
    3bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    3bf4:	f00a 0312 	and.w	r3, sl, #18
    3bf8:	2b12      	cmp	r3, #18
    3bfa:	d1f7      	bne.n	3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    3bfc:	b9af      	cbnz	r7, 3c2a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xc2>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    3bfe:	79a3      	ldrb	r3, [r4, #6]
    3c00:	2b02      	cmp	r3, #2
    3c02:	d0f3      	beq.n	3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    3c04:	4620      	mov	r0, r4
    3c06:	f7ff fd8b 	bl	3720 <SdFile::addDirCluster()>
    3c0a:	2800      	cmp	r0, #0
    3c0c:	d0ee      	beq.n	3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
    3c0e:	4c24      	ldr	r4, [pc, #144]	; (3ca0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x138>)

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    3c10:	f888 7014 	strb.w	r7, [r8, #20]
    3c14:	e016      	b.n	3c44 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xdc>
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    3c16:	f00a 0330 	and.w	r3, sl, #48	; 0x30
    3c1a:	2b30      	cmp	r3, #48	; 0x30
    3c1c:	d0e6      	beq.n	3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    3c1e:	4652      	mov	r2, sl
    3c20:	4629      	mov	r1, r5
    3c22:	4640      	mov	r0, r8
    3c24:	f7ff ff60 	bl	3ae8 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    3c28:	e7e1      	b.n	3bee <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x86>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    3c2a:	2101      	movs	r1, #1
    3c2c:	f8d8 0010 	ldr.w	r0, [r8, #16]
    3c30:	f000 f9c2 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3c34:	2800      	cmp	r0, #0
    3c36:	d0d9      	beq.n	3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    3c38:	f898 4014 	ldrb.w	r4, [r8, #20]
    3c3c:	4b18      	ldr	r3, [pc, #96]	; (3ca0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x138>)
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
    3c3e:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    3c42:	d0d3      	beq.n	3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    3c44:	2220      	movs	r2, #32
    3c46:	2100      	movs	r1, #0
    3c48:	4620      	mov	r0, r4
    3c4a:	f004 fd95 	bl	8778 <memset>
  memcpy(p->name, dname, 11);

  // set timestamps
  if (dateTime_) {
    3c4e:	4a15      	ldr	r2, [pc, #84]	; (3ca4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x13c>)
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    3c50:	4623      	mov	r3, r4

  // set timestamps
  if (dateTime_) {
    3c52:	6815      	ldr	r5, [r2, #0]
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    3c54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3c58:	c303      	stmia	r3!, {r0, r1}
    3c5a:	0c11      	lsrs	r1, r2, #16
    3c5c:	f823 2b02 	strh.w	r2, [r3], #2
    3c60:	7019      	strb	r1, [r3, #0]

  // set timestamps
  if (dateTime_) {
    3c62:	b1a5      	cbz	r5, 3c8e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x126>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    3c64:	f104 010e 	add.w	r1, r4, #14
    3c68:	f104 0010 	add.w	r0, r4, #16
    3c6c:	47a8      	blx	r5
    3c6e:	8a23      	ldrh	r3, [r4, #16]
    3c70:	89e2      	ldrh	r2, [r4, #14]
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    p->creationTime = FAT_DEFAULT_TIME;
  }
  p->lastAccessDate = p->creationDate;
    3c72:	8263      	strh	r3, [r4, #18]
  p->lastWriteDate = p->creationDate;
    3c74:	8323      	strh	r3, [r4, #24]
  p->lastWriteTime = p->creationTime;
    3c76:	82e2      	strh	r2, [r4, #22]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    3c78:	f000 f95e 	bl	3f38 <SdVolume::cacheFlush()>
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d0b5      	beq.n	3bec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    3c80:	4652      	mov	r2, sl
    3c82:	f898 1014 	ldrb.w	r1, [r8, #20]
    3c86:	4640      	mov	r0, r8
    3c88:	f7ff ff2e 	bl	3ae8 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    3c8c:	e7af      	b.n	3bee <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x86>
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    3c8e:	f642 0021 	movw	r0, #10273	; 0x2821
    p->creationTime = FAT_DEFAULT_TIME;
    3c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3c96:	4603      	mov	r3, r0
    3c98:	460a      	mov	r2, r1
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    3c9a:	8220      	strh	r0, [r4, #16]
    p->creationTime = FAT_DEFAULT_TIME;
    3c9c:	81e1      	strh	r1, [r4, #14]
    3c9e:	e7e8      	b.n	3c72 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x10a>
    3ca0:	20001f94 	.word	0x20001f94
    3ca4:	20001f88 	.word	0x20001f88
    3ca8:	20000e34 	.word	0x20000e34

00003cac <SdFile::open(SdFile*, char const*, unsigned char)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    3cac:	b410      	push	{r4}
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    3cae:	7984      	ldrb	r4, [r0, #6]
    3cb0:	b11c      	cbz	r4, 3cba <SdFile::open(SdFile*, char const*, unsigned char)+0xe>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    3cb2:	2000      	movs	r0, #0
    3cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    3cb8:	4770      	bx	lr
    3cba:	f85d 4b04 	ldr.w	r4, [sp], #4
    3cbe:	f7ff bf53 	b.w	3b68 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
    3cc2:	bf00      	nop

00003cc4 <SdFile::remove()>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    3cc4:	b510      	push	{r4, lr}
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    3cc6:	2100      	movs	r1, #0
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    3cc8:	4604      	mov	r4, r0
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    3cca:	f7ff feb5 	bl	3a38 <SdFile::truncate(unsigned long)>
    3cce:	b908      	cbnz	r0, 3cd4 <SdFile::remove()+0x10>
  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;

  // write entry to SD
  return SdVolume::cacheFlush();
}
    3cd0:	2000      	movs	r0, #0
    3cd2:	bd10      	pop	{r4, pc}
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    3cd4:	2101      	movs	r1, #1
    3cd6:	6920      	ldr	r0, [r4, #16]
    3cd8:	f000 f96e 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3cdc:	2800      	cmp	r0, #0
    3cde:	d0f7      	beq.n	3cd0 <SdFile::remove()+0xc>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    3ce0:	7d23      	ldrb	r3, [r4, #20]
    3ce2:	4a06      	ldr	r2, [pc, #24]	; (3cfc <SdFile::remove()+0x38>)
    3ce4:	015b      	lsls	r3, r3, #5
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;

  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!d) return false;
    3ce6:	42da      	cmn	r2, r3
    3ce8:	d0f2      	beq.n	3cd0 <SdFile::remove()+0xc>

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    3cea:	20e5      	movs	r0, #229	; 0xe5

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    3cec:	2100      	movs	r1, #0
  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!d) return false;

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    3cee:	5498      	strb	r0, [r3, r2]

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    3cf0:	71a1      	strb	r1, [r4, #6]

  // write entry to SD
  return SdVolume::cacheFlush();
}
    3cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;

  // write entry to SD
  return SdVolume::cacheFlush();
    3cf6:	f000 b91f 	b.w	3f38 <SdVolume::cacheFlush()>
    3cfa:	bf00      	nop
    3cfc:	20001f94 	.word	0x20001f94

00003d00 <SdFile::remove(SdFile*, char const*)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
    3d00:	b530      	push	{r4, r5, lr}
    3d02:	b08b      	sub	sp, #44	; 0x2c
    3d04:	2400      	movs	r4, #0
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    3d06:	4d09      	ldr	r5, [pc, #36]	; (3d2c <SdFile::remove(SdFile*, char const*)+0x2c>)
    3d08:	460a      	mov	r2, r1
    3d0a:	2302      	movs	r3, #2
    3d0c:	4601      	mov	r1, r0
    3d0e:	a801      	add	r0, sp, #4
    3d10:	f88d 4008 	strb.w	r4, [sp, #8]
    3d14:	f88d 400a 	strb.w	r4, [sp, #10]
    3d18:	9501      	str	r5, [sp, #4]
    3d1a:	f7ff ff25 	bl	3b68 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
    3d1e:	b110      	cbz	r0, 3d26 <SdFile::remove(SdFile*, char const*)+0x26>
  return file.remove();
    3d20:	a801      	add	r0, sp, #4
    3d22:	f7ff ffcf 	bl	3cc4 <SdFile::remove()>
}
    3d26:	b00b      	add	sp, #44	; 0x2c
    3d28:	bd30      	pop	{r4, r5, pc}
    3d2a:	bf00      	nop
    3d2c:	2000046c 	.word	0x2000046c

00003d30 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d34:	b085      	sub	sp, #20
    3d36:	4607      	mov	r7, r0
    3d38:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3d3a:	7982      	ldrb	r2, [r0, #6]
    3d3c:	2a01      	cmp	r2, #1
    3d3e:	d005      	beq.n	3d4c <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    3d40:	2301      	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3d42:	2000      	movs	r0, #0
    3d44:	713b      	strb	r3, [r7, #4]
}
    3d46:	b005      	add	sp, #20
    3d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3d4c:	7942      	ldrb	r2, [r0, #5]
    3d4e:	0794      	lsls	r4, r2, #30
    3d50:	d5f6      	bpl.n	3d40 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3d52:	0753      	lsls	r3, r2, #29
    3d54:	468b      	mov	fp, r1
    3d56:	d508      	bpl.n	3d6a <SdFile::write(void const*, unsigned int)+0x3a>
    3d58:	69b9      	ldr	r1, [r7, #24]
    3d5a:	68fb      	ldr	r3, [r7, #12]
    3d5c:	428b      	cmp	r3, r1
    3d5e:	f000 80c0 	beq.w	3ee2 <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    3d62:	f7ff fe33 	bl	39cc <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    3d66:	2800      	cmp	r0, #0
    3d68:	d0ea      	beq.n	3d40 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    3d6a:	9b01      	ldr	r3, [sp, #4]
    3d6c:	68f9      	ldr	r1, [r7, #12]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	f000 80c5 	beq.w	3efe <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3d74:	f8dd 8004 	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3d78:	f8df 919c 	ldr.w	r9, [pc, #412]	; 3f18 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    3d7c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 3f1c <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3d80:	6a38      	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3d82:	f3c1 0608 	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3d86:	7902      	ldrb	r2, [r0, #4]
    3d88:	3a01      	subs	r2, #1
    3d8a:	ea02 2551 	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    3d8e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    3d92:	d153      	bne.n	3e3c <SdFile::write(void const*, unsigned int)+0x10c>
    3d94:	2e00      	cmp	r6, #0
    3d96:	d151      	bne.n	3e3c <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    3d98:	68b9      	ldr	r1, [r7, #8]
    3d9a:	2900      	cmp	r1, #0
    3d9c:	d179      	bne.n	3e92 <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    3d9e:	69fa      	ldr	r2, [r7, #28]
    3da0:	2a00      	cmp	r2, #0
    3da2:	f000 8089 	beq.w	3eb8 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    3da6:	60ba      	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3da8:	f5c6 7400 	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3dac:	3a02      	subs	r2, #2
    3dae:	f890 e010 	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3db2:	b2a4      	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3db4:	6941      	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3db6:	4544      	cmp	r4, r8
    3db8:	d942      	bls.n	3e40 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3dba:	fa02 f20e 	lsl.w	r2, r2, lr
    3dbe:	440d      	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3dc0:	fa1f f488 	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3dc4:	4415      	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3dc6:	b91e      	cbnz	r6, 3dd0 <SdFile::write(void const*, unsigned int)+0xa0>
    3dc8:	68f8      	ldr	r0, [r7, #12]
    3dca:	69ba      	ldr	r2, [r7, #24]
    3dcc:	4290      	cmp	r0, r2
    3dce:	d253      	bcs.n	3e78 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3dd0:	4628      	mov	r0, r5
    3dd2:	2101      	movs	r1, #1
    3dd4:	f000 f8f0 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3dd8:	2800      	cmp	r0, #0
    3dda:	d0b1      	beq.n	3d40 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3ddc:	444e      	add	r6, r9
      uint8_t* end = dst + n;
    3dde:	eb06 0e04 	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    3de2:	4576      	cmp	r6, lr
    3de4:	d00d      	beq.n	3e02 <SdFile::write(void const*, unsigned int)+0xd2>
    3de6:	f10b 31ff 	add.w	r1, fp, #4294967295
    3dea:	1e72      	subs	r2, r6, #1
    3dec:	f10e 35ff 	add.w	r5, lr, #4294967295
    3df0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    3df4:	f802 0f01 	strb.w	r0, [r2, #1]!
    3df8:	4295      	cmp	r5, r2
    3dfa:	d1f9      	bne.n	3df0 <SdFile::write(void const*, unsigned int)+0xc0>
    3dfc:	ebc6 060e 	rsb	r6, r6, lr
    3e00:	44b3      	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    3e02:	68fd      	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3e04:	ebb8 0804 	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    3e08:	eb04 0105 	add.w	r1, r4, r5
    3e0c:	60f9      	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3e0e:	d1b7      	bne.n	3d80 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3e10:	69bb      	ldr	r3, [r7, #24]
    3e12:	4299      	cmp	r1, r3
    3e14:	d96a      	bls.n	3eec <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    3e16:	797a      	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3e18:	61b9      	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    3e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3e1e:	717a      	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    3e20:	0712      	lsls	r2, r2, #28
    3e22:	d507      	bpl.n	3e34 <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    3e24:	79bb      	ldrb	r3, [r7, #6]
    3e26:	2b00      	cmp	r3, #0
    3e28:	d08a      	beq.n	3d40 <SdFile::write(void const*, unsigned int)+0x10>
    3e2a:	4638      	mov	r0, r7
    3e2c:	f7ff fc2c 	bl	3688 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    3e30:	2800      	cmp	r0, #0
    3e32:	d085      	beq.n	3d40 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3e34:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3e36:	b005      	add	sp, #20
    3e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e3c:	68ba      	ldr	r2, [r7, #8]
    3e3e:	e7b3      	b.n	3da8 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3e40:	fa02 f20e 	lsl.w	r2, r2, lr
    3e44:	440d      	add	r5, r1
    if (n == 512) {
    3e46:	f5b4 7f00 	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3e4a:	4415      	add	r5, r2
    if (n == 512) {
    3e4c:	d1bb      	bne.n	3dc6 <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3e4e:	f8da 2000 	ldr.w	r2, [sl]
    3e52:	4295      	cmp	r5, r2
    3e54:	d039      	beq.n	3eca <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    3e56:	4a2c      	ldr	r2, [pc, #176]	; (3f08 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    3e58:	4629      	mov	r1, r5
    3e5a:	6810      	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3e5c:	7802      	ldrb	r2, [r0, #0]
    3e5e:	2afe      	cmp	r2, #254	; 0xfe
    3e60:	d038      	beq.n	3ed4 <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    3e62:	465a      	mov	r2, fp
    3e64:	f7ff fbba 	bl	35dc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3e68:	2800      	cmp	r0, #0
    3e6a:	f43f af69 	beq.w	3d40 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    3e6e:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
    3e72:	f44f 7400 	mov.w	r4, #512	; 0x200
    3e76:	e7c4      	b.n	3e02 <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3e78:	f000 f85e 	bl	3f38 <SdVolume::cacheFlush()>
    3e7c:	2800      	cmp	r0, #0
    3e7e:	f43f af5f 	beq.w	3d40 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3e82:	4922      	ldr	r1, [pc, #136]	; (3f0c <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    3e84:	f8ca 5000 	str.w	r5, [sl]
    3e88:	780a      	ldrb	r2, [r1, #0]
    3e8a:	f042 0201 	orr.w	r2, r2, #1
    3e8e:	700a      	strb	r2, [r1, #0]
    3e90:	e7a4      	b.n	3ddc <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3e92:	aa03      	add	r2, sp, #12
    3e94:	f000 f91c 	bl	40d0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3e98:	2800      	cmp	r0, #0
    3e9a:	f43f af54 	beq.w	3d46 <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    3e9e:	6a38      	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3ea0:	f64f 71f8 	movw	r1, #65528	; 0xfff8
    3ea4:	4b1a      	ldr	r3, [pc, #104]	; (3f10 <SdFile::write(void const*, unsigned int)+0x1e0>)
    3ea6:	f890 4020 	ldrb.w	r4, [r0, #32]
    3eaa:	9a03      	ldr	r2, [sp, #12]
    3eac:	2c10      	cmp	r4, #16
    3eae:	bf18      	it	ne
    3eb0:	4619      	movne	r1, r3
    3eb2:	428a      	cmp	r2, r1
    3eb4:	f4ff af77 	bcc.w	3da6 <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    3eb8:	4638      	mov	r0, r7
    3eba:	f7ff fc1b 	bl	36f4 <SdFile::addCluster()>
    3ebe:	2800      	cmp	r0, #0
    3ec0:	f43f af3e 	beq.w	3d40 <SdFile::write(void const*, unsigned int)+0x10>
    3ec4:	6a38      	ldr	r0, [r7, #32]
    3ec6:	68ba      	ldr	r2, [r7, #8]
    3ec8:	e76e      	b.n	3da8 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    3eca:	f04f 32ff 	mov.w	r2, #4294967295
    3ece:	f8ca 2000 	str.w	r2, [sl]
    3ed2:	e7c0      	b.n	3e56 <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    3ed4:	4658      	mov	r0, fp
    3ed6:	f7fe fddb 	bl	2a90 <SDHC_CardWriteBlock(void const*, unsigned long)>
    3eda:	fab0 f080 	clz	r0, r0
    3ede:	0940      	lsrs	r0, r0, #5
    3ee0:	e7c2      	b.n	3e68 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3ee2:	9b01      	ldr	r3, [sp, #4]
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	f47f af45 	bne.w	3d74 <SdFile::write(void const*, unsigned int)+0x44>
    3eea:	e799      	b.n	3e20 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    3eec:	4b09      	ldr	r3, [pc, #36]	; (3f14 <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3eee:	797a      	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    3ef0:	681b      	ldr	r3, [r3, #0]
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d094      	beq.n	3e20 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3ef6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3efa:	717a      	strb	r2, [r7, #5]
    3efc:	e790      	b.n	3e20 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3efe:	69bb      	ldr	r3, [r7, #24]
    3f00:	428b      	cmp	r3, r1
    3f02:	d388      	bcc.n	3e16 <SdFile::write(void const*, unsigned int)+0xe6>
    3f04:	797a      	ldrb	r2, [r7, #5]
    3f06:	e78b      	b.n	3e20 <SdFile::write(void const*, unsigned int)+0xf0>
    3f08:	20001f90 	.word	0x20001f90
    3f0c:	20002194 	.word	0x20002194
    3f10:	0ffffff8 	.word	0x0ffffff8
    3f14:	20001f88 	.word	0x20001f88
    3f18:	20001f94 	.word	0x20001f94
    3f1c:	20000e34 	.word	0x20000e34

00003f20 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3f20:	b500      	push	{lr}
    3f22:	b083      	sub	sp, #12
  return write(&b, 1);
    3f24:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3f26:	ab02      	add	r3, sp, #8
    3f28:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    3f2c:	4619      	mov	r1, r3
    3f2e:	f7ff feff 	bl	3d30 <SdFile::write(void const*, unsigned int)>
}
    3f32:	b003      	add	sp, #12
    3f34:	f85d fb04 	ldr.w	pc, [sp], #4

00003f38 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    3f38:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    3f3a:	4c1a      	ldr	r4, [pc, #104]	; (3fa4 <SdVolume::cacheFlush()+0x6c>)
    3f3c:	7823      	ldrb	r3, [r4, #0]
    3f3e:	b90b      	cbnz	r3, 3f44 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    3f40:	2001      	movs	r0, #1
}
    3f42:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    3f44:	4d18      	ldr	r5, [pc, #96]	; (3fa8 <SdVolume::cacheFlush()+0x70>)
    3f46:	4b19      	ldr	r3, [pc, #100]	; (3fac <SdVolume::cacheFlush()+0x74>)
    3f48:	6828      	ldr	r0, [r5, #0]
    3f4a:	6819      	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3f4c:	7803      	ldrb	r3, [r0, #0]
    3f4e:	2bfe      	cmp	r3, #254	; 0xfe
    3f50:	d017      	beq.n	3f82 <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    3f52:	4a17      	ldr	r2, [pc, #92]	; (3fb0 <SdVolume::cacheFlush()+0x78>)
    3f54:	f7ff fb42 	bl	35dc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    3f58:	b188      	cbz	r0, 3f7e <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    3f5a:	4e16      	ldr	r6, [pc, #88]	; (3fb4 <SdVolume::cacheFlush()+0x7c>)
    3f5c:	6831      	ldr	r1, [r6, #0]
    3f5e:	b919      	cbnz	r1, 3f68 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    3f60:	2300      	movs	r3, #0
  }
  return true;
    3f62:	2001      	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    3f64:	7023      	strb	r3, [r4, #0]
    3f66:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    3f68:	6828      	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3f6a:	7803      	ldrb	r3, [r0, #0]
    3f6c:	2bfe      	cmp	r3, #254	; 0xfe
    3f6e:	d00f      	beq.n	3f90 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    3f70:	4a0f      	ldr	r2, [pc, #60]	; (3fb0 <SdVolume::cacheFlush()+0x78>)
    3f72:	f7ff fb33 	bl	35dc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    3f76:	b110      	cbz	r0, 3f7e <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    3f78:	2300      	movs	r3, #0
    3f7a:	6033      	str	r3, [r6, #0]
    3f7c:	e7f0      	b.n	3f60 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    3f7e:	2000      	movs	r0, #0
    3f80:	bd70      	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    3f82:	480b      	ldr	r0, [pc, #44]	; (3fb0 <SdVolume::cacheFlush()+0x78>)
    3f84:	f7fe fd84 	bl	2a90 <SDHC_CardWriteBlock(void const*, unsigned long)>
    3f88:	fab0 f080 	clz	r0, r0
    3f8c:	0940      	lsrs	r0, r0, #5
    3f8e:	e7e3      	b.n	3f58 <SdVolume::cacheFlush()+0x20>
    3f90:	4807      	ldr	r0, [pc, #28]	; (3fb0 <SdVolume::cacheFlush()+0x78>)
    3f92:	f7fe fd7d 	bl	2a90 <SDHC_CardWriteBlock(void const*, unsigned long)>
    3f96:	fab0 f080 	clz	r0, r0
    3f9a:	0940      	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    3f9c:	2800      	cmp	r0, #0
    3f9e:	d1eb      	bne.n	3f78 <SdVolume::cacheFlush()+0x40>
    3fa0:	e7ed      	b.n	3f7e <SdVolume::cacheFlush()+0x46>
    3fa2:	bf00      	nop
    3fa4:	20002194 	.word	0x20002194
    3fa8:	20001f90 	.word	0x20001f90
    3fac:	20000e34 	.word	0x20000e34
    3fb0:	20001f94 	.word	0x20001f94
    3fb4:	20001f8c 	.word	0x20001f8c

00003fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3fb8:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    3fba:	4d12      	ldr	r5, [pc, #72]	; (4004 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3fbc:	460e      	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    3fbe:	682b      	ldr	r3, [r5, #0]
    3fc0:	4283      	cmp	r3, r0
    3fc2:	d011      	beq.n	3fe8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    3fc4:	4604      	mov	r4, r0
    if (!cacheFlush()) return false;
    3fc6:	f7ff ffb7 	bl	3f38 <SdVolume::cacheFlush()>
    3fca:	b908      	cbnz	r0, 3fd0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    3fcc:	2000      	movs	r0, #0
    3fce:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    3fd0:	4b0d      	ldr	r3, [pc, #52]	; (4008 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    3fd2:	6818      	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3fd4:	7803      	ldrb	r3, [r0, #0]
    3fd6:	2bfe      	cmp	r3, #254	; 0xfe
    3fd8:	d00c      	beq.n	3ff4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    3fda:	4a0c      	ldr	r2, [pc, #48]	; (400c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    3fdc:	4621      	mov	r1, r4
    3fde:	f7ff fa85 	bl	34ec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    3fe2:	2800      	cmp	r0, #0
    3fe4:	d0f2      	beq.n	3fcc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    3fe6:	602c      	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    3fe8:	4b09      	ldr	r3, [pc, #36]	; (4010 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    3fea:	2001      	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    3fec:	7819      	ldrb	r1, [r3, #0]
    3fee:	4331      	orrs	r1, r6
    3ff0:	7019      	strb	r1, [r3, #0]
  return true;
}
    3ff2:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    3ff4:	4621      	mov	r1, r4
    3ff6:	4805      	ldr	r0, [pc, #20]	; (400c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    3ff8:	f7fe fcce 	bl	2998 <SDHC_CardReadBlock(void*, unsigned long)>
    3ffc:	fab0 f080 	clz	r0, r0
    4000:	0940      	lsrs	r0, r0, #5
    4002:	e7ee      	b.n	3fe2 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    4004:	20000e34 	.word	0x20000e34
    4008:	20001f90 	.word	0x20001f90
    400c:	20001f94 	.word	0x20001f94
    4010:	20002194 	.word	0x20002194

00004014 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    4014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    4016:	f890 3020 	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    401a:	4605      	mov	r5, r0
    401c:	460e      	mov	r6, r1
    401e:	4617      	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    4020:	2b10      	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    4022:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    4024:	4b18      	ldr	r3, [pc, #96]	; (4088 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    4026:	d017      	beq.n	4058 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    4028:	eb04 14d1 	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    402c:	681b      	ldr	r3, [r3, #0]
    402e:	429c      	cmp	r4, r3
    4030:	d117      	bne.n	4062 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    4032:	f006 017f 	and.w	r1, r6, #127	; 0x7f
    4036:	4a15      	ldr	r2, [pc, #84]	; (408c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    4038:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    403c:	4914      	ldr	r1, [pc, #80]	; (4090 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    403e:	7e28      	ldrb	r0, [r5, #24]
    4040:	780a      	ldrb	r2, [r1, #0]
    4042:	2801      	cmp	r0, #1
    4044:	f042 0201 	orr.w	r2, r2, #1
    4048:	700a      	strb	r2, [r1, #0]
    404a:	d919      	bls.n	4080 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    404c:	68a9      	ldr	r1, [r5, #8]
  return true;
    404e:	2001      	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    4050:	4a10      	ldr	r2, [pc, #64]	; (4094 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    4052:	440b      	add	r3, r1
    4054:	6013      	str	r3, [r2, #0]
    4056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    4058:	eb04 2411 	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    405c:	681b      	ldr	r3, [r3, #0]
    405e:	429c      	cmp	r4, r3
    4060:	d008      	beq.n	4074 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    4062:	2100      	movs	r1, #0
    4064:	4620      	mov	r0, r4
    4066:	f7ff ffa7 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    406a:	b150      	cbz	r0, 4082 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    406c:	f895 3020 	ldrb.w	r3, [r5, #32]
    4070:	2b10      	cmp	r3, #16
    4072:	d107      	bne.n	4084 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    4074:	b2f1      	uxtb	r1, r6
    4076:	4a05      	ldr	r2, [pc, #20]	; (408c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    4078:	4623      	mov	r3, r4
    407a:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
    407e:	e7dd      	b.n	403c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    4080:	2001      	movs	r0, #1
}
    4082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    4084:	4623      	mov	r3, r4
    4086:	e7d4      	b.n	4032 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    4088:	20000e34 	.word	0x20000e34
    408c:	20001f94 	.word	0x20001f94
    4090:	20002194 	.word	0x20002194
    4094:	20001f8c 	.word	0x20001f8c

00004098 <SdVolume::cacheZeroBlock(unsigned long)>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    4098:	b510      	push	{r4, lr}
    409a:	4604      	mov	r4, r0
  if (!cacheFlush()) return false;
    409c:	f7ff ff4c 	bl	3f38 <SdVolume::cacheFlush()>
    40a0:	b170      	cbz	r0, 40c0 <SdVolume::cacheZeroBlock(unsigned long)+0x28>
    40a2:	4b08      	ldr	r3, [pc, #32]	; (40c4 <SdVolume::cacheZeroBlock(unsigned long)+0x2c>)

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    40a4:	2100      	movs	r1, #0
    40a6:	f503 7200 	add.w	r2, r3, #512	; 0x200
    40aa:	f803 1f01 	strb.w	r1, [r3, #1]!
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    40ae:	4293      	cmp	r3, r2
    40b0:	d1fb      	bne.n	40aa <SdVolume::cacheZeroBlock(unsigned long)+0x12>
    40b2:	4a05      	ldr	r2, [pc, #20]	; (40c8 <SdVolume::cacheZeroBlock(unsigned long)+0x30>)
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
  cacheSetDirty();
  return true;
    40b4:	2001      	movs	r0, #1

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    40b6:	4905      	ldr	r1, [pc, #20]	; (40cc <SdVolume::cacheZeroBlock(unsigned long)+0x34>)
    40b8:	7813      	ldrb	r3, [r2, #0]
    40ba:	600c      	str	r4, [r1, #0]
    40bc:	4303      	orrs	r3, r0
    40be:	7013      	strb	r3, [r2, #0]
  cacheSetDirty();
  return true;
}
    40c0:	bd10      	pop	{r4, pc}
    40c2:	bf00      	nop
    40c4:	20001f93 	.word	0x20001f93
    40c8:	20002194 	.word	0x20002194
    40cc:	20000e34 	.word	0x20000e34

000040d0 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    40d0:	68c3      	ldr	r3, [r0, #12]
    40d2:	3301      	adds	r3, #1
    40d4:	428b      	cmp	r3, r1
    40d6:	d318      	bcc.n	410a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    40d8:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    40da:	f890 3020 	ldrb.w	r3, [r0, #32]
    40de:	4604      	mov	r4, r0
    40e0:	4616      	mov	r6, r2
    40e2:	460d      	mov	r5, r1
    40e4:	2b10      	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    40e6:	69c0      	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    40e8:	4b14      	ldr	r3, [pc, #80]	; (413c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    40ea:	d010      	beq.n	410e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    40ec:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    40f0:	681b      	ldr	r3, [r3, #0]
    40f2:	4298      	cmp	r0, r3
    40f4:	d110      	bne.n	4118 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    40f6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    40fa:	4b11      	ldr	r3, [pc, #68]	; (4140 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    40fc:	2001      	movs	r0, #1
    40fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4102:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    4106:	6033      	str	r3, [r6, #0]
  }
  return true;
}
    4108:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    410a:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    410c:	4770      	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    410e:	eb00 2011 	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    4112:	681b      	ldr	r3, [r3, #0]
    4114:	4298      	cmp	r0, r3
    4116:	d007      	beq.n	4128 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    4118:	2100      	movs	r1, #0
    411a:	f7ff ff4d 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    411e:	b150      	cbz	r0, 4136 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    4120:	f894 3020 	ldrb.w	r3, [r4, #32]
    4124:	2b10      	cmp	r3, #16
    4126:	d1e6      	bne.n	40f6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    4128:	b2e9      	uxtb	r1, r5
    412a:	4b05      	ldr	r3, [pc, #20]	; (4140 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    412c:	2001      	movs	r0, #1
    412e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    4132:	6033      	str	r3, [r6, #0]
    4134:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    4136:	2000      	movs	r0, #0
    4138:	bd70      	pop	{r4, r5, r6, pc}
    413a:	bf00      	nop
    413c:	20000e34 	.word	0x20000e34
    4140:	20001f94 	.word	0x20001f94

00004144 <SdVolume::chainSize(unsigned long, unsigned long*) const>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    4144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4148:	b082      	sub	sp, #8
    414a:	4604      	mov	r4, r0
    414c:	4691      	mov	r9, r2
    414e:	4608      	mov	r0, r1
    4150:	ad02      	add	r5, sp, #8
  uint32_t s = 0;
    4152:	f04f 0a00 	mov.w	sl, #0
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    4156:	f44f 7800 	mov.w	r8, #512	; 0x200
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    415a:	4f11      	ldr	r7, [pc, #68]	; (41a0 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x5c>)
    415c:	f64f 76f8 	movw	r6, #65528	; 0xfff8
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    4160:	f845 1d04 	str.w	r1, [r5, #-4]!
    4164:	e00c      	b.n	4180 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x3c>
    4166:	f894 3020 	ldrb.w	r3, [r4, #32]
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    416a:	7c22      	ldrb	r2, [r4, #16]
  } while (!isEOC(cluster));
    416c:	9801      	ldr	r0, [sp, #4]
    416e:	2b10      	cmp	r3, #16
    4170:	bf14      	ite	ne
    4172:	463b      	movne	r3, r7
    4174:	4633      	moveq	r3, r6
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    4176:	fa08 f202 	lsl.w	r2, r8, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    417a:	4298      	cmp	r0, r3
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    417c:	4492      	add	sl, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    417e:	d209      	bcs.n	4194 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x50>
    if (!fatGet(cluster, &cluster)) return false;
    4180:	4601      	mov	r1, r0
    4182:	462a      	mov	r2, r5
    4184:	4620      	mov	r0, r4
    4186:	f7ff ffa3 	bl	40d0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    418a:	2800      	cmp	r0, #0
    418c:	d1eb      	bne.n	4166 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x22>
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    418e:	b002      	add	sp, #8
    4190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
    4194:	2001      	movs	r0, #1
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    4196:	f8c9 a000 	str.w	sl, [r9]
  return true;
}
    419a:	b002      	add	sp, #8
    419c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41a0:	0ffffff8 	.word	0x0ffffff8

000041a4 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    41a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    41a8:	6817      	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    41aa:	b083      	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    41ac:	b367      	cbz	r7, 4208 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    41ae:	3701      	adds	r7, #1

    // don't save new start location
    setStart = false;
    41b0:	f04f 0a00 	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    41b4:	68c3      	ldr	r3, [r0, #12]
    41b6:	f103 0801 	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    41ba:	b30b      	cbz	r3, 4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    41bc:	468b      	mov	fp, r1
    41be:	4606      	mov	r6, r0
    41c0:	4691      	mov	r9, r2
    41c2:	463c      	mov	r4, r7
    41c4:	2500      	movs	r5, #0
    41c6:	e005      	b.n	41d4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    41c8:	461c      	mov	r4, r3
    41ca:	461f      	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    41cc:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    41ce:	68f3      	ldr	r3, [r6, #12]
    41d0:	42ab      	cmp	r3, r5
    41d2:	d915      	bls.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    41d4:	45a0      	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    41d6:	aa01      	add	r2, sp, #4
    41d8:	4630      	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    41da:	d201      	bcs.n	41e0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    41dc:	2402      	movs	r4, #2
    41de:	4627      	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    41e0:	4621      	mov	r1, r4
    41e2:	f7ff ff75 	bl	40d0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    41e6:	1c63      	adds	r3, r4, #1
    41e8:	b150      	cbz	r0, 4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    41ea:	9a01      	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    41ec:	1bd9      	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    41ee:	2a00      	cmp	r2, #0
    41f0:	d1ea      	bne.n	41c8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    41f2:	458b      	cmp	fp, r1
    41f4:	d010      	beq.n	4218 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    41f6:	461c      	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    41f8:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    41fa:	68f3      	ldr	r3, [r6, #12]
    41fc:	42ab      	cmp	r3, r5
    41fe:	d8e9      	bhi.n	41d4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    4200:	2000      	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    4202:	b003      	add	sp, #12
    4204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    4208:	f1a1 0a01 	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    420c:	6807      	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    420e:	faba fa8a 	clz	sl, sl
    4212:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    4216:	e7cd      	b.n	41b4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    4218:	2c01      	cmp	r4, #1
    421a:	d9f1      	bls.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    421c:	68f3      	ldr	r3, [r6, #12]
    421e:	3301      	adds	r3, #1
    4220:	429c      	cmp	r4, r3
    4222:	d8ed      	bhi.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    4224:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4228:	4621      	mov	r1, r4
    422a:	4630      	mov	r0, r6
    422c:	f7ff fef2 	bl	4014 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    4230:	2800      	cmp	r0, #0
    4232:	d0e5      	beq.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    4234:	42a7      	cmp	r7, r4
    4236:	d214      	bcs.n	4262 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    4238:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    423a:	2c01      	cmp	r4, #1
    423c:	d9e0      	bls.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    423e:	68f3      	ldr	r3, [r6, #12]
    4240:	3301      	adds	r3, #1
    4242:	429c      	cmp	r4, r3
    4244:	d8dc      	bhi.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    4246:	1c62      	adds	r2, r4, #1
    4248:	4621      	mov	r1, r4
    424a:	4630      	mov	r0, r6
    424c:	f7ff fee2 	bl	4014 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    4250:	2800      	cmp	r0, #0
    4252:	d0d5      	beq.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    4254:	42a7      	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    4256:	f104 34ff 	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    425a:	d002      	beq.n	4262 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    425c:	2c01      	cmp	r4, #1
    425e:	d1ee      	bne.n	423e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    4260:	e7ce      	b.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    4262:	f8d9 1000 	ldr.w	r1, [r9]
    4266:	b159      	cbz	r1, 4280 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    4268:	2901      	cmp	r1, #1
    426a:	d9c9      	bls.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    426c:	68f3      	ldr	r3, [r6, #12]
    426e:	3301      	adds	r3, #1
    4270:	4299      	cmp	r1, r3
    4272:	d8c5      	bhi.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    4274:	463a      	mov	r2, r7
    4276:	4630      	mov	r0, r6
    4278:	f7ff fecc 	bl	4014 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    427c:	2800      	cmp	r0, #0
    427e:	d0bf      	beq.n	4200 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    4280:	f8c9 7000 	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    4284:	f1ba 0f00 	cmp.w	sl, #0
    4288:	d003      	beq.n	4292 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    428a:	3701      	adds	r7, #1

  return true;
    428c:	2001      	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    428e:	6037      	str	r7, [r6, #0]
    4290:	e7b7      	b.n	4202 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    4292:	2001      	movs	r0, #1
    4294:	e7b5      	b.n	4202 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    4296:	bf00      	nop

00004298 <SdVolume::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    4298:	2901      	cmp	r1, #1
    429a:	d90c      	bls.n	42b6 <SdVolume::fatPut(unsigned long, unsigned long)+0x1e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    429c:	68c3      	ldr	r3, [r0, #12]
    429e:	3301      	adds	r3, #1
    42a0:	4299      	cmp	r1, r3
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    42a2:	b410      	push	{r4}
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    42a4:	d803      	bhi.n	42ae <SdVolume::fatPut(unsigned long, unsigned long)+0x16>
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    42a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    42aa:	f7ff beb3 	b.w	4014 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    42ae:	2000      	movs	r0, #0
    42b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    42b4:	4770      	bx	lr
    42b6:	2000      	movs	r0, #0
    42b8:	4770      	bx	lr
    42ba:	bf00      	nop

000042bc <SdVolume::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;
    42bc:	2302      	movs	r3, #2
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    42be:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c0:	4605      	mov	r5, r0
    42c2:	b083      	sub	sp, #12
    42c4:	460c      	mov	r4, r1
    42c6:	f64f 77f8 	movw	r7, #65528	; 0xfff8
    42ca:	4e13      	ldr	r6, [pc, #76]	; (4318 <SdVolume::freeChain(unsigned long)+0x5c>)
  // clear free cluster location
  allocSearchStart_ = 2;
    42cc:	6003      	str	r3, [r0, #0]
    42ce:	e00b      	b.n	42e8 <SdVolume::freeChain(unsigned long)+0x2c>
    42d0:	f7ff fea0 	bl	4014 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    42d4:	b1d0      	cbz	r0, 430c <SdVolume::freeChain(unsigned long)+0x50>
    42d6:	f895 3020 	ldrb.w	r3, [r5, #32]

    cluster = next;
    42da:	9c01      	ldr	r4, [sp, #4]
    42dc:	2b10      	cmp	r3, #16
    42de:	bf0c      	ite	eq
    42e0:	463b      	moveq	r3, r7
    42e2:	4633      	movne	r3, r6
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    42e4:	429c      	cmp	r4, r3
    42e6:	d214      	bcs.n	4312 <SdVolume::freeChain(unsigned long)+0x56>
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    42e8:	4621      	mov	r1, r4
    42ea:	aa01      	add	r2, sp, #4
    42ec:	4628      	mov	r0, r5
    42ee:	f7ff feef 	bl	40d0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    42f2:	2c01      	cmp	r4, #1
    42f4:	fab0 f380 	clz	r3, r0
    42f8:	4621      	mov	r1, r4
    42fa:	4628      	mov	r0, r5
    42fc:	d906      	bls.n	430c <SdVolume::freeChain(unsigned long)+0x50>
    42fe:	095b      	lsrs	r3, r3, #5
    4300:	461a      	mov	r2, r3
    4302:	b91b      	cbnz	r3, 430c <SdVolume::freeChain(unsigned long)+0x50>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    4304:	68eb      	ldr	r3, [r5, #12]
    4306:	3301      	adds	r3, #1
    4308:	429c      	cmp	r4, r3
    430a:	d9e1      	bls.n	42d0 <SdVolume::freeChain(unsigned long)+0x14>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    430c:	2000      	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    430e:	b003      	add	sp, #12
    4310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    4312:	2001      	movs	r0, #1
}
    4314:	b003      	add	sp, #12
    4316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4318:	0ffffff8 	.word	0x0ffffff8

0000431c <SdVolume::init(Sd2Card*, unsigned char)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    431e:	4b40      	ldr	r3, [pc, #256]	; (4420 <SdVolume::init(Sd2Card*, unsigned char)+0x104>)
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    4320:	4605      	mov	r5, r0
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4322:	4614      	mov	r4, r2
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    4324:	6019      	str	r1, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4326:	b1da      	cbz	r2, 4360 <SdVolume::init(Sd2Card*, unsigned char)+0x44>
    if (part > 4)return false;
    4328:	2a04      	cmp	r2, #4
    432a:	d901      	bls.n	4330 <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    432c:	2000      	movs	r0, #0
    432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    4330:	2100      	movs	r1, #0
    4332:	4608      	mov	r0, r1
    4334:	f7ff fe40 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    4338:	2800      	cmp	r0, #0
    433a:	d0f7      	beq.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    433c:	4b39      	ldr	r3, [pc, #228]	; (4424 <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
    433e:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    4342:	f892 21ae 	ldrb.w	r2, [r2, #430]	; 0x1ae
    4346:	0652      	lsls	r2, r2, #25
    4348:	d1f0      	bne.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
    434a:	341b      	adds	r4, #27
    434c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    4350:	f8d4 300a 	ldr.w	r3, [r4, #10]
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    4354:	2b63      	cmp	r3, #99	; 0x63
    4356:	d9e9      	bls.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    4358:	f8d4 4006 	ldr.w	r4, [r4, #6]
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    435c:	2c00      	cmp	r4, #0
    435e:	d0e5      	beq.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    4360:	2100      	movs	r1, #0
    4362:	4620      	mov	r0, r4
    4364:	f7ff fe28 	bl	3fb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    4368:	2800      	cmp	r0, #0
    436a:	d0df      	beq.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    436c:	4a2d      	ldr	r2, [pc, #180]	; (4424 <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
    436e:	f8b2 300b 	ldrh.w	r3, [r2, #11]
    4372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4376:	d1d9      	bne.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    4378:	7c13      	ldrb	r3, [r2, #16]
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    437a:	2b00      	cmp	r3, #0
    437c:	d0d6      	beq.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    437e:	89d1      	ldrh	r1, [r2, #14]
    4380:	2900      	cmp	r1, #0
    4382:	d0d3      	beq.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    4384:	7b56      	ldrb	r6, [r2, #13]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    4386:	2e00      	cmp	r6, #0
    4388:	d0d0      	beq.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    438a:	2100      	movs	r1, #0
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    438c:	762b      	strb	r3, [r5, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    438e:	2701      	movs	r7, #1
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;
    4390:	712e      	strb	r6, [r5, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    4392:	460b      	mov	r3, r1
    4394:	7429      	strb	r1, [r5, #16]
    4396:	e003      	b.n	43a0 <SdVolume::init(Sd2Card*, unsigned char)+0x84>
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    4398:	2909      	cmp	r1, #9
    439a:	460b      	mov	r3, r1
    439c:	7429      	strb	r1, [r5, #16]
    439e:	d0c5      	beq.n	432c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    43a0:	fa07 f003 	lsl.w	r0, r7, r3
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    43a4:	1c59      	adds	r1, r3, #1
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    43a6:	42b0      	cmp	r0, r6
    43a8:	d1f6      	bne.n	4398 <SdVolume::init(Sd2Card*, unsigned char)+0x7c>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    43aa:	8ad1      	ldrh	r1, [r2, #22]
    43ac:	481d      	ldr	r0, [pc, #116]	; (4424 <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    43ae:	b901      	cbnz	r1, 43b2 <SdVolume::init(Sd2Card*, unsigned char)+0x96>
    43b0:	6a41      	ldr	r1, [r0, #36]	; 0x24

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    43b2:	89d0      	ldrh	r0, [r2, #14]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    43b4:	60a9      	str	r1, [r5, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    43b6:	4420      	add	r0, r4

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    43b8:	7c16      	ldrb	r6, [r2, #16]
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    43ba:	f8df e068 	ldr.w	lr, [pc, #104]	; 4424 <SdVolume::init(Sd2Card*, unsigned char)+0x108>
    43be:	61e8      	str	r0, [r5, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    43c0:	f8b2 7011 	ldrh.w	r7, [r2, #17]

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    43c4:	fb01 0106 	mla	r1, r1, r6, r0

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    43c8:	0178      	lsls	r0, r7, #5
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    43ca:	846f      	strh	r7, [r5, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    43cc:	6269      	str	r1, [r5, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    43ce:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    43d2:	eb01 2060 	add.w	r0, r1, r0, asr #9
    43d6:	6168      	str	r0, [r5, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    43d8:	f8b2 1013 	ldrh.w	r1, [r2, #19]
                           bpb->totalSectors16 : bpb->totalSectors32;
    43dc:	b909      	cbnz	r1, 43e2 <SdVolume::init(Sd2Card*, unsigned char)+0xc6>
    43de:	f8de 1020 	ldr.w	r1, [lr, #32]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    43e2:	1a24      	subs	r4, r4, r0

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    43e4:	f640 70f4 	movw	r0, #4084	; 0xff4
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    43e8:	440c      	add	r4, r1
    43ea:	fa24 f303 	lsr.w	r3, r4, r3

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    43ee:	4283      	cmp	r3, r0
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    43f0:	60eb      	str	r3, [r5, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    43f2:	d90a      	bls.n	440a <SdVolume::init(Sd2Card*, unsigned char)+0xee>
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    43f4:	f64f 71f4 	movw	r1, #65524	; 0xfff4
    43f8:	428b      	cmp	r3, r1
    43fa:	d90b      	bls.n	4414 <SdVolume::init(Sd2Card*, unsigned char)+0xf8>
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    43fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    fatType_ = 32;
    43fe:	2320      	movs	r3, #32
  }
  return true;
    4400:	2001      	movs	r0, #1
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    4402:	626a      	str	r2, [r5, #36]	; 0x24
    fatType_ = 32;
    4404:	f885 3020 	strb.w	r3, [r5, #32]
  }
  return true;
}
    4408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    440a:	230c      	movs	r3, #12
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    440c:	2001      	movs	r0, #1
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    440e:	f885 3020 	strb.w	r3, [r5, #32]
    4412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    4414:	2310      	movs	r3, #16
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    4416:	2001      	movs	r0, #1

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    4418:	f885 3020 	strb.w	r3, [r5, #32]
    441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    441e:	bf00      	nop
    4420:	20001f90 	.word	0x20001f90
    4424:	20001f94 	.word	0x20001f94

00004428 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4428:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    442a:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    442c:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    442e:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4430:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4432:	d003      	beq.n	443c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4434:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4438:	f001 bc5a 	b.w	5cf0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    443c:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    443e:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4442:	4718      	bx	r3

00004444 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    4444:	b470      	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4446:	f240 2501 	movw	r5, #513	; 0x201
    444a:	6804      	ldr	r4, [r0, #0]
    444c:	6125      	str	r5, [r4, #16]

	while (count > 0) {
    444e:	b31b      	cbz	r3, 4498 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    4450:	461e      	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4452:	b1f1      	cbz	r1, 4492 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    4454:	780d      	ldrb	r5, [r1, #0]
    4456:	3101      	adds	r1, #1
		count--; // how many bytes left to output.
    4458:	3b01      	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    445a:	6665      	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    445c:	6f25      	ldr	r5, [r4, #112]	; 0x70
    445e:	07ad      	lsls	r5, r5, #30
    4460:	d406      	bmi.n	4470 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4462:	6f65      	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    4464:	3e01      	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4466:	b2ed      	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    4468:	b112      	cbz	r2, 4470 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    446a:	7015      	strb	r5, [r2, #0]
    446c:	3201      	adds	r2, #1
    446e:	6804      	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4470:	6965      	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    4472:	07ed      	lsls	r5, r5, #31
    4474:	d5f2      	bpl.n	445c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    4476:	2b00      	cmp	r3, #0
    4478:	d1eb      	bne.n	4452 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    447a:	b16e      	cbz	r6, 4498 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    447c:	6801      	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    447e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
    4480:	079b      	lsls	r3, r3, #30
    4482:	d4fc      	bmi.n	447e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4484:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    4486:	b2db      	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    4488:	b10a      	cbz	r2, 448e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    448a:	7013      	strb	r3, [r2, #0]
    448c:	3201      	adds	r2, #1
			count_read--;
    448e:	3e01      	subs	r6, #1
    4490:	e7f3      	b.n	447a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4492:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    4496:	e7df      	b.n	4458 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    4498:	bc70      	pop	{r4, r5, r6}
    449a:	4770      	bx	lr

0000449c <_spi_dma_rxISR1()>:

SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);

#if defined(__IMXRT1062__)
// T4 has two other possible SPI objects...
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    449c:	b5f0      	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    449e:	4c30      	ldr	r4, [pc, #192]	; (4560 <_spi_dma_rxISR1()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    44a0:	4b30      	ldr	r3, [pc, #192]	; (4564 <_spi_dma_rxISR1()+0xc8>)
    44a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    44a4:	6c65      	ldr	r5, [r4, #68]	; 0x44
    44a6:	7901      	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    44a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    44aa:	77d9      	strb	r1, [r3, #31]
    44ac:	7929      	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    44ae:	7719      	strb	r1, [r3, #28]
    44b0:	7901      	ldrb	r1, [r0, #4]
    44b2:	7719      	strb	r1, [r3, #28]
    44b4:	b1fa      	cbz	r2, 44f6 <_spi_dma_rxISR1()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    44b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    44ba:	d218      	bcs.n	44ee <_spi_dma_rxISR1()+0x52>
    44bc:	682b      	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    44be:	b292      	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    44c0:	8bd9      	ldrh	r1, [r3, #30]
    44c2:	040e      	lsls	r6, r1, #16
    44c4:	d43b      	bmi.n	453e <_spi_dma_rxISR1()+0xa2>
		tcd->BITER = len & 0x7fff;
    44c6:	83da      	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    44c8:	8bd9      	ldrh	r1, [r3, #30]
    44ca:	b289      	uxth	r1, r1
    44cc:	82d9      	strh	r1, [r3, #22]
    44ce:	6803      	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    44d0:	8bd9      	ldrh	r1, [r3, #30]
    44d2:	0409      	lsls	r1, r1, #16
    44d4:	d42c      	bmi.n	4530 <_spi_dma_rxISR1()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    44d6:	83da      	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    44d8:	2100      	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    44da:	8bda      	ldrh	r2, [r3, #30]
    44dc:	b292      	uxth	r2, r2
    44de:	82da      	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    44e0:	6421      	str	r1, [r4, #64]	; 0x40
    44e2:	7902      	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    44e4:	4b1f      	ldr	r3, [pc, #124]	; (4564 <_spi_dma_rxISR1()+0xc8>)
    44e6:	76da      	strb	r2, [r3, #27]
    44e8:	792a      	ldrb	r2, [r5, #4]
    44ea:	76da      	strb	r2, [r3, #27]
    44ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    44ee:	4b1e      	ldr	r3, [pc, #120]	; (4568 <_spi_dma_rxISR1()+0xcc>)
    44f0:	4413      	add	r3, r2
    44f2:	6423      	str	r3, [r4, #64]	; 0x40
    44f4:	e7f5      	b.n	44e2 <_spi_dma_rxISR1()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    44f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    44f8:	250f      	movs	r5, #15
    44fa:	6823      	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    44fc:	f240 3e01 	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    4500:	6801      	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    4502:	f44f 577c 	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4506:	659d      	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4508:	2603      	movs	r6, #3
		_dma_event_responder->triggerEvent();
    450a:	680d      	ldr	r5, [r1, #0]
    450c:	4917      	ldr	r1, [pc, #92]	; (456c <_spi_dma_rxISR1()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    450e:	61da      	str	r2, [r3, #28]
    4510:	428d      	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4512:	f8c3 e010 	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4516:	615f      	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4518:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    451c:	d117      	bne.n	454e <_spi_dma_rxISR1()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    451e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4520:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4522:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4524:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4526:	d017      	beq.n	4558 <_spi_dma_rxISR1()+0xbc>

SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);

#if defined(__IMXRT1062__)
// T4 has two other possible SPI objects...
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4528:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    452c:	f001 bbe0 	b.w	5cf0 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4530:	8bd9      	ldrh	r1, [r3, #30]
    4532:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4536:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    453a:	430a      	orrs	r2, r1
    453c:	e7cb      	b.n	44d6 <_spi_dma_rxISR1()+0x3a>
    453e:	8bd9      	ldrh	r1, [r3, #30]
    4540:	f3c2 0608 	ubfx	r6, r2, #0, #9
    4544:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4548:	4331      	orrs	r1, r6
    454a:	83d9      	strh	r1, [r3, #30]
    454c:	e7bc      	b.n	44c8 <_spi_dma_rxISR1()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    454e:	462b      	mov	r3, r5
    4550:	4611      	mov	r1, r2

SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);

#if defined(__IMXRT1062__)
// T4 has two other possible SPI objects...
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4552:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    4556:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4558:	6883      	ldr	r3, [r0, #8]

SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);

#if defined(__IMXRT1062__)
// T4 has two other possible SPI objects...
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    455a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    455e:	4718      	bx	r3
    4560:	20000e88 	.word	0x20000e88
    4564:	400e8000 	.word	0x400e8000
    4568:	ffff8001 	.word	0xffff8001
    456c:	00004429 	.word	0x00004429

00004570 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4570:	b5f0      	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    4572:	4c30      	ldr	r4, [pc, #192]	; (4634 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    4574:	4b30      	ldr	r3, [pc, #192]	; (4638 <_spi_dma_rxISR0()+0xc8>)
    4576:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    4578:	6c65      	ldr	r5, [r4, #68]	; 0x44
    457a:	7901      	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    457c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    457e:	77d9      	strb	r1, [r3, #31]
    4580:	7929      	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    4582:	7719      	strb	r1, [r3, #28]
    4584:	7901      	ldrb	r1, [r0, #4]
    4586:	7719      	strb	r1, [r3, #28]
    4588:	b1fa      	cbz	r2, 45ca <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    458a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    458e:	d218      	bcs.n	45c2 <_spi_dma_rxISR0()+0x52>
    4590:	682b      	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    4592:	b292      	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4594:	8bd9      	ldrh	r1, [r3, #30]
    4596:	040e      	lsls	r6, r1, #16
    4598:	d43b      	bmi.n	4612 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    459a:	83da      	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    459c:	8bd9      	ldrh	r1, [r3, #30]
    459e:	b289      	uxth	r1, r1
    45a0:	82d9      	strh	r1, [r3, #22]
    45a2:	6803      	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    45a4:	8bd9      	ldrh	r1, [r3, #30]
    45a6:	0409      	lsls	r1, r1, #16
    45a8:	d42c      	bmi.n	4604 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    45aa:	83da      	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    45ac:	2100      	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    45ae:	8bda      	ldrh	r2, [r3, #30]
    45b0:	b292      	uxth	r2, r2
    45b2:	82da      	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    45b4:	6421      	str	r1, [r4, #64]	; 0x40
    45b6:	7902      	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    45b8:	4b1f      	ldr	r3, [pc, #124]	; (4638 <_spi_dma_rxISR0()+0xc8>)
    45ba:	76da      	strb	r2, [r3, #27]
    45bc:	792a      	ldrb	r2, [r5, #4]
    45be:	76da      	strb	r2, [r3, #27]
    45c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    45c2:	4b1e      	ldr	r3, [pc, #120]	; (463c <_spi_dma_rxISR0()+0xcc>)
    45c4:	4413      	add	r3, r2
    45c6:	6423      	str	r3, [r4, #64]	; 0x40
    45c8:	e7f5      	b.n	45b6 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    45ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    45cc:	250f      	movs	r5, #15
    45ce:	6823      	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    45d0:	f240 3e01 	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    45d4:	6801      	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    45d6:	f44f 577c 	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    45da:	659d      	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    45dc:	2603      	movs	r6, #3
		_dma_event_responder->triggerEvent();
    45de:	680d      	ldr	r5, [r1, #0]
    45e0:	4917      	ldr	r1, [pc, #92]	; (4640 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    45e2:	61da      	str	r2, [r3, #28]
    45e4:	428d      	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    45e6:	f8c3 e010 	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    45ea:	615f      	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    45ec:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    45f0:	d117      	bne.n	4622 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    45f2:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    45f4:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    45f6:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    45f8:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    45fa:	d017      	beq.n	462c <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    45fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4600:	f001 bb76 	b.w	5cf0 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4604:	8bd9      	ldrh	r1, [r3, #30]
    4606:	f3c2 0208 	ubfx	r2, r2, #0, #9
    460a:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    460e:	430a      	orrs	r2, r1
    4610:	e7cb      	b.n	45aa <_spi_dma_rxISR0()+0x3a>
    4612:	8bd9      	ldrh	r1, [r3, #30]
    4614:	f3c2 0608 	ubfx	r6, r2, #0, #9
    4618:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    461c:	4331      	orrs	r1, r6
    461e:	83d9      	strh	r1, [r3, #30]
    4620:	e7bc      	b.n	459c <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    4622:	462b      	mov	r3, r5
    4624:	4611      	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4626:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    462a:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    462c:	6883      	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    462e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4632:	4718      	bx	r3
    4634:	20000e38 	.word	0x20000e38
    4638:	400e8000 	.word	0x400e8000
    463c:	ffff8001 	.word	0xffff8001
    4640:	00004429 	.word	0x00004429

00004644 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4644:	6843      	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    4646:	b5f0      	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    4648:	e893 0082 	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    464c:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 484c <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    4650:	26b8      	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    4652:	680a      	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    4654:	2502      	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    4656:	4c75      	ldr	r4, [pc, #468]	; (482c <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    4658:	ea22 0207 	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    465c:	4f74      	ldr	r7, [pc, #464]	; (4830 <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    465e:	600a      	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    4660:	f8de 2018 	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    4664:	4014      	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    4666:	4a73      	ldr	r2, [pc, #460]	; (4834 <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    4668:	4327      	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    466a:	240f      	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    466c:	f8ce 7018 	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    4670:	7c07      	ldrb	r7, [r0, #16]
    4672:	441f      	add	r7, r3
    4674:	7c3f      	ldrb	r7, [r7, #16]
    4676:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    467a:	68bf      	ldr	r7, [r7, #8]
    467c:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    467e:	7c47      	ldrb	r7, [r0, #17]
    4680:	441f      	add	r7, r3
    4682:	f897 7024 	ldrb.w	r7, [r7, #36]	; 0x24
    4686:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    468a:	68bf      	ldr	r7, [r7, #8]
    468c:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    468e:	7c87      	ldrb	r7, [r0, #18]
    4690:	441f      	add	r7, r3
    4692:	f897 7038 	ldrb.w	r7, [r7, #56]	; 0x38
    4696:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    469a:	68bf      	ldr	r7, [r7, #8]
    469c:	603e      	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    469e:	680f      	ldr	r7, [r1, #0]
    46a0:	685e      	ldr	r6, [r3, #4]
    46a2:	433e      	orrs	r6, r7
    46a4:	600e      	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    46a6:	7c01      	ldrb	r1, [r0, #16]
    46a8:	185e      	adds	r6, r3, r1
    46aa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    46ae:	7c36      	ldrb	r6, [r6, #16]
    46b0:	694f      	ldr	r7, [r1, #20]
    46b2:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    46b6:	6849      	ldr	r1, [r1, #4]
    46b8:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    46ba:	7c41      	ldrb	r1, [r0, #17]
    46bc:	185e      	adds	r6, r3, r1
    46be:	310a      	adds	r1, #10
    46c0:	f896 6024 	ldrb.w	r6, [r6, #36]	; 0x24
    46c4:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    46c8:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    46cc:	6849      	ldr	r1, [r1, #4]
    46ce:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    46d0:	7c81      	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    46d2:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    46d6:	185e      	adds	r6, r3, r1
    46d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    46dc:	6a1f      	ldr	r7, [r3, #32]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    46de:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
    46e2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    46e4:	eb02 1206 	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    46e8:	6b5e      	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    46ea:	6852      	ldr	r2, [r2, #4]
    46ec:	6011      	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    46ee:	7c81      	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    46f0:	6802      	ldr	r2, [r0, #0]
    46f2:	4419      	add	r1, r3
    46f4:	f891 1044 	ldrb.w	r1, [r1, #68]	; 0x44
    46f8:	f8ce 1000 	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    46fc:	7c01      	ldrb	r1, [r0, #16]
    46fe:	4419      	add	r1, r3
    4700:	7f09      	ldrb	r1, [r1, #28]
    4702:	6039      	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    4704:	7c41      	ldrb	r1, [r0, #17]
    4706:	440b      	add	r3, r1
    4708:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    470c:	6033      	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    470e:	6115      	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    4710:	6594      	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    4712:	7cc3      	ldrb	r3, [r0, #19]
    4714:	2b00      	cmp	r3, #0
    4716:	d029      	beq.n	476c <SPIClass::begin()+0x128>
			__disable_irq();
    4718:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    471a:	7cc3      	ldrb	r3, [r0, #19]
    471c:	07dc      	lsls	r4, r3, #31
    471e:	d506      	bpl.n	472e <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    4720:	4a45      	ldr	r2, [pc, #276]	; (4838 <SPIClass::begin()+0x1f4>)
    4722:	6943      	ldr	r3, [r0, #20]
    4724:	6811      	ldr	r1, [r2, #0]
    4726:	400b      	ands	r3, r1
    4728:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    472a:	6013      	str	r3, [r2, #0]
    472c:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    472e:	0799      	lsls	r1, r3, #30
    4730:	d506      	bpl.n	4740 <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    4732:	4a42      	ldr	r2, [pc, #264]	; (483c <SPIClass::begin()+0x1f8>)
    4734:	6983      	ldr	r3, [r0, #24]
    4736:	6811      	ldr	r1, [r2, #0]
    4738:	400b      	ands	r3, r1
    473a:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    473c:	6013      	str	r3, [r2, #0]
    473e:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    4740:	075a      	lsls	r2, r3, #29
    4742:	d506      	bpl.n	4752 <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    4744:	4a3e      	ldr	r2, [pc, #248]	; (4840 <SPIClass::begin()+0x1fc>)
    4746:	69c3      	ldr	r3, [r0, #28]
    4748:	6811      	ldr	r1, [r2, #0]
    474a:	400b      	ands	r3, r1
    474c:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    474e:	6013      	str	r3, [r2, #0]
    4750:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    4752:	071f      	lsls	r7, r3, #28
    4754:	d506      	bpl.n	4764 <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    4756:	4a3b      	ldr	r2, [pc, #236]	; (4844 <SPIClass::begin()+0x200>)
    4758:	6a03      	ldr	r3, [r0, #32]
    475a:	6811      	ldr	r1, [r2, #0]
    475c:	400b      	ands	r3, r1
    475e:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    4760:	6013      	str	r3, [r2, #0]
    4762:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    4764:	06de      	lsls	r6, r3, #27
    4766:	d44b      	bmi.n	4800 <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    4768:	b662      	cpsie	i
    476a:	6802      	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    476c:	4d36      	ldr	r5, [pc, #216]	; (4848 <SPIClass::begin()+0x204>)
    476e:	6883      	ldr	r3, [r0, #8]
    4770:	42ab      	cmp	r3, r5
    4772:	d04c      	beq.n	480e <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    4774:	4b35      	ldr	r3, [pc, #212]	; (484c <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    4776:	6085      	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    4778:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    477a:	4c35      	ldr	r4, [pc, #212]	; (4850 <SPIClass::begin()+0x20c>)
    477c:	f3c3 1601 	ubfx	r6, r3, #4, #2
    4780:	f3c3 6182 	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    4784:	4b33      	ldr	r3, [pc, #204]	; (4854 <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    4786:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    478a:	3101      	adds	r1, #1
    478c:	fbb4 f1f1 	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    4790:	fba3 4301 	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    4794:	0d1b      	lsrs	r3, r3, #20
    4796:	d129      	bne.n	47ec <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    4798:	60c3      	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    479a:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    479c:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    479e:	2407      	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    47a0:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    47a2:	6116      	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    47a4:	6255      	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    47a6:	6413      	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    47a8:	6614      	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    47aa:	6111      	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    47ac:	7cc3      	ldrb	r3, [r0, #19]
    47ae:	b1e3      	cbz	r3, 47ea <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    47b0:	07dd      	lsls	r5, r3, #31
    47b2:	d503      	bpl.n	47bc <SPIClass::begin()+0x178>
    47b4:	4b28      	ldr	r3, [pc, #160]	; (4858 <SPIClass::begin()+0x214>)
    47b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
    47b8:	601a      	str	r2, [r3, #0]
    47ba:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    47bc:	079c      	lsls	r4, r3, #30
    47be:	d503      	bpl.n	47c8 <SPIClass::begin()+0x184>
    47c0:	4b26      	ldr	r3, [pc, #152]	; (485c <SPIClass::begin()+0x218>)
    47c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    47c4:	601a      	str	r2, [r3, #0]
    47c6:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    47c8:	0759      	lsls	r1, r3, #29
    47ca:	d503      	bpl.n	47d4 <SPIClass::begin()+0x190>
    47cc:	4b24      	ldr	r3, [pc, #144]	; (4860 <SPIClass::begin()+0x21c>)
    47ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
    47d0:	601a      	str	r2, [r3, #0]
    47d2:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    47d4:	071a      	lsls	r2, r3, #28
    47d6:	d503      	bpl.n	47e0 <SPIClass::begin()+0x19c>
    47d8:	4b22      	ldr	r3, [pc, #136]	; (4864 <SPIClass::begin()+0x220>)
    47da:	6b42      	ldr	r2, [r0, #52]	; 0x34
    47dc:	601a      	str	r2, [r3, #0]
    47de:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    47e0:	06db      	lsls	r3, r3, #27
    47e2:	d502      	bpl.n	47ea <SPIClass::begin()+0x1a6>
    47e4:	6b82      	ldr	r2, [r0, #56]	; 0x38
    47e6:	4b20      	ldr	r3, [pc, #128]	; (4868 <SPIClass::begin()+0x224>)
    47e8:	601a      	str	r2, [r3, #0]
    47ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    47ec:	fbb1 f1f3 	udiv	r1, r1, r3
    47f0:	42a9      	cmp	r1, r5
    47f2:	bf88      	it	hi
    47f4:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    47f6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    47fa:	d30a      	bcc.n	4812 <SPIClass::begin()+0x1ce>
    47fc:	4b1b      	ldr	r3, [pc, #108]	; (486c <SPIClass::begin()+0x228>)
    47fe:	e7cb      	b.n	4798 <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    4800:	4a1b      	ldr	r2, [pc, #108]	; (4870 <SPIClass::begin()+0x22c>)
    4802:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4804:	6811      	ldr	r1, [r2, #0]
    4806:	400b      	ands	r3, r1
    4808:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    480a:	6013      	str	r3, [r2, #0]
    480c:	e7ac      	b.n	4768 <SPIClass::begin()+0x124>
    480e:	68c3      	ldr	r3, [r0, #12]
    4810:	e7c3      	b.n	479a <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    4812:	2b02      	cmp	r3, #2
    4814:	bf98      	it	ls
    4816:	2300      	movls	r3, #0
    4818:	d9be      	bls.n	4798 <SPIClass::begin()+0x154>
    481a:	3b02      	subs	r3, #2
    481c:	085c      	lsrs	r4, r3, #1
    481e:	0421      	lsls	r1, r4, #16
    4820:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    4824:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    4828:	430b      	orrs	r3, r1
    482a:	e7b5      	b.n	4798 <SPIClass::begin()+0x154>
    482c:	e3ffffcf 	.word	0xe3ffffcf
    4830:	08000010 	.word	0x08000010
    4834:	200005cc 	.word	0x200005cc
    4838:	e000e180 	.word	0xe000e180
    483c:	e000e184 	.word	0xe000e184
    4840:	e000e188 	.word	0xe000e188
    4844:	e000e18c 	.word	0xe000e18c
    4848:	003d0900 	.word	0x003d0900
    484c:	400fc000 	.word	0x400fc000
    4850:	200000f4 	.word	0x200000f4
    4854:	431bde83 	.word	0x431bde83
    4858:	e000e100 	.word	0xe000e100
    485c:	e000e104 	.word	0xe000e104
    4860:	e000e108 	.word	0xe000e108
    4864:	e000e10c 	.word	0xe000e10c
    4868:	e000e110 	.word	0xe000e110
    486c:	007f7fff 	.word	0x007f7fff
    4870:	e000e190 	.word	0xe000e190

00004874 <SPIClass::setMOSI(unsigned char)>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4874:	6842      	ldr	r2, [r0, #4]
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    4876:	7c43      	ldrb	r3, [r0, #17]
    4878:	4413      	add	r3, r2
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    487a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    487c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4880:	428b      	cmp	r3, r1
    4882:	d007      	beq.n	4894 <SPIClass::setMOSI(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    4884:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    4888:	4299      	cmp	r1, r3
    488a:	d004      	beq.n	4896 <SPIClass::setMOSI(unsigned char)+0x22>
    488c:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
    4890:	4299      	cmp	r1, r3
    4892:	d01f      	beq.n	48d4 <SPIClass::setMOSI(unsigned char)+0x60>
    4894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4896:	2400      	movs	r4, #0
    4898:	4621      	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    489a:	6816      	ldr	r6, [r2, #0]
    489c:	6855      	ldr	r5, [r2, #4]
    489e:	6836      	ldr	r6, [r6, #0]
    48a0:	422e      	tst	r6, r5
    48a2:	d015      	beq.n	48d0 <SPIClass::setMOSI(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    48a4:	4d0d      	ldr	r5, [pc, #52]	; (48dc <SPIClass::setMOSI(unsigned char)+0x68>)
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    48a6:	1856      	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    48a8:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    48ac:	6b57      	ldr	r7, [r2, #52]	; 0x34
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    48ae:	eb05 1303 	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    48b2:	310a      	adds	r1, #10
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    48b4:	689b      	ldr	r3, [r3, #8]
    48b6:	f8c3 e000 	str.w	lr, [r3]
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    48ba:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    48be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    48c2:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    48c6:	686b      	ldr	r3, [r5, #4]
    48c8:	601a      	str	r2, [r3, #0]
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    48ca:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    48ce:	603b      	str	r3, [r7, #0]
				}	
				mosi_pin_index = i;
    48d0:	7444      	strb	r4, [r0, #17]
				return;
    48d2:	e7df      	b.n	4894 <SPIClass::setMOSI(unsigned char)+0x20>

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    48d4:	2401      	movs	r4, #1
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    48d6:	4621      	mov	r1, r4
    48d8:	e7df      	b.n	489a <SPIClass::setMOSI(unsigned char)+0x26>
    48da:	bf00      	nop
    48dc:	200005cc 	.word	0x200005cc

000048e0 <SPIClass::setMISO(unsigned char)>:
    48e0:	6842      	ldr	r2, [r0, #4]
	}
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
    48e2:	7c03      	ldrb	r3, [r0, #16]
    48e4:	4413      	add	r3, r2
		}
	}
}

void SPIClass::setMISO(uint8_t pin)
{
    48e6:	b4f0      	push	{r4, r5, r6, r7}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    48e8:	7c1b      	ldrb	r3, [r3, #16]
    48ea:	428b      	cmp	r3, r1
    48ec:	d005      	beq.n	48fa <SPIClass::setMISO(unsigned char)+0x1a>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    48ee:	7c13      	ldrb	r3, [r2, #16]
    48f0:	4299      	cmp	r1, r3
    48f2:	d004      	beq.n	48fe <SPIClass::setMISO(unsigned char)+0x1e>
    48f4:	7c53      	ldrb	r3, [r2, #17]
    48f6:	4299      	cmp	r1, r3
    48f8:	d01d      	beq.n	4936 <SPIClass::setMISO(unsigned char)+0x56>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    48fa:	bcf0      	pop	{r4, r5, r6, r7}
    48fc:	4770      	bx	lr

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    48fe:	2400      	movs	r4, #0
    4900:	4621      	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4902:	6816      	ldr	r6, [r2, #0]
    4904:	6855      	ldr	r5, [r2, #4]
    4906:	6836      	ldr	r6, [r6, #0]
    4908:	422e      	tst	r6, r5
    490a:	d012      	beq.n	4932 <SPIClass::setMISO(unsigned char)+0x52>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    490c:	4d0b      	ldr	r5, [pc, #44]	; (493c <SPIClass::setMISO(unsigned char)+0x5c>)
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    490e:	1856      	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    4910:	27b8      	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    4912:	3104      	adds	r1, #4
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    4914:	eb05 1303 	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    4918:	eb02 0181 	add.w	r1, r2, r1, lsl #2
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    491c:	6a12      	ldr	r2, [r2, #32]
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    491e:	689b      	ldr	r3, [r3, #8]
    4920:	601f      	str	r7, [r3, #0]
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    4922:	7c33      	ldrb	r3, [r6, #16]
    4924:	6849      	ldr	r1, [r1, #4]
    4926:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    492a:	686b      	ldr	r3, [r5, #4]
    492c:	6019      	str	r1, [r3, #0]
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    492e:	7f33      	ldrb	r3, [r6, #28]
    4930:	6013      	str	r3, [r2, #0]
				}	
				miso_pin_index = i;
    4932:	7404      	strb	r4, [r0, #16]
				return;
    4934:	e7e1      	b.n	48fa <SPIClass::setMISO(unsigned char)+0x1a>

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    4936:	2401      	movs	r4, #1
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    4938:	4621      	mov	r1, r4
    493a:	e7e2      	b.n	4902 <SPIClass::setMISO(unsigned char)+0x22>
    493c:	200005cc 	.word	0x200005cc

00004940 <SPIClass::setSCK(unsigned char)>:
    4940:	6842      	ldr	r2, [r0, #4]
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
    4942:	7c83      	ldrb	r3, [r0, #18]
    4944:	4413      	add	r3, r2
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    4946:	b4f0      	push	{r4, r5, r6, r7}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    4948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    494c:	428b      	cmp	r3, r1
    494e:	d007      	beq.n	4960 <SPIClass::setSCK(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    4950:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    4954:	4299      	cmp	r1, r3
    4956:	d005      	beq.n	4964 <SPIClass::setSCK(unsigned char)+0x24>
    4958:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
    495c:	4299      	cmp	r1, r3
    495e:	d01f      	beq.n	49a0 <SPIClass::setSCK(unsigned char)+0x60>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    4960:	bcf0      	pop	{r4, r5, r6, r7}
    4962:	4770      	bx	lr

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    4964:	2400      	movs	r4, #0
    4966:	4621      	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4968:	6816      	ldr	r6, [r2, #0]
    496a:	6855      	ldr	r5, [r2, #4]
    496c:	6836      	ldr	r6, [r6, #0]
    496e:	422e      	tst	r6, r5
    4970:	d014      	beq.n	499c <SPIClass::setSCK(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    4972:	4d0d      	ldr	r5, [pc, #52]	; (49a8 <SPIClass::setSCK(unsigned char)+0x68>)
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    4974:	1856      	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    4976:	27b8      	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    4978:	310e      	adds	r1, #14
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    497a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    497e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    4982:	6c92      	ldr	r2, [r2, #72]	; 0x48
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    4984:	689b      	ldr	r3, [r3, #8]
    4986:	601f      	str	r7, [r3, #0]
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    4988:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    498c:	6849      	ldr	r1, [r1, #4]
    498e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    4992:	686b      	ldr	r3, [r5, #4]
    4994:	6019      	str	r1, [r3, #0]
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    4996:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
    499a:	6013      	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    499c:	7484      	strb	r4, [r0, #18]
				return;
    499e:	e7df      	b.n	4960 <SPIClass::setSCK(unsigned char)+0x20>

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    49a0:	2401      	movs	r4, #1
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    49a2:	4621      	mov	r1, r4
    49a4:	e7e0      	b.n	4968 <SPIClass::setSCK(unsigned char)+0x28>
    49a6:	bf00      	nop
    49a8:	200005cc 	.word	0x200005cc

000049ac <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    49ac:	b10b      	cbz	r3, 49b2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    49ae:	f7ff bd49 	b.w	4444 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    49b2:	4770      	bx	lr

000049b4 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    49b4:	2800      	cmp	r0, #0
    49b6:	d057      	beq.n	4a68 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    49b8:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    49ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49be:	b085      	sub	sp, #20
    49c0:	4683      	mov	fp, r0
    49c2:	4c2a      	ldr	r4, [pc, #168]	; (4a6c <delay+0xb8>)
    49c4:	4d2a      	ldr	r5, [pc, #168]	; (4a70 <delay+0xbc>)
    49c6:	4e2b      	ldr	r6, [pc, #172]	; (4a74 <delay+0xc0>)
    49c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    49cc:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    49d0:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    49d2:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    49d4:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    49d8:	2900      	cmp	r1, #0
    49da:	d1f7      	bne.n	49cc <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    49dc:	4f26      	ldr	r7, [pc, #152]	; (4a78 <delay+0xc4>)
    49de:	e9cd 8902 	strd	r8, r9, [sp, #8]
    49e2:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    49e4:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    49e6:	4a25      	ldr	r2, [pc, #148]	; (4a7c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    49e8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    49ec:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    49ee:	6812      	ldr	r2, [r2, #0]
    49f0:	2701      	movs	r7, #1
    49f2:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    49f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    49fa:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    49fc:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    49fe:	428b      	cmp	r3, r1
    4a00:	bf08      	it	eq
    4a02:	4542      	cmpeq	r2, r8
    4a04:	bf2c      	ite	cs
    4a06:	46c2      	movcs	sl, r8
    4a08:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    4a0a:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    4a0e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    4a12:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    4a14:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    4a16:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d1f7      	bne.n	4a0e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    4a1e:	9801      	ldr	r0, [sp, #4]
    4a20:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    4a22:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4a24:	4815      	ldr	r0, [pc, #84]	; (4a7c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    4a26:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4a2a:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    4a2c:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4a30:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    4a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    4a38:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4a3c:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    4a3e:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4a40:	4299      	cmp	r1, r3
    4a42:	bf08      	it	eq
    4a44:	4540      	cmpeq	r0, r8
    4a46:	bf2c      	ite	cs
    4a48:	4643      	movcs	r3, r8
    4a4a:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    4a4c:	441a      	add	r2, r3
    4a4e:	4572      	cmp	r2, lr
    4a50:	d307      	bcc.n	4a62 <delay+0xae>
			if (--msec == 0) return;
    4a52:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    4a56:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    4a5a:	d1d8      	bne.n	4a0e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    4a5c:	b005      	add	sp, #20
    4a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    4a62:	f001 ffaf 	bl	69c4 <yield>
	}
    4a66:	e7d2      	b.n	4a0e <delay+0x5a>
    4a68:	4770      	bx	lr
    4a6a:	bf00      	nop
    4a6c:	20002548 	.word	0x20002548
    4a70:	200021a0 	.word	0x200021a0
    4a74:	20002198 	.word	0x20002198
    4a78:	e0001004 	.word	0xe0001004
    4a7c:	2000219c 	.word	0x2000219c

00004a80 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    4a80:	0100      	lsls	r0, r0, #4
    4a82:	4b0f      	ldr	r3, [pc, #60]	; (4ac0 <digitalWrite.part.0+0x40>)
    4a84:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    4a86:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    4a88:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    4a8a:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    4a8c:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    4a8e:	4204      	tst	r4, r0
    4a90:	d005      	beq.n	4a9e <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    4a92:	b159      	cbz	r1, 4aac <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    4a94:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    4a98:	f85d 4b04 	ldr.w	r4, [sp], #4
    4a9c:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4a9e:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    4aa0:	b949      	cbnz	r1, 4ab6 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    4aa2:	4a08      	ldr	r2, [pc, #32]	; (4ac4 <digitalWrite.part.0+0x44>)
		}
	}
}
    4aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    4aa8:	601a      	str	r2, [r3, #0]
		}
	}
}
    4aaa:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    4aac:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    4ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
    4ab4:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4ab6:	4a04      	ldr	r2, [pc, #16]	; (4ac8 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    4ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4abc:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    4abe:	4770      	bx	lr
    4ac0:	200005cc 	.word	0x200005cc
    4ac4:	00013038 	.word	0x00013038
    4ac8:	0001f038 	.word	0x0001f038

00004acc <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    4acc:	2836      	cmp	r0, #54	; 0x36
    4ace:	d801      	bhi.n	4ad4 <digitalWrite+0x8>
    4ad0:	f7ff bfd6 	b.w	4a80 <digitalWrite.part.0>
    4ad4:	4770      	bx	lr
    4ad6:	bf00      	nop

00004ad8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    4ad8:	2836      	cmp	r0, #54	; 0x36
    4ada:	d81c      	bhi.n	4b16 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    4adc:	0100      	lsls	r0, r0, #4
    4ade:	4a1a      	ldr	r2, [pc, #104]	; (4b48 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4ae0:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    4ae2:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    4ae6:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    4ae8:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4aea:	d015      	beq.n	4b18 <pinMode+0x40>
    4aec:	2904      	cmp	r1, #4
    4aee:	d013      	beq.n	4b18 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    4af0:	68dc      	ldr	r4, [r3, #12]
    4af2:	6842      	ldr	r2, [r0, #4]
    4af4:	ea22 0204 	bic.w	r2, r2, r4
    4af8:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    4afa:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    4afc:	b1e9      	cbz	r1, 4b3a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    4afe:	2902      	cmp	r1, #2
    4b00:	d01e      	beq.n	4b40 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    4b02:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    4b04:	685b      	ldr	r3, [r3, #4]
}
    4b06:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    4b0a:	bf0c      	ite	eq
    4b0c:	490f      	ldreq	r1, [pc, #60]	; (4b4c <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    4b0e:	4910      	ldrne	r1, [pc, #64]	; (4b50 <pinMode+0x78>)
    4b10:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    4b12:	2215      	movs	r2, #21
    4b14:	601a      	str	r2, [r3, #0]
}
    4b16:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    4b18:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    4b1a:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    4b1c:	6844      	ldr	r4, [r0, #4]
    4b1e:	ea42 0204 	orr.w	r2, r2, r4
    4b22:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    4b24:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    4b26:	d008      	beq.n	4b3a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    4b28:	f640 0138 	movw	r1, #2104	; 0x838
    4b2c:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    4b2e:	685b      	ldr	r3, [r3, #4]
    4b30:	2215      	movs	r2, #21
}
    4b32:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    4b36:	601a      	str	r2, [r3, #0]
}
    4b38:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    4b3a:	2138      	movs	r1, #56	; 0x38
    4b3c:	6011      	str	r1, [r2, #0]
    4b3e:	e7f6      	b.n	4b2e <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4b40:	4904      	ldr	r1, [pc, #16]	; (4b54 <pinMode+0x7c>)
    4b42:	6011      	str	r1, [r2, #0]
    4b44:	e7f3      	b.n	4b2e <pinMode+0x56>
    4b46:	bf00      	nop
    4b48:	200005cc 	.word	0x200005cc
    4b4c:	00013038 	.word	0x00013038
    4b50:	00010038 	.word	0x00010038
    4b54:	0001f038 	.word	0x0001f038

00004b58 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    4b58:	2004      	movs	r0, #4
    4b5a:	4671      	mov	r1, lr
    4b5c:	4208      	tst	r0, r1
    4b5e:	d003      	beq.n	4b68 <_MSP>
    4b60:	f3ef 8009 	mrs	r0, PSP
    4b64:	f000 b808 	b.w	4b78 <HardFault_HandlerC>

00004b68 <_MSP>:
    4b68:	f3ef 8008 	mrs	r0, MSP
    4b6c:	f000 b804 	b.w	4b78 <HardFault_HandlerC>

00004b70 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    4b70:	4770      	bx	lr
    4b72:	bf00      	nop

00004b74 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop

00004b78 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    4b78:	4b1b      	ldr	r3, [pc, #108]	; (4be8 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    4b7a:	2105      	movs	r1, #5
    4b7c:	4a1b      	ldr	r2, [pc, #108]	; (4bec <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    4b7e:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    4b80:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    4b82:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    4b86:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    4b88:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    4b8c:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    4b8e:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    4b90:	4c17      	ldr	r4, [pc, #92]	; (4bf0 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    4b92:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    4b94:	4817      	ldr	r0, [pc, #92]	; (4bf4 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    4b96:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    4b98:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    4b9c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    4ba0:	6823      	ldr	r3, [r4, #0]
    4ba2:	4283      	cmp	r3, r0
    4ba4:	d902      	bls.n	4bac <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    4ba6:	4814      	ldr	r0, [pc, #80]	; (4bf8 <HardFault_HandlerC+0x80>)
    4ba8:	f002 f81e 	bl	6be8 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    4bac:	4d0e      	ldr	r5, [pc, #56]	; (4be8 <HardFault_HandlerC+0x70>)
    4bae:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    4bb0:	2000      	movs	r0, #0
    4bb2:	4a12      	ldr	r2, [pc, #72]	; (4bfc <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    4bb4:	4912      	ldr	r1, [pc, #72]	; (4c00 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    4bb6:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    4bba:	9001      	str	r0, [sp, #4]
    4bbc:	9b01      	ldr	r3, [sp, #4]
    4bbe:	4293      	cmp	r3, r2
    4bc0:	d805      	bhi.n	4bce <HardFault_HandlerC+0x56>
    4bc2:	9b01      	ldr	r3, [sp, #4]
    4bc4:	3301      	adds	r3, #1
    4bc6:	9301      	str	r3, [sp, #4]
    4bc8:	9b01      	ldr	r3, [sp, #4]
    4bca:	4293      	cmp	r3, r2
    4bcc:	d9f9      	bls.n	4bc2 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    4bce:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    4bd2:	9001      	str	r0, [sp, #4]
    4bd4:	9b01      	ldr	r3, [sp, #4]
    4bd6:	428b      	cmp	r3, r1
    4bd8:	d8ed      	bhi.n	4bb6 <HardFault_HandlerC+0x3e>
    4bda:	9b01      	ldr	r3, [sp, #4]
    4bdc:	3301      	adds	r3, #1
    4bde:	9301      	str	r3, [sp, #4]
    4be0:	9b01      	ldr	r3, [sp, #4]
    4be2:	428b      	cmp	r3, r1
    4be4:	d9f9      	bls.n	4bda <HardFault_HandlerC+0x62>
    4be6:	e7e6      	b.n	4bb6 <HardFault_HandlerC+0x3e>
    4be8:	401bc000 	.word	0x401bc000
    4bec:	401f8000 	.word	0x401f8000
    4bf0:	200010fc 	.word	0x200010fc
    4bf4:	23c345ff 	.word	0x23c345ff
    4bf8:	11e1a300 	.word	0x11e1a300
    4bfc:	000f423f 	.word	0x000f423f
    4c00:	0089543f 	.word	0x0089543f

00004c04 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    4c04:	4a09      	ldr	r2, [pc, #36]	; (4c2c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    4c06:	b508      	push	{r3, lr}
        char *prev = __brkval;
    4c08:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    4c0a:	b120      	cbz	r0, 4c16 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    4c0c:	4418      	add	r0, r3
    4c0e:	4908      	ldr	r1, [pc, #32]	; (4c30 <_sbrk+0x2c>)
    4c10:	4288      	cmp	r0, r1
    4c12:	d802      	bhi.n	4c1a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    4c14:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    4c16:	4618      	mov	r0, r3
    4c18:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    4c1a:	f003 f9ed 	bl	7ff8 <__errno>
    4c1e:	220c      	movs	r2, #12
                        return (void *)-1;
    4c20:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    4c24:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    4c26:	4618      	mov	r0, r3
    4c28:	bd08      	pop	{r3, pc}
    4c2a:	bf00      	nop
    4c2c:	20000f28 	.word	0x20000f28
    4c30:	20280000 	.word	0x20280000

00004c34 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    4c34:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    4c36:	4a06      	ldr	r2, [pc, #24]	; (4c50 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    4c38:	2107      	movs	r1, #7
    4c3a:	4b06      	ldr	r3, [pc, #24]	; (4c54 <Panic_Temp_isr+0x20>)
    4c3c:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    4c3e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    4c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4c44:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    4c46:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    4c4a:	bf30      	wfi
    4c4c:	e7fd      	b.n	4c4a <Panic_Temp_isr+0x16>
    4c4e:	bf00      	nop
    4c50:	400d4000 	.word	0x400d4000
    4c54:	400ac000 	.word	0x400ac000

00004c58 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    4c58:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    4c5a:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    4c5c:	b11b      	cbz	r3, 4c66 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    4c5e:	6853      	ldr	r3, [r2, #4]
    4c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    4c64:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    4c66:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    4c68:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    4c6a:	b1dc      	cbz	r4, 4ca4 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    4c6c:	4b14      	ldr	r3, [pc, #80]	; (4cc0 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    4c6e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    4c70:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    4c74:	420c      	tst	r4, r1
    4c76:	d11f      	bne.n	4cb8 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    4c78:	4d12      	ldr	r5, [pc, #72]	; (4cc4 <schedule_transfer+0x6c>)
    4c7a:	682f      	ldr	r7, [r5, #0]
    4c7c:	e004      	b.n	4c88 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    4c7e:	682c      	ldr	r4, [r5, #0]
    4c80:	1be4      	subs	r4, r4, r7
    4c82:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    4c86:	d20b      	bcs.n	4ca0 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    4c88:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    4c8c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    4c90:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    4c94:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    4c98:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    4c9c:	0464      	lsls	r4, r4, #17
    4c9e:	d5ee      	bpl.n	4c7e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    4ca0:	4231      	tst	r1, r6
    4ca2:	d109      	bne.n	4cb8 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    4ca4:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    4ca6:	4c06      	ldr	r4, [pc, #24]	; (4cc0 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    4ca8:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    4caa:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    4cac:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4cb0:	4319      	orrs	r1, r3
    4cb2:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    4cb6:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    4cb8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    4cba:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    4cbc:	bcf0      	pop	{r4, r5, r6, r7}
    4cbe:	4770      	bx	lr
    4cc0:	402e0000 	.word	0x402e0000
    4cc4:	e0001004 	.word	0xe0001004

00004cc8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    4cc8:	b570      	push	{r4, r5, r6, lr}
    4cca:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    4ccc:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    4cce:	b190      	cbz	r0, 4cf6 <run_callbacks+0x2e>
    4cd0:	4602      	mov	r2, r0
    4cd2:	2400      	movs	r4, #0
    4cd4:	e003      	b.n	4cde <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    4cd6:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    4cd8:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    4cda:	2a01      	cmp	r2, #1
    4cdc:	d00c      	beq.n	4cf8 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    4cde:	6853      	ldr	r3, [r2, #4]
    4ce0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    4ce4:	d0f7      	beq.n	4cd6 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    4ce6:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    4ce8:	b12c      	cbz	r4, 4cf6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    4cea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    4cec:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    4cee:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    4cf0:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    4cf2:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    4cf4:	d1f9      	bne.n	4cea <run_callbacks+0x22>
    4cf6:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    4cf8:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    4cfa:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    4cfc:	e7f4      	b.n	4ce8 <run_callbacks+0x20>
    4cfe:	bf00      	nop

00004d00 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    4d00:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    4d02:	b9e1      	cbnz	r1, 4d3e <endpoint0_transmit.constprop.1+0x3e>
    4d04:	4c21      	ldr	r4, [pc, #132]	; (4d8c <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4d06:	4922      	ldr	r1, [pc, #136]	; (4d90 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4d08:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4d0a:	4b22      	ldr	r3, [pc, #136]	; (4d94 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4d0c:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4d0e:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4d12:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4d14:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    4d16:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    4d18:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4d1a:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    4d1c:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4d1e:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    4d22:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    4d26:	4d1c      	ldr	r5, [pc, #112]	; (4d98 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    4d28:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4d2c:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    4d2e:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    4d32:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    4d34:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d1fb      	bne.n	4d34 <endpoint0_transmit.constprop.1+0x34>
}
    4d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4d3e:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4d40:	4b16      	ldr	r3, [pc, #88]	; (4d9c <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    4d42:	4d14      	ldr	r5, [pc, #80]	; (4d94 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4d44:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    4d46:	4c11      	ldr	r4, [pc, #68]	; (4d8c <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4d48:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    4d4c:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4d4e:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4d50:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4d52:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    4d56:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4d58:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    4d5c:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4d5e:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    4d62:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4d66:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    4d6a:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4d6c:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    4d6e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4d72:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4d76:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4d7a:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4d7c:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    4d7e:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    4d82:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4d86:	2b00      	cmp	r3, #0
    4d88:	d1fb      	bne.n	4d82 <endpoint0_transmit.constprop.1+0x82>
    4d8a:	e7bc      	b.n	4d06 <endpoint0_transmit.constprop.1+0x6>
    4d8c:	20004000 	.word	0x20004000
    4d90:	20003020 	.word	0x20003020
    4d94:	402e0000 	.word	0x402e0000
    4d98:	200021cc 	.word	0x200021cc
    4d9c:	20003000 	.word	0x20003000

00004da0 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    4da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    4da4:	4cac      	ldr	r4, [pc, #688]	; (5058 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    4da6:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    4da8:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    4dac:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    4db0:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    4db4:	d05e      	beq.n	4e74 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    4db6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4dba:	2b00      	cmp	r3, #0
    4dbc:	d055      	beq.n	4e6a <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4dbe:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    4dc2:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 5080 <isr+0x2e0>
    4dc6:	4ea5      	ldr	r6, [pc, #660]	; (505c <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4dc8:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4dca:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    4dcc:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    4dd0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    4dd2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4dd4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4ddc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    4de0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4de4:	049f      	lsls	r7, r3, #18
    4de6:	d5f5      	bpl.n	4dd4 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    4de8:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    4dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4df0:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4df4:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    4df8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    4dfc:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    4e00:	d1fa      	bne.n	4df8 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    4e02:	b281      	uxth	r1, r0
    4e04:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    4e08:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    4e0c:	42b9      	cmp	r1, r7
    4e0e:	f200 80b4 	bhi.w	4f7a <isr+0x1da>
    4e12:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    4e16:	f080 81e9 	bcs.w	51ec <isr+0x44c>
    4e1a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    4e1e:	f000 816b 	beq.w	50f8 <isr+0x358>
    4e22:	f200 80f0 	bhi.w	5006 <isr+0x266>
    4e26:	2980      	cmp	r1, #128	; 0x80
    4e28:	f000 8159 	beq.w	50de <isr+0x33e>
    4e2c:	2982      	cmp	r1, #130	; 0x82
    4e2e:	f040 80e2 	bne.w	4ff6 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    4e32:	b292      	uxth	r2, r2
    4e34:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    4e38:	2907      	cmp	r1, #7
    4e3a:	f200 80dc 	bhi.w	4ff6 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    4e3e:	0089      	lsls	r1, r1, #2
    4e40:	4887      	ldr	r0, [pc, #540]	; (5060 <isr+0x2c0>)
		reply_buffer[0] = 0;
    4e42:	4f88      	ldr	r7, [pc, #544]	; (5064 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    4e44:	4408      	add	r0, r1
    4e46:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4e48:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    4e4a:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    4e4c:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4e4e:	f140 820c 	bpl.w	526a <isr+0x4ca>
    4e52:	03ca      	lsls	r2, r1, #15
    4e54:	d501      	bpl.n	4e5a <isr+0xba>
			reply_buffer[0] = 1;
    4e56:	2301      	movs	r3, #1
    4e58:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    4e5a:	2102      	movs	r1, #2
    4e5c:	4881      	ldr	r0, [pc, #516]	; (5064 <isr+0x2c4>)
    4e5e:	f7ff ff4f 	bl	4d00 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4e62:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4e66:	2b00      	cmp	r3, #0
    4e68:	d1b0      	bne.n	4dcc <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    4e6a:	4a7b      	ldr	r2, [pc, #492]	; (5058 <isr+0x2b8>)
    4e6c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    4e70:	2b00      	cmp	r3, #0
    4e72:	d150      	bne.n	4f16 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    4e74:	f018 0f40 	tst.w	r8, #64	; 0x40
    4e78:	d018      	beq.n	4eac <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    4e7a:	4b77      	ldr	r3, [pc, #476]	; (5058 <isr+0x2b8>)
    4e7c:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    4e80:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    4e82:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    4e86:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    4e8a:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    4e8e:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    4e92:	4b71      	ldr	r3, [pc, #452]	; (5058 <isr+0x2b8>)
    4e94:	2c00      	cmp	r4, #0
    4e96:	d1fa      	bne.n	4e8e <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    4e98:	f04f 32ff 	mov.w	r2, #4294967295
    4e9c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    4ea0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    4ea4:	f000 fd1e 	bl	58e4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    4ea8:	4b6f      	ldr	r3, [pc, #444]	; (5068 <isr+0x2c8>)
    4eaa:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    4eac:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    4eb0:	d003      	beq.n	4eba <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    4eb2:	4b6e      	ldr	r3, [pc, #440]	; (506c <isr+0x2cc>)
    4eb4:	681b      	ldr	r3, [r3, #0]
    4eb6:	b103      	cbz	r3, 4eba <isr+0x11a>
    4eb8:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    4eba:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    4ebe:	d003      	beq.n	4ec8 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    4ec0:	4b6b      	ldr	r3, [pc, #428]	; (5070 <isr+0x2d0>)
    4ec2:	681b      	ldr	r3, [r3, #0]
    4ec4:	b103      	cbz	r3, 4ec8 <isr+0x128>
    4ec6:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    4ec8:	f018 0f04 	tst.w	r8, #4
    4ecc:	d008      	beq.n	4ee0 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    4ece:	4b62      	ldr	r3, [pc, #392]	; (5058 <isr+0x2b8>)
    4ed0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    4ed4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    4ed8:	d04c      	beq.n	4f74 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    4eda:	4b66      	ldr	r3, [pc, #408]	; (5074 <isr+0x2d4>)
    4edc:	2201      	movs	r2, #1
    4ede:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    4ee0:	4b5d      	ldr	r3, [pc, #372]	; (5058 <isr+0x2b8>)
    4ee2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4ee6:	0612      	lsls	r2, r2, #24
    4ee8:	d512      	bpl.n	4f10 <isr+0x170>
    4eea:	f018 0f80 	tst.w	r8, #128	; 0x80
    4eee:	d00f      	beq.n	4f10 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    4ef0:	4961      	ldr	r1, [pc, #388]	; (5078 <isr+0x2d8>)
    4ef2:	780a      	ldrb	r2, [r1, #0]
    4ef4:	b162      	cbz	r2, 4f10 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    4ef6:	3a01      	subs	r2, #1
    4ef8:	b2d2      	uxtb	r2, r2
    4efa:	700a      	strb	r2, [r1, #0]
    4efc:	b942      	cbnz	r2, 4f10 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    4efe:	495f      	ldr	r1, [pc, #380]	; (507c <isr+0x2dc>)
    4f00:	780a      	ldrb	r2, [r1, #0]
    4f02:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4f06:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    4f08:	2a00      	cmp	r2, #0
    4f0a:	f000 8232 	beq.w	5372 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    4f0e:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    4f10:	b003      	add	sp, #12
    4f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    4f16:	495a      	ldr	r1, [pc, #360]	; (5080 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    4f18:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    4f1c:	6808      	ldr	r0, [r1, #0]
    4f1e:	4203      	tst	r3, r0
    4f20:	f040 81e6 	bne.w	52f0 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    4f24:	4a50      	ldr	r2, [pc, #320]	; (5068 <isr+0x2c8>)
    4f26:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    4f28:	401d      	ands	r5, r3
    4f2a:	d0a3      	beq.n	4e74 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    4f2c:	0c2f      	lsrs	r7, r5, #16
    4f2e:	d00f      	beq.n	4f50 <isr+0x1b0>
    4f30:	4e4a      	ldr	r6, [pc, #296]	; (505c <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    4f32:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    4f36:	fa97 f4a7 	rbit	r4, r7
    4f3a:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4f3e:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    4f42:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4f46:	3040      	adds	r0, #64	; 0x40
    4f48:	f7ff febe 	bl	4cc8 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    4f4c:	43a7      	bics	r7, r4
    4f4e:	d1f2      	bne.n	4f36 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    4f50:	b2ad      	uxth	r5, r5
				while(rx) {
    4f52:	2d00      	cmp	r5, #0
    4f54:	d08e      	beq.n	4e74 <isr+0xd4>
    4f56:	4e41      	ldr	r6, [pc, #260]	; (505c <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    4f58:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    4f5a:	fa95 f4a5 	rbit	r4, r5
    4f5e:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    4f62:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    4f66:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    4f6a:	f7ff fead 	bl	4cc8 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    4f6e:	43a5      	bics	r5, r4
    4f70:	d1f3      	bne.n	4f5a <isr+0x1ba>
    4f72:	e77f      	b.n	4e74 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    4f74:	4a3f      	ldr	r2, [pc, #252]	; (5074 <isr+0x2d4>)
    4f76:	7013      	strb	r3, [r2, #0]
    4f78:	e7b2      	b.n	4ee0 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    4f7a:	f242 0721 	movw	r7, #8225	; 0x2021
    4f7e:	42b9      	cmp	r1, r7
    4f80:	d035      	beq.n	4fee <isr+0x24e>
    4f82:	f200 8089 	bhi.w	5098 <isr+0x2f8>
    4f86:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    4f8a:	f000 8121 	beq.w	51d0 <isr+0x430>
    4f8e:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    4f92:	d130      	bne.n	4ff6 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    4f94:	f3c0 4007 	ubfx	r0, r0, #16, #8
    4f98:	4a3a      	ldr	r2, [pc, #232]	; (5084 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    4f9a:	493b      	ldr	r1, [pc, #236]	; (5088 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    4f9c:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    4f9e:	4f3b      	ldr	r7, [pc, #236]	; (508c <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    4fa0:	4a3b      	ldr	r2, [pc, #236]	; (5090 <isr+0x2f0>)
    4fa2:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    4fa4:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    4fa8:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    4fac:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    4fb0:	f000 fc9a 	bl	58e8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4fb4:	4a37      	ldr	r2, [pc, #220]	; (5094 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4fb6:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4fb8:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4fba:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4fbc:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4fbe:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4fc0:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4fc2:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4fc4:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4fc8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4fcc:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4fce:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    4fd2:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4fd6:	4a2a      	ldr	r2, [pc, #168]	; (5080 <isr+0x2e0>)
    4fd8:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    4fda:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d1fb      	bne.n	4fda <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4fe2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	f47f aef0 	bne.w	4dcc <isr+0x2c>
    4fec:	e73d      	b.n	4e6a <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    4fee:	0c11      	lsrs	r1, r2, #16
    4ff0:	2907      	cmp	r1, #7
    4ff2:	f000 813e 	beq.w	5272 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    4ff6:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4ffa:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4ffe:	2b00      	cmp	r3, #0
    5000:	f47f aee4 	bne.w	4dcc <isr+0x2c>
    5004:	e731      	b.n	4e6a <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    5006:	f240 3702 	movw	r7, #770	; 0x302
    500a:	42b9      	cmp	r1, r7
    500c:	f000 80b0 	beq.w	5170 <isr+0x3d0>
    5010:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    5014:	d1ef      	bne.n	4ff6 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    5016:	4a1f      	ldr	r2, [pc, #124]	; (5094 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5018:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    501a:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    501c:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    501e:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    5020:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5022:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5024:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    5028:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    502c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    502e:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    5032:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    5036:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    503a:	2b00      	cmp	r3, #0
    503c:	d1fb      	bne.n	5036 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    503e:	0c03      	lsrs	r3, r0, #16
    5040:	065b      	lsls	r3, r3, #25
    5042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    5046:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    504a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    504e:	2b00      	cmp	r3, #0
    5050:	f47f aebc 	bne.w	4dcc <isr+0x2c>
    5054:	e709      	b.n	4e6a <isr+0xca>
    5056:	bf00      	nop
    5058:	402e0000 	.word	0x402e0000
    505c:	20004000 	.word	0x20004000
    5060:	402e01c0 	.word	0x402e01c0
    5064:	200021e0 	.word	0x200021e0
    5068:	200021bc 	.word	0x200021bc
    506c:	200021b8 	.word	0x200021b8
    5070:	200021c4 	.word	0x200021c4
    5074:	200021c8 	.word	0x200021c8
    5078:	200021d0 	.word	0x200021d0
    507c:	200021c0 	.word	0x200021c0
    5080:	200021cc 	.word	0x200021cc
    5084:	200021f0 	.word	0x200021f0
    5088:	000200c8 	.word	0x000200c8
    508c:	00cc0002 	.word	0x00cc0002
    5090:	00c80002 	.word	0x00c80002
    5094:	20003020 	.word	0x20003020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    5098:	f242 2321 	movw	r3, #8737	; 0x2221
    509c:	4299      	cmp	r1, r3
    509e:	d05b      	beq.n	5158 <isr+0x3b8>
    50a0:	f242 3321 	movw	r3, #8993	; 0x2321
    50a4:	4299      	cmp	r1, r3
    50a6:	d1a6      	bne.n	4ff6 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    50a8:	4bb5      	ldr	r3, [pc, #724]	; (5380 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    50aa:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    50ac:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    50ae:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    50b0:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    50b2:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    50b4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    50b6:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    50b8:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    50bc:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    50c0:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    50c2:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    50c6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    50ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    50ce:	2b00      	cmp	r3, #0
    50d0:	d1fb      	bne.n	50ca <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    50d2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    50d6:	2b00      	cmp	r3, #0
    50d8:	f47f ae78 	bne.w	4dcc <isr+0x2c>
    50dc:	e6c5      	b.n	4e6a <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    50de:	4aa9      	ldr	r2, [pc, #676]	; (5384 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    50e0:	2102      	movs	r1, #2
    50e2:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    50e4:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    50e6:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    50e8:	f7ff fe0a 	bl	4d00 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    50ec:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    50f0:	2b00      	cmp	r3, #0
    50f2:	f47f ae6b 	bne.w	4dcc <isr+0x2c>
    50f6:	e6b8      	b.n	4e6a <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    50f8:	b292      	uxth	r2, r2
    50fa:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    50fe:	2b07      	cmp	r3, #7
    5100:	f63f af79 	bhi.w	4ff6 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    5104:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    5108:	ea4f 0383 	mov.w	r3, r3, lsl #2
    510c:	4a9e      	ldr	r2, [pc, #632]	; (5388 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    510e:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    5112:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    5116:	441a      	add	r2, r3
    5118:	6813      	ldr	r3, [r2, #0]
    511a:	bf14      	ite	ne
    511c:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    5120:	f023 0301 	biceq.w	r3, r3, #1
    5124:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5126:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    5128:	4b95      	ldr	r3, [pc, #596]	; (5380 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    512a:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    512c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    512e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5130:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5132:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    5136:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    513a:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    513c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    5140:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    5144:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5148:	2b00      	cmp	r3, #0
    514a:	d1fb      	bne.n	5144 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    514c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    5150:	2b00      	cmp	r3, #0
    5152:	f47f ae3b 	bne.w	4dcc <isr+0x2c>
    5156:	e688      	b.n	4e6a <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    5158:	b292      	uxth	r2, r2
    515a:	2a00      	cmp	r2, #0
    515c:	d1a4      	bne.n	50a8 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    515e:	4b8b      	ldr	r3, [pc, #556]	; (538c <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    5160:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    5164:	4a8a      	ldr	r2, [pc, #552]	; (5390 <isr+0x5f0>)
    5166:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    5168:	4b8a      	ldr	r3, [pc, #552]	; (5394 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    516a:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    516c:	7018      	strb	r0, [r3, #0]
    516e:	e79b      	b.n	50a8 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    5170:	b292      	uxth	r2, r2
    5172:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    5176:	2b07      	cmp	r3, #7
    5178:	f63f af3d 	bhi.w	4ff6 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    517c:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    5180:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5184:	4a80      	ldr	r2, [pc, #512]	; (5388 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    5186:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    518a:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    518e:	441a      	add	r2, r3
    5190:	6813      	ldr	r3, [r2, #0]
    5192:	bf14      	ite	ne
    5194:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    5198:	f043 0301 	orreq.w	r3, r3, #1
    519c:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    519e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    51a0:	4b77      	ldr	r3, [pc, #476]	; (5380 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    51a2:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    51a4:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    51a6:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    51a8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    51aa:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    51ae:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    51b2:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    51b4:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    51b8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    51bc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    51c0:	2b00      	cmp	r3, #0
    51c2:	d1fb      	bne.n	51bc <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    51c4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    51c8:	2b00      	cmp	r3, #0
    51ca:	f47f adff 	bne.w	4dcc <isr+0x2c>
    51ce:	e64c      	b.n	4e6a <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    51d0:	4a71      	ldr	r2, [pc, #452]	; (5398 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    51d2:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    51d4:	4b6b      	ldr	r3, [pc, #428]	; (5384 <isr+0x5e4>)
    51d6:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    51d8:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    51da:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    51dc:	f7ff fd90 	bl	4d00 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    51e0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    51e4:	2b00      	cmp	r3, #0
    51e6:	f47f adf1 	bne.w	4dcc <isr+0x2c>
    51ea:	e63e      	b.n	4e6a <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    51ec:	4b6b      	ldr	r3, [pc, #428]	; (539c <isr+0x5fc>)
    51ee:	6859      	ldr	r1, [r3, #4]
    51f0:	2900      	cmp	r1, #0
    51f2:	f43f af00 	beq.w	4ff6 <isr+0x256>
    51f6:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    51f8:	fa1f fe82 	uxth.w	lr, r2
    51fc:	e004      	b.n	5208 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    51fe:	330c      	adds	r3, #12
    5200:	6859      	ldr	r1, [r3, #4]
    5202:	2900      	cmp	r1, #0
    5204:	f43f aef7 	beq.w	4ff6 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    5208:	881f      	ldrh	r7, [r3, #0]
    520a:	4287      	cmp	r7, r0
    520c:	d1f7      	bne.n	51fe <isr+0x45e>
    520e:	885f      	ldrh	r7, [r3, #2]
    5210:	4577      	cmp	r7, lr
    5212:	d1f4      	bne.n	51fe <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    5214:	0a07      	lsrs	r7, r0, #8
    5216:	2f03      	cmp	r7, #3
    5218:	f000 80e9 	beq.w	53ee <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    521c:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    521e:	0c12      	lsrs	r2, r2, #16
    5220:	4293      	cmp	r3, r2
    5222:	bf28      	it	cs
    5224:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    5226:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    522a:	f000 80d1 	beq.w	53d0 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    522e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    5232:	f000 808b 	beq.w	534c <isr+0x5ac>
    5236:	4f5a      	ldr	r7, [pc, #360]	; (53a0 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    5238:	461a      	mov	r2, r3
    523a:	9301      	str	r3, [sp, #4]
    523c:	4638      	mov	r0, r7
    523e:	f001 fc39 	bl	6ab4 <memcpy>
    5242:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    5244:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    5248:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    524a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    524e:	4955      	ldr	r1, [pc, #340]	; (53a4 <isr+0x604>)
    5250:	600a      	str	r2, [r1, #0]
		location += 32;
    5252:	3220      	adds	r2, #32
	} while (location < end_addr);
    5254:	4297      	cmp	r7, r2
    5256:	d8fa      	bhi.n	524e <isr+0x4ae>
	asm("dsb");
    5258:	f3bf 8f4f 	dsb	sy
	asm("isb");
    525c:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    5260:	484f      	ldr	r0, [pc, #316]	; (53a0 <isr+0x600>)
    5262:	4619      	mov	r1, r3
    5264:	f7ff fd4c 	bl	4d00 <endpoint0_transmit.constprop.1>
    5268:	e5fb      	b.n	4e62 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    526a:	07cb      	lsls	r3, r1, #31
    526c:	f57f adf5 	bpl.w	4e5a <isr+0xba>
    5270:	e5f1      	b.n	4e56 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    5272:	4f4d      	ldr	r7, [pc, #308]	; (53a8 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    5274:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    5278:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    527a:	494c      	ldr	r1, [pc, #304]	; (53ac <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    527c:	4b4c      	ldr	r3, [pc, #304]	; (53b0 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    527e:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    5280:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    5284:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    5286:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    5288:	494a      	ldr	r1, [pc, #296]	; (53b4 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    528a:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    528e:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    5290:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    5294:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    5298:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    529a:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    529e:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    52a2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    52a6:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    52aa:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    52ac:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    52b0:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    52b2:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    52b4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    52b8:	2b00      	cmp	r3, #0
    52ba:	d1fb      	bne.n	52b4 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    52bc:	4a30      	ldr	r2, [pc, #192]	; (5380 <isr+0x5e0>)
    52be:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    52c0:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    52c4:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    52c6:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    52c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    52cc:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    52ce:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    52d0:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    52d4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    52d8:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    52da:	ea41 0300 	orr.w	r3, r1, r0
    52de:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    52e2:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    52e6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    52ea:	2b00      	cmp	r3, #0
    52ec:	d1fb      	bne.n	52e6 <isr+0x546>
    52ee:	e5b8      	b.n	4e62 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    52f0:	482d      	ldr	r0, [pc, #180]	; (53a8 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    52f2:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    52f6:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    52f8:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    52fa:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    52fc:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    52fe:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    5300:	f47f ae10 	bne.w	4f24 <isr+0x184>
    5304:	b281      	uxth	r1, r0
    5306:	2900      	cmp	r1, #0
    5308:	f47f ae0c 	bne.w	4f24 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    530c:	4929      	ldr	r1, [pc, #164]	; (53b4 <isr+0x614>)
    530e:	4c2a      	ldr	r4, [pc, #168]	; (53b8 <isr+0x618>)
    5310:	c903      	ldmia	r1, {r0, r1}
    5312:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    5314:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    5316:	6020      	str	r0, [r4, #0]
    5318:	80a1      	strh	r1, [r4, #4]
    531a:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    531c:	f47f ae02 	bne.w	4f24 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    5320:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    5322:	4826      	ldr	r0, [pc, #152]	; (53bc <isr+0x61c>)
    5324:	7801      	ldrb	r1, [r0, #0]
    5326:	f041 0104 	orr.w	r1, r1, #4
    532a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    532c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    5330:	0608      	lsls	r0, r1, #24
    5332:	d406      	bmi.n	5342 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    5334:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    5338:	2080      	movs	r0, #128	; 0x80
    533a:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    533e:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    5342:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    5344:	4a1e      	ldr	r2, [pc, #120]	; (53c0 <isr+0x620>)
    5346:	2150      	movs	r1, #80	; 0x50
    5348:	7011      	strb	r1, [r2, #0]
    534a:	e5eb      	b.n	4f24 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    534c:	481d      	ldr	r0, [pc, #116]	; (53c4 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    534e:	461a      	mov	r2, r3
    5350:	4f13      	ldr	r7, [pc, #76]	; (53a0 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    5352:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    5356:	491c      	ldr	r1, [pc, #112]	; (53c8 <isr+0x628>)
    5358:	481c      	ldr	r0, [pc, #112]	; (53cc <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    535a:	9301      	str	r3, [sp, #4]
    535c:	f1be 0f00 	cmp.w	lr, #0
    5360:	bf08      	it	eq
    5362:	4601      	moveq	r1, r0
    5364:	4638      	mov	r0, r7
    5366:	f001 fba5 	bl	6ab4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    536a:	2207      	movs	r2, #7
    536c:	9b01      	ldr	r3, [sp, #4]
    536e:	707a      	strb	r2, [r7, #1]
    5370:	e768      	b.n	5244 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    5372:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    5376:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    537a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    537e:	e5c6      	b.n	4f0e <isr+0x16e>
    5380:	20003020 	.word	0x20003020
    5384:	200021e0 	.word	0x200021e0
    5388:	402e01c0 	.word	0x402e01c0
    538c:	200021a0 	.word	0x200021a0
    5390:	20004288 	.word	0x20004288
    5394:	20002348 	.word	0x20002348
    5398:	200021f0 	.word	0x200021f0
    539c:	2000093c 	.word	0x2000093c
    53a0:	20200000 	.word	0x20200000
    53a4:	e000ef70 	.word	0xe000ef70
    53a8:	200021d8 	.word	0x200021d8
    53ac:	00070080 	.word	0x00070080
    53b0:	20003000 	.word	0x20003000
    53b4:	200021e8 	.word	0x200021e8
    53b8:	20004280 	.word	0x20004280
    53bc:	200021c0 	.word	0x200021c0
    53c0:	200021d0 	.word	0x200021d0
    53c4:	200021c8 	.word	0x200021c8
    53c8:	60001a24 	.word	0x60001a24
    53cc:	60001a68 	.word	0x60001a68

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    53d0:	480a      	ldr	r0, [pc, #40]	; (53fc <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    53d2:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    53d4:	490a      	ldr	r1, [pc, #40]	; (5400 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    53d6:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    53d8:	480a      	ldr	r0, [pc, #40]	; (5404 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    53da:	9301      	str	r3, [sp, #4]
    53dc:	2f00      	cmp	r7, #0
    53de:	bf08      	it	eq
    53e0:	4601      	moveq	r1, r0
    53e2:	4809      	ldr	r0, [pc, #36]	; (5408 <isr+0x668>)
    53e4:	f001 fb66 	bl	6ab4 <memcpy>
    53e8:	4f07      	ldr	r7, [pc, #28]	; (5408 <isr+0x668>)
    53ea:	9b01      	ldr	r3, [sp, #4]
    53ec:	e72a      	b.n	5244 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    53ee:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    53f0:	780b      	ldrb	r3, [r1, #0]
    53f2:	4293      	cmp	r3, r2
    53f4:	bf28      	it	cs
    53f6:	4613      	movcs	r3, r2
    53f8:	e719      	b.n	522e <isr+0x48e>
    53fa:	bf00      	nop
    53fc:	200021c8 	.word	0x200021c8
    5400:	60001a68 	.word	0x60001a68
    5404:	60001a24 	.word	0x60001a24
    5408:	20200000 	.word	0x20200000

0000540c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    540c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    540e:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    5412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5416:	bf14      	ite	ne
    5418:	2700      	movne	r7, #0
    541a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    541e:	2a02      	cmp	r2, #2
    5420:	d901      	bls.n	5426 <usb_config_rx+0x1a>
    5422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5426:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    542a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 546c <usb_config_rx+0x60>
    542e:	460d      	mov	r5, r1
    5430:	4604      	mov	r4, r0
    5432:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    5436:	2100      	movs	r1, #0
    5438:	2240      	movs	r2, #64	; 0x40
    543a:	4698      	mov	r8, r3
    543c:	4630      	mov	r0, r6
    543e:	f003 f99b 	bl	8778 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    5442:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    5444:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    5448:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    544c:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    5450:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    5452:	f1b8 0f00 	cmp.w	r8, #0
    5456:	d0e4      	beq.n	5422 <usb_config_rx+0x16>
    5458:	4b03      	ldr	r3, [pc, #12]	; (5468 <usb_config_rx+0x5c>)
    545a:	40a0      	lsls	r0, r4
    545c:	681c      	ldr	r4, [r3, #0]
    545e:	4320      	orrs	r0, r4
    5460:	6018      	str	r0, [r3, #0]
    5462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5466:	bf00      	nop
    5468:	200021bc 	.word	0x200021bc
    546c:	20004000 	.word	0x20004000

00005470 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5470:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    5472:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    5476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    547a:	bf14      	ite	ne
    547c:	2700      	movne	r7, #0
    547e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    5482:	2a02      	cmp	r2, #2
    5484:	d901      	bls.n	548a <usb_config_tx+0x1a>
    5486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    548a:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    548c:	01c5      	lsls	r5, r0, #7
    548e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 54d4 <usb_config_tx+0x64>
    5492:	4688      	mov	r8, r1
    5494:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    5496:	2100      	movs	r1, #0
    5498:	4604      	mov	r4, r0
    549a:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    549c:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    54a0:	4650      	mov	r0, sl
    54a2:	f003 f969 	bl	8778 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    54a6:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    54a8:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    54ac:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    54b0:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    54b4:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    54b8:	2e00      	cmp	r6, #0
    54ba:	d0e4      	beq.n	5486 <usb_config_tx+0x16>
    54bc:	f104 0010 	add.w	r0, r4, #16
    54c0:	4b03      	ldr	r3, [pc, #12]	; (54d0 <usb_config_tx+0x60>)
    54c2:	4082      	lsls	r2, r0
    54c4:	6818      	ldr	r0, [r3, #0]
    54c6:	4302      	orrs	r2, r0
    54c8:	601a      	str	r2, [r3, #0]
    54ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54ce:	bf00      	nop
    54d0:	200021bc 	.word	0x200021bc
    54d4:	20004000 	.word	0x20004000

000054d8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    54d8:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    54da:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    54dc:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    54de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    54e2:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    54e4:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    54e6:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    54e8:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    54ec:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    54f0:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    54f4:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    54f8:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    54fa:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    54fc:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    54fe:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    5500:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    5502:	bcf0      	pop	{r4, r5, r6, r7}
    5504:	4770      	bx	lr
    5506:	bf00      	nop

00005508 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5508:	1e83      	subs	r3, r0, #2
    550a:	2b02      	cmp	r3, #2
    550c:	d900      	bls.n	5510 <usb_transmit+0x8>
    550e:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    5510:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    5512:	4b06      	ldr	r3, [pc, #24]	; (552c <usb_transmit+0x24>)
    5514:	f100 0410 	add.w	r4, r0, #16
    5518:	2501      	movs	r5, #1
    551a:	460a      	mov	r2, r1
    551c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    5520:	fa05 f104 	lsl.w	r1, r5, r4
}
    5524:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    5526:	f7ff bb97 	b.w	4c58 <schedule_transfer>
    552a:	bf00      	nop
    552c:	20004040 	.word	0x20004040

00005530 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5530:	1e83      	subs	r3, r0, #2
    5532:	2b02      	cmp	r3, #2
    5534:	d900      	bls.n	5538 <usb_receive+0x8>
    5536:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    5538:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    553a:	4b05      	ldr	r3, [pc, #20]	; (5550 <usb_receive+0x20>)
    553c:	2401      	movs	r4, #1
    553e:	460a      	mov	r2, r1
    5540:	fa04 f100 	lsl.w	r1, r4, r0
    5544:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    5548:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    554c:	f7ff bb84 	b.w	4c58 <schedule_transfer>
    5550:	20004000 	.word	0x20004000

00005554 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    5554:	6840      	ldr	r0, [r0, #4]
#endif
}
    5556:	4770      	bx	lr

00005558 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    5558:	4a12      	ldr	r2, [pc, #72]	; (55a4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    555a:	4b13      	ldr	r3, [pc, #76]	; (55a8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    555c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    5560:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    5564:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    5566:	b510      	push	{r4, lr}
    5568:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    556a:	d802      	bhi.n	5572 <usb_init_serialnumber+0x1a>
    556c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5570:	0040      	lsls	r0, r0, #1
    5572:	4c0e      	ldr	r4, [pc, #56]	; (55ac <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    5574:	a901      	add	r1, sp, #4
    5576:	220a      	movs	r2, #10
    5578:	f001 fc98 	bl	6eac <ultoa>
    557c:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    557e:	2300      	movs	r3, #0
    5580:	4620      	mov	r0, r4
		char c = buf[i];
    5582:	f811 2b01 	ldrb.w	r2, [r1], #1
    5586:	3301      	adds	r3, #1
		if (!c) break;
    5588:	b13a      	cbz	r2, 559a <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    558a:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    558c:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    5590:	d1f7      	bne.n	5582 <usb_init_serialnumber+0x2a>
    5592:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5594:	7023      	strb	r3, [r4, #0]
}
    5596:	b004      	add	sp, #16
    5598:	bd10      	pop	{r4, pc}
    559a:	005b      	lsls	r3, r3, #1
    559c:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    559e:	7023      	strb	r3, [r4, #0]
}
    55a0:	b004      	add	sp, #16
    55a2:	bd10      	pop	{r4, pc}
    55a4:	401f4400 	.word	0x401f4400
    55a8:	0098967f 	.word	0x0098967f
    55ac:	20000f40 	.word	0x20000f40

000055b0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    55b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    55b2:	4914      	ldr	r1, [pc, #80]	; (5604 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    55b4:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    55b8:	4d13      	ldr	r5, [pc, #76]	; (5608 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    55ba:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    55bc:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    55c0:	4e12      	ldr	r6, [pc, #72]	; (560c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    55c2:	4a13      	ldr	r2, [pc, #76]	; (5610 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    55c4:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    55c8:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    55ca:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    55cc:	4628      	mov	r0, r5
    55ce:	8832      	ldrh	r2, [r6, #0]
    55d0:	f7ff ff82 	bl	54d8 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    55d4:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    55d6:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    55da:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    55dc:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    55e0:	4a0c      	ldr	r2, [pc, #48]	; (5614 <rx_queue_transfer+0x64>)
    55e2:	6013      	str	r3, [r2, #0]
		location += 32;
    55e4:	3320      	adds	r3, #32
	} while (location < end_addr);
    55e6:	4299      	cmp	r1, r3
    55e8:	d8fb      	bhi.n	55e2 <rx_queue_transfer+0x32>
	asm("dsb");
    55ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
    55ee:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    55f2:	2003      	movs	r0, #3
    55f4:	4629      	mov	r1, r5
    55f6:	f7ff ff9b 	bl	5530 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    55fa:	4b07      	ldr	r3, [pc, #28]	; (5618 <rx_queue_transfer+0x68>)
    55fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5600:	601a      	str	r2, [r3, #0]
    5602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5604:	20200060 	.word	0x20200060
    5608:	20002220 	.word	0x20002220
    560c:	2000232e 	.word	0x2000232e
    5610:	e000e18c 	.word	0xe000e18c
    5614:	e000ef5c 	.word	0xe000ef5c
    5618:	e000e10c 	.word	0xe000e10c

0000561c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    561c:	4a24      	ldr	r2, [pc, #144]	; (56b0 <rx_event+0x94>)
    561e:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    5620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5624:	f3c3 430e 	ubfx	r3, r3, #16, #15
    5628:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    562a:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    562c:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    562e:	2c00      	cmp	r4, #0
    5630:	dd38      	ble.n	56a4 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    5632:	4920      	ldr	r1, [pc, #128]	; (56b4 <rx_event+0x98>)
		if (head != rx_tail) {
    5634:	4a20      	ldr	r2, [pc, #128]	; (56b8 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    5636:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    5638:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    563a:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    563c:	481f      	ldr	r0, [pc, #124]	; (56bc <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    563e:	4e20      	ldr	r6, [pc, #128]	; (56c0 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    5640:	4293      	cmp	r3, r2
    5642:	d007      	beq.n	5654 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    5644:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    5648:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    564c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    5650:	4294      	cmp	r4, r2
    5652:	d912      	bls.n	567a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    5654:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    5656:	2200      	movs	r2, #0
    5658:	4f1a      	ldr	r7, [pc, #104]	; (56c4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    565a:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    565c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    5660:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    5664:	4e18      	ldr	r6, [pc, #96]	; (56c8 <rx_event+0xac>)
    5666:	bf94      	ite	ls
    5668:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    566a:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    566c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    566e:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    5670:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    5672:	4414      	add	r4, r2
    5674:	6034      	str	r4, [r6, #0]
    5676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    567a:	4b14      	ldr	r3, [pc, #80]	; (56cc <rx_event+0xb0>)
    567c:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    5680:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    5682:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    5684:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    5688:	4418      	add	r0, r3
    568a:	f001 fa13 	bl	6ab4 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    568e:	4a0e      	ldr	r2, [pc, #56]	; (56c8 <rx_event+0xac>)
				rx_queue_transfer(i);
    5690:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    5692:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    5696:	6813      	ldr	r3, [r2, #0]
    5698:	441c      	add	r4, r3
    569a:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    569c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    56a0:	f7ff bf86 	b.w	55b0 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    56a4:	4628      	mov	r0, r5
	}
}
    56a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    56aa:	f7ff bf81 	b.w	55b0 <rx_queue_transfer>
    56ae:	bf00      	nop
    56b0:	2000232e 	.word	0x2000232e
    56b4:	20002344 	.word	0x20002344
    56b8:	20002320 	.word	0x20002320
    56bc:	20002324 	.word	0x20002324
    56c0:	20002330 	.word	0x20002330
    56c4:	200021f4 	.word	0x200021f4
    56c8:	20002340 	.word	0x20002340
    56cc:	20200060 	.word	0x20200060

000056d0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    56d0:	4b1e      	ldr	r3, [pc, #120]	; (574c <usb_serial_flush_callback+0x7c>)
    56d2:	781a      	ldrb	r2, [r3, #0]
    56d4:	b95a      	cbnz	r2, 56ee <usb_serial_flush_callback+0x1e>
    56d6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    56da:	4a1d      	ldr	r2, [pc, #116]	; (5750 <usb_serial_flush_callback+0x80>)
    56dc:	7812      	ldrb	r2, [r2, #0]
    56de:	b132      	cbz	r2, 56ee <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    56e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    56e4:	4d1b      	ldr	r5, [pc, #108]	; (5754 <usb_serial_flush_callback+0x84>)
    56e6:	882a      	ldrh	r2, [r5, #0]
    56e8:	b912      	cbnz	r2, 56f0 <usb_serial_flush_callback+0x20>
    56ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56ee:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    56f0:	4e19      	ldr	r6, [pc, #100]	; (5758 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    56f2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    56f6:	4f19      	ldr	r7, [pc, #100]	; (575c <usb_serial_flush_callback+0x8c>)
    56f8:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    56fa:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    56fc:	4c18      	ldr	r4, [pc, #96]	; (5760 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    56fe:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5702:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5706:	4638      	mov	r0, r7
    5708:	4621      	mov	r1, r4
    570a:	f7ff fee5 	bl	54d8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    570e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    5712:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    5716:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    571a:	4b12      	ldr	r3, [pc, #72]	; (5764 <usb_serial_flush_callback+0x94>)
    571c:	6019      	str	r1, [r3, #0]
		location += 32;
    571e:	3120      	adds	r1, #32
	} while (location < end_addr);
    5720:	428a      	cmp	r2, r1
    5722:	d8fb      	bhi.n	571c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    5724:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5728:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    572c:	2004      	movs	r0, #4
    572e:	4639      	mov	r1, r7
    5730:	f7ff feea 	bl	5508 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    5734:	7833      	ldrb	r3, [r6, #0]
    5736:	4a08      	ldr	r2, [pc, #32]	; (5758 <usb_serial_flush_callback+0x88>)
    5738:	3301      	adds	r3, #1
    573a:	b2db      	uxtb	r3, r3
    573c:	2b03      	cmp	r3, #3
    573e:	bf88      	it	hi
    5740:	2300      	movhi	r3, #0
    5742:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    5744:	2300      	movs	r3, #0
    5746:	802b      	strh	r3, [r5, #0]
    5748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    574c:	20002206 	.word	0x20002206
    5750:	200021f0 	.word	0x200021f0
    5754:	20002346 	.word	0x20002346
    5758:	20002207 	.word	0x20002207
    575c:	20002360 	.word	0x20002360
    5760:	20201060 	.word	0x20201060
    5764:	e000ef70 	.word	0xe000ef70

00005768 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    5768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    576c:	b085      	sub	sp, #20
    576e:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    5770:	9101      	str	r1, [sp, #4]
    5772:	2900      	cmp	r1, #0
    5774:	f000 80a2 	beq.w	58bc <usb_serial_write.part.1+0x154>
    5778:	2300      	movs	r3, #0
    577a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 58d8 <usb_serial_write.part.1+0x170>
    577e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 58cc <usb_serial_write.part.1+0x164>
    5782:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    5784:	4e4e      	ldr	r6, [pc, #312]	; (58c0 <usb_serial_write.part.1+0x158>)
    5786:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    578a:	f8df a150 	ldr.w	sl, [pc, #336]	; 58dc <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    578e:	f8df b150 	ldr.w	fp, [pc, #336]	; 58e0 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    5792:	4a4c      	ldr	r2, [pc, #304]	; (58c4 <usb_serial_write.part.1+0x15c>)
    5794:	7814      	ldrb	r4, [r2, #0]
    5796:	4a4c      	ldr	r2, [pc, #304]	; (58c8 <usb_serial_write.part.1+0x160>)
    5798:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    579c:	2b00      	cmp	r3, #0
    579e:	d16e      	bne.n	587e <usb_serial_write.part.1+0x116>
    57a0:	461d      	mov	r5, r3
    57a2:	461c      	mov	r4, r3
    57a4:	e014      	b.n	57d0 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    57a6:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    57aa:	b904      	cbnz	r4, 57ae <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    57ac:	6835      	ldr	r5, [r6, #0]
    57ae:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    57b0:	2b00      	cmp	r3, #0
    57b2:	d15e      	bne.n	5872 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    57b4:	6833      	ldr	r3, [r6, #0]
    57b6:	1b5b      	subs	r3, r3, r5
    57b8:	2b78      	cmp	r3, #120	; 0x78
    57ba:	d879      	bhi.n	58b0 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    57bc:	f89a 3000 	ldrb.w	r3, [sl]
    57c0:	2b00      	cmp	r3, #0
    57c2:	d056      	beq.n	5872 <usb_serial_write.part.1+0x10a>
			yield();
    57c4:	f001 f8fe 	bl	69c4 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    57c8:	f8b8 3000 	ldrh.w	r3, [r8]
    57cc:	2b00      	cmp	r3, #0
    57ce:	d154      	bne.n	587a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    57d0:	4638      	mov	r0, r7
    57d2:	f7ff febf 	bl	5554 <usb_transfer_status>
			if (!(status & 0x80)) {
    57d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    57da:	4a3c      	ldr	r2, [pc, #240]	; (58cc <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    57dc:	d1e3      	bne.n	57a6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    57de:	f44f 6300 	mov.w	r3, #2048	; 0x800
    57e2:	4a38      	ldr	r2, [pc, #224]	; (58c4 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    57e4:	f889 0000 	strb.w	r0, [r9]
    57e8:	7814      	ldrb	r4, [r2, #0]
    57ea:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    57ec:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    57f0:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    57f2:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    57f4:	4936      	ldr	r1, [pc, #216]	; (58d0 <usb_serial_write.part.1+0x168>)
    57f6:	4420      	add	r0, r4
		if (size >= tx_available) {
    57f8:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    57fa:	4408      	add	r0, r1
		if (size >= tx_available) {
    57fc:	d343      	bcc.n	5886 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    57fe:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    5800:	9902      	ldr	r1, [sp, #8]
    5802:	f001 f957 	bl	6ab4 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    5806:	2300      	movs	r3, #0
    5808:	4621      	mov	r1, r4
    580a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    580e:	4638      	mov	r0, r7
    5810:	f7ff fe62 	bl	54d8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    5814:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    5818:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    581c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    5820:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    5824:	3320      	adds	r3, #32
	} while (location < end_addr);
    5826:	429c      	cmp	r4, r3
    5828:	d8fa      	bhi.n	5820 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    582a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    582e:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    5832:	2004      	movs	r0, #4
    5834:	4639      	mov	r1, r7
    5836:	f7ff fe67 	bl	5508 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    583a:	4b22      	ldr	r3, [pc, #136]	; (58c4 <usb_serial_write.part.1+0x15c>)
    583c:	4a21      	ldr	r2, [pc, #132]	; (58c4 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    583e:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    5840:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    5842:	4824      	ldr	r0, [pc, #144]	; (58d4 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    5844:	3301      	adds	r3, #1
    5846:	b2db      	uxtb	r3, r3
    5848:	2b03      	cmp	r3, #3
    584a:	bf88      	it	hi
    584c:	2300      	movhi	r3, #0
    584e:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    5850:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    5854:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    5856:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    585a:	4413      	add	r3, r2
    585c:	9300      	str	r3, [sp, #0]
			data += tx_available;
    585e:	9b02      	ldr	r3, [sp, #8]
    5860:	4413      	add	r3, r2
    5862:	9302      	str	r3, [sp, #8]
    5864:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    5866:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    586a:	9901      	ldr	r1, [sp, #4]
    586c:	1a8a      	subs	r2, r1, r2
    586e:	9201      	str	r2, [sp, #4]
    5870:	d18f      	bne.n	5792 <usb_serial_write.part.1+0x2a>
    5872:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    5874:	b005      	add	sp, #20
    5876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    587a:	4a12      	ldr	r2, [pc, #72]	; (58c4 <usb_serial_write.part.1+0x15c>)
    587c:	7814      	ldrb	r4, [r2, #0]
    587e:	461a      	mov	r2, r3
    5880:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    5884:	e7b4      	b.n	57f0 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    5886:	9c01      	ldr	r4, [sp, #4]
    5888:	9902      	ldr	r1, [sp, #8]
    588a:	4622      	mov	r2, r4
    588c:	9303      	str	r3, [sp, #12]
    588e:	f001 f911 	bl	6ab4 <memcpy>
			tx_available -= size;
    5892:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    5894:	4a0f      	ldr	r2, [pc, #60]	; (58d4 <usb_serial_write.part.1+0x16c>)
    5896:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    589a:	1b1b      	subs	r3, r3, r4
    589c:	f8a8 3000 	strh.w	r3, [r8]
    58a0:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    58a2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    58a6:	4618      	mov	r0, r3
    58a8:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    58aa:	b005      	add	sp, #20
    58ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    58b0:	2301      	movs	r3, #1
				return sent;
    58b2:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    58b4:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    58b6:	b005      	add	sp, #20
    58b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    58bc:	9801      	ldr	r0, [sp, #4]
    58be:	e7d9      	b.n	5874 <usb_serial_write.part.1+0x10c>
    58c0:	200021a0 	.word	0x200021a0
    58c4:	20002207 	.word	0x20002207
    58c8:	20002360 	.word	0x20002360
    58cc:	20002345 	.word	0x20002345
    58d0:	20201060 	.word	0x20201060
    58d4:	402e0000 	.word	0x402e0000
    58d8:	20002346 	.word	0x20002346
    58dc:	200021f0 	.word	0x200021f0
    58e0:	e000ef70 	.word	0xe000ef70

000058e4 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    58e4:	4770      	bx	lr
    58e6:	bf00      	nop

000058e8 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    58e8:	4b31      	ldr	r3, [pc, #196]	; (59b0 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    58ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    58ee:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    58f0:	4f30      	ldr	r7, [pc, #192]	; (59b4 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    58f2:	2b00      	cmp	r3, #0
    58f4:	d054      	beq.n	59a0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    58f6:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    58fa:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 59e8 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    58fe:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    5900:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    5904:	2100      	movs	r1, #0
    5906:	2280      	movs	r2, #128	; 0x80
    5908:	482b      	ldr	r0, [pc, #172]	; (59b8 <usb_serial_configure+0xd0>)
	tx_head = 0;
    590a:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    590c:	4e2b      	ldr	r6, [pc, #172]	; (59bc <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    590e:	f002 ff33 	bl	8778 <memset>
	tx_head = 0;
    5912:	4c2b      	ldr	r4, [pc, #172]	; (59c0 <usb_serial_configure+0xd8>)
	tx_available = 0;
    5914:	4b2b      	ldr	r3, [pc, #172]	; (59c4 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    5916:	4629      	mov	r1, r5
    5918:	f44f 7280 	mov.w	r2, #256	; 0x100
    591c:	482a      	ldr	r0, [pc, #168]	; (59c8 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    591e:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    5920:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    5922:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    5924:	f002 ff28 	bl	8778 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    5928:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    592a:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    592c:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    592e:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    5930:	60b5      	str	r5, [r6, #8]
    5932:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    5934:	4925      	ldr	r1, [pc, #148]	; (59cc <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    5936:	4e26      	ldr	r6, [pc, #152]	; (59d0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    5938:	4826      	ldr	r0, [pc, #152]	; (59d4 <usb_serial_configure+0xec>)
	rx_available = 0;
    593a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 59ec <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    593e:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    5940:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    5942:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    5944:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    5946:	6035      	str	r5, [r6, #0]
    5948:	6075      	str	r5, [r6, #4]
    594a:	60b5      	str	r5, [r6, #8]
    594c:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    594e:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    5952:	f7ff fd8d 	bl	5470 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    5956:	f8b8 1000 	ldrh.w	r1, [r8]
    595a:	462a      	mov	r2, r5
    595c:	4b1e      	ldr	r3, [pc, #120]	; (59d8 <usb_serial_configure+0xf0>)
    595e:	2003      	movs	r0, #3
    5960:	f7ff fd54 	bl	540c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    5964:	462b      	mov	r3, r5
    5966:	8839      	ldrh	r1, [r7, #0]
    5968:	2201      	movs	r2, #1
    596a:	2004      	movs	r0, #4
    596c:	f7ff fd80 	bl	5470 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    5970:	4620      	mov	r0, r4
    5972:	3401      	adds	r4, #1
    5974:	f7ff fe1c 	bl	55b0 <rx_queue_transfer>
    5978:	2c08      	cmp	r4, #8
    597a:	d1f9      	bne.n	5970 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    597c:	4b17      	ldr	r3, [pc, #92]	; (59dc <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    597e:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    5980:	4817      	ldr	r0, [pc, #92]	; (59e0 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    5982:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    5984:	4c17      	ldr	r4, [pc, #92]	; (59e4 <usb_serial_configure+0xfc>)
    5986:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    5988:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    598c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    5990:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    5994:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    5998:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    599c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    59a0:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    59a2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 59e8 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    59a6:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    59a8:	f8a8 3000 	strh.w	r3, [r8]
    59ac:	e7aa      	b.n	5904 <usb_serial_configure+0x1c>
    59ae:	bf00      	nop
    59b0:	200021c8 	.word	0x200021c8
    59b4:	20002204 	.word	0x20002204
    59b8:	20002360 	.word	0x20002360
    59bc:	20002330 	.word	0x20002330
    59c0:	20002207 	.word	0x20002207
    59c4:	20002346 	.word	0x20002346
    59c8:	20002220 	.word	0x20002220
    59cc:	20002344 	.word	0x20002344
    59d0:	200021f4 	.word	0x200021f4
    59d4:	20002320 	.word	0x20002320
    59d8:	0000561d 	.word	0x0000561d
    59dc:	402e0000 	.word	0x402e0000
    59e0:	200021b8 	.word	0x200021b8
    59e4:	000056d1 	.word	0x000056d1
    59e8:	2000232e 	.word	0x2000232e
    59ec:	20002340 	.word	0x20002340

000059f0 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    59f0:	4b31      	ldr	r3, [pc, #196]	; (5ab8 <usb_serial_read+0xc8>)
    59f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    59f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    59fa:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    59fc:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    59fe:	4b2f      	ldr	r3, [pc, #188]	; (5abc <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    5a00:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    5a02:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    5a04:	2900      	cmp	r1, #0
    5a06:	d053      	beq.n	5ab0 <usb_serial_read+0xc0>
    5a08:	4b2d      	ldr	r3, [pc, #180]	; (5ac0 <usb_serial_read+0xd0>)
    5a0a:	b2e4      	uxtb	r4, r4
    5a0c:	781b      	ldrb	r3, [r3, #0]
    5a0e:	429c      	cmp	r4, r3
    5a10:	d050      	beq.n	5ab4 <usb_serial_read+0xc4>
    5a12:	4682      	mov	sl, r0
    5a14:	2700      	movs	r7, #0
    5a16:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 5ad8 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    5a1a:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    5a1c:	4b29      	ldr	r3, [pc, #164]	; (5ac4 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    5a1e:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5a22:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    5a24:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    5a26:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    5a28:	4b27      	ldr	r3, [pc, #156]	; (5ac8 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    5a2a:	bf28      	it	cs
    5a2c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    5a2e:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    5a30:	4b24      	ldr	r3, [pc, #144]	; (5ac4 <usb_serial_read+0xd4>)
    5a32:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    5a36:	4b25      	ldr	r3, [pc, #148]	; (5acc <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5a38:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    5a3c:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5a40:	4b23      	ldr	r3, [pc, #140]	; (5ad0 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    5a42:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5a46:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    5a48:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5a4a:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    5a4c:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    5a4e:	d219      	bcs.n	5a84 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    5a50:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    5a54:	4642      	mov	r2, r8
    5a56:	4419      	add	r1, r3
    5a58:	f001 f82c 	bl	6ab4 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    5a5c:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    5a5e:	f8db 1000 	ldr.w	r1, [fp]
    5a62:	4648      	mov	r0, r9
			rx_index[i] += len;
    5a64:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    5a68:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    5a6c:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    5a6e:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    5a72:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    5a76:	4b17      	ldr	r3, [pc, #92]	; (5ad4 <usb_serial_read+0xe4>)
    5a78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5a7c:	601a      	str	r2, [r3, #0]
	return count;
}
    5a7e:	b003      	add	sp, #12
    5a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5a84:	f001 f816 	bl	6ab4 <memcpy>
			p += avail;
			rx_available -= avail;
    5a88:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    5a8c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    5a8e:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    5a90:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    5a92:	44b2      	add	sl, r6
			rx_available -= avail;
    5a94:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    5a98:	4a08      	ldr	r2, [pc, #32]	; (5abc <usb_serial_read+0xcc>)
    5a9a:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    5a9c:	f7ff fd88 	bl	55b0 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    5aa0:	45b9      	cmp	r9, r7
    5aa2:	d903      	bls.n	5aac <usb_serial_read+0xbc>
    5aa4:	4b06      	ldr	r3, [pc, #24]	; (5ac0 <usb_serial_read+0xd0>)
    5aa6:	781b      	ldrb	r3, [r3, #0]
    5aa8:	429c      	cmp	r4, r3
    5aaa:	d1b6      	bne.n	5a1a <usb_serial_read+0x2a>
    5aac:	4638      	mov	r0, r7
    5aae:	e7e2      	b.n	5a76 <usb_serial_read+0x86>
    5ab0:	4608      	mov	r0, r1
    5ab2:	e7e0      	b.n	5a76 <usb_serial_read+0x86>
    5ab4:	2000      	movs	r0, #0
    5ab6:	e7de      	b.n	5a76 <usb_serial_read+0x86>
    5ab8:	e000e18c 	.word	0xe000e18c
    5abc:	20002320 	.word	0x20002320
    5ac0:	20002344 	.word	0x20002344
    5ac4:	200021f4 	.word	0x200021f4
    5ac8:	20002324 	.word	0x20002324
    5acc:	20002330 	.word	0x20002330
    5ad0:	20200060 	.word	0x20200060
    5ad4:	e000e10c 	.word	0xe000e10c
    5ad8:	20002340 	.word	0x20002340

00005adc <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    5adc:	4b0b      	ldr	r3, [pc, #44]	; (5b0c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    5ade:	4a0c      	ldr	r2, [pc, #48]	; (5b10 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    5ae0:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    5ae2:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    5ae4:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    5ae6:	4293      	cmp	r3, r2
    5ae8:	d00d      	beq.n	5b06 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    5aea:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    5aec:	4809      	ldr	r0, [pc, #36]	; (5b14 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    5aee:	4a0a      	ldr	r2, [pc, #40]	; (5b18 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    5af0:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    5af2:	490a      	ldr	r1, [pc, #40]	; (5b1c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    5af4:	bf28      	it	cs
    5af6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    5af8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    5afa:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    5afe:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    5b02:	5c58      	ldrb	r0, [r3, r1]
    5b04:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    5b06:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    5b0a:	4770      	bx	lr
    5b0c:	20002320 	.word	0x20002320
    5b10:	20002344 	.word	0x20002344
    5b14:	20002324 	.word	0x20002324
    5b18:	20200060 	.word	0x20200060
    5b1c:	200021f4 	.word	0x200021f4

00005b20 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    5b20:	4b01      	ldr	r3, [pc, #4]	; (5b28 <usb_serial_available+0x8>)
    5b22:	6818      	ldr	r0, [r3, #0]
}
    5b24:	4770      	bx	lr
    5b26:	bf00      	nop
    5b28:	20002340 	.word	0x20002340

00005b2c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    5b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    5b30:	4e15      	ldr	r6, [pc, #84]	; (5b88 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    5b32:	4d16      	ldr	r5, [pc, #88]	; (5b8c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    5b34:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    5b36:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    5b38:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    5b3a:	429c      	cmp	r4, r3
    5b3c:	d021      	beq.n	5b82 <usb_serial_flush_input+0x56>
    5b3e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 5b94 <usb_serial_flush_input+0x68>
    5b42:	f8df b054 	ldr.w	fp, [pc, #84]	; 5b98 <usb_serial_flush_input+0x6c>
    5b46:	f8df 8054 	ldr.w	r8, [pc, #84]	; 5b9c <usb_serial_flush_input+0x70>
    5b4a:	4f11      	ldr	r7, [pc, #68]	; (5b90 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    5b4c:	3401      	adds	r4, #1
    5b4e:	2c08      	cmp	r4, #8
    5b50:	fa5f fa84 	uxtb.w	sl, r4
    5b54:	d901      	bls.n	5b5a <usb_serial_flush_input+0x2e>
    5b56:	2400      	movs	r4, #0
    5b58:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    5b5a:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    5b5e:	f8db 2000 	ldr.w	r2, [fp]
    5b62:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    5b66:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    5b68:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    5b6c:	1a5b      	subs	r3, r3, r1
    5b6e:	1ad3      	subs	r3, r2, r3
    5b70:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    5b74:	f7ff fd1c 	bl	55b0 <rx_queue_transfer>
		rx_tail = tail;
    5b78:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    5b7c:	782b      	ldrb	r3, [r5, #0]
    5b7e:	429c      	cmp	r4, r3
    5b80:	d1e4      	bne.n	5b4c <usb_serial_flush_input+0x20>
    5b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b86:	bf00      	nop
    5b88:	20002320 	.word	0x20002320
    5b8c:	20002344 	.word	0x20002344
    5b90:	200021f4 	.word	0x200021f4
    5b94:	20002324 	.word	0x20002324
    5b98:	20002340 	.word	0x20002340
    5b9c:	20002330 	.word	0x20002330

00005ba0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    5ba0:	b500      	push	{lr}
    5ba2:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    5ba4:	2101      	movs	r1, #1
    5ba6:	f10d 0007 	add.w	r0, sp, #7
    5baa:	f7ff ff21 	bl	59f0 <usb_serial_read>
    5bae:	b120      	cbz	r0, 5bba <usb_serial_getchar+0x1a>
    5bb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    5bb4:	b003      	add	sp, #12
    5bb6:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    5bba:	f04f 30ff 	mov.w	r0, #4294967295
    5bbe:	e7f9      	b.n	5bb4 <usb_serial_getchar+0x14>

00005bc0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    5bc0:	4b09      	ldr	r3, [pc, #36]	; (5be8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5bc2:	b500      	push	{lr}
    5bc4:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    5bc6:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5bc8:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    5bcc:	b923      	cbnz	r3, 5bd8 <usb_serial_putchar+0x18>
    5bce:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    5bd2:	b003      	add	sp, #12
    5bd4:	f85d fb04 	ldr.w	pc, [sp], #4
    5bd8:	2101      	movs	r1, #1
    5bda:	f10d 0007 	add.w	r0, sp, #7
    5bde:	f7ff fdc3 	bl	5768 <usb_serial_write.part.1>
    5be2:	b003      	add	sp, #12
    5be4:	f85d fb04 	ldr.w	pc, [sp], #4
    5be8:	200021f0 	.word	0x200021f0

00005bec <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    5bec:	4b04      	ldr	r3, [pc, #16]	; (5c00 <usb_serial_write+0x14>)
    5bee:	781b      	ldrb	r3, [r3, #0]
    5bf0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5bf4:	b10b      	cbz	r3, 5bfa <usb_serial_write+0xe>
    5bf6:	f7ff bdb7 	b.w	5768 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    5bfa:	4610      	mov	r0, r2
    5bfc:	4770      	bx	lr
    5bfe:	bf00      	nop
    5c00:	200021f0 	.word	0x200021f0

00005c04 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    5c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    5c08:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    5c0a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 5c4c <usb_serial_write_buffer_free+0x48>
    5c0e:	2301      	movs	r3, #1
    5c10:	4d0c      	ldr	r5, [pc, #48]	; (5c44 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    5c12:	4627      	mov	r7, r4
    5c14:	4e0c      	ldr	r6, [pc, #48]	; (5c48 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    5c16:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    5c1a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    5c1c:	4628      	mov	r0, r5
    5c1e:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    5c20:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    5c22:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    5c26:	d005      	beq.n	5c34 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    5c28:	f7ff fc94 	bl	5554 <usb_transfer_status>
    5c2c:	0603      	lsls	r3, r0, #24
    5c2e:	bf58      	it	pl
    5c30:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    5c34:	2c04      	cmp	r4, #4
    5c36:	d1f0      	bne.n	5c1a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    5c38:	2300      	movs	r3, #0
	return sum;
}
    5c3a:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    5c3c:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    5c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c44:	20002360 	.word	0x20002360
    5c48:	20002207 	.word	0x20002207
    5c4c:	20002206 	.word	0x20002206

00005c50 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    5c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    5c54:	4b1f      	ldr	r3, [pc, #124]	; (5cd4 <usb_serial_flush_output+0x84>)
    5c56:	781b      	ldrb	r3, [r3, #0]
    5c58:	b113      	cbz	r3, 5c60 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    5c5a:	4d1f      	ldr	r5, [pc, #124]	; (5cd8 <usb_serial_flush_output+0x88>)
    5c5c:	882a      	ldrh	r2, [r5, #0]
    5c5e:	b90a      	cbnz	r2, 5c64 <usb_serial_flush_output+0x14>
    5c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    5c64:	f8df 8084 	ldr.w	r8, [pc, #132]	; 5cec <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    5c68:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    5c6c:	4e1b      	ldr	r6, [pc, #108]	; (5cdc <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    5c6e:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    5c72:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5c76:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5c78:	4c19      	ldr	r4, [pc, #100]	; (5ce0 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5c7a:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    5c7c:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    5c80:	4f18      	ldr	r7, [pc, #96]	; (5ce4 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5c82:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5c86:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    5c88:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5c8c:	4621      	mov	r1, r4
    5c8e:	f7ff fc23 	bl	54d8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    5c92:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    5c96:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    5c9a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    5c9e:	4b12      	ldr	r3, [pc, #72]	; (5ce8 <usb_serial_flush_output+0x98>)
    5ca0:	6019      	str	r1, [r3, #0]
		location += 32;
    5ca2:	3120      	adds	r1, #32
	} while (location < end_addr);
    5ca4:	428a      	cmp	r2, r1
    5ca6:	d8fb      	bhi.n	5ca0 <usb_serial_flush_output+0x50>
	asm("dsb");
    5ca8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5cac:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    5cb0:	2004      	movs	r0, #4
    5cb2:	4631      	mov	r1, r6
    5cb4:	f7ff fc28 	bl	5508 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    5cb8:	f898 3000 	ldrb.w	r3, [r8]
    5cbc:	4a0b      	ldr	r2, [pc, #44]	; (5cec <usb_serial_flush_output+0x9c>)
    5cbe:	3301      	adds	r3, #1
    5cc0:	b2db      	uxtb	r3, r3
    5cc2:	2b03      	cmp	r3, #3
    5cc4:	bf88      	it	hi
    5cc6:	2300      	movhi	r3, #0
    5cc8:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    5cca:	2300      	movs	r3, #0
    5ccc:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    5cce:	703b      	strb	r3, [r7, #0]
    5cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5cd4:	200021f0 	.word	0x200021f0
    5cd8:	20002346 	.word	0x20002346
    5cdc:	20002360 	.word	0x20002360
    5ce0:	20201060 	.word	0x20201060
    5ce4:	20002206 	.word	0x20002206
    5ce8:	e000ef70 	.word	0xe000ef70
    5cec:	20002207 	.word	0x20002207

00005cf0 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    5cf0:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5cf2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5cf6:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    5cf8:	7f43      	ldrb	r3, [r0, #29]
    5cfa:	b933      	cbnz	r3, 5d0a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    5cfc:	7f01      	ldrb	r1, [r0, #28]
    5cfe:	2901      	cmp	r1, #1
    5d00:	d008      	beq.n	5d14 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    5d02:	2903      	cmp	r1, #3
    5d04:	d010      	beq.n	5d28 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    5d06:	2301      	movs	r3, #1
    5d08:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5d0a:	b902      	cbnz	r2, 5d0e <EventResponder::triggerEventNotImmediate()+0x1e>
    5d0c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    5d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5d12:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    5d14:	4c11      	ldr	r4, [pc, #68]	; (5d5c <EventResponder::triggerEventNotImmediate()+0x6c>)
    5d16:	6821      	ldr	r1, [r4, #0]
    5d18:	b1a1      	cbz	r1, 5d44 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    5d1a:	4911      	ldr	r1, [pc, #68]	; (5d60 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    5d1c:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    5d1e:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    5d20:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    5d22:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    5d24:	6158      	str	r0, [r3, #20]
    5d26:	e7ee      	b.n	5d06 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    5d28:	4c0e      	ldr	r4, [pc, #56]	; (5d64 <EventResponder::triggerEventNotImmediate()+0x74>)
    5d2a:	6821      	ldr	r1, [r4, #0]
    5d2c:	b181      	cbz	r1, 5d50 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    5d2e:	490e      	ldr	r1, [pc, #56]	; (5d68 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    5d30:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    5d32:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    5d34:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    5d36:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    5d38:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    5d3a:	4b0c      	ldr	r3, [pc, #48]	; (5d6c <EventResponder::triggerEventNotImmediate()+0x7c>)
    5d3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5d40:	6019      	str	r1, [r3, #0]
    5d42:	e7e0      	b.n	5d06 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    5d44:	4b06      	ldr	r3, [pc, #24]	; (5d60 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    5d46:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5d48:	6181      	str	r1, [r0, #24]
				firstYield = this;
    5d4a:	6020      	str	r0, [r4, #0]
				lastYield = this;
    5d4c:	6018      	str	r0, [r3, #0]
    5d4e:	e7da      	b.n	5d06 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    5d50:	4b05      	ldr	r3, [pc, #20]	; (5d68 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    5d52:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5d54:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    5d56:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    5d58:	6018      	str	r0, [r3, #0]
    5d5a:	e7ee      	b.n	5d3a <EventResponder::triggerEventNotImmediate()+0x4a>
    5d5c:	200023ec 	.word	0x200023ec
    5d60:	200023e8 	.word	0x200023e8
    5d64:	200023e0 	.word	0x200023e0
    5d68:	200023e4 	.word	0x200023e4
    5d6c:	e000ed04 	.word	0xe000ed04

00005d70 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    5d70:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5d72:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    5d76:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5d78:	4c0c      	ldr	r4, [pc, #48]	; (5dac <EventResponder::runFromInterrupt()+0x3c>)
    5d7a:	6823      	ldr	r3, [r4, #0]
		if (first) {
    5d7c:	b18b      	cbz	r3, 5da2 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5d7e:	4e0c      	ldr	r6, [pc, #48]	; (5db0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    5d80:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    5d82:	695a      	ldr	r2, [r3, #20]
    5d84:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    5d86:	b17a      	cbz	r2, 5da8 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    5d88:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5d8a:	b901      	cbnz	r1, 5d8e <EventResponder::runFromInterrupt()+0x1e>
    5d8c:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    5d8e:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    5d90:	4618      	mov	r0, r3
    5d92:	689b      	ldr	r3, [r3, #8]
    5d94:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5d96:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    5d9a:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5d9c:	6823      	ldr	r3, [r4, #0]
		if (first) {
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d1ef      	bne.n	5d82 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5da2:	b901      	cbnz	r1, 5da6 <EventResponder::runFromInterrupt()+0x36>
    5da4:	b662      	cpsie	i
    5da6:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5da8:	6032      	str	r2, [r6, #0]
    5daa:	e7ee      	b.n	5d8a <EventResponder::runFromInterrupt()+0x1a>
    5dac:	200023e0 	.word	0x200023e0
    5db0:	200023e4 	.word	0x200023e4

00005db4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    5db4:	f7ff bfdc 	b.w	5d70 <EventResponder::runFromInterrupt()>

00005db8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    5db8:	4a04      	ldr	r2, [pc, #16]	; (5dcc <systick_isr+0x14>)
    5dba:	4b05      	ldr	r3, [pc, #20]	; (5dd0 <systick_isr+0x18>)
    5dbc:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    5dbe:	4a05      	ldr	r2, [pc, #20]	; (5dd4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    5dc0:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    5dc2:	6813      	ldr	r3, [r2, #0]
    5dc4:	3301      	adds	r3, #1
    5dc6:	6013      	str	r3, [r2, #0]
    5dc8:	4770      	bx	lr
    5dca:	bf00      	nop
    5dcc:	e0001004 	.word	0xe0001004
    5dd0:	20002198 	.word	0x20002198
    5dd4:	200021a0 	.word	0x200021a0

00005dd8 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    5dd8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    5ddc:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    5de0:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    5de2:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    5de4:	4293      	cmp	r3, r2
    5de6:	d202      	bcs.n	5dee <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    5de8:	1e50      	subs	r0, r2, #1
    5dea:	1ac0      	subs	r0, r0, r3
}
    5dec:	4770      	bx	lr
{
	uint32_t head, tail;

	head = tx_buffer_head_;
	tail = tx_buffer_tail_;
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    5dee:	6b40      	ldr	r0, [r0, #52]	; 0x34
    5df0:	3801      	subs	r0, #1
    5df2:	4410      	add	r0, r2
    5df4:	1ac0      	subs	r0, r0, r3
    5df6:	4770      	bx	lr

00005df8 <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    5df8:	b672      	cpsid	i
	head = rx_buffer_head_;
    5dfa:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    5dfe:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
	head = rx_buffer_head_;
    5e02:	b299      	uxth	r1, r3
	tail = rx_buffer_tail_;
    5e04:	b293      	uxth	r3, r2
	int avail;
	if (head >= tail) avail = head - tail;
    5e06:	4299      	cmp	r1, r3
    5e08:	d201      	bcs.n	5e0e <HardwareSerial::available()+0x16>
	else avail = rx_buffer_total_size_ + head - tail;	
    5e0a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    5e0c:	4411      	add	r1, r2
	avail += (port->WATER >> 24) & 0x7;
    5e0e:	6902      	ldr	r2, [r0, #16]
	__disable_irq();
	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	int avail;
	if (head >= tail) avail = head - tail;
	else avail = rx_buffer_total_size_ + head - tail;	
    5e10:	1acb      	subs	r3, r1, r3
	avail += (port->WATER >> 24) & 0x7;
    5e12:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    5e14:	f3c0 6002 	ubfx	r0, r0, #24, #3
    5e18:	4418      	add	r0, r3
	__enable_irq();
    5e1a:	b662      	cpsie	i
	return avail;
}
    5e1c:	4770      	bx	lr
    5e1e:	bf00      	nop

00005e20 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    5e20:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    5e24:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    5e28:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    5e2a:	b29b      	uxth	r3, r3
	if (head == tail) {
    5e2c:	429a      	cmp	r2, r3
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}

int HardwareSerial::read(void)
{
    5e2e:	b470      	push	{r4, r5, r6}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) {
    5e30:	d028      	beq.n	5e84 <HardwareSerial::read()+0x64>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    5e32:	3301      	adds	r3, #1
    5e34:	6b84      	ldr	r4, [r0, #56]	; 0x38
    5e36:	42a3      	cmp	r3, r4
    5e38:	d217      	bcs.n	5e6a <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    5e3a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    5e3c:	b29e      	uxth	r6, r3
    5e3e:	428b      	cmp	r3, r1
    5e40:	d218      	bcs.n	5e74 <HardwareSerial::read()+0x54>
		c = rx_buffer_[tail];
    5e42:	6a01      	ldr	r1, [r0, #32]
    5e44:	5cc9      	ldrb	r1, [r1, r3]
    5e46:	b2c9      	uxtb	r1, r1
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
	if (rts_pin_baseReg_) {
    5e48:	6d85      	ldr	r5, [r0, #88]	; 0x58
	if (tail < rx_buffer_size_) {
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    5e4a:	f8a0 604c 	strh.w	r6, [r0, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    5e4e:	b1b5      	cbz	r5, 5e7e <HardwareSerial::read()+0x5e>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    5e50:	429a      	cmp	r2, r3
		else avail = rx_buffer_total_size_ + head - tail;
    5e52:	bf38      	it	cc
    5e54:	1912      	addcc	r2, r2, r4
    5e56:	1ad3      	subs	r3, r2, r3

		if (avail <= rts_low_watermark_) rts_assert();
    5e58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    5e5a:	4293      	cmp	r3, r2
    5e5c:	d80f      	bhi.n	5e7e <HardwareSerial::read()+0x5e>
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    5e5e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    5e60:	4608      	mov	r0, r1
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    5e62:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    5e66:	bc70      	pop	{r4, r5, r6}
    5e68:	4770      	bx	lr
    5e6a:	2600      	movs	r6, #0
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
    5e6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    5e6e:	4633      	mov	r3, r6
	if (tail < rx_buffer_size_) {
    5e70:	428b      	cmp	r3, r1
    5e72:	d3e6      	bcc.n	5e42 <HardwareSerial::read()+0x22>
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    5e74:	1a59      	subs	r1, r3, r1
    5e76:	6a45      	ldr	r5, [r0, #36]	; 0x24
    5e78:	5c69      	ldrb	r1, [r5, r1]
    5e7a:	b2c9      	uxtb	r1, r1
    5e7c:	e7e4      	b.n	5e48 <HardwareSerial::read()+0x28>
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    5e7e:	4608      	mov	r0, r1
}	
    5e80:	bc70      	pop	{r4, r5, r6}
    5e82:	4770      	bx	lr
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) {
		__disable_irq();
    5e84:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    5e86:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    5e8a:	b289      	uxth	r1, r1
		if (head == tail) {
    5e8c:	428a      	cmp	r2, r1
    5e8e:	d002      	beq.n	5e96 <HardwareSerial::read()+0x76>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
			}
			__enable_irq();
			return c;
		}
		__enable_irq();
    5e90:	b662      	cpsie	i
    5e92:	460a      	mov	r2, r1
    5e94:	e7cd      	b.n	5e32 <HardwareSerial::read()+0x12>
		__disable_irq();
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
		if (head == tail) {
			// Still empty Now check for stuff in FIFO Queue.
			c = -1;	// assume nothing to return
			if (port->WATER & 0x7000000) {
    5e96:	6903      	ldr	r3, [r0, #16]
    5e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5e9a:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    5e9e:	d004      	beq.n	5eaa <HardwareSerial::read()+0x8a>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    5ea0:	69d8      	ldr	r0, [r3, #28]
    5ea2:	f3c0 0009 	ubfx	r0, r0, #0, #10
			}
			__enable_irq();
    5ea6:	b662      	cpsie	i
			return c;
    5ea8:	e7dd      	b.n	5e66 <HardwareSerial::read()+0x46>
	if (head == tail) {
		__disable_irq();
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
		if (head == tail) {
			// Still empty Now check for stuff in FIFO Queue.
			c = -1;	// assume nothing to return
    5eaa:	f04f 30ff 	mov.w	r0, #4294967295
    5eae:	e7fa      	b.n	5ea6 <HardwareSerial::read()+0x86>

00005eb0 <HardwareSerial::flush()>:
	return c;
}	

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    5eb0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    5eb4:	b143      	cbz	r3, 5ec8 <HardwareSerial::flush()+0x18>
	}
	return c;
}	

void HardwareSerial::flush(void)
{
    5eb6:	b510      	push	{r4, lr}
    5eb8:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    5eba:	f000 fd83 	bl	69c4 <yield>
    5ebe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d1f9      	bne.n	5eba <HardwareSerial::flush()+0xa>
    5ec6:	bd10      	pop	{r4, pc}
    5ec8:	4770      	bx	lr
    5eca:	bf00      	nop

00005ecc <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    5ecc:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    5ed0:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    5ed4:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    5ed6:	b29b      	uxth	r3, r3
	if (head == tail) {
    5ed8:	429a      	cmp	r2, r3
    5eda:	d010      	beq.n	5efe <HardwareSerial::peek()+0x32>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    5edc:	3301      	adds	r3, #1
    5ede:	6b81      	ldr	r1, [r0, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    5ee0:	6b02      	ldr	r2, [r0, #48]	; 0x30
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    5ee2:	428b      	cmp	r3, r1
    5ee4:	bf28      	it	cs
    5ee6:	2300      	movcs	r3, #0
	if (tail < rx_buffer_size_) {
    5ee8:	4293      	cmp	r3, r2
    5eea:	d304      	bcc.n	5ef6 <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    5eec:	1a9b      	subs	r3, r3, r2
    5eee:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5ef0:	5cd0      	ldrb	r0, [r2, r3]
    5ef2:	b2c0      	uxtb	r0, r0
    5ef4:	4770      	bx	lr
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
    5ef6:	6a02      	ldr	r2, [r0, #32]
    5ef8:	5cd0      	ldrb	r0, [r2, r3]
    5efa:	b2c0      	uxtb	r0, r0
    5efc:	4770      	bx	lr
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) {
		__disable_irq();
    5efe:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    5f00:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    5f04:	b289      	uxth	r1, r1
		if (head == tail) {
    5f06:	428a      	cmp	r2, r1
    5f08:	d001      	beq.n	5f0e <HardwareSerial::peek()+0x42>
				rx_buffer_[1] = c;
			}
			__enable_irq();
			return c;
		}
		__enable_irq();
    5f0a:	b662      	cpsie	i
    5f0c:	e7e6      	b.n	5edc <HardwareSerial::peek()+0x10>
		__disable_irq();
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
		if (head == tail) {
			// Still empty Now check for stuff in FIFO Queue.
			int c = -1;	// assume nothing to return
			if (port->WATER & 0x7000000) {
    5f0e:	6903      	ldr	r3, [r0, #16]
    5f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5f12:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    5f16:	d011      	beq.n	5f3c <HardwareSerial::peek()+0x70>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    5f18:	69db      	ldr	r3, [r3, #28]
				// But we don't want to throw it away...
				// since queue is empty, just going to reset to front of queue...
				rx_buffer_head_ = 1;
				rx_buffer_tail_ = 0; 
    5f1a:	2100      	movs	r1, #0
				rx_buffer_[1] = c;
    5f1c:	6a02      	ldr	r2, [r0, #32]
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
		if (head == tail) {
			// Still empty Now check for stuff in FIFO Queue.
			int c = -1;	// assume nothing to return
			if (port->WATER & 0x7000000) {
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    5f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
		tx_buffer_total_size_ = tx_buffer_total_size_;
	} 
}

int HardwareSerial::peek(void)
{
    5f22:	b410      	push	{r4}
			int c = -1;	// assume nothing to return
			if (port->WATER & 0x7000000) {
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
				// But we don't want to throw it away...
				// since queue is empty, just going to reset to front of queue...
				rx_buffer_head_ = 1;
    5f24:	2401      	movs	r4, #1
    5f26:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
				rx_buffer_tail_ = 0; 
    5f2a:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
				rx_buffer_[1] = c;
    5f2e:	b2d9      	uxtb	r1, r3
    5f30:	7051      	strb	r1, [r2, #1]
			}
			__enable_irq();
    5f32:	b662      	cpsie	i
    5f34:	4618      	mov	r0, r3
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}
    5f36:	f85d 4b04 	ldr.w	r4, [sp], #4
    5f3a:	4770      	bx	lr
	if (head == tail) {
		__disable_irq();
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
		if (head == tail) {
			// Still empty Now check for stuff in FIFO Queue.
			int c = -1;	// assume nothing to return
    5f3c:	f04f 33ff 	mov.w	r3, #4294967295
				// since queue is empty, just going to reset to front of queue...
				rx_buffer_head_ = 1;
				rx_buffer_tail_ = 0; 
				rx_buffer_[1] = c;
			}
			__enable_irq();
    5f40:	b662      	cpsie	i
    5f42:	4618      	mov	r0, r3
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}
    5f44:	4770      	bx	lr
    5f46:	bf00      	nop

00005f48 <nvic_execution_priority()>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    5f48:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    5f4c:	b9b8      	cbnz	r0, 5f7e <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5f4e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    5f52:	b94b      	cbnz	r3, 5f68 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5f54:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    5f58:	b93a      	cbnz	r2, 5f6a <nvic_execution_priority()+0x22>
#define CTRL_TX_INACTIVE	CTRL_ENABLE 

// Copied from T3.x - probably should move to other location.
int nvic_execution_priority(void)
{
	uint32_t priority=256;
    5f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    5f5e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    5f62:	b150      	cbz	r0, 5f7a <nvic_execution_priority()+0x32>
    5f64:	4298      	cmp	r0, r3
    5f66:	d208      	bcs.n	5f7a <nvic_execution_priority()+0x32>
	return priority;
}
    5f68:	4770      	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    5f6a:	2a0f      	cmp	r2, #15
    5f6c:	d9f7      	bls.n	5f5e <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    5f6e:	4b05      	ldr	r3, [pc, #20]	; (5f84 <nvic_execution_priority()+0x3c>)
    5f70:	5cd3      	ldrb	r3, [r2, r3]
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    5f72:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    5f76:	2800      	cmp	r0, #0
    5f78:	d1f4      	bne.n	5f64 <nvic_execution_priority()+0x1c>
    5f7a:	4618      	mov	r0, r3
    5f7c:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    5f7e:	f04f 30ff 	mov.w	r0, #4294967295
    5f82:	e7f1      	b.n	5f68 <nvic_execution_priority()+0x20>
    5f84:	e000e3f0 	.word	0xe000e3f0

00005f88 <HardwareSerial::begin(unsigned long, unsigned short)>:


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    5f88:	ee07 1a90 	vmov	s15, r1
    5f8c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 61bc <HardwareSerial::begin(unsigned long, unsigned short)+0x234>
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    5f90:	2104      	movs	r1, #4
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
    5f92:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    5f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    5f9a:	ed9f 6a89 	vldr	s12, [pc, #548]	; 61c0 <HardwareSerial::begin(unsigned long, unsigned short)+0x238>
	return priority;
}


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
    5f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    5fa0:	eec7 5a27 	vdiv.f32	s11, s14, s15
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
    5fa4:	460e      	mov	r6, r1
void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
    5fa6:	2501      	movs	r5, #1
    5fa8:	f641 74ff 	movw	r4, #8191	; 0x1fff
    5fac:	e01d      	b.n	5fea <HardwareSerial::begin(unsigned long, unsigned short)+0x62>
    5fae:	42a3      	cmp	r3, r4
    5fb0:	bfa8      	it	ge
    5fb2:	4623      	movge	r3, r4
    5fb4:	ee07 3a90 	vmov	s15, r3
    5fb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	for (int osr=4; osr <= 32; osr++) {
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
		else if (divint > 8191) divint = 8191;
		float err = ((float)divint - div) / div;
    5fbc:	ee76 6ac7 	vsub.f32	s13, s13, s14
    5fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    5fc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5fcc:	bf48      	it	mi
    5fce:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    5fd2:	eef4 7ac6 	vcmpe.f32	s15, s12
    5fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5fda:	d803      	bhi.n	5fe4 <HardwareSerial::begin(unsigned long, unsigned short)+0x5c>
			besterr = err;
    5fdc:	eeb0 6a67 	vmov.f32	s12, s15
    5fe0:	460e      	mov	r6, r1
			bestdiv = divint;
    5fe2:	461d      	mov	r5, r3
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    5fe4:	3101      	adds	r1, #1
    5fe6:	2921      	cmp	r1, #33	; 0x21
    5fe8:	d011      	beq.n	600e <HardwareSerial::begin(unsigned long, unsigned short)+0x86>
		float div = base / (float)osr;
    5fea:	ee07 1a90 	vmov	s15, r1
    5fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5ff2:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    5ff6:	ee77 7a05 	vadd.f32	s15, s14, s10
    5ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5ffe:	ee17 3a90 	vmov	r3, s15
		if (divint < 1) divint = 1;
    6002:	2b00      	cmp	r3, #0
    6004:	dcd3      	bgt.n	5fae <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
    6006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    600a:	2301      	movs	r3, #1
    600c:	e7d6      	b.n	5fbc <HardwareSerial::begin(unsigned long, unsigned short)+0x34>
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    600e:	6943      	ldr	r3, [r0, #20]
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    6010:	2100      	movs	r1, #0
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    6012:	6b84      	ldr	r4, [r0, #56]	; 0x38
    6014:	f8b3 705c 	ldrh.w	r7, [r3, #92]	; 0x5c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    6018:	f8b3 e05e 	ldrh.w	lr, [r3, #94]	; 0x5e
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    601c:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    6020:	1be7      	subs	r7, r4, r7
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
    6022:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    6026:	ebce 0404 	rsb	r4, lr, r4
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
    602a:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    602e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;
    6032:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44

	hardware->ccm_register |= hardware->ccm_value;
    6036:	f8d3 e010 	ldr.w	lr, [r3, #16]
    603a:	6959      	ldr	r1, [r3, #20]
    603c:	f8de c000 	ldr.w	ip, [lr]
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    6040:	63c7      	str	r7, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    6042:	ea4c 0701 	orr.w	r7, ip, r1
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    6046:	6404      	str	r4, [r0, #64]	; 0x40

	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    6048:	495e      	ldr	r1, [pc, #376]	; (61c4 <HardwareSerial::begin(unsigned long, unsigned short)+0x23c>)
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    604a:	f8ce 7000 	str.w	r7, [lr]

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    604e:	7e04      	ldrb	r4, [r0, #24]
    6050:	4f5d      	ldr	r7, [pc, #372]	; (61c8 <HardwareSerial::begin(unsigned long, unsigned short)+0x240>)
    6052:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    6056:	7e24      	ldrb	r4, [r4, #24]
    6058:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    605c:	68a4      	ldr	r4, [r4, #8]
    605e:	6027      	str	r7, [r4, #0]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    6060:	7e04      	ldrb	r4, [r0, #24]
    6062:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    6066:	7e27      	ldrb	r7, [r4, #24]
    6068:	f8d4 e01c 	ldr.w	lr, [r4, #28]
    606c:	eb01 1407 	add.w	r4, r1, r7, lsl #4
    6070:	6864      	ldr	r4, [r4, #4]
    6072:	f8c4 e000 	str.w	lr, [r4]
    6076:	7e04      	ldrb	r4, [r0, #24]
    6078:	eb03 1404 	add.w	r4, r3, r4, lsl #4
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    607c:	6a27      	ldr	r7, [r4, #32]
    607e:	b10f      	cbz	r7, 6084 <HardwareSerial::begin(unsigned long, unsigned short)+0xfc>
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    6080:	6a64      	ldr	r4, [r4, #36]	; 0x24
    6082:	603c      	str	r4, [r7, #0]
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    6084:	7e44      	ldrb	r4, [r0, #25]
    6086:	27d9      	movs	r7, #217	; 0xd9
    6088:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    608c:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
    6090:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    6094:	68a4      	ldr	r4, [r4, #8]
    6096:	6027      	str	r7, [r4, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    6098:	7e44      	ldrb	r4, [r0, #25]
    609a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    609e:	f894 7038 	ldrb.w	r7, [r4, #56]	; 0x38
    60a2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    60a4:	eb01 1107 	add.w	r1, r1, r7, lsl #4
    60a8:	6849      	ldr	r1, [r1, #4]
    60aa:	600c      	str	r4, [r1, #0]
    60ac:	7e41      	ldrb	r1, [r0, #25]
    60ae:	eb03 1101 	add.w	r1, r3, r1, lsl #4

	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    60b2:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    60b4:	b10c      	cbz	r4, 60ba <HardwareSerial::begin(unsigned long, unsigned short)+0x132>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    60b6:	6c49      	ldr	r1, [r1, #68]	; 0x44
    60b8:	6021      	str	r1, [r4, #0]
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    60ba:	1e71      	subs	r1, r6, #1
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    60bc:	785c      	ldrb	r4, [r3, #1]
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    60be:	685f      	ldr	r7, [r3, #4]
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    60c0:	2e08      	cmp	r6, #8
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    60c2:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;
    60c6:	f04f 0600 	mov.w	r6, #0
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    60ca:	bfd8      	it	le
    60cc:	f44f 3e00 	movle.w	lr, #131072	; 0x20000
    60d0:	f104 0410 	add.w	r4, r4, #16
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    60d4:	f001 53f8 	and.w	r3, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    60d8:	bfc8      	it	gt
    60da:	46b6      	movgt	lr, r6
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    60dc:	6901      	ldr	r1, [r0, #16]
    60de:	431d      	orrs	r5, r3
    60e0:	4b3a      	ldr	r3, [pc, #232]	; (61cc <HardwareSerial::begin(unsigned long, unsigned short)+0x244>)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    60e2:	ea4e 0505 	orr.w	r5, lr, r5
    60e6:	610d      	str	r5, [r1, #16]
	port->PINCFG = 0;
    60e8:	60ce      	str	r6, [r1, #12]
    60ea:	f843 7024 	str.w	r7, [r3, r4, lsl #2]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    60ee:	6943      	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    60f0:	2401      	movs	r4, #1
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    60f2:	4937      	ldr	r1, [pc, #220]	; (61d0 <HardwareSerial::begin(unsigned long, unsigned short)+0x248>)
    60f4:	785d      	ldrb	r5, [r3, #1]
    60f6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
	NVIC_ENABLE_IRQ(hardware->irq);
    60fa:	4e36      	ldr	r6, [pc, #216]	; (61d4 <HardwareSerial::begin(unsigned long, unsigned short)+0x24c>)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    60fc:	546b      	strb	r3, [r5, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    60fe:	6945      	ldr	r5, [r0, #20]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    6100:	6901      	ldr	r1, [r0, #16]
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
    6102:	786b      	ldrb	r3, [r5, #1]
    6104:	f003 071f 	and.w	r7, r3, #31
    6108:	115b      	asrs	r3, r3, #5
    610a:	40bc      	lsls	r4, r7
    610c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    6110:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    6112:	089b      	lsrs	r3, r3, #2
    6114:	f003 031c 	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    6118:	2b0f      	cmp	r3, #15
    611a:	d84a      	bhi.n	61b2 <HardwareSerial::begin(unsigned long, unsigned short)+0x22a>
    611c:	105b      	asrs	r3, r3, #1
    611e:	f003 0303 	and.w	r3, r3, #3
    6122:	b2dc      	uxtb	r4, r3
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
    6124:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    6126:	009b      	lsls	r3, r3, #2
    6128:	f003 031c 	and.w	r3, r3, #28
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
    612c:	2b0f      	cmp	r3, #15
    612e:	d83d      	bhi.n	61ac <HardwareSerial::begin(unsigned long, unsigned short)+0x224>
    6130:	03db      	lsls	r3, r3, #15
    6132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    6136:	4323      	orrs	r3, r4
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    6138:	f002 0403 	and.w	r4, r2, #3
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    613c:	62cb      	str	r3, [r1, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    613e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    6140:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    6144:	628b      	str	r3, [r1, #40]	; 0x28
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    6146:	0753      	lsls	r3, r2, #29
    6148:	d435      	bmi.n	61b6 <HardwareSerial::begin(unsigned long, unsigned short)+0x22e>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    614a:	f444 1370 	orr.w	r3, r4, #3932160	; 0x3c0000
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    614e:	f002 040f 	and.w	r4, r2, #15
    6152:	2c04      	cmp	r4, #4
    6154:	bf08      	it	eq
    6156:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    615a:	0697      	lsls	r7, r2, #26
    615c:	bf48      	it	mi
    615e:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    6162:	0716      	lsls	r6, r2, #28

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// write out computed CTRL
	port->CTRL = ctrl;
    6164:	618b      	str	r3, [r1, #24]

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    6166:	d503      	bpl.n	6170 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e8>
    6168:	690b      	ldr	r3, [r1, #16]
    616a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    616e:	610b      	str	r3, [r1, #16]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    6170:	694b      	ldr	r3, [r1, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    6172:	06d4      	lsls	r4, r2, #27
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    6174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    6178:	bf48      	it	mi
    617a:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    617e:	614b      	str	r3, [r1, #20]

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    6180:	05d3      	lsls	r3, r2, #23
    6182:	d503      	bpl.n	618c <HardwareSerial::begin(unsigned long, unsigned short)+0x204>
    6184:	690b      	ldr	r3, [r1, #16]
    6186:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    618a:	610b      	str	r3, [r1, #16]

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    618c:	68eb      	ldr	r3, [r5, #12]
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	b95b      	cbnz	r3, 61aa <HardwareSerial::begin(unsigned long, unsigned short)+0x222>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    6192:	4c11      	ldr	r4, [pc, #68]	; (61d8 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    6194:	4a11      	ldr	r2, [pc, #68]	; (61dc <HardwareSerial::begin(unsigned long, unsigned short)+0x254>)
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    6196:	7821      	ldrb	r1, [r4, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    6198:	7813      	ldrb	r3, [r2, #0]
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    619a:	1c4e      	adds	r6, r1, #1
    619c:	4d10      	ldr	r5, [pc, #64]	; (61e0 <HardwareSerial::begin(unsigned long, unsigned short)+0x258>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    619e:	f043 0302 	orr.w	r3, r3, #2
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    61a2:	7026      	strb	r6, [r4, #0]
    61a4:	f845 0021 	str.w	r0, [r5, r1, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    61a8:	7013      	strb	r3, [r2, #0]
    61aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61ac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    61b0:	e7c1      	b.n	6136 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ae>
    61b2:	2403      	movs	r4, #3
    61b4:	e7b6      	b.n	6124 <HardwareSerial::begin(unsigned long, unsigned short)+0x19c>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    61b6:	4b0b      	ldr	r3, [pc, #44]	; (61e4 <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>)
    61b8:	4323      	orrs	r3, r4
    61ba:	e7c8      	b.n	614e <HardwareSerial::begin(unsigned long, unsigned short)+0x1c6>
    61bc:	4bb71b00 	.word	0x4bb71b00
    61c0:	60ad78ec 	.word	0x60ad78ec
    61c4:	200005cc 	.word	0x200005cc
    61c8:	0001f038 	.word	0x0001f038
    61cc:	20002800 	.word	0x20002800
    61d0:	e000e400 	.word	0xe000e400
    61d4:	e000e100 	.word	0xe000e100
    61d8:	20002414 	.word	0x20002414
    61dc:	200010f4 	.word	0x200010f4
    61e0:	200023f4 	.word	0x200023f4
    61e4:	003c0010 	.word	0x003c0010

000061e8 <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    61e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    61ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    61ec:	4604      	mov	r4, r0
    61ee:	460e      	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    61f0:	b113      	cbz	r3, 61f8 <HardwareSerial::write9bit(unsigned long)+0x10>
    61f2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    61f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	head = tx_buffer_head_;
    61f8:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    61fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
{
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
    61fe:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    6200:	3501      	adds	r5, #1
    6202:	429d      	cmp	r5, r3
    6204:	d249      	bcs.n	629a <HardwareSerial::write9bit(unsigned long)+0xb2>
    6206:	b2af      	uxth	r7, r5
	while (tx_buffer_tail_ == head) {
    6208:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    620c:	b29b      	uxth	r3, r3
    620e:	42ab      	cmp	r3, r5
    6210:	d120      	bne.n	6254 <HardwareSerial::write9bit(unsigned long)+0x6c>
		int priority = nvic_execution_priority();
    6212:	f7ff fe99 	bl	5f48 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    6216:	6963      	ldr	r3, [r4, #20]
    6218:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    621c:	4298      	cmp	r0, r3
    621e:	dc2d      	bgt.n	627c <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    6220:	6921      	ldr	r1, [r4, #16]
    6222:	694b      	ldr	r3, [r1, #20]
    6224:	021b      	lsls	r3, r3, #8
    6226:	d5ef      	bpl.n	6208 <HardwareSerial::write9bit(unsigned long)+0x20>
				uint32_t tail = tx_buffer_tail_;
    6228:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    622c:	6b62      	ldr	r2, [r4, #52]	; 0x34
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
    622e:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    6230:	3301      	adds	r3, #1
    6232:	4293      	cmp	r3, r2
    6234:	d227      	bcs.n	6286 <HardwareSerial::write9bit(unsigned long)+0x9e>
				if (tail < tx_buffer_size_) {
    6236:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6238:	b298      	uxth	r0, r3
    623a:	4293      	cmp	r3, r2
    623c:	d228      	bcs.n	6290 <HardwareSerial::write9bit(unsigned long)+0xa8>
					n = tx_buffer_[tail];
    623e:	69e2      	ldr	r2, [r4, #28]
    6240:	5cd3      	ldrb	r3, [r2, r3]
    6242:	b2db      	uxtb	r3, r3
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
    6244:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    6246:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
    624a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    624e:	b29b      	uxth	r3, r3
    6250:	42ab      	cmp	r3, r5
    6252:	d0de      	beq.n	6212 <HardwareSerial::write9bit(unsigned long)+0x2a>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    6254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6256:	429d      	cmp	r5, r3
    6258:	d322      	bcc.n	62a0 <HardwareSerial::write9bit(unsigned long)+0xb8>
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    625a:	1aed      	subs	r5, r5, r3
    625c:	b2f6      	uxtb	r6, r6
    625e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6260:	555e      	strb	r6, [r3, r5]
	}
	__disable_irq();
    6262:	b672      	cpsid	i
	transmitting_ = 1;
    6264:	2001      	movs	r0, #1
	tx_buffer_head_ = head;
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    6266:	6922      	ldr	r2, [r4, #16]
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
	transmitting_ = 1;
    6268:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    626c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    6270:	6993      	ldr	r3, [r2, #24]
    6272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    6276:	6193      	str	r3, [r2, #24]
	__enable_irq();
    6278:	b662      	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
				tx_buffer_tail_ = tail;
			}
		} else if (priority >= 256) 
    627c:	28ff      	cmp	r0, #255	; 0xff
    627e:	ddc3      	ble.n	6208 <HardwareSerial::write9bit(unsigned long)+0x20>
		{
			yield(); // wait
    6280:	f000 fba0 	bl	69c4 <yield>
    6284:	e7c0      	b.n	6208 <HardwareSerial::write9bit(unsigned long)+0x20>
    6286:	2000      	movs	r0, #0
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < tx_buffer_size_) {
    6288:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
    628a:	4603      	mov	r3, r0
				if (tail < tx_buffer_size_) {
    628c:	4293      	cmp	r3, r2
    628e:	d3d6      	bcc.n	623e <HardwareSerial::write9bit(unsigned long)+0x56>
					n = tx_buffer_[tail];
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    6290:	1a9b      	subs	r3, r3, r2
    6292:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6294:	5cd3      	ldrb	r3, [r2, r3]
    6296:	b2db      	uxtb	r3, r3
    6298:	e7d4      	b.n	6244 <HardwareSerial::write9bit(unsigned long)+0x5c>
    629a:	2700      	movs	r7, #0
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
    629c:	463d      	mov	r5, r7
    629e:	e7b3      	b.n	6208 <HardwareSerial::write9bit(unsigned long)+0x20>
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
		tx_buffer_[head] = c;
    62a0:	b2f6      	uxtb	r6, r6
    62a2:	69e3      	ldr	r3, [r4, #28]
    62a4:	555e      	strb	r6, [r3, r5]
    62a6:	e7dc      	b.n	6262 <HardwareSerial::write9bit(unsigned long)+0x7a>

000062a8 <HardwareSerial::write(unsigned char)>:
}

size_t HardwareSerial::write(uint8_t c)
{
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
    62a8:	f7ff bf9e 	b.w	61e8 <HardwareSerial::write9bit(unsigned long)>

000062ac <HardwareSerial::IRQHandler()>:
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    62ac:	6902      	ldr	r2, [r0, #16]
    62ae:	6953      	ldr	r3, [r2, #20]
    62b0:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
	//digitalWrite(3, LOW);
	return 1;
}

void HardwareSerial::IRQHandler() 
{
    62b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    62b6:	d042      	beq.n	633e <HardwareSerial::IRQHandler()+0x92>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    62b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    62ba:	f3c3 6502 	ubfx	r5, r3, #24, #3
		if (avail) {
    62be:	2d00      	cmp	r5, #0
    62c0:	d03a      	beq.n	6338 <HardwareSerial::IRQHandler()+0x8c>
			uint32_t newhead;
			head = rx_buffer_head_;
    62c2:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    62c6:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	; 0x4c
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
    62ca:	b2bf      	uxth	r7, r7
			tail = rx_buffer_tail_;
    62cc:	fa1f fe8e 	uxth.w	lr, lr
    62d0:	e006      	b.n	62e0 <HardwareSerial::IRQHandler()+0x34>

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
    62d2:	6a02      	ldr	r2, [r0, #32]
    62d4:	54d6      	strb	r6, [r2, r3]
    62d6:	6902      	ldr	r2, [r0, #16]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    62d8:	1e6b      	subs	r3, r5, #1
    62da:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    62de:	d01a      	beq.n	6316 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    62e0:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    62e2:	1c7b      	adds	r3, r7, #1

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    62e4:	6b86      	ldr	r6, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    62e6:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    62ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    62ee:	42b3      	cmp	r3, r6
    62f0:	bf28      	it	cs
    62f2:	2300      	movcs	r3, #0
				if (newhead != rx_buffer_tail_) {
    62f4:	b2a4      	uxth	r4, r4
    62f6:	42a3      	cmp	r3, r4
    62f8:	d0ee      	beq.n	62d8 <HardwareSerial::IRQHandler()+0x2c>
					head = newhead;
					if (newhead < rx_buffer_size_) {
    62fa:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    62fc:	b2ce      	uxtb	r6, r1
    62fe:	461f      	mov	r7, r3
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    6300:	4293      	cmp	r3, r2
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    6302:	eba3 0402 	sub.w	r4, r3, r2
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    6306:	d3e4      	bcc.n	62d2 <HardwareSerial::IRQHandler()+0x26>
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    6308:	6a43      	ldr	r3, [r0, #36]	; 0x24
    630a:	551e      	strb	r6, [r3, r4]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    630c:	1e6b      	subs	r3, r5, #1
    630e:	6902      	ldr	r2, [r0, #16]
    6310:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    6314:	d1e4      	bne.n	62e0 <HardwareSerial::IRQHandler()+0x34>
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    6316:	b2bb      	uxth	r3, r7
			if (rts_pin_baseReg_) {
    6318:	6d81      	ldr	r1, [r0, #88]	; 0x58
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    631a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    631e:	b159      	cbz	r1, 6338 <HardwareSerial::IRQHandler()+0x8c>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    6320:	4577      	cmp	r7, lr
    6322:	d269      	bcs.n	63f8 <HardwareSerial::IRQHandler()+0x14c>
				else avail = rx_buffer_total_size_ + head - tail;
    6324:	6b83      	ldr	r3, [r0, #56]	; 0x38
    6326:	ebce 0303 	rsb	r3, lr, r3
    632a:	441f      	add	r7, r3
				if (avail >= rts_high_watermark_) rts_deassert();
    632c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    632e:	429f      	cmp	r7, r3
    6330:	d302      	bcc.n	6338 <HardwareSerial::IRQHandler()+0x8c>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
}

inline void HardwareSerial::rts_deassert()
{
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    6332:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    6334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
				if (avail >= rts_high_watermark_) rts_deassert();
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    6338:	6953      	ldr	r3, [r2, #20]
    633a:	02dc      	lsls	r4, r3, #11
    633c:	d44b      	bmi.n	63d6 <HardwareSerial::IRQHandler()+0x12a>
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    633e:	f8d2 e018 	ldr.w	lr, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    6342:	f41e 0f00 	tst.w	lr, #8388608	; 0x800000
    6346:	d002      	beq.n	634e <HardwareSerial::IRQHandler()+0xa2>
    6348:	6953      	ldr	r3, [r2, #20]
    634a:	0219      	lsls	r1, r3, #8
    634c:	d412      	bmi.n	6374 <HardwareSerial::IRQHandler()+0xc8>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    634e:	f41e 0f80 	tst.w	lr, #4194304	; 0x400000
    6352:	d03e      	beq.n	63d2 <HardwareSerial::IRQHandler()+0x126>
    6354:	6953      	ldr	r3, [r2, #20]
    6356:	025b      	lsls	r3, r3, #9
    6358:	d53c      	bpl.n	63d4 <HardwareSerial::IRQHandler()+0x128>
	{
		transmitting_ = 0;
    635a:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    635c:	6d03      	ldr	r3, [r0, #80]	; 0x50
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
	{
		transmitting_ = 0;
    635e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    6362:	b113      	cbz	r3, 636a <HardwareSerial::IRQHandler()+0xbe>
    6364:	6d41      	ldr	r1, [r0, #84]	; 0x54
    6366:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

		port->CTRL &= ~LPUART_CTRL_TCIE;
    636a:	6993      	ldr	r3, [r2, #24]
    636c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    6370:	6193      	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    6372:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    6374:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    6378:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    637c:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    637e:	b29b      	uxth	r3, r3
		do {
			if (head == tail) break;
    6380:	429d      	cmp	r5, r3
    6382:	d02d      	beq.n	63e0 <HardwareSerial::IRQHandler()+0x134>
    6384:	6b46      	ldr	r6, [r0, #52]	; 0x34
    6386:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    6388:	e00a      	b.n	63a0 <HardwareSerial::IRQHandler()+0xf4>
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
    638a:	69c1      	ldr	r1, [r0, #28]
    638c:	5cc9      	ldrb	r1, [r1, r3]
    638e:	b2c9      	uxtb	r1, r1
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
    6390:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    6392:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    6394:	f3c1 2102 	ubfx	r1, r1, #8, #3
    6398:	2903      	cmp	r1, #3
    639a:	d812      	bhi.n	63c2 <HardwareSerial::IRQHandler()+0x116>
			if (head == tail) break;
    639c:	42ab      	cmp	r3, r5
    639e:	d01f      	beq.n	63e0 <HardwareSerial::IRQHandler()+0x134>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    63a0:	3301      	adds	r3, #1
    63a2:	429e      	cmp	r6, r3
    63a4:	bf98      	it	ls
    63a6:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    63a8:	42a3      	cmp	r3, r4
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    63aa:	eba3 0104 	sub.w	r1, r3, r4
		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
    63ae:	d3ec      	bcc.n	638a <HardwareSerial::IRQHandler()+0xde>
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    63b0:	6a87      	ldr	r7, [r0, #40]	; 0x28
    63b2:	5c79      	ldrb	r1, [r7, r1]
    63b4:	b2c9      	uxtb	r1, r1
			}
			port->DATA = n;
    63b6:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    63b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    63ba:	f3c1 2102 	ubfx	r1, r1, #8, #3
    63be:	2903      	cmp	r1, #3
    63c0:	d9ec      	bls.n	639c <HardwareSerial::IRQHandler()+0xf0>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    63c2:	b299      	uxth	r1, r3
		if (head == tail) {
    63c4:	42ab      	cmp	r3, r5
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    63c6:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    63ca:	d00c      	beq.n	63e6 <HardwareSerial::IRQHandler()+0x13a>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    63cc:	f41e 0f80 	tst.w	lr, #4194304	; 0x400000
    63d0:	d1c0      	bne.n	6354 <HardwareSerial::IRQHandler()+0xa8>
    63d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    63d6:	6953      	ldr	r3, [r2, #20]
    63d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    63dc:	6153      	str	r3, [r2, #20]
    63de:	e7ae      	b.n	633e <HardwareSerial::IRQHandler()+0x92>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    63e0:	b2ad      	uxth	r5, r5
    63e2:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
		if (head == tail) {
			port->CTRL &= ~LPUART_CTRL_TIE; 
    63e6:	6993      	ldr	r3, [r2, #24]
    63e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    63ec:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    63ee:	6993      	ldr	r3, [r2, #24]
    63f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    63f4:	6193      	str	r3, [r2, #24]
    63f6:	e7aa      	b.n	634e <HardwareSerial::IRQHandler()+0xa2>
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
			if (rts_pin_baseReg_) {
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    63f8:	ebce 0707 	rsb	r7, lr, r7
    63fc:	e796      	b.n	632c <HardwareSerial::IRQHandler()+0x80>
    63fe:	bf00      	nop

00006400 <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
    6400:	4801      	ldr	r0, [pc, #4]	; (6408 <IRQHandler_Serial4+0x8>)
    6402:	f7ff bf53 	b.w	62ac <HardwareSerial::IRQHandler()>
    6406:	bf00      	nop
    6408:	20000fbc 	.word	0x20000fbc

0000640c <IRQHandler_Serial5>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
	Serial5.IRQHandler();
    640c:	4801      	ldr	r0, [pc, #4]	; (6414 <IRQHandler_Serial5+0x8>)
    640e:	f7ff bf4d 	b.w	62ac <HardwareSerial::IRQHandler()>
    6412:	bf00      	nop
    6414:	20001080 	.word	0x20001080

00006418 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    6418:	b510      	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    641a:	4c14      	ldr	r4, [pc, #80]	; (646c <pit_isr()+0x54>)
    641c:	6823      	ldr	r3, [r4, #0]
    641e:	b113      	cbz	r3, 6426 <pit_isr()+0xe>
    6420:	4a13      	ldr	r2, [pc, #76]	; (6470 <pit_isr()+0x58>)
    6422:	68d1      	ldr	r1, [r2, #12]
    6424:	b9e9      	cbnz	r1, 6462 <pit_isr()+0x4a>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    6426:	6863      	ldr	r3, [r4, #4]
    6428:	b113      	cbz	r3, 6430 <pit_isr()+0x18>
    642a:	4a12      	ldr	r2, [pc, #72]	; (6474 <pit_isr()+0x5c>)
    642c:	68d1      	ldr	r1, [r2, #12]
    642e:	b9a1      	cbnz	r1, 645a <pit_isr()+0x42>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    6430:	68a3      	ldr	r3, [r4, #8]
    6432:	b113      	cbz	r3, 643a <pit_isr()+0x22>
    6434:	4a10      	ldr	r2, [pc, #64]	; (6478 <pit_isr()+0x60>)
    6436:	68d1      	ldr	r1, [r2, #12]
    6438:	b959      	cbnz	r1, 6452 <pit_isr()+0x3a>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    643a:	68e3      	ldr	r3, [r4, #12]
    643c:	b13b      	cbz	r3, 644e <pit_isr()+0x36>
    643e:	4a0f      	ldr	r2, [pc, #60]	; (647c <pit_isr()+0x64>)
    6440:	68d1      	ldr	r1, [r2, #12]
    6442:	b129      	cbz	r1, 6450 <pit_isr()+0x38>
    6444:	2101      	movs	r1, #1
#endif
}
    6446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    644a:	60d1      	str	r1, [r2, #12]
    644c:	4718      	bx	r3
    644e:	bd10      	pop	{r4, pc}
    6450:	bd10      	pop	{r4, pc}
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    6452:	2101      	movs	r1, #1
    6454:	60d1      	str	r1, [r2, #12]
    6456:	4798      	blx	r3
    6458:	e7ef      	b.n	643a <pit_isr()+0x22>
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    645a:	2101      	movs	r1, #1
    645c:	60d1      	str	r1, [r2, #12]
    645e:	4798      	blx	r3
    6460:	e7e6      	b.n	6430 <pit_isr()+0x18>

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    6462:	2101      	movs	r1, #1
    6464:	60d1      	str	r1, [r2, #12]
    6466:	4798      	blx	r3
    6468:	e7dd      	b.n	6426 <pit_isr()+0xe>
    646a:	bf00      	nop
    646c:	20002500 	.word	0x20002500
    6470:	40084100 	.word	0x40084100
    6474:	40084110 	.word	0x40084110
    6478:	40084120 	.word	0x40084120
    647c:	40084130 	.word	0x40084130

00006480 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	printf("beginCycles %u\n", cycles);
	if (channel) {
    6480:	6803      	ldr	r3, [r0, #0]
static void (*funct_table[4])(void) __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
uint8_t IntervalTimer::nvic_priorites[4] = {255, 255, 255, 255};


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
    6482:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("beginCycles %u\n", cycles);
	if (channel) {
    6484:	b35b      	cbz	r3, 64de <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x5e>
		channel->TCTRL = 0;
    6486:	2500      	movs	r5, #0
		channel->TFLG = 1;
    6488:	2401      	movs	r4, #1

bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
    648a:	609d      	str	r5, [r3, #8]
		channel->TFLG = 1;
    648c:	60dc      	str	r4, [r3, #12]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    648e:	4d21      	ldr	r5, [pc, #132]	; (6514 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x94>)
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    6490:	2403      	movs	r4, #3
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
    6492:	601a      	str	r2, [r3, #0]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    6494:	441d      	add	r5, r3
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    6496:	609c      	str	r4, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    6498:	4c1f      	ldr	r4, [pc, #124]	; (6518 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x98>)
    649a:	7903      	ldrb	r3, [r0, #4]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    649c:	112d      	asrs	r5, r5, #4
	funct_table[index] = funct;
    649e:	4f1f      	ldr	r7, [pc, #124]	; (651c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x9c>)
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
	nvic_priorites[index] = nvic_priority;
    64a0:	5563      	strb	r3, [r4, r5]
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    64a2:	7823      	ldrb	r3, [r4, #0]
    64a4:	7860      	ldrb	r0, [r4, #1]
    64a6:	2bff      	cmp	r3, #255	; 0xff
    64a8:	78a2      	ldrb	r2, [r4, #2]
    64aa:	78e4      	ldrb	r4, [r4, #3]
    64ac:	bf28      	it	cs
    64ae:	23ff      	movcs	r3, #255	; 0xff
    64b0:	4e1b      	ldr	r6, [pc, #108]	; (6520 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
	funct_table[index] = funct;
    64b2:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
    64b6:	4283      	cmp	r3, r0
    64b8:	bf28      	it	cs
    64ba:	4603      	movcs	r3, r0
    64bc:	4819      	ldr	r0, [pc, #100]	; (6524 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
    64be:	4293      	cmp	r3, r2
    64c0:	f8c0 6228 	str.w	r6, [r0, #552]	; 0x228
    64c4:	bf28      	it	cs
    64c6:	4613      	movcs	r3, r2
    64c8:	42a3      	cmp	r3, r4
    64ca:	bf28      	it	cs
    64cc:	4623      	movcs	r3, r4
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
	}
	attachInterruptVector(IRQ_PIT, &pit_isr);
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    64ce:	4c16      	ldr	r4, [pc, #88]	; (6528 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    64d0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    64d4:	4a15      	ldr	r2, [pc, #84]	; (652c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	return true;
    64d6:	2001      	movs	r0, #1
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
	}
	attachInterruptVector(IRQ_PIT, &pit_isr);
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    64d8:	7023      	strb	r3, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_PIT);
    64da:	6011      	str	r1, [r2, #0]
	return true;
}
    64dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    64de:	4f14      	ldr	r7, [pc, #80]	; (6530 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    64e0:	f04f 0c01 	mov.w	ip, #1
		channel = IMXRT_PIT_CHANNELS;
    64e4:	4e13      	ldr	r6, [pc, #76]	; (6534 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    64e6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    64e8:	f8df e050 	ldr.w	lr, [pc, #80]	; 653c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>
		channel = IMXRT_PIT_CHANNELS;
    64ec:	4633      	mov	r3, r6
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    64ee:	f444 5440 	orr.w	r4, r4, #12288	; 0x3000
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = IMXRT_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    64f2:	4d11      	ldr	r5, [pc, #68]	; (6538 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    64f4:	66fc      	str	r4, [r7, #108]	; 0x6c
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    64f6:	f8ce c000 	str.w	ip, [lr]
		channel = IMXRT_PIT_CHANNELS;
    64fa:	6006      	str	r6, [r0, #0]
		while (1) {
			if (channel->TCTRL == 0) break;
    64fc:	689c      	ldr	r4, [r3, #8]
    64fe:	2c00      	cmp	r4, #0
    6500:	d0c5      	beq.n	648e <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xe>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    6502:	3310      	adds	r3, #16
    6504:	42ab      	cmp	r3, r5
    6506:	6003      	str	r3, [r0, #0]
    6508:	d1f8      	bne.n	64fc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x7c>
				channel = NULL;
    650a:	2300      	movs	r3, #0
    650c:	6003      	str	r3, [r0, #0]
				return false;
    650e:	4618      	mov	r0, r3
    6510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6512:	bf00      	nop
    6514:	bff7bf00 	.word	0xbff7bf00
    6518:	200010e0 	.word	0x200010e0
    651c:	20002500 	.word	0x20002500
    6520:	00006419 	.word	0x00006419
    6524:	20002800 	.word	0x20002800
    6528:	e000e47a 	.word	0xe000e47a
    652c:	e000e10c 	.word	0xe000e10c
    6530:	400fc000 	.word	0x400fc000
    6534:	40084100 	.word	0x40084100
    6538:	40084140 	.word	0x40084140
    653c:	40084000 	.word	0x40084000

00006540 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    6540:	6802      	ldr	r2, [r0, #0]
    6542:	b30a      	cbz	r2, 6588 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
    6544:	4b11      	ldr	r3, [pc, #68]	; (658c <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    6546:	4912      	ldr	r1, [pc, #72]	; (6590 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    6548:	4413      	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
    654a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    654c:	111b      	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    654e:	25ff      	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    6550:	2400      	movs	r4, #0
    6552:	f8df e044 	ldr.w	lr, [pc, #68]	; 6598 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    6556:	54cd      	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    6558:	780e      	ldrb	r6, [r1, #0]
    655a:	784d      	ldrb	r5, [r1, #1]
    655c:	2eff      	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
    655e:	6094      	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    6560:	f84e 4023 	str.w	r4, [lr, r3, lsl #2]
    6564:	bf28      	it	cs
    6566:	26ff      	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    6568:	788a      	ldrb	r2, [r1, #2]
    656a:	78c9      	ldrb	r1, [r1, #3]
    656c:	42ae      	cmp	r6, r5
    656e:	4633      	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    6570:	4f08      	ldr	r7, [pc, #32]	; (6594 <IntervalTimer::end()+0x54>)
    6572:	bf28      	it	cs
    6574:	462b      	movcs	r3, r5
    6576:	4293      	cmp	r3, r2
    6578:	bf28      	it	cs
    657a:	4613      	movcs	r3, r2
    657c:	428b      	cmp	r3, r1
    657e:	bf28      	it	cs
    6580:	460b      	movcs	r3, r1
    6582:	703b      	strb	r3, [r7, #0]
		channel = 0;
    6584:	6004      	str	r4, [r0, #0]
    6586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6588:	4770      	bx	lr
    658a:	bf00      	nop
    658c:	bff7bf00 	.word	0xbff7bf00
    6590:	200010e0 	.word	0x200010e0
    6594:	e000e47a 	.word	0xe000e47a
    6598:	20002500 	.word	0x20002500

0000659c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    659c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    659e:	f7f9 fd6d 	bl	7c <setup>
	while (1) {
		loop();
    65a2:	f7f9 fdeb 	bl	17c <loop>
		yield();
    65a6:	f000 fa0d 	bl	69c4 <yield>
    65aa:	e7fa      	b.n	65a2 <main+0x6>

000065ac <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    65ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    65ae:	460e      	mov	r6, r1
    65b0:	b171      	cbz	r1, 65d0 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    65b2:	b17a      	cbz	r2, 65d4 <Print::write(unsigned char const*, unsigned int)+0x28>
    65b4:	4607      	mov	r7, r0
    65b6:	4614      	mov	r4, r2
    65b8:	2500      	movs	r5, #0
    65ba:	683b      	ldr	r3, [r7, #0]
    65bc:	4638      	mov	r0, r7
    65be:	f816 1b01 	ldrb.w	r1, [r6], #1
    65c2:	681b      	ldr	r3, [r3, #0]
    65c4:	4798      	blx	r3
    65c6:	3c01      	subs	r4, #1
    65c8:	4405      	add	r5, r0
    65ca:	d1f6      	bne.n	65ba <Print::write(unsigned char const*, unsigned int)+0xe>
    65cc:	4628      	mov	r0, r5
    65ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    65d0:	4608      	mov	r0, r1
    65d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65d4:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    65d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000065d8 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    65d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65dc:	688c      	ldr	r4, [r1, #8]
    65de:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    65e0:	b1ec      	cbz	r4, 661e <Print::print(String const&)+0x46>
    65e2:	2500      	movs	r5, #0
    65e4:	4606      	mov	r6, r0
    65e6:	4689      	mov	r9, r1
    65e8:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    65ea:	462b      	mov	r3, r5
    65ec:	2221      	movs	r2, #33	; 0x21
    65ee:	a901      	add	r1, sp, #4
    65f0:	4648      	mov	r0, r9
    65f2:	f000 f9cd 	bl	6990 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    65f6:	2c20      	cmp	r4, #32
    65f8:	4623      	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    65fa:	6830      	ldr	r0, [r6, #0]
    65fc:	bf28      	it	cs
    65fe:	2320      	movcs	r3, #32
    6600:	a901      	add	r1, sp, #4
    6602:	f8d0 8004 	ldr.w	r8, [r0, #4]
    6606:	4630      	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
    6608:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    660a:	461a      	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    660c:	441d      	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
    660e:	47c0      	blx	r8
    6610:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    6612:	2c00      	cmp	r4, #0
    6614:	d1e9      	bne.n	65ea <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    6616:	4638      	mov	r0, r7
    6618:	b00b      	add	sp, #44	; 0x2c
    661a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    661e:	4627      	mov	r7, r4
    6620:	e7f9      	b.n	6616 <Print::print(String const&)+0x3e>
    6622:	bf00      	nop

00006624 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    6624:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    6626:	4c06      	ldr	r4, [pc, #24]	; (6640 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    6628:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    662a:	6803      	ldr	r3, [r0, #0]
    662c:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    662e:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    6630:	a901      	add	r1, sp, #4
    6632:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    6634:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    6638:	4798      	blx	r3
}
    663a:	b002      	add	sp, #8
    663c:	bd10      	pop	{r4, pc}
    663e:	bf00      	nop
    6640:	200009cc 	.word	0x200009cc

00006644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    6644:	b5f0      	push	{r4, r5, r6, r7, lr}
    6646:	4606      	mov	r6, r0
    6648:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    664a:	2a00      	cmp	r2, #0
    664c:	d033      	beq.n	66b6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    664e:	2a01      	cmp	r2, #1
    6650:	bf08      	it	eq
    6652:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    6654:	b351      	cbz	r1, 66ac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    6656:	2521      	movs	r5, #33	; 0x21
    6658:	e000      	b.n	665c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    665a:	b2fd      	uxtb	r5, r7
    665c:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    665e:	fbb1 f4f2 	udiv	r4, r1, r2
    6662:	fb02 1114 	mls	r1, r2, r4, r1
    6666:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6668:	2909      	cmp	r1, #9
    666a:	f100 0137 	add.w	r1, r0, #55	; 0x37
    666e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    6672:	bf88      	it	hi
    6674:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    6676:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6678:	ac0a      	add	r4, sp, #40	; 0x28
    667a:	bf98      	it	ls
    667c:	b2c0      	uxtbls	r0, r0
    667e:	442c      	add	r4, r5
    6680:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    6684:	2900      	cmp	r1, #0
    6686:	d1e8      	bne.n	665a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    6688:	b133      	cbz	r3, 6698 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    668a:	3d01      	subs	r5, #1
		buf[i] = '-';
    668c:	ab0a      	add	r3, sp, #40	; 0x28
    668e:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    6690:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    6692:	442b      	add	r3, r5
    6694:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    6698:	6833      	ldr	r3, [r6, #0]
    669a:	a901      	add	r1, sp, #4
    669c:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    66a0:	4630      	mov	r0, r6
    66a2:	4429      	add	r1, r5
    66a4:	685b      	ldr	r3, [r3, #4]
    66a6:	4798      	blx	r3
}
    66a8:	b00b      	add	sp, #44	; 0x2c
    66aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    66ac:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    66ae:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    66b0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    66b4:	e7e8      	b.n	6688 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    66b6:	6803      	ldr	r3, [r0, #0]
    66b8:	b2c9      	uxtb	r1, r1
    66ba:	681b      	ldr	r3, [r3, #0]
    66bc:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    66be:	b00b      	add	sp, #44	; 0x2c
    66c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66c2:	bf00      	nop

000066c4 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    66c4:	2900      	cmp	r1, #0
    66c6:	db03      	blt.n	66d0 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    66c8:	2300      	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    66ca:	220a      	movs	r2, #10
    66cc:	f7ff bfba 	b.w	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    66d0:	4249      	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    66d2:	232d      	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    66d4:	220a      	movs	r2, #10
    66d6:	f7ff bfb5 	b.w	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    66da:	bf00      	nop
    66dc:	0000      	movs	r0, r0
	...

000066e0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    66e0:	eeb4 0b40 	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    66e4:	b570      	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    66e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    66ea:	4605      	mov	r5, r0
    66ec:	ed2d 8b02 	vpush	{d8}
    66f0:	b086      	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    66f2:	f180 8091 	bvs.w	6818 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    66f6:	eeb0 7bc0 	vabs.f64	d7, d0
    66fa:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 6828 <Print::printFloat(double, unsigned char)+0x148>
    66fe:	eeb4 7b46 	vcmp.f64	d7, d6
    6702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6706:	dd0a      	ble.n	671e <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6708:	6803      	ldr	r3, [r0, #0]
    670a:	2203      	movs	r2, #3
    670c:	494e      	ldr	r1, [pc, #312]	; (6848 <Print::printFloat(double, unsigned char)+0x168>)
    670e:	685b      	ldr	r3, [r3, #4]
    6710:	4798      	blx	r3
    6712:	4606      	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    6714:	4630      	mov	r0, r6
    6716:	b006      	add	sp, #24
    6718:	ecbd 8b02 	vpop	{d8}
    671c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    671e:	ed9f 7b44 	vldr	d7, [pc, #272]	; 6830 <Print::printFloat(double, unsigned char)+0x150>
    6722:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    672a:	dc58      	bgt.n	67de <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    672c:	ed9f 7b42 	vldr	d7, [pc, #264]	; 6838 <Print::printFloat(double, unsigned char)+0x158>
    6730:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6738:	d451      	bmi.n	67de <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    673a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    673e:	460c      	mov	r4, r1
    6740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6744:	d456      	bmi.n	67f4 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    6746:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    6748:	2c00      	cmp	r4, #0
    674a:	d057      	beq.n	67fc <Print::printFloat(double, unsigned char)+0x11c>
    674c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
    6750:	2200      	movs	r2, #0
		rounding *= 0.1;
    6752:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 6840 <Print::printFloat(double, unsigned char)+0x160>
    6756:	3201      	adds	r2, #1
    6758:	ee28 8b07 	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    675c:	b2d1      	uxtb	r1, r2
    675e:	428c      	cmp	r4, r1
    6760:	d8f9      	bhi.n	6756 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    6762:	ee30 0b08 	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    6766:	220a      	movs	r2, #10
    6768:	4628      	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    676a:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    676e:	eeb8 8b67 	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    6772:	ee17 1a90 	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    6776:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    677a:	f7ff ff63 	bl	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    677e:	2c0f      	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    6780:	f04f 0201 	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    6784:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    6788:	f04f 032e 	mov.w	r3, #46	; 0x2e
    678c:	bf28      	it	cs
    678e:	240f      	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    6790:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    6792:	f88d 3008 	strb.w	r3, [sp, #8]
    6796:	4414      	add	r4, r2
    6798:	b2e4      	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    679a:	ee28 0b07 	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    679e:	1c53      	adds	r3, r2, #1
    67a0:	a906      	add	r1, sp, #24
    67a2:	4411      	add	r1, r2
    67a4:	b2da      	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    67a6:	42a2      	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    67a8:	eefc 6bc0 	vcvt.u32.f64	s13, d0
    67ac:	edcd 6a01 	vstr	s13, [sp, #4]
    67b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    67b4:	ee06 3a90 	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    67b8:	f103 0330 	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    67bc:	eeb8 8be6 	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    67c0:	f801 3c10 	strb.w	r3, [r1, #-16]
			remainder -= n; 
    67c4:	ee30 8b48 	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    67c8:	d1e7      	bne.n	679a <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    67ca:	682b      	ldr	r3, [r5, #0]
    67cc:	4628      	mov	r0, r5
    67ce:	a902      	add	r1, sp, #8
    67d0:	685b      	ldr	r3, [r3, #4]
    67d2:	4798      	blx	r3
	}
	return count;
}
    67d4:	4630      	mov	r0, r6
    67d6:	b006      	add	sp, #24
    67d8:	ecbd 8b02 	vpop	{d8}
    67dc:	bd70      	pop	{r4, r5, r6, pc}
    67de:	682b      	ldr	r3, [r5, #0]
    67e0:	2203      	movs	r2, #3
    67e2:	491a      	ldr	r1, [pc, #104]	; (684c <Print::printFloat(double, unsigned char)+0x16c>)
    67e4:	685b      	ldr	r3, [r3, #4]
    67e6:	4798      	blx	r3
    67e8:	4606      	mov	r6, r0
    67ea:	4630      	mov	r0, r6
    67ec:	b006      	add	sp, #24
    67ee:	ecbd 8b02 	vpop	{d8}
    67f2:	bd70      	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    67f4:	eeb1 0b40 	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    67f8:	2301      	movs	r3, #1
    67fa:	e7a5      	b.n	6748 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    67fc:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    6800:	4628      	mov	r0, r5
    6802:	220a      	movs	r2, #10
    6804:	ee30 0b07 	vadd.f64	d0, d0, d7
    6808:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    680c:	ee17 1a90 	vmov	r1, s15
    6810:	f7ff ff18 	bl	6644 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    6814:	4606      	mov	r6, r0
    6816:	e77d      	b.n	6714 <Print::printFloat(double, unsigned char)+0x34>
    6818:	6803      	ldr	r3, [r0, #0]
    681a:	2203      	movs	r2, #3
    681c:	490c      	ldr	r1, [pc, #48]	; (6850 <Print::printFloat(double, unsigned char)+0x170>)
    681e:	685b      	ldr	r3, [r3, #4]
    6820:	4798      	blx	r3
    6822:	4606      	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    6824:	e776      	b.n	6714 <Print::printFloat(double, unsigned char)+0x34>
    6826:	bf00      	nop
    6828:	ffffffff 	.word	0xffffffff
    682c:	7fefffff 	.word	0x7fefffff
    6830:	e0000000 	.word	0xe0000000
    6834:	41efffff 	.word	0x41efffff
    6838:	e0000000 	.word	0xe0000000
    683c:	c1efffff 	.word	0xc1efffff
    6840:	9999999a 	.word	0x9999999a
    6844:	3fb99999 	.word	0x3fb99999
    6848:	200009d8 	.word	0x200009d8
    684c:	200009d4 	.word	0x200009d4
    6850:	200009d0 	.word	0x200009d0

00006854 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    6854:	f7ff b96a 	b.w	5b2c <usb_serial_flush_input>

00006858 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    6858:	f7ff b940 	b.w	5adc <usb_serial_peekchar>

0000685c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    685c:	f7ff b9a0 	b.w	5ba0 <usb_serial_getchar>

00006860 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    6860:	f7ff b95e 	b.w	5b20 <usb_serial_available>

00006864 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    6864:	f7ff b9f4 	b.w	5c50 <usb_serial_flush_output>

00006868 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    6868:	f7ff b9cc 	b.w	5c04 <usb_serial_write_buffer_free>

0000686c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    686c:	4608      	mov	r0, r1
    686e:	4611      	mov	r1, r2
    6870:	f7ff b9bc 	b.w	5bec <usb_serial_write>

00006874 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6874:	4608      	mov	r0, r1
    6876:	f7ff b9a3 	b.w	5bc0 <usb_serial_putchar>
    687a:	bf00      	nop

0000687c <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    687c:	b510      	push	{r4, lr}
    687e:	4604      	mov	r4, r0
{
	free(buffer);
    6880:	6800      	ldr	r0, [r0, #0]
    6882:	f001 fc0d 	bl	80a0 <free>
}
    6886:	4620      	mov	r0, r4
    6888:	bd10      	pop	{r4, pc}
    688a:	bf00      	nop

0000688c <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    688c:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    688e:	6843      	ldr	r3, [r0, #4]
    6890:	428b      	cmp	r3, r1
    6892:	d301      	bcc.n	6898 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    6894:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    6896:	bd38      	pop	{r3, r4, r5, pc}
    6898:	460d      	mov	r5, r1
    689a:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    689c:	3101      	adds	r1, #1
    689e:	6800      	ldr	r0, [r0, #0]
    68a0:	f001 ffbc 	bl	881c <realloc>
	if (newbuffer) {
    68a4:	2800      	cmp	r0, #0
    68a6:	d0f6      	beq.n	6896 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    68a8:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    68aa:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    68ae:	2b00      	cmp	r3, #0
    68b0:	d1f0      	bne.n	6894 <String::reserve(unsigned int)+0x8>
    68b2:	7003      	strb	r3, [r0, #0]
    68b4:	e7ee      	b.n	6894 <String::reserve(unsigned int)+0x8>
    68b6:	bf00      	nop

000068b8 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    68b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68ba:	4604      	mov	r4, r0
	if (length == 0) {
    68bc:	4615      	mov	r5, r2
    68be:	b932      	cbnz	r2, 68ce <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    68c0:	6803      	ldr	r3, [r0, #0]
    68c2:	b103      	cbz	r3, 68c6 <String::copy(char const*, unsigned int)+0xe>
    68c4:	701a      	strb	r2, [r3, #0]
		len = 0;
    68c6:	2300      	movs	r3, #0
    68c8:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    68ca:	4620      	mov	r0, r4
    68cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68ce:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    68d0:	4611      	mov	r1, r2
    68d2:	f7ff ffdb 	bl	688c <String::reserve(unsigned int)>
    68d6:	4607      	mov	r7, r0
    68d8:	b948      	cbnz	r0, 68ee <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    68da:	6820      	ldr	r0, [r4, #0]
    68dc:	b110      	cbz	r0, 68e4 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    68de:	f001 fbdf 	bl	80a0 <free>
			buffer = NULL;
    68e2:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    68e4:	2300      	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    68e6:	4620      	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    68e8:	6063      	str	r3, [r4, #4]
    68ea:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    68ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    68ee:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    68f0:	4631      	mov	r1, r6
    68f2:	6820      	ldr	r0, [r4, #0]
    68f4:	f002 fa2a 	bl	8d4c <strcpy>
	return *this;
    68f8:	e7e7      	b.n	68ca <String::copy(char const*, unsigned int)+0x12>
    68fa:	bf00      	nop

000068fc <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    68fc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    68fe:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    6900:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6902:	6003      	str	r3, [r0, #0]
	capacity = 0;
    6904:	6043      	str	r3, [r0, #4]
	len = 0;
    6906:	6083      	str	r3, [r0, #8]
	flags = 0;
    6908:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    690a:	b141      	cbz	r1, 691e <String::String(char const*)+0x22>
    690c:	460d      	mov	r5, r1
    690e:	4608      	mov	r0, r1
    6910:	f002 fa96 	bl	8e40 <strlen>
    6914:	4602      	mov	r2, r0
    6916:	4629      	mov	r1, r5
    6918:	4620      	mov	r0, r4
    691a:	f7ff ffcd 	bl	68b8 <String::copy(char const*, unsigned int)>
}
    691e:	4620      	mov	r0, r4
    6920:	bd38      	pop	{r3, r4, r5, pc}
    6922:	bf00      	nop

00006924 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    6924:	b538      	push	{r3, r4, r5, lr}
    6926:	460c      	mov	r4, r1
    6928:	4605      	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    692a:	4608      	mov	r0, r1
    692c:	f002 fa88 	bl	8e40 <strlen>
    6930:	4621      	mov	r1, r4
    6932:	4602      	mov	r2, r0
    6934:	4628      	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    6936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    693a:	f7ff bfbd 	b.w	68b8 <String::copy(char const*, unsigned int)>
    693e:	bf00      	nop

00006940 <String::String(unsigned char)>:
{
	init();
	*this = c;
}

String::String(unsigned char c)
    6940:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6942:	2300      	movs	r3, #0
{
	init();
	*this = c;
}

String::String(unsigned char c)
    6944:	4604      	mov	r4, r0
    6946:	b082      	sub	sp, #8
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    6948:	220a      	movs	r2, #10
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    694a:	6023      	str	r3, [r4, #0]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    694c:	4608      	mov	r0, r1
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    694e:	6063      	str	r3, [r4, #4]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    6950:	a901      	add	r1, sp, #4

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
	len = 0;
    6952:	60a3      	str	r3, [r4, #8]
	flags = 0;
    6954:	7323      	strb	r3, [r4, #12]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    6956:	f004 fe73 	bl	b640 <utoa>
    695a:	a901      	add	r1, sp, #4
    695c:	4620      	mov	r0, r4
    695e:	f7ff ffe1 	bl	6924 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    6962:	4620      	mov	r0, r4
    6964:	b002      	add	sp, #8
    6966:	bd10      	pop	{r4, pc}

00006968 <String::String(int, unsigned char)>:

String::String(const int value, unsigned char base)
    6968:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    696a:	2300      	movs	r3, #0
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
}

String::String(const int value, unsigned char base)
    696c:	4604      	mov	r4, r0
    696e:	b086      	sub	sp, #24
{
	init();
	char buf[18];
	itoa(value, buf, base);
    6970:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6972:	6023      	str	r3, [r4, #0]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    6974:	a901      	add	r1, sp, #4
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    6976:	6063      	str	r3, [r4, #4]
	len = 0;
    6978:	60a3      	str	r3, [r4, #8]
	flags = 0;
    697a:	7323      	strb	r3, [r4, #12]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    697c:	f001 fb82 	bl	8084 <itoa>
    6980:	a901      	add	r1, sp, #4
    6982:	4620      	mov	r0, r4
    6984:	f7ff ffce 	bl	6924 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    6988:	4620      	mov	r0, r4
    698a:	b006      	add	sp, #24
    698c:	bd10      	pop	{r4, pc}
    698e:	bf00      	nop

00006990 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    6990:	b1ba      	cbz	r2, 69c2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    6992:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    6994:	fab1 f481 	clz	r4, r1
    6998:	0964      	lsrs	r4, r4, #5
    699a:	b97c      	cbnz	r4, 69bc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    699c:	6886      	ldr	r6, [r0, #8]
    699e:	429e      	cmp	r6, r3
    69a0:	d90d      	bls.n	69be <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    69a2:	1af6      	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    69a4:	3a01      	subs	r2, #1
    69a6:	460d      	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    69a8:	6801      	ldr	r1, [r0, #0]
    69aa:	4296      	cmp	r6, r2
    69ac:	4628      	mov	r0, r5
    69ae:	4419      	add	r1, r3
    69b0:	bf28      	it	cs
    69b2:	4616      	movcs	r6, r2
    69b4:	4632      	mov	r2, r6
    69b6:	f002 fb01 	bl	8fbc <strncpy>
	buf[n] = 0;
    69ba:	55ac      	strb	r4, [r5, r6]
    69bc:	bd70      	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    69be:	700c      	strb	r4, [r1, #0]
		return;
    69c0:	bd70      	pop	{r4, r5, r6, pc}
    69c2:	4770      	bx	lr

000069c4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    69c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    69c8:	4e32      	ldr	r6, [pc, #200]	; (6a94 <yield+0xd0>)
    69ca:	7833      	ldrb	r3, [r6, #0]
    69cc:	b193      	cbz	r3, 69f4 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    69ce:	4f32      	ldr	r7, [pc, #200]	; (6a98 <yield+0xd4>)
    69d0:	783a      	ldrb	r2, [r7, #0]
    69d2:	b97a      	cbnz	r2, 69f4 <yield+0x30>
	running = 1;
    69d4:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    69d6:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    69d8:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    69da:	d437      	bmi.n	6a4c <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    69dc:	079a      	lsls	r2, r3, #30
    69de:	d419      	bmi.n	6a14 <yield+0x50>

	running = 0;
    69e0:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    69e2:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    69e4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    69e6:	d505      	bpl.n	69f4 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    69e8:	4b2c      	ldr	r3, [pc, #176]	; (6a9c <yield+0xd8>)
    69ea:	681a      	ldr	r2, [r3, #0]
    69ec:	b112      	cbz	r2, 69f4 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    69ee:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    69f2:	b10a      	cbz	r2, 69f8 <yield+0x34>
    69f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    69f8:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    69fc:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    69fe:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    6a00:	b11a      	cbz	r2, 6a0a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    6a02:	4c27      	ldr	r4, [pc, #156]	; (6aa0 <yield+0xdc>)
    6a04:	7821      	ldrb	r1, [r4, #0]
    6a06:	2900      	cmp	r1, #0
    6a08:	d02f      	beq.n	6a6a <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6a0a:	2800      	cmp	r0, #0
    6a0c:	d1f2      	bne.n	69f4 <yield+0x30>
    6a0e:	b662      	cpsie	i
    6a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    6a14:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6aac <yield+0xe8>
    6a18:	f898 2000 	ldrb.w	r2, [r8]
    6a1c:	2a00      	cmp	r2, #0
    6a1e:	d0df      	beq.n	69e0 <yield+0x1c>
    6a20:	2400      	movs	r4, #0
    6a22:	f8df 908c 	ldr.w	r9, [pc, #140]	; 6ab0 <yield+0xec>
    6a26:	e005      	b.n	6a34 <yield+0x70>
    6a28:	3401      	adds	r4, #1
    6a2a:	f898 3000 	ldrb.w	r3, [r8]
    6a2e:	b2e4      	uxtb	r4, r4
    6a30:	42a3      	cmp	r3, r4
    6a32:	d913      	bls.n	6a5c <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    6a34:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    6a38:	682b      	ldr	r3, [r5, #0]
    6a3a:	4628      	mov	r0, r5
    6a3c:	691b      	ldr	r3, [r3, #16]
    6a3e:	4798      	blx	r3
    6a40:	2800      	cmp	r0, #0
    6a42:	d0f1      	beq.n	6a28 <yield+0x64>
    6a44:	696b      	ldr	r3, [r5, #20]
    6a46:	689b      	ldr	r3, [r3, #8]
    6a48:	4798      	blx	r3
    6a4a:	e7ed      	b.n	6a28 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    6a4c:	f7ff f868 	bl	5b20 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    6a50:	b9d0      	cbnz	r0, 6a88 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    6a52:	4b14      	ldr	r3, [pc, #80]	; (6aa4 <yield+0xe0>)
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	b91b      	cbnz	r3, 6a60 <yield+0x9c>
    6a58:	7833      	ldrb	r3, [r6, #0]
    6a5a:	e7bf      	b.n	69dc <yield+0x18>
    6a5c:	7833      	ldrb	r3, [r6, #0]
    6a5e:	e7bf      	b.n	69e0 <yield+0x1c>
    6a60:	7833      	ldrb	r3, [r6, #0]
    6a62:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6a66:	7033      	strb	r3, [r6, #0]
    6a68:	e7b8      	b.n	69dc <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    6a6a:	2601      	movs	r6, #1
		firstYield = first->_next;
    6a6c:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    6a6e:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    6a70:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    6a72:	b165      	cbz	r5, 6a8e <yield+0xca>
			firstYield->_prev = nullptr;
    6a74:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6a76:	b900      	cbnz	r0, 6a7a <yield+0xb6>
    6a78:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    6a7a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    6a7c:	6893      	ldr	r3, [r2, #8]
    6a7e:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    6a80:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    6a82:	4798      	blx	r3
		runningFromYield = false;
    6a84:	7025      	strb	r5, [r4, #0]
    6a86:	e7b5      	b.n	69f4 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    6a88:	f7fa fb56 	bl	1138 <serialEvent()>
    6a8c:	e7e1      	b.n	6a52 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    6a8e:	4b06      	ldr	r3, [pc, #24]	; (6aa8 <yield+0xe4>)
    6a90:	601d      	str	r5, [r3, #0]
    6a92:	e7f0      	b.n	6a76 <yield+0xb2>
    6a94:	200010f4 	.word	0x200010f4
    6a98:	20002510 	.word	0x20002510
    6a9c:	200023ec 	.word	0x200023ec
    6aa0:	200023f0 	.word	0x200023f0
    6aa4:	60001ab8 	.word	0x60001ab8
    6aa8:	200023e8 	.word	0x200023e8
    6aac:	20002414 	.word	0x20002414
    6ab0:	200023f4 	.word	0x200023f4

00006ab4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    6ab4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    6ab6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    6aba:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    6abe:	d16d      	bne.n	6b9c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    6ac0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    6ac2:	d341      	bcc.n	6b48 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    6ac4:	f851 3b04 	ldr.w	r3, [r1], #4
    6ac8:	f840 3b04 	str.w	r3, [r0], #4
    6acc:	f851 3b04 	ldr.w	r3, [r1], #4
    6ad0:	f840 3b04 	str.w	r3, [r0], #4
    6ad4:	f851 3b04 	ldr.w	r3, [r1], #4
    6ad8:	f840 3b04 	str.w	r3, [r0], #4
    6adc:	f851 3b04 	ldr.w	r3, [r1], #4
    6ae0:	f840 3b04 	str.w	r3, [r0], #4
    6ae4:	f851 3b04 	ldr.w	r3, [r1], #4
    6ae8:	f840 3b04 	str.w	r3, [r0], #4
    6aec:	f851 3b04 	ldr.w	r3, [r1], #4
    6af0:	f840 3b04 	str.w	r3, [r0], #4
    6af4:	f851 3b04 	ldr.w	r3, [r1], #4
    6af8:	f840 3b04 	str.w	r3, [r0], #4
    6afc:	f851 3b04 	ldr.w	r3, [r1], #4
    6b00:	f840 3b04 	str.w	r3, [r0], #4
    6b04:	f851 3b04 	ldr.w	r3, [r1], #4
    6b08:	f840 3b04 	str.w	r3, [r0], #4
    6b0c:	f851 3b04 	ldr.w	r3, [r1], #4
    6b10:	f840 3b04 	str.w	r3, [r0], #4
    6b14:	f851 3b04 	ldr.w	r3, [r1], #4
    6b18:	f840 3b04 	str.w	r3, [r0], #4
    6b1c:	f851 3b04 	ldr.w	r3, [r1], #4
    6b20:	f840 3b04 	str.w	r3, [r0], #4
    6b24:	f851 3b04 	ldr.w	r3, [r1], #4
    6b28:	f840 3b04 	str.w	r3, [r0], #4
    6b2c:	f851 3b04 	ldr.w	r3, [r1], #4
    6b30:	f840 3b04 	str.w	r3, [r0], #4
    6b34:	f851 3b04 	ldr.w	r3, [r1], #4
    6b38:	f840 3b04 	str.w	r3, [r0], #4
    6b3c:	f851 3b04 	ldr.w	r3, [r1], #4
    6b40:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    6b44:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    6b46:	d2bd      	bcs.n	6ac4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    6b48:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    6b4a:	d311      	bcc.n	6b70 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    6b4c:	f851 3b04 	ldr.w	r3, [r1], #4
    6b50:	f840 3b04 	str.w	r3, [r0], #4
    6b54:	f851 3b04 	ldr.w	r3, [r1], #4
    6b58:	f840 3b04 	str.w	r3, [r0], #4
    6b5c:	f851 3b04 	ldr.w	r3, [r1], #4
    6b60:	f840 3b04 	str.w	r3, [r0], #4
    6b64:	f851 3b04 	ldr.w	r3, [r1], #4
    6b68:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    6b6c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    6b6e:	d2ed      	bcs.n	6b4c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    6b70:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    6b72:	d305      	bcc.n	6b80 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    6b74:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    6b78:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    6b7c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    6b7e:	d2f9      	bcs.n	6b74 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    6b80:	3204      	adds	r2, #4
	beq	.Ldone
    6b82:	d008      	beq.n	6b96 <memcpy+0xe2>

	lsls	r2, r2, #31
    6b84:	07d2      	lsls	r2, r2, #31
	itt ne
    6b86:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    6b88:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    6b8c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    6b90:	d301      	bcc.n	6b96 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    6b92:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    6b94:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    6b96:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    6b98:	4770      	bx	lr
    6b9a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    6b9c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    6b9e:	d313      	bcc.n	6bc8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    6ba0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    6ba2:	d08d      	beq.n	6ac0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    6ba4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    6ba8:	d08a      	beq.n	6ac0 <memcpy+0xc>

	rsb	r3, #4
    6baa:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    6bae:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    6bb0:	07db      	lsls	r3, r3, #31
	itt ne
    6bb2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    6bb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    6bb8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    6bbc:	d380      	bcc.n	6ac0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    6bbe:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    6bc2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    6bc6:	e77b      	b.n	6ac0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    6bc8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    6bca:	d3d9      	bcc.n	6b80 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    6bcc:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    6bce:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    6bd2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    6bd6:	d2f9      	bcs.n	6bcc <memcpy+0x118>

	ldrb	r3, [r1]
    6bd8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    6bda:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    6bdc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    6bde:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    6be0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    6be2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    6be4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    6be6:	4770      	bx	lr

00006be8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    6be8:	4a96      	ldr	r2, [pc, #600]	; (6e44 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    6bea:	4b97      	ldr	r3, [pc, #604]	; (6e48 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    6bec:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    6bee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    6bf2:	4c96      	ldr	r4, [pc, #600]	; (6e4c <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    6bf4:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    6bf8:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    6bfa:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    6bfc:	d91c      	bls.n	6c38 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    6bfe:	4b94      	ldr	r3, [pc, #592]	; (6e50 <set_arm_clock+0x268>)
    6c00:	4298      	cmp	r0, r3
    6c02:	f240 8115 	bls.w	6e30 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    6c06:	4b93      	ldr	r3, [pc, #588]	; (6e54 <set_arm_clock+0x26c>)
    6c08:	f240 6527 	movw	r5, #1575	; 0x627
    6c0c:	4f92      	ldr	r7, [pc, #584]	; (6e58 <set_arm_clock+0x270>)
    6c0e:	4403      	add	r3, r0
    6c10:	4c92      	ldr	r4, [pc, #584]	; (6e5c <set_arm_clock+0x274>)
    6c12:	0a1a      	lsrs	r2, r3, #8
    6c14:	fba7 3202 	umull	r3, r2, r7, r2
    6c18:	09d3      	lsrs	r3, r2, #7
    6c1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6c1e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6c22:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    6c26:	42ab      	cmp	r3, r5
    6c28:	bf28      	it	cs
    6c2a:	462b      	movcs	r3, r5
    6c2c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    6c30:	fba4 3503 	umull	r3, r5, r4, r3
    6c34:	08ed      	lsrs	r5, r5, #3
    6c36:	e004      	b.n	6c42 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    6c38:	4d89      	ldr	r5, [pc, #548]	; (6e60 <set_arm_clock+0x278>)
    6c3a:	42a8      	cmp	r0, r5
    6c3c:	bf94      	ite	ls
    6c3e:	2506      	movls	r5, #6
    6c40:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    6c42:	4a81      	ldr	r2, [pc, #516]	; (6e48 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    6c44:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    6c48:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    6c4c:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    6c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    6c52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    6c56:	d20a      	bcs.n	6c6e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    6c58:	4b7c      	ldr	r3, [pc, #496]	; (6e4c <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    6c5a:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    6c5e:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    6c60:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    6c62:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    6c64:	6813      	ldr	r3, [r2, #0]
    6c66:	2b00      	cmp	r3, #0
    6c68:	dafc      	bge.n	6c64 <set_arm_clock+0x7c>
    6c6a:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    6c6e:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    6c72:	d131      	bne.n	6cd8 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    6c74:	4c7b      	ldr	r4, [pc, #492]	; (6e64 <set_arm_clock+0x27c>)
    6c76:	4a7c      	ldr	r2, [pc, #496]	; (6e68 <set_arm_clock+0x280>)
    6c78:	f8d4 c010 	ldr.w	ip, [r4, #16]
    6c7c:	4614      	mov	r4, r2
    6c7e:	ea0c 0202 	and.w	r2, ip, r2
    6c82:	42a2      	cmp	r2, r4
    6c84:	bf0a      	itet	eq
    6c86:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    6c8a:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    6c8e:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    6c90:	ea8e 0403 	eor.w	r4, lr, r3
    6c94:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    6c98:	d008      	beq.n	6cac <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    6c9a:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    6c9e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    6ca2:	4c69      	ldr	r4, [pc, #420]	; (6e48 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    6ca4:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    6ca8:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    6cac:	ea81 0302 	eor.w	r3, r1, r2
    6cb0:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    6cb4:	d008      	beq.n	6cc8 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    6cb6:	4b64      	ldr	r3, [pc, #400]	; (6e48 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    6cb8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    6cbc:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    6cbe:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    6cc0:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    6cc2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6cc4:	071c      	lsls	r4, r3, #28
    6cc6:	d4fc      	bmi.n	6cc2 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    6cc8:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    6ccc:	4a5e      	ldr	r2, [pc, #376]	; (6e48 <set_arm_clock+0x260>)
    6cce:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    6cd2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6cd4:	0699      	lsls	r1, r3, #26
    6cd6:	d4fc      	bmi.n	6cd2 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    6cd8:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    6cda:	4c64      	ldr	r4, [pc, #400]	; (6e6c <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    6cdc:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    6cde:	fb01 f302 	mul.w	r3, r1, r2
    6ce2:	fb00 f303 	mul.w	r3, r0, r3
    6ce6:	42a3      	cmp	r3, r4
    6ce8:	d809      	bhi.n	6cfe <set_arm_clock+0x116>
		if (div_arm < 8) {
    6cea:	2a07      	cmp	r2, #7
    6cec:	f200 8095 	bhi.w	6e1a <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    6cf0:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    6cf2:	fb01 f302 	mul.w	r3, r1, r2
    6cf6:	fb00 f303 	mul.w	r3, r0, r3
    6cfa:	42a3      	cmp	r3, r4
    6cfc:	d9f5      	bls.n	6cea <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    6cfe:	485c      	ldr	r0, [pc, #368]	; (6e70 <set_arm_clock+0x288>)
    6d00:	4c5c      	ldr	r4, [pc, #368]	; (6e74 <set_arm_clock+0x28c>)
    6d02:	4418      	add	r0, r3
    6d04:	fba4 0300 	umull	r0, r3, r4, r0
    6d08:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    6d0a:	2b6c      	cmp	r3, #108	; 0x6c
    6d0c:	f200 808b 	bhi.w	6e26 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    6d10:	2b35      	cmp	r3, #53	; 0x35
    6d12:	f200 808f 	bhi.w	6e34 <set_arm_clock+0x24c>
    6d16:	f8df 8188 	ldr.w	r8, [pc, #392]	; 6ea0 <set_arm_clock+0x2b8>
    6d1a:	2336      	movs	r3, #54	; 0x36
    6d1c:	4856      	ldr	r0, [pc, #344]	; (6e78 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    6d1e:	f8df c144 	ldr.w	ip, [pc, #324]	; 6e64 <set_arm_clock+0x27c>
    6d22:	4c56      	ldr	r4, [pc, #344]	; (6e7c <set_arm_clock+0x294>)
    6d24:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    6d28:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    6d2c:	ea09 0404 	and.w	r4, r9, r4
    6d30:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    6d32:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    6d36:	d00b      	beq.n	6d50 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    6d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    6d3c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    6d40:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    6d42:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    6d46:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    6d4a:	6823      	ldr	r3, [r4, #0]
    6d4c:	2b00      	cmp	r3, #0
    6d4e:	dafc      	bge.n	6d4a <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    6d50:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 6e48 <set_arm_clock+0x260>
    6d54:	3a01      	subs	r2, #1
    6d56:	f8dc 3010 	ldr.w	r3, [ip, #16]
    6d5a:	f003 0307 	and.w	r3, r3, #7
    6d5e:	4293      	cmp	r3, r2
    6d60:	d007      	beq.n	6d72 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    6d62:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    6d66:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    6d68:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    6d6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6d6e:	03db      	lsls	r3, r3, #15
    6d70:	d4fc      	bmi.n	6d6c <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    6d72:	3901      	subs	r1, #1
    6d74:	0289      	lsls	r1, r1, #10
    6d76:	ea8e 0301 	eor.w	r3, lr, r1
    6d7a:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    6d7e:	d00c      	beq.n	6d9a <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    6d80:	4b31      	ldr	r3, [pc, #196]	; (6e48 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    6d82:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    6d86:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    6d8a:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    6d8c:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    6d90:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    6d94:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6d96:	0799      	lsls	r1, r3, #30
    6d98:	d4fc      	bmi.n	6d94 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    6d9a:	4b39      	ldr	r3, [pc, #228]	; (6e80 <set_arm_clock+0x298>)
    6d9c:	4939      	ldr	r1, [pc, #228]	; (6e84 <set_arm_clock+0x29c>)
    6d9e:	4403      	add	r3, r0
    6da0:	09db      	lsrs	r3, r3, #7
    6da2:	fba1 3103 	umull	r3, r1, r1, r3
    6da6:	0b09      	lsrs	r1, r1, #12
    6da8:	2904      	cmp	r1, #4
    6daa:	bf28      	it	cs
    6dac:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    6dae:	1e4b      	subs	r3, r1, #1
    6db0:	021b      	lsls	r3, r3, #8
    6db2:	ea8e 0203 	eor.w	r2, lr, r3
    6db6:	f412 7f40 	tst.w	r2, #768	; 0x300
    6dba:	d007      	beq.n	6dcc <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    6dbc:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    6dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    6dc4:	4a20      	ldr	r2, [pc, #128]	; (6e48 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    6dc6:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    6dca:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    6dcc:	4b1e      	ldr	r3, [pc, #120]	; (6e48 <set_arm_clock+0x260>)
    6dce:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    6dd0:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    6dd2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    6dd6:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    6dd8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6dda:	069b      	lsls	r3, r3, #26
    6ddc:	d4fc      	bmi.n	6dd8 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    6dde:	4b2a      	ldr	r3, [pc, #168]	; (6e88 <set_arm_clock+0x2a0>)
    6de0:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    6de4:	4c29      	ldr	r4, [pc, #164]	; (6e8c <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    6de6:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    6de8:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    6dec:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    6dee:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    6df2:	4c27      	ldr	r4, [pc, #156]	; (6e90 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    6df4:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    6df8:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    6dfc:	4a25      	ldr	r2, [pc, #148]	; (6e94 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    6dfe:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    6e00:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    6e02:	d208      	bcs.n	6e16 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    6e04:	4b11      	ldr	r3, [pc, #68]	; (6e4c <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    6e06:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    6e0a:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    6e0c:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    6e0e:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    6e10:	6813      	ldr	r3, [r2, #0]
    6e12:	2b00      	cmp	r3, #0
    6e14:	dafc      	bge.n	6e10 <set_arm_clock+0x228>
	}

	return frequency;
}
    6e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    6e1a:	2904      	cmp	r1, #4
    6e1c:	f63f af6f 	bhi.w	6cfe <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    6e20:	3101      	adds	r1, #1
				div_arm = 1;
    6e22:	2201      	movs	r2, #1
    6e24:	e75b      	b.n	6cde <set_arm_clock+0xf6>
    6e26:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6ea4 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    6e2a:	236c      	movs	r3, #108	; 0x6c
    6e2c:	481a      	ldr	r0, [pc, #104]	; (6e98 <set_arm_clock+0x2b0>)
    6e2e:	e776      	b.n	6d1e <set_arm_clock+0x136>
    6e30:	2512      	movs	r5, #18
    6e32:	e706      	b.n	6c42 <set_arm_clock+0x5a>
    6e34:	4819      	ldr	r0, [pc, #100]	; (6e9c <set_arm_clock+0x2b4>)
    6e36:	f8df 8070 	ldr.w	r8, [pc, #112]	; 6ea8 <set_arm_clock+0x2c0>
    6e3a:	fb00 f003 	mul.w	r0, r0, r3
    6e3e:	ea43 0808 	orr.w	r8, r3, r8
    6e42:	e76c      	b.n	6d1e <set_arm_clock+0x136>
    6e44:	1f78a400 	.word	0x1f78a400
    6e48:	400fc000 	.word	0x400fc000
    6e4c:	40080000 	.word	0x40080000
    6e50:	23c34600 	.word	0x23c34600
    6e54:	dc3cba00 	.word	0xdc3cba00
    6e58:	004cb223 	.word	0x004cb223
    6e5c:	51eb851f 	.word	0x51eb851f
    6e60:	016e3600 	.word	0x016e3600
    6e64:	400d8000 	.word	0x400d8000
    6e68:	80003040 	.word	0x80003040
    6e6c:	269fb1ff 	.word	0x269fb1ff
    6e70:	005b8d80 	.word	0x005b8d80
    6e74:	165e9f81 	.word	0x165e9f81
    6e78:	269fb200 	.word	0x269fb200
    6e7c:	8001307f 	.word	0x8001307f
    6e80:	08f0d17f 	.word	0x08f0d17f
    6e84:	00e5109f 	.word	0x00e5109f
    6e88:	431bde83 	.word	0x431bde83
    6e8c:	200010fc 	.word	0x200010fc
    6e90:	200010f8 	.word	0x200010f8
    6e94:	2000219c 	.word	0x2000219c
    6e98:	4d3f6400 	.word	0x4d3f6400
    6e9c:	00b71b00 	.word	0x00b71b00
    6ea0:	80002036 	.word	0x80002036
    6ea4:	8000206c 	.word	0x8000206c
    6ea8:	80002000 	.word	0x80002000

00006eac <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    6eac:	b4f0      	push	{r4, r5, r6, r7}
    6eae:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    6eb0:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    6eb2:	4637      	mov	r7, r6
    6eb4:	e000      	b.n	6eb8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    6eb6:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    6eb8:	fbb0 f3f2 	udiv	r3, r0, r2
    6ebc:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6ec0:	f100 0437 	add.w	r4, r0, #55	; 0x37
    6ec4:	2809      	cmp	r0, #9
    6ec6:	f100 0030 	add.w	r0, r0, #48	; 0x30
    6eca:	b2e4      	uxtb	r4, r4
    6ecc:	bf98      	it	ls
    6ece:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    6ed0:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6ed2:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d1ed      	bne.n	6eb6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    6eda:	194a      	adds	r2, r1, r5
    6edc:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    6ede:	b14d      	cbz	r5, 6ef4 <ultoa+0x48>
    6ee0:	3301      	adds	r3, #1
		t = buf[j];
    6ee2:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    6ee6:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6ee8:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    6eea:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6eec:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    6eee:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6ef2:	dbf5      	blt.n	6ee0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    6ef4:	4608      	mov	r0, r1
    6ef6:	bcf0      	pop	{r4, r5, r6, r7}
    6ef8:	4770      	bx	lr
    6efa:	bf00      	nop

00006efc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    6efc:	48a4      	ldr	r0, [pc, #656]	; (7190 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    6efe:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    6f02:	4ba4      	ldr	r3, [pc, #656]	; (7194 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    6f04:	6f82      	ldr	r2, [r0, #120]	; 0x78
    6f06:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    6f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    6f0c:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    6f0e:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    6f10:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    6f14:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    6f18:	4c9f      	ldr	r4, [pc, #636]	; (7198 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    6f1a:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    6f1e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    6f20:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    6f24:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    6f26:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    6f28:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    6f2c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    6f30:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    6f34:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    6f38:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    6f3c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    6f40:	b280      	uxth	r0, r0
    6f42:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    6f46:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    6f4a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    6f4e:	4b91      	ldr	r3, [pc, #580]	; (7194 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    6f50:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    6f52:	2500      	movs	r5, #0
    6f54:	0140      	lsls	r0, r0, #5
    6f56:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    6f58:	2904      	cmp	r1, #4
    6f5a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    6f5c:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    6f60:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    6f62:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    6f64:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    6f66:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    6f68:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    6f6a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    6f6c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    6f6e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    6f70:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    6f72:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    6f74:	d1e9      	bne.n	6f4a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    6f76:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    6f7a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    6f7e:	4b87      	ldr	r3, [pc, #540]	; (719c <pwm_init+0x2a0>)
    6f80:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    6f84:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    6f86:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    6f88:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    6f8c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    6f8e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    6f92:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    6f96:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    6f9a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    6f9e:	b280      	uxth	r0, r0
    6fa0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    6fa4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    6fa8:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    6fac:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    6fb0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    6fb4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    6fb8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    6fbc:	b280      	uxth	r0, r0
    6fbe:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    6fc2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    6fc6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    6fca:	4b74      	ldr	r3, [pc, #464]	; (719c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    6fcc:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    6fce:	2500      	movs	r5, #0
    6fd0:	0140      	lsls	r0, r0, #5
    6fd2:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    6fd4:	2904      	cmp	r1, #4
    6fd6:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    6fd8:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    6fda:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    6fde:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    6fe0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    6fe2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    6fe4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    6fe6:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    6fe8:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    6fea:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    6fec:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    6fee:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    6ff0:	d1e9      	bne.n	6fc6 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    6ff2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    6ff6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    6ffa:	4b69      	ldr	r3, [pc, #420]	; (71a0 <pwm_init+0x2a4>)
    6ffc:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    7000:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    7002:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    7004:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    7008:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    700a:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    700e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    7012:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    7016:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    701a:	b280      	uxth	r0, r0
    701c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    7020:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    7024:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    7028:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    702c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    7030:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    7034:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    7038:	b280      	uxth	r0, r0
    703a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    703e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    7042:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    7046:	4b56      	ldr	r3, [pc, #344]	; (71a0 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    7048:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    704a:	2500      	movs	r5, #0
    704c:	0140      	lsls	r0, r0, #5
    704e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    7050:	2904      	cmp	r1, #4
    7052:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    7054:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    7056:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    705a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    705c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    705e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    7060:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    7062:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    7064:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    7066:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    7068:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    706a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    706c:	d1e9      	bne.n	7042 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    706e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    7072:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    7076:	4b4b      	ldr	r3, [pc, #300]	; (71a4 <pwm_init+0x2a8>)
    7078:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    707c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    707e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    7080:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    7084:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    7086:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    708a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    708e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    7092:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    7096:	b280      	uxth	r0, r0
    7098:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    709c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    70a0:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    70a4:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    70a8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    70ac:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    70b0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    70b4:	b280      	uxth	r0, r0
    70b6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    70ba:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    70be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    70c2:	4b38      	ldr	r3, [pc, #224]	; (71a4 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    70c4:	3101      	adds	r1, #1
    70c6:	0140      	lsls	r0, r0, #5
    70c8:	461c      	mov	r4, r3
    70ca:	2904      	cmp	r1, #4
    70cc:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    70ce:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    70d0:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    70d4:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    70d6:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    70d8:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    70da:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    70dc:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    70de:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    70e0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    70e2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    70e4:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    70e6:	d1ea      	bne.n	70be <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    70e8:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    70ec:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    70ee:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    70f0:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    70f4:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    70f6:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    70fa:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    70fc:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    7100:	433b      	orrs	r3, r7
    7102:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    7106:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    710a:	b29b      	uxth	r3, r3
    710c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    7110:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    7114:	0150      	lsls	r0, r2, #5
    7116:	4b24      	ldr	r3, [pc, #144]	; (71a8 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    7118:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    711a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    711c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    711e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    7120:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    7122:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    7124:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    7126:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    712a:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    712c:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    712e:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    7130:	d1f0      	bne.n	7114 <pwm_init+0x218>
    7132:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    7134:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    7136:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    713a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    713e:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    7140:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    7144:	0150      	lsls	r0, r2, #5
    7146:	4b19      	ldr	r3, [pc, #100]	; (71ac <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    7148:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    714a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    714c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    714e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    7150:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    7152:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    7154:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    7156:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    7158:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    715a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    715c:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    715e:	d1f1      	bne.n	7144 <pwm_init+0x248>
    7160:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    7162:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    7164:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    7168:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    716c:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    716e:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    7172:	0150      	lsls	r0, r2, #5
    7174:	4b0e      	ldr	r3, [pc, #56]	; (71b0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    7176:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    7178:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    717a:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    717c:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    717e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    7180:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    7182:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    7184:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    7186:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    7188:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    718a:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    718c:	d1f1      	bne.n	7172 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    718e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7190:	400fc000 	.word	0x400fc000
    7194:	403dc000 	.word	0x403dc000
    7198:	fc030000 	.word	0xfc030000
    719c:	403e0000 	.word	0x403e0000
    71a0:	403e4000 	.word	0x403e4000
    71a4:	403e8000 	.word	0x403e8000
    71a8:	401dc000 	.word	0x401dc000
    71ac:	401e0000 	.word	0x401e0000
    71b0:	401e4000 	.word	0x401e4000
    71b4:	00000000 	.word	0x00000000

000071b8 <pow>:
    71b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ba:	ed2d 8b08 	vpush	{d8-d11}
    71be:	eeb0 ab40 	vmov.f64	d10, d0
    71c2:	eeb0 9b41 	vmov.f64	d9, d1
    71c6:	4c96      	ldr	r4, [pc, #600]	; (7420 <pow+0x268>)
    71c8:	b08b      	sub	sp, #44	; 0x2c
    71ca:	f000 f935 	bl	7438 <__ieee754_pow>
    71ce:	f994 3000 	ldrsb.w	r3, [r4]
    71d2:	eeb0 8b40 	vmov.f64	d8, d0
    71d6:	1c5a      	adds	r2, r3, #1
    71d8:	d034      	beq.n	7244 <pow+0x8c>
    71da:	eeb4 9b49 	vcmp.f64	d9, d9
    71de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71e2:	d62f      	bvs.n	7244 <pow+0x8c>
    71e4:	eeb4 ab4a 	vcmp.f64	d10, d10
    71e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71ec:	d676      	bvs.n	72dc <pow+0x124>
    71ee:	ed9f bb8a 	vldr	d11, [pc, #552]	; 7418 <pow+0x260>
    71f2:	eeb4 ab4b 	vcmp.f64	d10, d11
    71f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71fa:	d129      	bne.n	7250 <pow+0x98>
    71fc:	eeb4 9b4b 	vcmp.f64	d9, d11
    7200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7204:	d113      	bne.n	722e <pow+0x76>
    7206:	2201      	movs	r2, #1
    7208:	4986      	ldr	r1, [pc, #536]	; (7424 <pow+0x26c>)
    720a:	9200      	str	r2, [sp, #0]
    720c:	2200      	movs	r2, #0
    720e:	ed8d ab02 	vstr	d10, [sp, #8]
    7212:	ed8d 9b04 	vstr	d9, [sp, #16]
    7216:	ed8d bb06 	vstr	d11, [sp, #24]
    721a:	9101      	str	r1, [sp, #4]
    721c:	9208      	str	r2, [sp, #32]
    721e:	2b00      	cmp	r3, #0
    7220:	d04b      	beq.n	72ba <pow+0x102>
    7222:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    7226:	b00b      	add	sp, #44	; 0x2c
    7228:	ecbd 8b08 	vpop	{d8-d11}
    722c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    722e:	eeb0 0b49 	vmov.f64	d0, d9
    7232:	f000 fd8d 	bl	7d50 <finite>
    7236:	b128      	cbz	r0, 7244 <pow+0x8c>
    7238:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
    723c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7240:	f100 80a0 	bmi.w	7384 <pow+0x1cc>
    7244:	eeb0 0b48 	vmov.f64	d0, d8
    7248:	b00b      	add	sp, #44	; 0x2c
    724a:	ecbd 8b08 	vpop	{d8-d11}
    724e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7250:	f000 fd7e 	bl	7d50 <finite>
    7254:	4605      	mov	r5, r0
    7256:	2800      	cmp	r0, #0
    7258:	d057      	beq.n	730a <pow+0x152>
    725a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    725e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7262:	f04f 0600 	mov.w	r6, #0
    7266:	f04f 0700 	mov.w	r7, #0
    726a:	d1eb      	bne.n	7244 <pow+0x8c>
    726c:	eeb0 0b4a 	vmov.f64	d0, d10
    7270:	f000 fd6e 	bl	7d50 <finite>
    7274:	2800      	cmp	r0, #0
    7276:	d0e5      	beq.n	7244 <pow+0x8c>
    7278:	eeb0 0b49 	vmov.f64	d0, d9
    727c:	f000 fd68 	bl	7d50 <finite>
    7280:	2800      	cmp	r0, #0
    7282:	d0df      	beq.n	7244 <pow+0x8c>
    7284:	4a67      	ldr	r2, [pc, #412]	; (7424 <pow+0x26c>)
    7286:	9201      	str	r2, [sp, #4]
    7288:	ed8d ab02 	vstr	d10, [sp, #8]
    728c:	ed8d 9b04 	vstr	d9, [sp, #16]
    7290:	e9cd 6706 	strd	r6, r7, [sp, #24]
    7294:	2104      	movs	r1, #4
    7296:	2200      	movs	r2, #0
    7298:	f994 3000 	ldrsb.w	r3, [r4]
    729c:	9100      	str	r1, [sp, #0]
    729e:	9208      	str	r2, [sp, #32]
    72a0:	2b02      	cmp	r3, #2
    72a2:	d003      	beq.n	72ac <pow+0xf4>
    72a4:	4668      	mov	r0, sp
    72a6:	f000 fd5b 	bl	7d60 <matherr>
    72aa:	b958      	cbnz	r0, 72c4 <pow+0x10c>
    72ac:	f000 fea4 	bl	7ff8 <__errno>
    72b0:	2322      	movs	r3, #34	; 0x22
    72b2:	6003      	str	r3, [r0, #0]
    72b4:	e006      	b.n	72c4 <pow+0x10c>
    72b6:	ed8d bb06 	vstr	d11, [sp, #24]
    72ba:	4668      	mov	r0, sp
    72bc:	f000 fd50 	bl	7d60 <matherr>
    72c0:	2800      	cmp	r0, #0
    72c2:	d073      	beq.n	73ac <pow+0x1f4>
    72c4:	9b08      	ldr	r3, [sp, #32]
    72c6:	b11b      	cbz	r3, 72d0 <pow+0x118>
    72c8:	f000 fe96 	bl	7ff8 <__errno>
    72cc:	9b08      	ldr	r3, [sp, #32]
    72ce:	6003      	str	r3, [r0, #0]
    72d0:	ed9d 0b06 	vldr	d0, [sp, #24]
    72d4:	b00b      	add	sp, #44	; 0x2c
    72d6:	ecbd 8b08 	vpop	{d8-d11}
    72da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72dc:	eeb5 9b40 	vcmp.f64	d9, #0.0
    72e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    72e4:	d1ae      	bne.n	7244 <pow+0x8c>
    72e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    72ea:	2201      	movs	r2, #1
    72ec:	494d      	ldr	r1, [pc, #308]	; (7424 <pow+0x26c>)
    72ee:	9200      	str	r2, [sp, #0]
    72f0:	2b02      	cmp	r3, #2
    72f2:	f04f 0200 	mov.w	r2, #0
    72f6:	ed8d ab02 	vstr	d10, [sp, #8]
    72fa:	ed8d 9b04 	vstr	d9, [sp, #16]
    72fe:	9101      	str	r1, [sp, #4]
    7300:	9208      	str	r2, [sp, #32]
    7302:	ed8d 0b06 	vstr	d0, [sp, #24]
    7306:	d1d8      	bne.n	72ba <pow+0x102>
    7308:	e79e      	b.n	7248 <pow+0x90>
    730a:	eeb0 0b4a 	vmov.f64	d0, d10
    730e:	f000 fd1f 	bl	7d50 <finite>
    7312:	2800      	cmp	r0, #0
    7314:	d0a1      	beq.n	725a <pow+0xa2>
    7316:	eeb0 0b49 	vmov.f64	d0, d9
    731a:	f000 fd19 	bl	7d50 <finite>
    731e:	2800      	cmp	r0, #0
    7320:	d09b      	beq.n	725a <pow+0xa2>
    7322:	eeb4 8b48 	vcmp.f64	d8, d8
    7326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    732a:	f994 3000 	ldrsb.w	r3, [r4]
    732e:	4a3d      	ldr	r2, [pc, #244]	; (7424 <pow+0x26c>)
    7330:	9508      	str	r5, [sp, #32]
    7332:	d65e      	bvs.n	73f2 <pow+0x23a>
    7334:	2103      	movs	r1, #3
    7336:	ed8d ab02 	vstr	d10, [sp, #8]
    733a:	ed8d 9b04 	vstr	d9, [sp, #16]
    733e:	e88d 0006 	stmia.w	sp, {r1, r2}
    7342:	2b00      	cmp	r3, #0
    7344:	d137      	bne.n	73b6 <pow+0x1fe>
    7346:	eeb5 abc0 	vcmpe.f64	d10, #0.0
    734a:	4b37      	ldr	r3, [pc, #220]	; (7428 <pow+0x270>)
    734c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    7350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7354:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7358:	d5a4      	bpl.n	72a4 <pow+0xec>
    735a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    735e:	ee29 9b07 	vmul.f64	d9, d9, d7
    7362:	eeb0 0b49 	vmov.f64	d0, d9
    7366:	f000 fd07 	bl	7d78 <rint>
    736a:	eeb4 9b40 	vcmp.f64	d9, d0
    736e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7372:	d03b      	beq.n	73ec <pow+0x234>
    7374:	492d      	ldr	r1, [pc, #180]	; (742c <pow+0x274>)
    7376:	f994 3000 	ldrsb.w	r3, [r4]
    737a:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
    737e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7382:	e78d      	b.n	72a0 <pow+0xe8>
    7384:	4a27      	ldr	r2, [pc, #156]	; (7424 <pow+0x26c>)
    7386:	f994 3000 	ldrsb.w	r3, [r4]
    738a:	9201      	str	r2, [sp, #4]
    738c:	2101      	movs	r1, #1
    738e:	2200      	movs	r2, #0
    7390:	ed8d ab02 	vstr	d10, [sp, #8]
    7394:	ed8d 9b04 	vstr	d9, [sp, #16]
    7398:	9100      	str	r1, [sp, #0]
    739a:	9208      	str	r2, [sp, #32]
    739c:	2b00      	cmp	r3, #0
    739e:	d08a      	beq.n	72b6 <pow+0xfe>
    73a0:	4923      	ldr	r1, [pc, #140]	; (7430 <pow+0x278>)
    73a2:	2000      	movs	r0, #0
    73a4:	2b02      	cmp	r3, #2
    73a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    73aa:	d186      	bne.n	72ba <pow+0x102>
    73ac:	f000 fe24 	bl	7ff8 <__errno>
    73b0:	2321      	movs	r3, #33	; 0x21
    73b2:	6003      	str	r3, [r0, #0]
    73b4:	e786      	b.n	72c4 <pow+0x10c>
    73b6:	491f      	ldr	r1, [pc, #124]	; (7434 <pow+0x27c>)
    73b8:	eeb5 abc0 	vcmpe.f64	d10, #0.0
    73bc:	2000      	movs	r0, #0
    73be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    73c6:	f57f af6b 	bpl.w	72a0 <pow+0xe8>
    73ca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    73ce:	ee29 9b07 	vmul.f64	d9, d9, d7
    73d2:	eeb0 0b49 	vmov.f64	d0, d9
    73d6:	f000 fccf 	bl	7d78 <rint>
    73da:	eeb4 9b40 	vcmp.f64	d9, d0
    73de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73e2:	d003      	beq.n	73ec <pow+0x234>
    73e4:	4b12      	ldr	r3, [pc, #72]	; (7430 <pow+0x278>)
    73e6:	2200      	movs	r2, #0
    73e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    73ec:	f994 3000 	ldrsb.w	r3, [r4]
    73f0:	e756      	b.n	72a0 <pow+0xe8>
    73f2:	2101      	movs	r1, #1
    73f4:	ed8d ab02 	vstr	d10, [sp, #8]
    73f8:	ed8d 9b04 	vstr	d9, [sp, #16]
    73fc:	e88d 0006 	stmia.w	sp, {r1, r2}
    7400:	2b00      	cmp	r3, #0
    7402:	f43f af58 	beq.w	72b6 <pow+0xfe>
    7406:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
    740a:	2b02      	cmp	r3, #2
    740c:	ed8d 7b06 	vstr	d7, [sp, #24]
    7410:	d0cc      	beq.n	73ac <pow+0x1f4>
    7412:	e752      	b.n	72ba <pow+0x102>
    7414:	f3af 8000 	nop.w
	...
    7420:	20001100 	.word	0x20001100
    7424:	20000a04 	.word	0x20000a04
    7428:	47efffff 	.word	0x47efffff
    742c:	c7efffff 	.word	0xc7efffff
    7430:	fff00000 	.word	0xfff00000
    7434:	7ff00000 	.word	0x7ff00000

00007438 <__ieee754_pow>:
    7438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    743c:	ec51 0b11 	vmov	r0, r1, d1
    7440:	ed2d 8b08 	vpush	{d8-d11}
    7444:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
    7448:	ea55 0400 	orrs.w	r4, r5, r0
    744c:	b087      	sub	sp, #28
    744e:	d03a      	beq.n	74c6 <__ieee754_pow+0x8e>
    7450:	ec53 2b10 	vmov	r2, r3, d0
    7454:	4f6a      	ldr	r7, [pc, #424]	; (7600 <__ieee754_pow+0x1c8>)
    7456:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    745a:	42bc      	cmp	r4, r7
    745c:	ee10 aa10 	vmov	sl, s0
    7460:	4699      	mov	r9, r3
    7462:	dc29      	bgt.n	74b8 <__ieee754_pow+0x80>
    7464:	4688      	mov	r8, r1
    7466:	ee11 6a10 	vmov	r6, s2
    746a:	d024      	beq.n	74b6 <__ieee754_pow+0x7e>
    746c:	42bd      	cmp	r5, r7
    746e:	dc23      	bgt.n	74b8 <__ieee754_pow+0x80>
    7470:	4f63      	ldr	r7, [pc, #396]	; (7600 <__ieee754_pow+0x1c8>)
    7472:	42bd      	cmp	r5, r7
    7474:	d07a      	beq.n	756c <__ieee754_pow+0x134>
    7476:	f1b9 0f00 	cmp.w	r9, #0
    747a:	db7a      	blt.n	7572 <__ieee754_pow+0x13a>
    747c:	f04f 0b00 	mov.w	fp, #0
    7480:	bba6      	cbnz	r6, 74ec <__ieee754_pow+0xb4>
    7482:	4e5f      	ldr	r6, [pc, #380]	; (7600 <__ieee754_pow+0x1c8>)
    7484:	42b5      	cmp	r5, r6
    7486:	f000 8090 	beq.w	75aa <__ieee754_pow+0x172>
    748a:	4e5e      	ldr	r6, [pc, #376]	; (7604 <__ieee754_pow+0x1cc>)
    748c:	42b5      	cmp	r5, r6
    748e:	d066      	beq.n	755e <__ieee754_pow+0x126>
    7490:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
    7494:	f000 8257 	beq.w	7946 <__ieee754_pow+0x50e>
    7498:	4e5b      	ldr	r6, [pc, #364]	; (7608 <__ieee754_pow+0x1d0>)
    749a:	45b0      	cmp	r8, r6
    749c:	d126      	bne.n	74ec <__ieee754_pow+0xb4>
    749e:	f1b9 0f00 	cmp.w	r9, #0
    74a2:	db23      	blt.n	74ec <__ieee754_pow+0xb4>
    74a4:	ec43 2b10 	vmov	d0, r2, r3
    74a8:	b007      	add	sp, #28
    74aa:	ecbd 8b08 	vpop	{d8-d11}
    74ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74b2:	f000 bb83 	b.w	7bbc <__ieee754_sqrt>
    74b6:	b16a      	cbz	r2, 74d4 <__ieee754_pow+0x9c>
    74b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    74bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    74c0:	ea54 030a 	orrs.w	r3, r4, sl
    74c4:	d108      	bne.n	74d8 <__ieee754_pow+0xa0>
    74c6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    74ca:	b007      	add	sp, #28
    74cc:	ecbd 8b08 	vpop	{d8-d11}
    74d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74d4:	42a5      	cmp	r5, r4
    74d6:	ddcb      	ble.n	7470 <__ieee754_pow+0x38>
    74d8:	484c      	ldr	r0, [pc, #304]	; (760c <__ieee754_pow+0x1d4>)
    74da:	b007      	add	sp, #28
    74dc:	ecbd 8b08 	vpop	{d8-d11}
    74e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74e4:	f000 bc40 	b.w	7d68 <nan>
    74e8:	f04f 0b00 	mov.w	fp, #0
    74ec:	4616      	mov	r6, r2
    74ee:	461f      	mov	r7, r3
    74f0:	ec47 6b10 	vmov	d0, r6, r7
    74f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    74f8:	f000 fc22 	bl	7d40 <fabs>
    74fc:	ed8d 0b00 	vstr	d0, [sp]
    7500:	f1ba 0f00 	cmp.w	sl, #0
    7504:	d01a      	beq.n	753c <__ieee754_pow+0x104>
    7506:	ea4f 79d9 	mov.w	r9, r9, lsr #31
    750a:	f109 39ff 	add.w	r9, r9, #4294967295
    750e:	ea5b 0309 	orrs.w	r3, fp, r9
    7512:	d05e      	beq.n	75d2 <__ieee754_pow+0x19a>
    7514:	4b3e      	ldr	r3, [pc, #248]	; (7610 <__ieee754_pow+0x1d8>)
    7516:	429d      	cmp	r5, r3
    7518:	f340 8080 	ble.w	761c <__ieee754_pow+0x1e4>
    751c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    7520:	429d      	cmp	r5, r3
    7522:	f340 829a 	ble.w	7a5a <__ieee754_pow+0x622>
    7526:	4b3b      	ldr	r3, [pc, #236]	; (7614 <__ieee754_pow+0x1dc>)
    7528:	429c      	cmp	r4, r3
    752a:	dd59      	ble.n	75e0 <__ieee754_pow+0x1a8>
    752c:	f1b8 0f00 	cmp.w	r8, #0
    7530:	dd59      	ble.n	75e6 <__ieee754_pow+0x1ae>
    7532:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 75f0 <__ieee754_pow+0x1b8>
    7536:	ee20 0b00 	vmul.f64	d0, d0, d0
    753a:	e7c6      	b.n	74ca <__ieee754_pow+0x92>
    753c:	b124      	cbz	r4, 7548 <__ieee754_pow+0x110>
    753e:	4b31      	ldr	r3, [pc, #196]	; (7604 <__ieee754_pow+0x1cc>)
    7540:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
    7544:	429a      	cmp	r2, r3
    7546:	d1de      	bne.n	7506 <__ieee754_pow+0xce>
    7548:	f1b8 0f00 	cmp.w	r8, #0
    754c:	f2c0 827c 	blt.w	7a48 <__ieee754_pow+0x610>
    7550:	f1b9 0f00 	cmp.w	r9, #0
    7554:	f2c0 81e6 	blt.w	7924 <__ieee754_pow+0x4ec>
    7558:	ed9d 0b00 	vldr	d0, [sp]
    755c:	e7b5      	b.n	74ca <__ieee754_pow+0x92>
    755e:	f1b8 0f00 	cmp.w	r8, #0
    7562:	f2c0 82bc 	blt.w	7ade <__ieee754_pow+0x6a6>
    7566:	ec43 2b10 	vmov	d0, r2, r3
    756a:	e7ae      	b.n	74ca <__ieee754_pow+0x92>
    756c:	2e00      	cmp	r6, #0
    756e:	d082      	beq.n	7476 <__ieee754_pow+0x3e>
    7570:	e7a2      	b.n	74b8 <__ieee754_pow+0x80>
    7572:	4f29      	ldr	r7, [pc, #164]	; (7618 <__ieee754_pow+0x1e0>)
    7574:	42bd      	cmp	r5, r7
    7576:	dc29      	bgt.n	75cc <__ieee754_pow+0x194>
    7578:	f1a7 7754 	sub.w	r7, r7, #55574528	; 0x3500000
    757c:	42bd      	cmp	r5, r7
    757e:	f77f af7d 	ble.w	747c <__ieee754_pow+0x44>
    7582:	152f      	asrs	r7, r5, #20
    7584:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    7588:	2f14      	cmp	r7, #20
    758a:	f340 82b6 	ble.w	7afa <__ieee754_pow+0x6c2>
    758e:	f1c7 0734 	rsb	r7, r7, #52	; 0x34
    7592:	fa26 fe07 	lsr.w	lr, r6, r7
    7596:	fa0e f707 	lsl.w	r7, lr, r7
    759a:	42be      	cmp	r6, r7
    759c:	f47f af6e 	bne.w	747c <__ieee754_pow+0x44>
    75a0:	f00e 0e01 	and.w	lr, lr, #1
    75a4:	f1ce 0b02 	rsb	fp, lr, #2
    75a8:	e76a      	b.n	7480 <__ieee754_pow+0x48>
    75aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    75ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    75b2:	ea53 030a 	orrs.w	r3, r3, sl
    75b6:	d086      	beq.n	74c6 <__ieee754_pow+0x8e>
    75b8:	4b16      	ldr	r3, [pc, #88]	; (7614 <__ieee754_pow+0x1dc>)
    75ba:	429c      	cmp	r4, r3
    75bc:	f340 823b 	ble.w	7a36 <__ieee754_pow+0x5fe>
    75c0:	f1b8 0f00 	cmp.w	r8, #0
    75c4:	db0f      	blt.n	75e6 <__ieee754_pow+0x1ae>
    75c6:	ec41 0b10 	vmov	d0, r0, r1
    75ca:	e77e      	b.n	74ca <__ieee754_pow+0x92>
    75cc:	f04f 0b02 	mov.w	fp, #2
    75d0:	e756      	b.n	7480 <__ieee754_pow+0x48>
    75d2:	ec47 6b17 	vmov	d7, r6, r7
    75d6:	ee37 7b47 	vsub.f64	d7, d7, d7
    75da:	ee87 0b07 	vdiv.f64	d0, d7, d7
    75de:	e774      	b.n	74ca <__ieee754_pow+0x92>
    75e0:	f1b8 0f00 	cmp.w	r8, #0
    75e4:	dba5      	blt.n	7532 <__ieee754_pow+0xfa>
    75e6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 75f8 <__ieee754_pow+0x1c0>
    75ea:	e76e      	b.n	74ca <__ieee754_pow+0x92>
    75ec:	f3af 8000 	nop.w
    75f0:	8800759c 	.word	0x8800759c
    75f4:	7e37e43c 	.word	0x7e37e43c
	...
    7600:	7ff00000 	.word	0x7ff00000
    7604:	3ff00000 	.word	0x3ff00000
    7608:	3fe00000 	.word	0x3fe00000
    760c:	200000cc 	.word	0x200000cc
    7610:	41e00000 	.word	0x41e00000
    7614:	3fefffff 	.word	0x3fefffff
    7618:	433fffff 	.word	0x433fffff
    761c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    7620:	f280 825b 	bge.w	7ada <__ieee754_pow+0x6a2>
    7624:	ed9d 6b00 	vldr	d6, [sp]
    7628:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 7950 <__ieee754_pow+0x518>
    762c:	ee26 7b07 	vmul.f64	d7, d6, d7
    7630:	ed8d 7b00 	vstr	d7, [sp]
    7634:	9c01      	ldr	r4, [sp, #4]
    7636:	f06f 0634 	mvn.w	r6, #52	; 0x34
    763a:	4aed      	ldr	r2, [pc, #948]	; (79f0 <__ieee754_pow+0x5b8>)
    763c:	1523      	asrs	r3, r4, #20
    763e:	f3c4 0413 	ubfx	r4, r4, #0, #20
    7642:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    7646:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
    764a:	4294      	cmp	r4, r2
    764c:	441e      	add	r6, r3
    764e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    7652:	f340 823a 	ble.w	7aca <__ieee754_pow+0x692>
    7656:	4be7      	ldr	r3, [pc, #924]	; (79f4 <__ieee754_pow+0x5bc>)
    7658:	429c      	cmp	r4, r3
    765a:	f340 826c 	ble.w	7b36 <__ieee754_pow+0x6fe>
    765e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7662:	ed9f 3bbd 	vldr	d3, [pc, #756]	; 7958 <__ieee754_pow+0x520>
    7666:	3601      	adds	r6, #1
    7668:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    766c:	2500      	movs	r5, #0
    766e:	eeb0 0b43 	vmov.f64	d0, d3
    7672:	e9dd 2300 	ldrd	r2, r3, [sp]
    7676:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    767a:	460b      	mov	r3, r1
    767c:	ec43 2b11 	vmov	d1, r2, r3
    7680:	104c      	asrs	r4, r1, #1
    7682:	ee31 6b07 	vadd.f64	d6, d1, d7
    7686:	ee31 2b47 	vsub.f64	d2, d1, d7
    768a:	ee84 5b06 	vdiv.f64	d5, d4, d6
    768e:	ee22 6b05 	vmul.f64	d6, d2, d5
    7692:	ed8d 6b00 	vstr	d6, [sp]
    7696:	e9dd 2300 	ldrd	r2, r3, [sp]
    769a:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
    769e:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
    76a2:	2200      	movs	r2, #0
    76a4:	2000      	movs	r0, #0
    76a6:	1961      	adds	r1, r4, r5
    76a8:	ec43 2b14 	vmov	d4, r2, r3
    76ac:	ec41 0b16 	vmov	d6, r0, r1
    76b0:	eeb1 ab44 	vneg.f64	d10, d4
    76b4:	ee36 7b47 	vsub.f64	d7, d6, d7
    76b8:	eeaa 2b06 	vfma.f64	d2, d10, d6
    76bc:	ee31 7b47 	vsub.f64	d7, d1, d7
    76c0:	eeb0 6b42 	vmov.f64	d6, d2
    76c4:	eeaa 6b07 	vfma.f64	d6, d10, d7
    76c8:	ed9d 7b00 	vldr	d7, [sp]
    76cc:	ee26 2b05 	vmul.f64	d2, d6, d5
    76d0:	ed9d 6b00 	vldr	d6, [sp]
    76d4:	ee37 7b04 	vadd.f64	d7, d7, d4
    76d8:	ee26 bb06 	vmul.f64	d11, d6, d6
    76dc:	ed9f 9ba0 	vldr	d9, [pc, #640]	; 7960 <__ieee754_pow+0x528>
    76e0:	ee27 6b02 	vmul.f64	d6, d7, d2
    76e4:	ed9f 8ba0 	vldr	d8, [pc, #640]	; 7968 <__ieee754_pow+0x530>
    76e8:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 7970 <__ieee754_pow+0x538>
    76ec:	eeab 8b09 	vfma.f64	d8, d11, d9
    76f0:	ed9f 7ba1 	vldr	d7, [pc, #644]	; 7978 <__ieee754_pow+0x540>
    76f4:	eeab 1b08 	vfma.f64	d1, d11, d8
    76f8:	ee2b 8b0b 	vmul.f64	d8, d11, d11
    76fc:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 7980 <__ieee754_pow+0x548>
    7700:	eeab 7b01 	vfma.f64	d7, d11, d1
    7704:	eeab 5b07 	vfma.f64	d5, d11, d7
    7708:	ed9f 7b9f 	vldr	d7, [pc, #636]	; 7988 <__ieee754_pow+0x550>
    770c:	eeab 7b05 	vfma.f64	d7, d11, d5
    7710:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
    7714:	eea8 6b07 	vfma.f64	d6, d8, d7
    7718:	eeb0 7b45 	vmov.f64	d7, d5
    771c:	eea4 7b04 	vfma.f64	d7, d4, d4
    7720:	ee37 7b06 	vadd.f64	d7, d7, d6
    7724:	ed8d 7b04 	vstr	d7, [sp, #16]
    7728:	9204      	str	r2, [sp, #16]
    772a:	ed9d 9b04 	vldr	d9, [sp, #16]
    772e:	ee39 5b45 	vsub.f64	d5, d9, d5
    7732:	eeaa 5b04 	vfma.f64	d5, d10, d4
    7736:	ee36 5b45 	vsub.f64	d5, d6, d5
    773a:	ed9d 6b00 	vldr	d6, [sp]
    773e:	ee25 6b06 	vmul.f64	d6, d5, d6
    7742:	eea2 6b09 	vfma.f64	d6, d2, d9
    7746:	eeb0 5b46 	vmov.f64	d5, d6
    774a:	eea4 5b09 	vfma.f64	d5, d4, d9
    774e:	ed8d 5b00 	vstr	d5, [sp]
    7752:	9200      	str	r2, [sp, #0]
    7754:	ed9d 4b00 	vldr	d4, [sp]
    7758:	ed9f 2b8d 	vldr	d2, [pc, #564]	; 7990 <__ieee754_pow+0x558>
    775c:	eeb0 5b44 	vmov.f64	d5, d4
    7760:	eeaa 5b09 	vfma.f64	d5, d10, d9
    7764:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 7998 <__ieee754_pow+0x560>
    7768:	ee36 6b45 	vsub.f64	d6, d6, d5
    776c:	ed9f 8b8c 	vldr	d8, [pc, #560]	; 79a0 <__ieee754_pow+0x568>
    7770:	ee26 7b07 	vmul.f64	d7, d6, d7
    7774:	ee01 6a90 	vmov	s3, r6
    7778:	eea4 7b08 	vfma.f64	d7, d4, d8
    777c:	eeb8 1be1 	vcvt.f64.s32	d1, s3
    7780:	ee37 7b00 	vadd.f64	d7, d7, d0
    7784:	eeb0 6b47 	vmov.f64	d6, d7
    7788:	eea4 6b02 	vfma.f64	d6, d4, d2
    778c:	ee36 6b03 	vadd.f64	d6, d6, d3
    7790:	ee36 6b01 	vadd.f64	d6, d6, d1
    7794:	ed8d 6b00 	vstr	d6, [sp]
    7798:	9200      	str	r2, [sp, #0]
    779a:	ed9d 5b00 	vldr	d5, [sp]
    779e:	ee35 6b41 	vsub.f64	d6, d5, d1
    77a2:	ee36 6b43 	vsub.f64	d6, d6, d3
    77a6:	eea4 6b42 	vfms.f64	d6, d4, d2
    77aa:	ee37 6b46 	vsub.f64	d6, d7, d6
    77ae:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    77b2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
    77b6:	4621      	mov	r1, r4
    77b8:	2000      	movs	r0, #0
    77ba:	ec44 3b17 	vmov	d7, r3, r4
    77be:	ec41 0b14 	vmov	d4, r0, r1
    77c2:	ee26 6b07 	vmul.f64	d6, d6, d7
    77c6:	ee37 7b44 	vsub.f64	d7, d7, d4
    77ca:	eea5 6b07 	vfma.f64	d6, d5, d7
    77ce:	ee25 5b04 	vmul.f64	d5, d5, d4
    77d2:	ee36 7b05 	vadd.f64	d7, d6, d5
    77d6:	ed8d 7b00 	vstr	d7, [sp]
    77da:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    77de:	4b86      	ldr	r3, [pc, #536]	; (79f8 <__ieee754_pow+0x5c0>)
    77e0:	9a01      	ldr	r2, [sp, #4]
    77e2:	f10b 3bff 	add.w	fp, fp, #4294967295
    77e6:	ea5b 0409 	orrs.w	r4, fp, r9
    77ea:	bf14      	ite	ne
    77ec:	eeb0 8b47 	vmovne.f64	d8, d7
    77f0:	eeb0 8b40 	vmoveq.f64	d8, d0
    77f4:	429a      	cmp	r2, r3
    77f6:	9c00      	ldr	r4, [sp, #0]
    77f8:	f340 8102 	ble.w	7a00 <__ieee754_pow+0x5c8>
    77fc:	f102 433f 	add.w	r3, r2, #3204448256	; 0xbf000000
    7800:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    7804:	4323      	orrs	r3, r4
    7806:	f040 8171 	bne.w	7aec <__ieee754_pow+0x6b4>
    780a:	ee36 4b05 	vadd.f64	d4, d6, d5
    780e:	ee34 4b45 	vsub.f64	d4, d4, d5
    7812:	ed9f 7b65 	vldr	d7, [pc, #404]	; 79a8 <__ieee754_pow+0x570>
    7816:	ee36 7b07 	vadd.f64	d7, d6, d7
    781a:	eeb4 7bc4 	vcmpe.f64	d7, d4
    781e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7822:	f300 8163 	bgt.w	7aec <__ieee754_pow+0x6b4>
    7826:	4613      	mov	r3, r2
    7828:	151b      	asrs	r3, r3, #20
    782a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    782e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    7832:	fa41 f303 	asr.w	r3, r1, r3
    7836:	1899      	adds	r1, r3, r2
    7838:	f3c1 500a 	ubfx	r0, r1, #20, #11
    783c:	4e6f      	ldr	r6, [pc, #444]	; (79fc <__ieee754_pow+0x5c4>)
    783e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
    7842:	4106      	asrs	r6, r0
    7844:	ea21 0506 	bic.w	r5, r1, r6
    7848:	2400      	movs	r4, #0
    784a:	f3c1 0313 	ubfx	r3, r1, #0, #20
    784e:	ec45 4b17 	vmov	d7, r4, r5
    7852:	f1c0 0014 	rsb	r0, r0, #20
    7856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    785a:	fa43 f000 	asr.w	r0, r3, r0
    785e:	2a00      	cmp	r2, #0
    7860:	ee35 5b47 	vsub.f64	d5, d5, d7
    7864:	ee36 7b05 	vadd.f64	d7, d6, d5
    7868:	ed8d 7b00 	vstr	d7, [sp]
    786c:	bfb8      	it	lt
    786e:	4240      	neglt	r0, r0
    7870:	0501      	lsls	r1, r0, #20
    7872:	e9dd 2300 	ldrd	r2, r3, [sp]
    7876:	eeb0 2b00 	vmov.f64	d2, #0	; 0x40000000  2.0
    787a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    787e:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 79b0 <__ieee754_pow+0x578>
    7882:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 79b8 <__ieee754_pow+0x580>
    7886:	2200      	movs	r2, #0
    7888:	ed9f 4b4d 	vldr	d4, [pc, #308]	; 79c0 <__ieee754_pow+0x588>
    788c:	ec43 2b13 	vmov	d3, r2, r3
    7890:	ed9f 9b4d 	vldr	d9, [pc, #308]	; 79c8 <__ieee754_pow+0x590>
    7894:	ee23 4b04 	vmul.f64	d4, d3, d4
    7898:	ee33 5b45 	vsub.f64	d5, d3, d5
    789c:	ee36 5b45 	vsub.f64	d5, d6, d5
    78a0:	eeb0 6b44 	vmov.f64	d6, d4
    78a4:	eea5 6b00 	vfma.f64	d6, d5, d0
    78a8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 79d0 <__ieee754_pow+0x598>
    78ac:	eeb0 4b46 	vmov.f64	d4, d6
    78b0:	eea3 4b01 	vfma.f64	d4, d3, d1
    78b4:	eeb0 0b44 	vmov.f64	d0, d4
    78b8:	eea3 0b41 	vfms.f64	d0, d3, d1
    78bc:	ee36 6b40 	vsub.f64	d6, d6, d0
    78c0:	ed9f 0b45 	vldr	d0, [pc, #276]	; 79d8 <__ieee754_pow+0x5a0>
    78c4:	ee24 3b04 	vmul.f64	d3, d4, d4
    78c8:	eea3 5b09 	vfma.f64	d5, d3, d9
    78cc:	ed9f 1b44 	vldr	d1, [pc, #272]	; 79e0 <__ieee754_pow+0x5a8>
    78d0:	eea3 0b05 	vfma.f64	d0, d3, d5
    78d4:	eea4 6b06 	vfma.f64	d6, d4, d6
    78d8:	ed9f 5b43 	vldr	d5, [pc, #268]	; 79e8 <__ieee754_pow+0x5b0>
    78dc:	eea3 1b00 	vfma.f64	d1, d3, d0
    78e0:	eea3 5b01 	vfma.f64	d5, d3, d1
    78e4:	eeb0 1b44 	vmov.f64	d1, d4
    78e8:	eea3 1b45 	vfms.f64	d1, d3, d5
    78ec:	ee24 3b01 	vmul.f64	d3, d4, d1
    78f0:	ee31 2b42 	vsub.f64	d2, d1, d2
    78f4:	ee83 5b02 	vdiv.f64	d5, d3, d2
    78f8:	ee35 6b46 	vsub.f64	d6, d5, d6
    78fc:	ee36 6b44 	vsub.f64	d6, d6, d4
    7900:	ee37 7b46 	vsub.f64	d7, d7, d6
    7904:	ed8d 7b00 	vstr	d7, [sp]
    7908:	9b01      	ldr	r3, [sp, #4]
    790a:	4419      	add	r1, r3
    790c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    7910:	f2c0 811a 	blt.w	7b48 <__ieee754_pow+0x710>
    7914:	e9dd 2300 	ldrd	r2, r3, [sp]
    7918:	460b      	mov	r3, r1
    791a:	ec43 2b10 	vmov	d0, r2, r3
    791e:	ee20 0b08 	vmul.f64	d0, d0, d8
    7922:	e5d2      	b.n	74ca <__ieee754_pow+0x92>
    7924:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    7928:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    792c:	ea54 030b 	orrs.w	r3, r4, fp
    7930:	f000 80fa 	beq.w	7b28 <__ieee754_pow+0x6f0>
    7934:	f1bb 0f01 	cmp.w	fp, #1
    7938:	f47f ae0e 	bne.w	7558 <__ieee754_pow+0x120>
    793c:	ed9d 7b00 	vldr	d7, [sp]
    7940:	eeb1 0b47 	vneg.f64	d0, d7
    7944:	e5c1      	b.n	74ca <__ieee754_pow+0x92>
    7946:	ec43 2b17 	vmov	d7, r2, r3
    794a:	ee27 0b07 	vmul.f64	d0, d7, d7
    794e:	e5bc      	b.n	74ca <__ieee754_pow+0x92>
    7950:	00000000 	.word	0x00000000
    7954:	43400000 	.word	0x43400000
	...
    7960:	4a454eef 	.word	0x4a454eef
    7964:	3fca7e28 	.word	0x3fca7e28
    7968:	93c9db65 	.word	0x93c9db65
    796c:	3fcd864a 	.word	0x3fcd864a
    7970:	a91d4101 	.word	0xa91d4101
    7974:	3fd17460 	.word	0x3fd17460
    7978:	518f264d 	.word	0x518f264d
    797c:	3fd55555 	.word	0x3fd55555
    7980:	db6fabff 	.word	0xdb6fabff
    7984:	3fdb6db6 	.word	0x3fdb6db6
    7988:	33333303 	.word	0x33333303
    798c:	3fe33333 	.word	0x3fe33333
    7990:	e0000000 	.word	0xe0000000
    7994:	3feec709 	.word	0x3feec709
    7998:	dc3a03fd 	.word	0xdc3a03fd
    799c:	3feec709 	.word	0x3feec709
    79a0:	145b01f5 	.word	0x145b01f5
    79a4:	be3e2fe0 	.word	0xbe3e2fe0
    79a8:	652b82fe 	.word	0x652b82fe
    79ac:	3c971547 	.word	0x3c971547
    79b0:	00000000 	.word	0x00000000
    79b4:	3fe62e43 	.word	0x3fe62e43
    79b8:	fefa39ef 	.word	0xfefa39ef
    79bc:	3fe62e42 	.word	0x3fe62e42
    79c0:	0ca86c39 	.word	0x0ca86c39
    79c4:	be205c61 	.word	0xbe205c61
    79c8:	72bea4d0 	.word	0x72bea4d0
    79cc:	3e663769 	.word	0x3e663769
    79d0:	c5d26bf1 	.word	0xc5d26bf1
    79d4:	bebbbd41 	.word	0xbebbbd41
    79d8:	af25de2c 	.word	0xaf25de2c
    79dc:	3f11566a 	.word	0x3f11566a
    79e0:	16bebd93 	.word	0x16bebd93
    79e4:	bf66c16c 	.word	0xbf66c16c
    79e8:	5555553e 	.word	0x5555553e
    79ec:	3fc55555 	.word	0x3fc55555
    79f0:	0003988e 	.word	0x0003988e
    79f4:	000bb679 	.word	0x000bb679
    79f8:	408fffff 	.word	0x408fffff
    79fc:	000fffff 	.word	0x000fffff
    7a00:	4d69      	ldr	r5, [pc, #420]	; (7ba8 <__ieee754_pow+0x770>)
    7a02:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    7a06:	42ab      	cmp	r3, r5
    7a08:	f340 8084 	ble.w	7b14 <__ieee754_pow+0x6dc>
    7a0c:	4967      	ldr	r1, [pc, #412]	; (7bac <__ieee754_pow+0x774>)
    7a0e:	4411      	add	r1, r2
    7a10:	4321      	orrs	r1, r4
    7a12:	d109      	bne.n	7a28 <__ieee754_pow+0x5f0>
    7a14:	ee36 7b05 	vadd.f64	d7, d6, d5
    7a18:	ee37 7b45 	vsub.f64	d7, d7, d5
    7a1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    7a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a24:	f63f af00 	bhi.w	7828 <__ieee754_pow+0x3f0>
    7a28:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 7b60 <__ieee754_pow+0x728>
    7a2c:	ee28 7b00 	vmul.f64	d7, d8, d0
    7a30:	ee27 0b00 	vmul.f64	d0, d7, d0
    7a34:	e549      	b.n	74ca <__ieee754_pow+0x92>
    7a36:	f1b8 0f00 	cmp.w	r8, #0
    7a3a:	f6bf add4 	bge.w	75e6 <__ieee754_pow+0x1ae>
    7a3e:	ec41 0b17 	vmov	d7, r0, r1
    7a42:	eeb1 0b47 	vneg.f64	d0, d7
    7a46:	e540      	b.n	74ca <__ieee754_pow+0x92>
    7a48:	ed9d 5b00 	vldr	d5, [sp]
    7a4c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7a50:	ee87 6b05 	vdiv.f64	d6, d7, d5
    7a54:	ed8d 6b00 	vstr	d6, [sp]
    7a58:	e57a      	b.n	7550 <__ieee754_pow+0x118>
    7a5a:	4b55      	ldr	r3, [pc, #340]	; (7bb0 <__ieee754_pow+0x778>)
    7a5c:	429c      	cmp	r4, r3
    7a5e:	f77f adbf 	ble.w	75e0 <__ieee754_pow+0x1a8>
    7a62:	4b54      	ldr	r3, [pc, #336]	; (7bb4 <__ieee754_pow+0x77c>)
    7a64:	429c      	cmp	r4, r3
    7a66:	f73f ad61 	bgt.w	752c <__ieee754_pow+0xf4>
    7a6a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7a6e:	eeb5 8b00 	vmov.f64	d8, #80	; 0x3e800000  0.250
    7a72:	ed9d 5b00 	vldr	d5, [sp]
    7a76:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 7b68 <__ieee754_pow+0x730>
    7a7a:	ee35 7b47 	vsub.f64	d7, d5, d7
    7a7e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
    7a82:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 7b70 <__ieee754_pow+0x738>
    7a86:	eeb1 4b47 	vneg.f64	d4, d7
    7a8a:	ee27 0b07 	vmul.f64	d0, d7, d7
    7a8e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 7b78 <__ieee754_pow+0x740>
    7a92:	eea4 3b08 	vfma.f64	d3, d4, d8
    7a96:	eea4 5b03 	vfma.f64	d5, d4, d3
    7a9a:	ed9f 1b39 	vldr	d1, [pc, #228]	; 7b80 <__ieee754_pow+0x748>
    7a9e:	ee25 5b00 	vmul.f64	d5, d5, d0
    7aa2:	ee26 6b45 	vnmul.f64	d6, d6, d5
    7aa6:	eea7 6b01 	vfma.f64	d6, d7, d1
    7aaa:	eeb0 5b46 	vmov.f64	d5, d6
    7aae:	eea7 5b02 	vfma.f64	d5, d7, d2
    7ab2:	ec53 2b15 	vmov	r2, r3, d5
    7ab6:	2200      	movs	r2, #0
    7ab8:	ec43 2b15 	vmov	d5, r2, r3
    7abc:	eeb0 7b45 	vmov.f64	d7, d5
    7ac0:	eea4 7b02 	vfma.f64	d7, d4, d2
    7ac4:	ee36 6b47 	vsub.f64	d6, d6, d7
    7ac8:	e671      	b.n	77ae <__ieee754_pow+0x376>
    7aca:	ed9f 3b2f 	vldr	d3, [pc, #188]	; 7b88 <__ieee754_pow+0x750>
    7ace:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7ad2:	eeb0 0b43 	vmov.f64	d0, d3
    7ad6:	2500      	movs	r5, #0
    7ad8:	e5cb      	b.n	7672 <__ieee754_pow+0x23a>
    7ada:	2600      	movs	r6, #0
    7adc:	e5ad      	b.n	763a <__ieee754_pow+0x202>
    7ade:	ec43 2b16 	vmov	d6, r2, r3
    7ae2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7ae6:	ee87 0b06 	vdiv.f64	d0, d7, d6
    7aea:	e4ee      	b.n	74ca <__ieee754_pow+0x92>
    7aec:	ed9f 0b28 	vldr	d0, [pc, #160]	; 7b90 <__ieee754_pow+0x758>
    7af0:	ee28 7b00 	vmul.f64	d7, d8, d0
    7af4:	ee27 0b00 	vmul.f64	d0, d7, d0
    7af8:	e4e7      	b.n	74ca <__ieee754_pow+0x92>
    7afa:	2e00      	cmp	r6, #0
    7afc:	f47f acf4 	bne.w	74e8 <__ieee754_pow+0xb0>
    7b00:	f1c7 0714 	rsb	r7, r7, #20
    7b04:	fa45 fe07 	asr.w	lr, r5, r7
    7b08:	fa0e f707 	lsl.w	r7, lr, r7
    7b0c:	42bd      	cmp	r5, r7
    7b0e:	d020      	beq.n	7b52 <__ieee754_pow+0x71a>
    7b10:	46b3      	mov	fp, r6
    7b12:	e4ba      	b.n	748a <__ieee754_pow+0x52>
    7b14:	4c28      	ldr	r4, [pc, #160]	; (7bb8 <__ieee754_pow+0x780>)
    7b16:	42a3      	cmp	r3, r4
    7b18:	f73f ae86 	bgt.w	7828 <__ieee754_pow+0x3f0>
    7b1c:	ee36 7b05 	vadd.f64	d7, d6, d5
    7b20:	4601      	mov	r1, r0
    7b22:	ed8d 7b00 	vstr	d7, [sp]
    7b26:	e6a4      	b.n	7872 <__ieee754_pow+0x43a>
    7b28:	ed9d 7b00 	vldr	d7, [sp]
    7b2c:	ee37 7b47 	vsub.f64	d7, d7, d7
    7b30:	ee87 0b07 	vdiv.f64	d0, d7, d7
    7b34:	e4c9      	b.n	74ca <__ieee754_pow+0x92>
    7b36:	ed9f 3b18 	vldr	d3, [pc, #96]	; 7b98 <__ieee754_pow+0x760>
    7b3a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
    7b3e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 7ba0 <__ieee754_pow+0x768>
    7b42:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    7b46:	e594      	b.n	7672 <__ieee754_pow+0x23a>
    7b48:	eeb0 0b47 	vmov.f64	d0, d7
    7b4c:	f000 f9a4 	bl	7e98 <scalbn>
    7b50:	e6e5      	b.n	791e <__ieee754_pow+0x4e6>
    7b52:	f00e 0e01 	and.w	lr, lr, #1
    7b56:	f1ce 0b02 	rsb	fp, lr, #2
    7b5a:	e496      	b.n	748a <__ieee754_pow+0x52>
    7b5c:	f3af 8000 	nop.w
    7b60:	c2f8f359 	.word	0xc2f8f359
    7b64:	01a56e1f 	.word	0x01a56e1f
    7b68:	60000000 	.word	0x60000000
    7b6c:	3ff71547 	.word	0x3ff71547
    7b70:	55555555 	.word	0x55555555
    7b74:	3fd55555 	.word	0x3fd55555
    7b78:	652b82fe 	.word	0x652b82fe
    7b7c:	3ff71547 	.word	0x3ff71547
    7b80:	f85ddf44 	.word	0xf85ddf44
    7b84:	3e54ae0b 	.word	0x3e54ae0b
	...
    7b90:	8800759c 	.word	0x8800759c
    7b94:	7e37e43c 	.word	0x7e37e43c
    7b98:	40000000 	.word	0x40000000
    7b9c:	3fe2b803 	.word	0x3fe2b803
    7ba0:	43cfd006 	.word	0x43cfd006
    7ba4:	3e4cfdeb 	.word	0x3e4cfdeb
    7ba8:	4090cbff 	.word	0x4090cbff
    7bac:	3f6f3400 	.word	0x3f6f3400
    7bb0:	3feffffe 	.word	0x3feffffe
    7bb4:	3ff00000 	.word	0x3ff00000
    7bb8:	3fe00000 	.word	0x3fe00000

00007bbc <__ieee754_sqrt>:
    7bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bc0:	b082      	sub	sp, #8
    7bc2:	ed8d 0b00 	vstr	d0, [sp]
    7bc6:	495d      	ldr	r1, [pc, #372]	; (7d3c <__ieee754_sqrt+0x180>)
    7bc8:	9b01      	ldr	r3, [sp, #4]
    7bca:	9800      	ldr	r0, [sp, #0]
    7bcc:	460c      	mov	r4, r1
    7bce:	4019      	ands	r1, r3
    7bd0:	42a1      	cmp	r1, r4
    7bd2:	f000 8098 	beq.w	7d06 <__ieee754_sqrt+0x14a>
    7bd6:	2b00      	cmp	r3, #0
    7bd8:	4602      	mov	r2, r0
    7bda:	dd77      	ble.n	7ccc <__ieee754_sqrt+0x110>
    7bdc:	151f      	asrs	r7, r3, #20
    7bde:	f000 8082 	beq.w	7ce6 <__ieee754_sqrt+0x12a>
    7be2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    7be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7bea:	07f9      	lsls	r1, r7, #31
    7bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    7bf0:	d467      	bmi.n	7cc2 <__ieee754_sqrt+0x106>
    7bf2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    7bf6:	2600      	movs	r6, #0
    7bf8:	440b      	add	r3, r1
    7bfa:	107f      	asrs	r7, r7, #1
    7bfc:	0052      	lsls	r2, r2, #1
    7bfe:	46b6      	mov	lr, r6
    7c00:	2016      	movs	r0, #22
    7c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    7c06:	eb0e 0401 	add.w	r4, lr, r1
    7c0a:	429c      	cmp	r4, r3
    7c0c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    7c10:	ea4f 0242 	mov.w	r2, r2, lsl #1
    7c14:	dc03      	bgt.n	7c1e <__ieee754_sqrt+0x62>
    7c16:	1b1b      	subs	r3, r3, r4
    7c18:	eb04 0e01 	add.w	lr, r4, r1
    7c1c:	440e      	add	r6, r1
    7c1e:	3801      	subs	r0, #1
    7c20:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    7c24:	ea4f 0151 	mov.w	r1, r1, lsr #1
    7c28:	d1ed      	bne.n	7c06 <__ieee754_sqrt+0x4a>
    7c2a:	4684      	mov	ip, r0
    7c2c:	2420      	movs	r4, #32
    7c2e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    7c32:	e009      	b.n	7c48 <__ieee754_sqrt+0x8c>
    7c34:	d020      	beq.n	7c78 <__ieee754_sqrt+0xbc>
    7c36:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    7c3a:	3c01      	subs	r4, #1
    7c3c:	ea4f 0151 	mov.w	r1, r1, lsr #1
    7c40:	442b      	add	r3, r5
    7c42:	ea4f 0242 	mov.w	r2, r2, lsl #1
    7c46:	d020      	beq.n	7c8a <__ieee754_sqrt+0xce>
    7c48:	459e      	cmp	lr, r3
    7c4a:	eb01 050c 	add.w	r5, r1, ip
    7c4e:	daf1      	bge.n	7c34 <__ieee754_sqrt+0x78>
    7c50:	2d00      	cmp	r5, #0
    7c52:	eb05 0c01 	add.w	ip, r5, r1
    7c56:	db09      	blt.n	7c6c <__ieee754_sqrt+0xb0>
    7c58:	46f0      	mov	r8, lr
    7c5a:	4295      	cmp	r5, r2
    7c5c:	ebce 0303 	rsb	r3, lr, r3
    7c60:	d900      	bls.n	7c64 <__ieee754_sqrt+0xa8>
    7c62:	3b01      	subs	r3, #1
    7c64:	1b52      	subs	r2, r2, r5
    7c66:	4408      	add	r0, r1
    7c68:	46c6      	mov	lr, r8
    7c6a:	e7e4      	b.n	7c36 <__ieee754_sqrt+0x7a>
    7c6c:	f1bc 0f00 	cmp.w	ip, #0
    7c70:	dbf2      	blt.n	7c58 <__ieee754_sqrt+0x9c>
    7c72:	f10e 0801 	add.w	r8, lr, #1
    7c76:	e7f0      	b.n	7c5a <__ieee754_sqrt+0x9e>
    7c78:	4295      	cmp	r5, r2
    7c7a:	d81a      	bhi.n	7cb2 <__ieee754_sqrt+0xf6>
    7c7c:	2d00      	cmp	r5, #0
    7c7e:	eb05 0c01 	add.w	ip, r5, r1
    7c82:	db48      	blt.n	7d16 <__ieee754_sqrt+0x15a>
    7c84:	4698      	mov	r8, r3
    7c86:	2300      	movs	r3, #0
    7c88:	e7ec      	b.n	7c64 <__ieee754_sqrt+0xa8>
    7c8a:	4313      	orrs	r3, r2
    7c8c:	d113      	bne.n	7cb6 <__ieee754_sqrt+0xfa>
    7c8e:	0840      	lsrs	r0, r0, #1
    7c90:	1071      	asrs	r1, r6, #1
    7c92:	07f3      	lsls	r3, r6, #31
    7c94:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
    7c98:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    7c9c:	bf48      	it	mi
    7c9e:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    7ca2:	eb01 5307 	add.w	r3, r1, r7, lsl #20
    7ca6:	4602      	mov	r2, r0
    7ca8:	ec43 2b10 	vmov	d0, r2, r3
    7cac:	b002      	add	sp, #8
    7cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cb2:	4673      	mov	r3, lr
    7cb4:	e7bf      	b.n	7c36 <__ieee754_sqrt+0x7a>
    7cb6:	1c42      	adds	r2, r0, #1
    7cb8:	d031      	beq.n	7d1e <__ieee754_sqrt+0x162>
    7cba:	f000 0301 	and.w	r3, r0, #1
    7cbe:	4418      	add	r0, r3
    7cc0:	e7e5      	b.n	7c8e <__ieee754_sqrt+0xd2>
    7cc2:	005b      	lsls	r3, r3, #1
    7cc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    7cc8:	0052      	lsls	r2, r2, #1
    7cca:	e792      	b.n	7bf2 <__ieee754_sqrt+0x36>
    7ccc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    7cd0:	4301      	orrs	r1, r0
    7cd2:	d01d      	beq.n	7d10 <__ieee754_sqrt+0x154>
    7cd4:	bb5b      	cbnz	r3, 7d2e <__ieee754_sqrt+0x172>
    7cd6:	461f      	mov	r7, r3
    7cd8:	0ad3      	lsrs	r3, r2, #11
    7cda:	3f15      	subs	r7, #21
    7cdc:	0552      	lsls	r2, r2, #21
    7cde:	2b00      	cmp	r3, #0
    7ce0:	d0fa      	beq.n	7cd8 <__ieee754_sqrt+0x11c>
    7ce2:	02dd      	lsls	r5, r3, #11
    7ce4:	d41e      	bmi.n	7d24 <__ieee754_sqrt+0x168>
    7ce6:	2100      	movs	r1, #0
    7ce8:	e000      	b.n	7cec <__ieee754_sqrt+0x130>
    7cea:	4601      	mov	r1, r0
    7cec:	005b      	lsls	r3, r3, #1
    7cee:	02dc      	lsls	r4, r3, #11
    7cf0:	f101 0001 	add.w	r0, r1, #1
    7cf4:	d5f9      	bpl.n	7cea <__ieee754_sqrt+0x12e>
    7cf6:	f1c0 0420 	rsb	r4, r0, #32
    7cfa:	fa22 f404 	lsr.w	r4, r2, r4
    7cfe:	4323      	orrs	r3, r4
    7d00:	1a7f      	subs	r7, r7, r1
    7d02:	4082      	lsls	r2, r0
    7d04:	e76d      	b.n	7be2 <__ieee754_sqrt+0x26>
    7d06:	eea0 0b00 	vfma.f64	d0, d0, d0
    7d0a:	b002      	add	sp, #8
    7d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d10:	ed9d 0b00 	vldr	d0, [sp]
    7d14:	e7ca      	b.n	7cac <__ieee754_sqrt+0xf0>
    7d16:	f1bc 0f00 	cmp.w	ip, #0
    7d1a:	daaa      	bge.n	7c72 <__ieee754_sqrt+0xb6>
    7d1c:	e7b2      	b.n	7c84 <__ieee754_sqrt+0xc8>
    7d1e:	3601      	adds	r6, #1
    7d20:	4620      	mov	r0, r4
    7d22:	e7b5      	b.n	7c90 <__ieee754_sqrt+0xd4>
    7d24:	2420      	movs	r4, #32
    7d26:	f04f 31ff 	mov.w	r1, #4294967295
    7d2a:	2000      	movs	r0, #0
    7d2c:	e7e5      	b.n	7cfa <__ieee754_sqrt+0x13e>
    7d2e:	ed9d 7b00 	vldr	d7, [sp]
    7d32:	ee37 7b47 	vsub.f64	d7, d7, d7
    7d36:	ee87 0b07 	vdiv.f64	d0, d7, d7
    7d3a:	e7b7      	b.n	7cac <__ieee754_sqrt+0xf0>
    7d3c:	7ff00000 	.word	0x7ff00000

00007d40 <fabs>:
    7d40:	ec53 2b10 	vmov	r2, r3, d0
    7d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    7d48:	ec43 2b10 	vmov	d0, r2, r3
    7d4c:	4770      	bx	lr
    7d4e:	bf00      	nop

00007d50 <finite>:
    7d50:	ee10 3a90 	vmov	r3, s1
    7d54:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    7d58:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
    7d5c:	0fc0      	lsrs	r0, r0, #31
    7d5e:	4770      	bx	lr

00007d60 <matherr>:
    7d60:	2000      	movs	r0, #0
    7d62:	4770      	bx	lr
    7d64:	0000      	movs	r0, r0
	...

00007d68 <nan>:
    7d68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 7d70 <nan+0x8>
    7d6c:	4770      	bx	lr
    7d6e:	bf00      	nop
    7d70:	00000000 	.word	0x00000000
    7d74:	7ff80000 	.word	0x7ff80000

00007d78 <rint>:
    7d78:	b4f0      	push	{r4, r5, r6, r7}
    7d7a:	ec53 2b10 	vmov	r2, r3, d0
    7d7e:	f3c3 550a 	ubfx	r5, r3, #20, #11
    7d82:	f2a5 30ff 	subw	r0, r5, #1023	; 0x3ff
    7d86:	2813      	cmp	r0, #19
    7d88:	b084      	sub	sp, #16
    7d8a:	4619      	mov	r1, r3
    7d8c:	ea4f 77d3 	mov.w	r7, r3, lsr #31
    7d90:	ee10 4a10 	vmov	r4, s0
    7d94:	dc2c      	bgt.n	7df0 <rint+0x78>
    7d96:	2800      	cmp	r0, #0
    7d98:	db47      	blt.n	7e2a <rint+0xb2>
    7d9a:	4d3c      	ldr	r5, [pc, #240]	; (7e8c <rint+0x114>)
    7d9c:	4105      	asrs	r5, r0
    7d9e:	ea03 0605 	and.w	r6, r3, r5
    7da2:	4316      	orrs	r6, r2
    7da4:	d029      	beq.n	7dfa <rint+0x82>
    7da6:	086d      	lsrs	r5, r5, #1
    7da8:	402b      	ands	r3, r5
    7daa:	431c      	orrs	r4, r3
    7dac:	d00c      	beq.n	7dc8 <rint+0x50>
    7dae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    7db2:	2813      	cmp	r0, #19
    7db4:	ea21 0505 	bic.w	r5, r1, r5
    7db8:	fa43 f100 	asr.w	r1, r3, r0
    7dbc:	ea41 0105 	orr.w	r1, r1, r5
    7dc0:	bf0c      	ite	eq
    7dc2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    7dc6:	2400      	movne	r4, #0
    7dc8:	4831      	ldr	r0, [pc, #196]	; (7e90 <rint+0x118>)
    7dca:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
    7dce:	ed97 0b00 	vldr	d0, [r7]
    7dd2:	460b      	mov	r3, r1
    7dd4:	4622      	mov	r2, r4
    7dd6:	ec43 2b17 	vmov	d7, r2, r3
    7dda:	ee37 7b00 	vadd.f64	d7, d7, d0
    7dde:	ed8d 7b02 	vstr	d7, [sp, #8]
    7de2:	ed9d 7b02 	vldr	d7, [sp, #8]
    7de6:	ee37 0b40 	vsub.f64	d0, d7, d0
    7dea:	b004      	add	sp, #16
    7dec:	bcf0      	pop	{r4, r5, r6, r7}
    7dee:	4770      	bx	lr
    7df0:	2833      	cmp	r0, #51	; 0x33
    7df2:	dd07      	ble.n	7e04 <rint+0x8c>
    7df4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    7df8:	d044      	beq.n	7e84 <rint+0x10c>
    7dfa:	ec43 2b10 	vmov	d0, r2, r3
    7dfe:	b004      	add	sp, #16
    7e00:	bcf0      	pop	{r4, r5, r6, r7}
    7e02:	4770      	bx	lr
    7e04:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
    7e08:	f04f 30ff 	mov.w	r0, #4294967295
    7e0c:	40e8      	lsrs	r0, r5
    7e0e:	4202      	tst	r2, r0
    7e10:	d0f3      	beq.n	7dfa <rint+0x82>
    7e12:	0840      	lsrs	r0, r0, #1
    7e14:	4202      	tst	r2, r0
    7e16:	d0d7      	beq.n	7dc8 <rint+0x50>
    7e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7e1c:	ea24 0000 	bic.w	r0, r4, r0
    7e20:	fa43 f505 	asr.w	r5, r3, r5
    7e24:	ea45 0400 	orr.w	r4, r5, r0
    7e28:	e7ce      	b.n	7dc8 <rint+0x50>
    7e2a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    7e2e:	4310      	orrs	r0, r2
    7e30:	ee10 6a10 	vmov	r6, s0
    7e34:	d0e1      	beq.n	7dfa <rint+0x82>
    7e36:	f3c3 0013 	ubfx	r0, r3, #0, #20
    7e3a:	4306      	orrs	r6, r0
    7e3c:	4270      	negs	r0, r6
    7e3e:	4306      	orrs	r6, r0
    7e40:	4813      	ldr	r0, [pc, #76]	; (7e90 <rint+0x118>)
    7e42:	0c59      	lsrs	r1, r3, #17
    7e44:	0b36      	lsrs	r6, r6, #12
    7e46:	0449      	lsls	r1, r1, #17
    7e48:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
    7e4c:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
    7e50:	ea46 0301 	orr.w	r3, r6, r1
    7e54:	ed90 6b00 	vldr	d6, [r0]
    7e58:	ec43 2b17 	vmov	d7, r2, r3
    7e5c:	ee37 7b06 	vadd.f64	d7, d7, d6
    7e60:	ed8d 7b02 	vstr	d7, [sp, #8]
    7e64:	ed9d 7b02 	vldr	d7, [sp, #8]
    7e68:	ee37 7b46 	vsub.f64	d7, d7, d6
    7e6c:	ed8d 7b00 	vstr	d7, [sp]
    7e70:	9901      	ldr	r1, [sp, #4]
    7e72:	e9dd 2300 	ldrd	r2, r3, [sp]
    7e76:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    7e7a:	ea41 73c7 	orr.w	r3, r1, r7, lsl #31
    7e7e:	ec43 2b10 	vmov	d0, r2, r3
    7e82:	e7bc      	b.n	7dfe <rint+0x86>
    7e84:	ee30 0b00 	vadd.f64	d0, d0, d0
    7e88:	e7b9      	b.n	7dfe <rint+0x86>
    7e8a:	bf00      	nop
    7e8c:	000fffff 	.word	0x000fffff
    7e90:	20000a08 	.word	0x20000a08
    7e94:	00000000 	.word	0x00000000

00007e98 <scalbn>:
    7e98:	b510      	push	{r4, lr}
    7e9a:	ed2d 8b02 	vpush	{d8}
    7e9e:	b082      	sub	sp, #8
    7ea0:	ed8d 0b00 	vstr	d0, [sp]
    7ea4:	9b01      	ldr	r3, [sp, #4]
    7ea6:	9900      	ldr	r1, [sp, #0]
    7ea8:	f3c3 520a 	ubfx	r2, r3, #20, #11
    7eac:	bb2a      	cbnz	r2, 7efa <scalbn+0x62>
    7eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    7eb2:	430b      	orrs	r3, r1
    7eb4:	d02d      	beq.n	7f12 <scalbn+0x7a>
    7eb6:	ed9f 7b36 	vldr	d7, [pc, #216]	; 7f90 <scalbn+0xf8>
    7eba:	4a3d      	ldr	r2, [pc, #244]	; (7fb0 <scalbn+0x118>)
    7ebc:	ee20 7b07 	vmul.f64	d7, d0, d7
    7ec0:	4290      	cmp	r0, r2
    7ec2:	ed8d 7b00 	vstr	d7, [sp]
    7ec6:	9b01      	ldr	r3, [sp, #4]
    7ec8:	db29      	blt.n	7f1e <scalbn+0x86>
    7eca:	f3c3 520a 	ubfx	r2, r3, #20, #11
    7ece:	3a36      	subs	r2, #54	; 0x36
    7ed0:	1884      	adds	r4, r0, r2
    7ed2:	f240 72fe 	movw	r2, #2046	; 0x7fe
    7ed6:	4294      	cmp	r4, r2
    7ed8:	dc30      	bgt.n	7f3c <scalbn+0xa4>
    7eda:	2c00      	cmp	r4, #0
    7edc:	dd27      	ble.n	7f2e <scalbn+0x96>
    7ede:	f023 41ff 	bic.w	r1, r3, #2139095040	; 0x7f800000
    7ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
    7ee6:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
    7eea:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
    7eee:	ec43 2b10 	vmov	d0, r2, r3
    7ef2:	b002      	add	sp, #8
    7ef4:	ecbd 8b02 	vpop	{d8}
    7ef8:	bd10      	pop	{r4, pc}
    7efa:	f240 71ff 	movw	r1, #2047	; 0x7ff
    7efe:	428a      	cmp	r2, r1
    7f00:	d1e6      	bne.n	7ed0 <scalbn+0x38>
    7f02:	ed9d 7b00 	vldr	d7, [sp]
    7f06:	ee37 0b07 	vadd.f64	d0, d7, d7
    7f0a:	b002      	add	sp, #8
    7f0c:	ecbd 8b02 	vpop	{d8}
    7f10:	bd10      	pop	{r4, pc}
    7f12:	ed9d 0b00 	vldr	d0, [sp]
    7f16:	b002      	add	sp, #8
    7f18:	ecbd 8b02 	vpop	{d8}
    7f1c:	bd10      	pop	{r4, pc}
    7f1e:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 7f98 <scalbn+0x100>
    7f22:	ee27 0b00 	vmul.f64	d0, d7, d0
    7f26:	b002      	add	sp, #8
    7f28:	ecbd 8b02 	vpop	{d8}
    7f2c:	bd10      	pop	{r4, pc}
    7f2e:	f114 0f35 	cmn.w	r4, #53	; 0x35
    7f32:	da11      	bge.n	7f58 <scalbn+0xc0>
    7f34:	f24c 3350 	movw	r3, #50000	; 0xc350
    7f38:	4298      	cmp	r0, r3
    7f3a:	dd1d      	ble.n	7f78 <scalbn+0xe0>
    7f3c:	ed9f 8b18 	vldr	d8, [pc, #96]	; 7fa0 <scalbn+0x108>
    7f40:	ed9d 1b00 	vldr	d1, [sp]
    7f44:	eeb0 0b48 	vmov.f64	d0, d8
    7f48:	f000 f834 	bl	7fb4 <copysign>
    7f4c:	ee20 0b08 	vmul.f64	d0, d0, d8
    7f50:	b002      	add	sp, #8
    7f52:	ecbd 8b02 	vpop	{d8}
    7f56:	bd10      	pop	{r4, pc}
    7f58:	f023 41ff 	bic.w	r1, r3, #2139095040	; 0x7f800000
    7f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
    7f60:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
    7f64:	3436      	adds	r4, #54	; 0x36
    7f66:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
    7f6a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 7fa8 <scalbn+0x110>
    7f6e:	ec43 2b17 	vmov	d7, r2, r3
    7f72:	ee27 0b00 	vmul.f64	d0, d7, d0
    7f76:	e7bc      	b.n	7ef2 <scalbn+0x5a>
    7f78:	ed9f 8b07 	vldr	d8, [pc, #28]	; 7f98 <scalbn+0x100>
    7f7c:	ed9d 1b00 	vldr	d1, [sp]
    7f80:	eeb0 0b48 	vmov.f64	d0, d8
    7f84:	f000 f816 	bl	7fb4 <copysign>
    7f88:	ee20 0b08 	vmul.f64	d0, d0, d8
    7f8c:	e7b1      	b.n	7ef2 <scalbn+0x5a>
    7f8e:	bf00      	nop
    7f90:	00000000 	.word	0x00000000
    7f94:	43500000 	.word	0x43500000
    7f98:	c2f8f359 	.word	0xc2f8f359
    7f9c:	01a56e1f 	.word	0x01a56e1f
    7fa0:	8800759c 	.word	0x8800759c
    7fa4:	7e37e43c 	.word	0x7e37e43c
    7fa8:	00000000 	.word	0x00000000
    7fac:	3c900000 	.word	0x3c900000
    7fb0:	ffff3cb0 	.word	0xffff3cb0

00007fb4 <copysign>:
    7fb4:	ec53 2b10 	vmov	r2, r3, d0
    7fb8:	ee11 0a90 	vmov	r0, s3
    7fbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    7fc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    7fc4:	ea41 0300 	orr.w	r3, r1, r0
    7fc8:	ec43 2b10 	vmov	d0, r2, r3
    7fcc:	4770      	bx	lr
    7fce:	bf00      	nop

00007fd0 <__aeabi_atexit>:
    7fd0:	460b      	mov	r3, r1
    7fd2:	4601      	mov	r1, r0
    7fd4:	4618      	mov	r0, r3
    7fd6:	f000 b809 	b.w	7fec <__cxa_atexit>
    7fda:	bf00      	nop

00007fdc <atof>:
    7fdc:	2100      	movs	r1, #0
    7fde:	f001 bf73 	b.w	9ec8 <strtod>
    7fe2:	bf00      	nop

00007fe4 <atoi>:
    7fe4:	220a      	movs	r2, #10
    7fe6:	2100      	movs	r1, #0
    7fe8:	f002 b81c 	b.w	a024 <strtol>

00007fec <__cxa_atexit>:
    7fec:	4613      	mov	r3, r2
    7fee:	460a      	mov	r2, r1
    7ff0:	4601      	mov	r1, r0
    7ff2:	2002      	movs	r0, #2
    7ff4:	f003 bb34 	b.w	b660 <__register_exitproc>

00007ff8 <__errno>:
    7ff8:	4b01      	ldr	r3, [pc, #4]	; (8000 <__errno+0x8>)
    7ffa:	6818      	ldr	r0, [r3, #0]
    7ffc:	4770      	bx	lr
    7ffe:	bf00      	nop
    8000:	20001530 	.word	0x20001530

00008004 <__libc_init_array>:
    8004:	b570      	push	{r4, r5, r6, lr}
    8006:	4e0f      	ldr	r6, [pc, #60]	; (8044 <__libc_init_array+0x40>)
    8008:	4d0f      	ldr	r5, [pc, #60]	; (8048 <__libc_init_array+0x44>)
    800a:	1b76      	subs	r6, r6, r5
    800c:	10b6      	asrs	r6, r6, #2
    800e:	bf18      	it	ne
    8010:	2400      	movne	r4, #0
    8012:	d005      	beq.n	8020 <__libc_init_array+0x1c>
    8014:	3401      	adds	r4, #1
    8016:	f855 3b04 	ldr.w	r3, [r5], #4
    801a:	4798      	blx	r3
    801c:	42a6      	cmp	r6, r4
    801e:	d1f9      	bne.n	8014 <__libc_init_array+0x10>
    8020:	4e0a      	ldr	r6, [pc, #40]	; (804c <__libc_init_array+0x48>)
    8022:	4d0b      	ldr	r5, [pc, #44]	; (8050 <__libc_init_array+0x4c>)
    8024:	1b76      	subs	r6, r6, r5
    8026:	f005 fe43 	bl	dcb0 <___init_veneer>
    802a:	10b6      	asrs	r6, r6, #2
    802c:	bf18      	it	ne
    802e:	2400      	movne	r4, #0
    8030:	d006      	beq.n	8040 <__libc_init_array+0x3c>
    8032:	3401      	adds	r4, #1
    8034:	f855 3b04 	ldr.w	r3, [r5], #4
    8038:	4798      	blx	r3
    803a:	42a6      	cmp	r6, r4
    803c:	d1f9      	bne.n	8032 <__libc_init_array+0x2e>
    803e:	bd70      	pop	{r4, r5, r6, pc}
    8040:	bd70      	pop	{r4, r5, r6, pc}
    8042:	bf00      	nop
    8044:	60001b10 	.word	0x60001b10
    8048:	60001b10 	.word	0x60001b10
    804c:	60001b30 	.word	0x60001b30
    8050:	60001b10 	.word	0x60001b10

00008054 <__itoa>:
    8054:	1e93      	subs	r3, r2, #2
    8056:	2b22      	cmp	r3, #34	; 0x22
    8058:	d810      	bhi.n	807c <__itoa+0x28>
    805a:	2a0a      	cmp	r2, #10
    805c:	b510      	push	{r4, lr}
    805e:	d006      	beq.n	806e <__itoa+0x1a>
    8060:	2300      	movs	r3, #0
    8062:	460c      	mov	r4, r1
    8064:	4419      	add	r1, r3
    8066:	f003 faab 	bl	b5c0 <__utoa>
    806a:	4620      	mov	r0, r4
    806c:	bd10      	pop	{r4, pc}
    806e:	2800      	cmp	r0, #0
    8070:	daf6      	bge.n	8060 <__itoa+0xc>
    8072:	232d      	movs	r3, #45	; 0x2d
    8074:	700b      	strb	r3, [r1, #0]
    8076:	4240      	negs	r0, r0
    8078:	2301      	movs	r3, #1
    807a:	e7f2      	b.n	8062 <__itoa+0xe>
    807c:	2000      	movs	r0, #0
    807e:	7008      	strb	r0, [r1, #0]
    8080:	4770      	bx	lr
    8082:	bf00      	nop

00008084 <itoa>:
    8084:	f7ff bfe6 	b.w	8054 <__itoa>

00008088 <__locale_ctype_ptr_l>:
    8088:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    808c:	4770      	bx	lr
    808e:	bf00      	nop

00008090 <malloc>:
    8090:	4b02      	ldr	r3, [pc, #8]	; (809c <malloc+0xc>)
    8092:	4601      	mov	r1, r0
    8094:	6818      	ldr	r0, [r3, #0]
    8096:	f000 b80b 	b.w	80b0 <_malloc_r>
    809a:	bf00      	nop
    809c:	20001530 	.word	0x20001530

000080a0 <free>:
    80a0:	4b02      	ldr	r3, [pc, #8]	; (80ac <free+0xc>)
    80a2:	4601      	mov	r1, r0
    80a4:	6818      	ldr	r0, [r3, #0]
    80a6:	f004 ba53 	b.w	c550 <_free_r>
    80aa:	bf00      	nop
    80ac:	20001530 	.word	0x20001530

000080b0 <_malloc_r>:
    80b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80b4:	f101 050b 	add.w	r5, r1, #11
    80b8:	2d16      	cmp	r5, #22
    80ba:	b083      	sub	sp, #12
    80bc:	4606      	mov	r6, r0
    80be:	f240 809f 	bls.w	8200 <_malloc_r+0x150>
    80c2:	f035 0507 	bics.w	r5, r5, #7
    80c6:	f100 80bf 	bmi.w	8248 <_malloc_r+0x198>
    80ca:	42a9      	cmp	r1, r5
    80cc:	f200 80bc 	bhi.w	8248 <_malloc_r+0x198>
    80d0:	f000 fba0 	bl	8814 <__malloc_lock>
    80d4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    80d8:	f0c0 829c 	bcc.w	8614 <_malloc_r+0x564>
    80dc:	0a6b      	lsrs	r3, r5, #9
    80de:	f000 80ba 	beq.w	8256 <_malloc_r+0x1a6>
    80e2:	2b04      	cmp	r3, #4
    80e4:	f200 8183 	bhi.w	83ee <_malloc_r+0x33e>
    80e8:	09a8      	lsrs	r0, r5, #6
    80ea:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    80ee:	ea4f 034e 	mov.w	r3, lr, lsl #1
    80f2:	3038      	adds	r0, #56	; 0x38
    80f4:	4fc4      	ldr	r7, [pc, #784]	; (8408 <_malloc_r+0x358>)
    80f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    80fa:	f1a3 0108 	sub.w	r1, r3, #8
    80fe:	685c      	ldr	r4, [r3, #4]
    8100:	42a1      	cmp	r1, r4
    8102:	d107      	bne.n	8114 <_malloc_r+0x64>
    8104:	e0ac      	b.n	8260 <_malloc_r+0x1b0>
    8106:	2a00      	cmp	r2, #0
    8108:	f280 80ac 	bge.w	8264 <_malloc_r+0x1b4>
    810c:	68e4      	ldr	r4, [r4, #12]
    810e:	42a1      	cmp	r1, r4
    8110:	f000 80a6 	beq.w	8260 <_malloc_r+0x1b0>
    8114:	6863      	ldr	r3, [r4, #4]
    8116:	f023 0303 	bic.w	r3, r3, #3
    811a:	1b5a      	subs	r2, r3, r5
    811c:	2a0f      	cmp	r2, #15
    811e:	ddf2      	ble.n	8106 <_malloc_r+0x56>
    8120:	49b9      	ldr	r1, [pc, #740]	; (8408 <_malloc_r+0x358>)
    8122:	693c      	ldr	r4, [r7, #16]
    8124:	f101 0e08 	add.w	lr, r1, #8
    8128:	4574      	cmp	r4, lr
    812a:	f000 81b3 	beq.w	8494 <_malloc_r+0x3e4>
    812e:	6863      	ldr	r3, [r4, #4]
    8130:	f023 0303 	bic.w	r3, r3, #3
    8134:	1b5a      	subs	r2, r3, r5
    8136:	2a0f      	cmp	r2, #15
    8138:	f300 8199 	bgt.w	846e <_malloc_r+0x3be>
    813c:	2a00      	cmp	r2, #0
    813e:	f8c1 e014 	str.w	lr, [r1, #20]
    8142:	f8c1 e010 	str.w	lr, [r1, #16]
    8146:	f280 809e 	bge.w	8286 <_malloc_r+0x1d6>
    814a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    814e:	f080 8167 	bcs.w	8420 <_malloc_r+0x370>
    8152:	08db      	lsrs	r3, r3, #3
    8154:	f103 0c01 	add.w	ip, r3, #1
    8158:	2201      	movs	r2, #1
    815a:	109b      	asrs	r3, r3, #2
    815c:	fa02 f303 	lsl.w	r3, r2, r3
    8160:	684a      	ldr	r2, [r1, #4]
    8162:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    8166:	f8c4 8008 	str.w	r8, [r4, #8]
    816a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    816e:	431a      	orrs	r2, r3
    8170:	f1a9 0308 	sub.w	r3, r9, #8
    8174:	60e3      	str	r3, [r4, #12]
    8176:	604a      	str	r2, [r1, #4]
    8178:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    817c:	f8c8 400c 	str.w	r4, [r8, #12]
    8180:	1083      	asrs	r3, r0, #2
    8182:	2401      	movs	r4, #1
    8184:	409c      	lsls	r4, r3
    8186:	4294      	cmp	r4, r2
    8188:	f200 808a 	bhi.w	82a0 <_malloc_r+0x1f0>
    818c:	4214      	tst	r4, r2
    818e:	d106      	bne.n	819e <_malloc_r+0xee>
    8190:	f020 0003 	bic.w	r0, r0, #3
    8194:	0064      	lsls	r4, r4, #1
    8196:	4214      	tst	r4, r2
    8198:	f100 0004 	add.w	r0, r0, #4
    819c:	d0fa      	beq.n	8194 <_malloc_r+0xe4>
    819e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    81a2:	46cc      	mov	ip, r9
    81a4:	4680      	mov	r8, r0
    81a6:	f8dc 100c 	ldr.w	r1, [ip, #12]
    81aa:	458c      	cmp	ip, r1
    81ac:	d107      	bne.n	81be <_malloc_r+0x10e>
    81ae:	e173      	b.n	8498 <_malloc_r+0x3e8>
    81b0:	2a00      	cmp	r2, #0
    81b2:	f280 8181 	bge.w	84b8 <_malloc_r+0x408>
    81b6:	68c9      	ldr	r1, [r1, #12]
    81b8:	458c      	cmp	ip, r1
    81ba:	f000 816d 	beq.w	8498 <_malloc_r+0x3e8>
    81be:	684b      	ldr	r3, [r1, #4]
    81c0:	f023 0303 	bic.w	r3, r3, #3
    81c4:	1b5a      	subs	r2, r3, r5
    81c6:	2a0f      	cmp	r2, #15
    81c8:	ddf2      	ble.n	81b0 <_malloc_r+0x100>
    81ca:	460c      	mov	r4, r1
    81cc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    81d0:	f854 8f08 	ldr.w	r8, [r4, #8]!
    81d4:	194b      	adds	r3, r1, r5
    81d6:	f045 0501 	orr.w	r5, r5, #1
    81da:	604d      	str	r5, [r1, #4]
    81dc:	f042 0101 	orr.w	r1, r2, #1
    81e0:	f8c8 c00c 	str.w	ip, [r8, #12]
    81e4:	4630      	mov	r0, r6
    81e6:	f8cc 8008 	str.w	r8, [ip, #8]
    81ea:	617b      	str	r3, [r7, #20]
    81ec:	613b      	str	r3, [r7, #16]
    81ee:	f8c3 e00c 	str.w	lr, [r3, #12]
    81f2:	f8c3 e008 	str.w	lr, [r3, #8]
    81f6:	6059      	str	r1, [r3, #4]
    81f8:	509a      	str	r2, [r3, r2]
    81fa:	f000 fb0d 	bl	8818 <__malloc_unlock>
    81fe:	e01f      	b.n	8240 <_malloc_r+0x190>
    8200:	2910      	cmp	r1, #16
    8202:	d821      	bhi.n	8248 <_malloc_r+0x198>
    8204:	f000 fb06 	bl	8814 <__malloc_lock>
    8208:	2510      	movs	r5, #16
    820a:	2306      	movs	r3, #6
    820c:	2002      	movs	r0, #2
    820e:	4f7e      	ldr	r7, [pc, #504]	; (8408 <_malloc_r+0x358>)
    8210:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    8214:	f1a3 0208 	sub.w	r2, r3, #8
    8218:	685c      	ldr	r4, [r3, #4]
    821a:	4294      	cmp	r4, r2
    821c:	f000 8145 	beq.w	84aa <_malloc_r+0x3fa>
    8220:	6863      	ldr	r3, [r4, #4]
    8222:	68e1      	ldr	r1, [r4, #12]
    8224:	68a5      	ldr	r5, [r4, #8]
    8226:	f023 0303 	bic.w	r3, r3, #3
    822a:	4423      	add	r3, r4
    822c:	4630      	mov	r0, r6
    822e:	685a      	ldr	r2, [r3, #4]
    8230:	60e9      	str	r1, [r5, #12]
    8232:	f042 0201 	orr.w	r2, r2, #1
    8236:	608d      	str	r5, [r1, #8]
    8238:	605a      	str	r2, [r3, #4]
    823a:	f000 faed 	bl	8818 <__malloc_unlock>
    823e:	3408      	adds	r4, #8
    8240:	4620      	mov	r0, r4
    8242:	b003      	add	sp, #12
    8244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8248:	2400      	movs	r4, #0
    824a:	230c      	movs	r3, #12
    824c:	4620      	mov	r0, r4
    824e:	6033      	str	r3, [r6, #0]
    8250:	b003      	add	sp, #12
    8252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8256:	2380      	movs	r3, #128	; 0x80
    8258:	f04f 0e40 	mov.w	lr, #64	; 0x40
    825c:	203f      	movs	r0, #63	; 0x3f
    825e:	e749      	b.n	80f4 <_malloc_r+0x44>
    8260:	4670      	mov	r0, lr
    8262:	e75d      	b.n	8120 <_malloc_r+0x70>
    8264:	4423      	add	r3, r4
    8266:	68e1      	ldr	r1, [r4, #12]
    8268:	685a      	ldr	r2, [r3, #4]
    826a:	68a5      	ldr	r5, [r4, #8]
    826c:	f042 0201 	orr.w	r2, r2, #1
    8270:	60e9      	str	r1, [r5, #12]
    8272:	4630      	mov	r0, r6
    8274:	608d      	str	r5, [r1, #8]
    8276:	605a      	str	r2, [r3, #4]
    8278:	f000 face 	bl	8818 <__malloc_unlock>
    827c:	3408      	adds	r4, #8
    827e:	4620      	mov	r0, r4
    8280:	b003      	add	sp, #12
    8282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8286:	4423      	add	r3, r4
    8288:	4630      	mov	r0, r6
    828a:	685a      	ldr	r2, [r3, #4]
    828c:	f042 0201 	orr.w	r2, r2, #1
    8290:	605a      	str	r2, [r3, #4]
    8292:	f000 fac1 	bl	8818 <__malloc_unlock>
    8296:	3408      	adds	r4, #8
    8298:	4620      	mov	r0, r4
    829a:	b003      	add	sp, #12
    829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82a0:	68bc      	ldr	r4, [r7, #8]
    82a2:	6863      	ldr	r3, [r4, #4]
    82a4:	f023 0803 	bic.w	r8, r3, #3
    82a8:	45a8      	cmp	r8, r5
    82aa:	d304      	bcc.n	82b6 <_malloc_r+0x206>
    82ac:	ebc5 0308 	rsb	r3, r5, r8
    82b0:	2b0f      	cmp	r3, #15
    82b2:	f300 808c 	bgt.w	83ce <_malloc_r+0x31e>
    82b6:	4b55      	ldr	r3, [pc, #340]	; (840c <_malloc_r+0x35c>)
    82b8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 841c <_malloc_r+0x36c>
    82bc:	681a      	ldr	r2, [r3, #0]
    82be:	f8d9 3000 	ldr.w	r3, [r9]
    82c2:	3301      	adds	r3, #1
    82c4:	442a      	add	r2, r5
    82c6:	eb04 0a08 	add.w	sl, r4, r8
    82ca:	f000 8160 	beq.w	858e <_malloc_r+0x4de>
    82ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    82d2:	320f      	adds	r2, #15
    82d4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    82d8:	f022 020f 	bic.w	r2, r2, #15
    82dc:	4611      	mov	r1, r2
    82de:	4630      	mov	r0, r6
    82e0:	9201      	str	r2, [sp, #4]
    82e2:	f000 fc93 	bl	8c0c <_sbrk_r>
    82e6:	f1b0 3fff 	cmp.w	r0, #4294967295
    82ea:	4683      	mov	fp, r0
    82ec:	9a01      	ldr	r2, [sp, #4]
    82ee:	f000 8158 	beq.w	85a2 <_malloc_r+0x4f2>
    82f2:	4582      	cmp	sl, r0
    82f4:	f200 80fc 	bhi.w	84f0 <_malloc_r+0x440>
    82f8:	4b45      	ldr	r3, [pc, #276]	; (8410 <_malloc_r+0x360>)
    82fa:	6819      	ldr	r1, [r3, #0]
    82fc:	45da      	cmp	sl, fp
    82fe:	4411      	add	r1, r2
    8300:	6019      	str	r1, [r3, #0]
    8302:	f000 8153 	beq.w	85ac <_malloc_r+0x4fc>
    8306:	f8d9 0000 	ldr.w	r0, [r9]
    830a:	f8df e110 	ldr.w	lr, [pc, #272]	; 841c <_malloc_r+0x36c>
    830e:	3001      	adds	r0, #1
    8310:	bf1b      	ittet	ne
    8312:	ebca 0a0b 	rsbne	sl, sl, fp
    8316:	4451      	addne	r1, sl
    8318:	f8ce b000 	streq.w	fp, [lr]
    831c:	6019      	strne	r1, [r3, #0]
    831e:	f01b 0107 	ands.w	r1, fp, #7
    8322:	f000 8117 	beq.w	8554 <_malloc_r+0x4a4>
    8326:	f1c1 0008 	rsb	r0, r1, #8
    832a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    832e:	4483      	add	fp, r0
    8330:	3108      	adds	r1, #8
    8332:	445a      	add	r2, fp
    8334:	f3c2 020b 	ubfx	r2, r2, #0, #12
    8338:	ebc2 0901 	rsb	r9, r2, r1
    833c:	4649      	mov	r1, r9
    833e:	4630      	mov	r0, r6
    8340:	9301      	str	r3, [sp, #4]
    8342:	f000 fc63 	bl	8c0c <_sbrk_r>
    8346:	1c43      	adds	r3, r0, #1
    8348:	9b01      	ldr	r3, [sp, #4]
    834a:	f000 813f 	beq.w	85cc <_malloc_r+0x51c>
    834e:	ebcb 0200 	rsb	r2, fp, r0
    8352:	444a      	add	r2, r9
    8354:	f042 0201 	orr.w	r2, r2, #1
    8358:	6819      	ldr	r1, [r3, #0]
    835a:	f8c7 b008 	str.w	fp, [r7, #8]
    835e:	4449      	add	r1, r9
    8360:	42bc      	cmp	r4, r7
    8362:	f8cb 2004 	str.w	r2, [fp, #4]
    8366:	6019      	str	r1, [r3, #0]
    8368:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8410 <_malloc_r+0x360>
    836c:	d016      	beq.n	839c <_malloc_r+0x2ec>
    836e:	f1b8 0f0f 	cmp.w	r8, #15
    8372:	f240 80fd 	bls.w	8570 <_malloc_r+0x4c0>
    8376:	6862      	ldr	r2, [r4, #4]
    8378:	f1a8 030c 	sub.w	r3, r8, #12
    837c:	f023 0307 	bic.w	r3, r3, #7
    8380:	18e0      	adds	r0, r4, r3
    8382:	f002 0201 	and.w	r2, r2, #1
    8386:	f04f 0e05 	mov.w	lr, #5
    838a:	431a      	orrs	r2, r3
    838c:	2b0f      	cmp	r3, #15
    838e:	6062      	str	r2, [r4, #4]
    8390:	f8c0 e004 	str.w	lr, [r0, #4]
    8394:	f8c0 e008 	str.w	lr, [r0, #8]
    8398:	f200 811c 	bhi.w	85d4 <_malloc_r+0x524>
    839c:	4b1d      	ldr	r3, [pc, #116]	; (8414 <_malloc_r+0x364>)
    839e:	68bc      	ldr	r4, [r7, #8]
    83a0:	681a      	ldr	r2, [r3, #0]
    83a2:	4291      	cmp	r1, r2
    83a4:	bf88      	it	hi
    83a6:	6019      	strhi	r1, [r3, #0]
    83a8:	4b1b      	ldr	r3, [pc, #108]	; (8418 <_malloc_r+0x368>)
    83aa:	681a      	ldr	r2, [r3, #0]
    83ac:	4291      	cmp	r1, r2
    83ae:	6862      	ldr	r2, [r4, #4]
    83b0:	bf88      	it	hi
    83b2:	6019      	strhi	r1, [r3, #0]
    83b4:	f022 0203 	bic.w	r2, r2, #3
    83b8:	4295      	cmp	r5, r2
    83ba:	eba2 0305 	sub.w	r3, r2, r5
    83be:	d801      	bhi.n	83c4 <_malloc_r+0x314>
    83c0:	2b0f      	cmp	r3, #15
    83c2:	dc04      	bgt.n	83ce <_malloc_r+0x31e>
    83c4:	4630      	mov	r0, r6
    83c6:	f000 fa27 	bl	8818 <__malloc_unlock>
    83ca:	2400      	movs	r4, #0
    83cc:	e738      	b.n	8240 <_malloc_r+0x190>
    83ce:	1962      	adds	r2, r4, r5
    83d0:	f043 0301 	orr.w	r3, r3, #1
    83d4:	f045 0501 	orr.w	r5, r5, #1
    83d8:	6065      	str	r5, [r4, #4]
    83da:	4630      	mov	r0, r6
    83dc:	60ba      	str	r2, [r7, #8]
    83de:	6053      	str	r3, [r2, #4]
    83e0:	f000 fa1a 	bl	8818 <__malloc_unlock>
    83e4:	3408      	adds	r4, #8
    83e6:	4620      	mov	r0, r4
    83e8:	b003      	add	sp, #12
    83ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83ee:	2b14      	cmp	r3, #20
    83f0:	d971      	bls.n	84d6 <_malloc_r+0x426>
    83f2:	2b54      	cmp	r3, #84	; 0x54
    83f4:	f200 80a4 	bhi.w	8540 <_malloc_r+0x490>
    83f8:	0b28      	lsrs	r0, r5, #12
    83fa:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    83fe:	ea4f 034e 	mov.w	r3, lr, lsl #1
    8402:	306e      	adds	r0, #110	; 0x6e
    8404:	e676      	b.n	80f4 <_malloc_r+0x44>
    8406:	bf00      	nop
    8408:	200016a0 	.word	0x200016a0
    840c:	2000251c 	.word	0x2000251c
    8410:	20002520 	.word	0x20002520
    8414:	20002518 	.word	0x20002518
    8418:	20002514 	.word	0x20002514
    841c:	20001aac 	.word	0x20001aac
    8420:	0a5a      	lsrs	r2, r3, #9
    8422:	2a04      	cmp	r2, #4
    8424:	d95e      	bls.n	84e4 <_malloc_r+0x434>
    8426:	2a14      	cmp	r2, #20
    8428:	f200 80b3 	bhi.w	8592 <_malloc_r+0x4e2>
    842c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    8430:	0049      	lsls	r1, r1, #1
    8432:	325b      	adds	r2, #91	; 0x5b
    8434:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    8438:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    843c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 861c <_malloc_r+0x56c>
    8440:	f1ac 0c08 	sub.w	ip, ip, #8
    8444:	458c      	cmp	ip, r1
    8446:	f000 8088 	beq.w	855a <_malloc_r+0x4aa>
    844a:	684a      	ldr	r2, [r1, #4]
    844c:	f022 0203 	bic.w	r2, r2, #3
    8450:	4293      	cmp	r3, r2
    8452:	d202      	bcs.n	845a <_malloc_r+0x3aa>
    8454:	6889      	ldr	r1, [r1, #8]
    8456:	458c      	cmp	ip, r1
    8458:	d1f7      	bne.n	844a <_malloc_r+0x39a>
    845a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    845e:	687a      	ldr	r2, [r7, #4]
    8460:	f8c4 c00c 	str.w	ip, [r4, #12]
    8464:	60a1      	str	r1, [r4, #8]
    8466:	f8cc 4008 	str.w	r4, [ip, #8]
    846a:	60cc      	str	r4, [r1, #12]
    846c:	e688      	b.n	8180 <_malloc_r+0xd0>
    846e:	1963      	adds	r3, r4, r5
    8470:	f042 0701 	orr.w	r7, r2, #1
    8474:	f045 0501 	orr.w	r5, r5, #1
    8478:	6065      	str	r5, [r4, #4]
    847a:	4630      	mov	r0, r6
    847c:	614b      	str	r3, [r1, #20]
    847e:	610b      	str	r3, [r1, #16]
    8480:	f8c3 e00c 	str.w	lr, [r3, #12]
    8484:	f8c3 e008 	str.w	lr, [r3, #8]
    8488:	605f      	str	r7, [r3, #4]
    848a:	509a      	str	r2, [r3, r2]
    848c:	3408      	adds	r4, #8
    848e:	f000 f9c3 	bl	8818 <__malloc_unlock>
    8492:	e6d5      	b.n	8240 <_malloc_r+0x190>
    8494:	684a      	ldr	r2, [r1, #4]
    8496:	e673      	b.n	8180 <_malloc_r+0xd0>
    8498:	f108 0801 	add.w	r8, r8, #1
    849c:	f018 0f03 	tst.w	r8, #3
    84a0:	f10c 0c08 	add.w	ip, ip, #8
    84a4:	f47f ae7f 	bne.w	81a6 <_malloc_r+0xf6>
    84a8:	e030      	b.n	850c <_malloc_r+0x45c>
    84aa:	68dc      	ldr	r4, [r3, #12]
    84ac:	42a3      	cmp	r3, r4
    84ae:	bf08      	it	eq
    84b0:	3002      	addeq	r0, #2
    84b2:	f43f ae35 	beq.w	8120 <_malloc_r+0x70>
    84b6:	e6b3      	b.n	8220 <_malloc_r+0x170>
    84b8:	440b      	add	r3, r1
    84ba:	460c      	mov	r4, r1
    84bc:	685a      	ldr	r2, [r3, #4]
    84be:	68c9      	ldr	r1, [r1, #12]
    84c0:	f854 5f08 	ldr.w	r5, [r4, #8]!
    84c4:	f042 0201 	orr.w	r2, r2, #1
    84c8:	605a      	str	r2, [r3, #4]
    84ca:	4630      	mov	r0, r6
    84cc:	60e9      	str	r1, [r5, #12]
    84ce:	608d      	str	r5, [r1, #8]
    84d0:	f000 f9a2 	bl	8818 <__malloc_unlock>
    84d4:	e6b4      	b.n	8240 <_malloc_r+0x190>
    84d6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    84da:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    84de:	ea4f 034e 	mov.w	r3, lr, lsl #1
    84e2:	e607      	b.n	80f4 <_malloc_r+0x44>
    84e4:	099a      	lsrs	r2, r3, #6
    84e6:	f102 0139 	add.w	r1, r2, #57	; 0x39
    84ea:	0049      	lsls	r1, r1, #1
    84ec:	3238      	adds	r2, #56	; 0x38
    84ee:	e7a1      	b.n	8434 <_malloc_r+0x384>
    84f0:	42bc      	cmp	r4, r7
    84f2:	4b4a      	ldr	r3, [pc, #296]	; (861c <_malloc_r+0x56c>)
    84f4:	f43f af00 	beq.w	82f8 <_malloc_r+0x248>
    84f8:	689c      	ldr	r4, [r3, #8]
    84fa:	6862      	ldr	r2, [r4, #4]
    84fc:	f022 0203 	bic.w	r2, r2, #3
    8500:	e75a      	b.n	83b8 <_malloc_r+0x308>
    8502:	f859 3908 	ldr.w	r3, [r9], #-8
    8506:	4599      	cmp	r9, r3
    8508:	f040 8082 	bne.w	8610 <_malloc_r+0x560>
    850c:	f010 0f03 	tst.w	r0, #3
    8510:	f100 30ff 	add.w	r0, r0, #4294967295
    8514:	d1f5      	bne.n	8502 <_malloc_r+0x452>
    8516:	687b      	ldr	r3, [r7, #4]
    8518:	ea23 0304 	bic.w	r3, r3, r4
    851c:	607b      	str	r3, [r7, #4]
    851e:	0064      	lsls	r4, r4, #1
    8520:	429c      	cmp	r4, r3
    8522:	f63f aebd 	bhi.w	82a0 <_malloc_r+0x1f0>
    8526:	2c00      	cmp	r4, #0
    8528:	f43f aeba 	beq.w	82a0 <_malloc_r+0x1f0>
    852c:	421c      	tst	r4, r3
    852e:	4640      	mov	r0, r8
    8530:	f47f ae35 	bne.w	819e <_malloc_r+0xee>
    8534:	0064      	lsls	r4, r4, #1
    8536:	421c      	tst	r4, r3
    8538:	f100 0004 	add.w	r0, r0, #4
    853c:	d0fa      	beq.n	8534 <_malloc_r+0x484>
    853e:	e62e      	b.n	819e <_malloc_r+0xee>
    8540:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    8544:	d818      	bhi.n	8578 <_malloc_r+0x4c8>
    8546:	0be8      	lsrs	r0, r5, #15
    8548:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    854c:	ea4f 034e 	mov.w	r3, lr, lsl #1
    8550:	3077      	adds	r0, #119	; 0x77
    8552:	e5cf      	b.n	80f4 <_malloc_r+0x44>
    8554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    8558:	e6eb      	b.n	8332 <_malloc_r+0x282>
    855a:	2101      	movs	r1, #1
    855c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8560:	1092      	asrs	r2, r2, #2
    8562:	fa01 f202 	lsl.w	r2, r1, r2
    8566:	431a      	orrs	r2, r3
    8568:	f8c8 2004 	str.w	r2, [r8, #4]
    856c:	4661      	mov	r1, ip
    856e:	e777      	b.n	8460 <_malloc_r+0x3b0>
    8570:	2301      	movs	r3, #1
    8572:	f8cb 3004 	str.w	r3, [fp, #4]
    8576:	e725      	b.n	83c4 <_malloc_r+0x314>
    8578:	f240 5254 	movw	r2, #1364	; 0x554
    857c:	4293      	cmp	r3, r2
    857e:	d820      	bhi.n	85c2 <_malloc_r+0x512>
    8580:	0ca8      	lsrs	r0, r5, #18
    8582:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    8586:	ea4f 034e 	mov.w	r3, lr, lsl #1
    858a:	307c      	adds	r0, #124	; 0x7c
    858c:	e5b2      	b.n	80f4 <_malloc_r+0x44>
    858e:	3210      	adds	r2, #16
    8590:	e6a4      	b.n	82dc <_malloc_r+0x22c>
    8592:	2a54      	cmp	r2, #84	; 0x54
    8594:	d826      	bhi.n	85e4 <_malloc_r+0x534>
    8596:	0b1a      	lsrs	r2, r3, #12
    8598:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    859c:	0049      	lsls	r1, r1, #1
    859e:	326e      	adds	r2, #110	; 0x6e
    85a0:	e748      	b.n	8434 <_malloc_r+0x384>
    85a2:	68bc      	ldr	r4, [r7, #8]
    85a4:	6862      	ldr	r2, [r4, #4]
    85a6:	f022 0203 	bic.w	r2, r2, #3
    85aa:	e705      	b.n	83b8 <_malloc_r+0x308>
    85ac:	f3ca 000b 	ubfx	r0, sl, #0, #12
    85b0:	2800      	cmp	r0, #0
    85b2:	f47f aea8 	bne.w	8306 <_malloc_r+0x256>
    85b6:	4442      	add	r2, r8
    85b8:	68bb      	ldr	r3, [r7, #8]
    85ba:	f042 0201 	orr.w	r2, r2, #1
    85be:	605a      	str	r2, [r3, #4]
    85c0:	e6ec      	b.n	839c <_malloc_r+0x2ec>
    85c2:	23fe      	movs	r3, #254	; 0xfe
    85c4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    85c8:	207e      	movs	r0, #126	; 0x7e
    85ca:	e593      	b.n	80f4 <_malloc_r+0x44>
    85cc:	2201      	movs	r2, #1
    85ce:	f04f 0900 	mov.w	r9, #0
    85d2:	e6c1      	b.n	8358 <_malloc_r+0x2a8>
    85d4:	f104 0108 	add.w	r1, r4, #8
    85d8:	4630      	mov	r0, r6
    85da:	f003 ffb9 	bl	c550 <_free_r>
    85de:	f8d9 1000 	ldr.w	r1, [r9]
    85e2:	e6db      	b.n	839c <_malloc_r+0x2ec>
    85e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    85e8:	d805      	bhi.n	85f6 <_malloc_r+0x546>
    85ea:	0bda      	lsrs	r2, r3, #15
    85ec:	f102 0178 	add.w	r1, r2, #120	; 0x78
    85f0:	0049      	lsls	r1, r1, #1
    85f2:	3277      	adds	r2, #119	; 0x77
    85f4:	e71e      	b.n	8434 <_malloc_r+0x384>
    85f6:	f240 5154 	movw	r1, #1364	; 0x554
    85fa:	428a      	cmp	r2, r1
    85fc:	d805      	bhi.n	860a <_malloc_r+0x55a>
    85fe:	0c9a      	lsrs	r2, r3, #18
    8600:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    8604:	0049      	lsls	r1, r1, #1
    8606:	327c      	adds	r2, #124	; 0x7c
    8608:	e714      	b.n	8434 <_malloc_r+0x384>
    860a:	21fe      	movs	r1, #254	; 0xfe
    860c:	227e      	movs	r2, #126	; 0x7e
    860e:	e711      	b.n	8434 <_malloc_r+0x384>
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	e784      	b.n	851e <_malloc_r+0x46e>
    8614:	08e8      	lsrs	r0, r5, #3
    8616:	1c43      	adds	r3, r0, #1
    8618:	005b      	lsls	r3, r3, #1
    861a:	e5f8      	b.n	820e <_malloc_r+0x15e>
    861c:	200016a0 	.word	0x200016a0

00008620 <__ascii_mbtowc>:
    8620:	b082      	sub	sp, #8
    8622:	b149      	cbz	r1, 8638 <__ascii_mbtowc+0x18>
    8624:	b15a      	cbz	r2, 863e <__ascii_mbtowc+0x1e>
    8626:	b16b      	cbz	r3, 8644 <__ascii_mbtowc+0x24>
    8628:	7813      	ldrb	r3, [r2, #0]
    862a:	600b      	str	r3, [r1, #0]
    862c:	7812      	ldrb	r2, [r2, #0]
    862e:	1c10      	adds	r0, r2, #0
    8630:	bf18      	it	ne
    8632:	2001      	movne	r0, #1
    8634:	b002      	add	sp, #8
    8636:	4770      	bx	lr
    8638:	a901      	add	r1, sp, #4
    863a:	2a00      	cmp	r2, #0
    863c:	d1f3      	bne.n	8626 <__ascii_mbtowc+0x6>
    863e:	4610      	mov	r0, r2
    8640:	b002      	add	sp, #8
    8642:	4770      	bx	lr
    8644:	f06f 0001 	mvn.w	r0, #1
    8648:	e7f4      	b.n	8634 <__ascii_mbtowc+0x14>
    864a:	bf00      	nop

0000864c <memcmp>:
    864c:	2a03      	cmp	r2, #3
    864e:	b470      	push	{r4, r5, r6}
    8650:	d926      	bls.n	86a0 <memcmp+0x54>
    8652:	ea40 0301 	orr.w	r3, r0, r1
    8656:	079b      	lsls	r3, r3, #30
    8658:	d011      	beq.n	867e <memcmp+0x32>
    865a:	7804      	ldrb	r4, [r0, #0]
    865c:	780d      	ldrb	r5, [r1, #0]
    865e:	42ac      	cmp	r4, r5
    8660:	d122      	bne.n	86a8 <memcmp+0x5c>
    8662:	4402      	add	r2, r0
    8664:	1c43      	adds	r3, r0, #1
    8666:	e005      	b.n	8674 <memcmp+0x28>
    8668:	f813 4b01 	ldrb.w	r4, [r3], #1
    866c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    8670:	42ac      	cmp	r4, r5
    8672:	d119      	bne.n	86a8 <memcmp+0x5c>
    8674:	4293      	cmp	r3, r2
    8676:	d1f7      	bne.n	8668 <memcmp+0x1c>
    8678:	2000      	movs	r0, #0
    867a:	bc70      	pop	{r4, r5, r6}
    867c:	4770      	bx	lr
    867e:	460c      	mov	r4, r1
    8680:	4603      	mov	r3, r0
    8682:	681e      	ldr	r6, [r3, #0]
    8684:	6825      	ldr	r5, [r4, #0]
    8686:	42ae      	cmp	r6, r5
    8688:	4618      	mov	r0, r3
    868a:	4621      	mov	r1, r4
    868c:	f103 0304 	add.w	r3, r3, #4
    8690:	f104 0404 	add.w	r4, r4, #4
    8694:	d1e1      	bne.n	865a <memcmp+0xe>
    8696:	3a04      	subs	r2, #4
    8698:	2a03      	cmp	r2, #3
    869a:	4618      	mov	r0, r3
    869c:	4621      	mov	r1, r4
    869e:	d8f0      	bhi.n	8682 <memcmp+0x36>
    86a0:	2a00      	cmp	r2, #0
    86a2:	d1da      	bne.n	865a <memcmp+0xe>
    86a4:	4610      	mov	r0, r2
    86a6:	e7e8      	b.n	867a <memcmp+0x2e>
    86a8:	1b60      	subs	r0, r4, r5
    86aa:	bc70      	pop	{r4, r5, r6}
    86ac:	4770      	bx	lr
    86ae:	bf00      	nop

000086b0 <memmove>:
    86b0:	4288      	cmp	r0, r1
    86b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    86b4:	d90d      	bls.n	86d2 <memmove+0x22>
    86b6:	188b      	adds	r3, r1, r2
    86b8:	4298      	cmp	r0, r3
    86ba:	d20a      	bcs.n	86d2 <memmove+0x22>
    86bc:	1881      	adds	r1, r0, r2
    86be:	2a00      	cmp	r2, #0
    86c0:	d051      	beq.n	8766 <memmove+0xb6>
    86c2:	1a9a      	subs	r2, r3, r2
    86c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    86c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
    86cc:	4293      	cmp	r3, r2
    86ce:	d1f9      	bne.n	86c4 <memmove+0x14>
    86d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86d2:	2a0f      	cmp	r2, #15
    86d4:	d948      	bls.n	8768 <memmove+0xb8>
    86d6:	ea41 0300 	orr.w	r3, r1, r0
    86da:	079b      	lsls	r3, r3, #30
    86dc:	d146      	bne.n	876c <memmove+0xbc>
    86de:	f100 0410 	add.w	r4, r0, #16
    86e2:	f101 0310 	add.w	r3, r1, #16
    86e6:	4615      	mov	r5, r2
    86e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
    86ec:	f844 6c10 	str.w	r6, [r4, #-16]
    86f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    86f4:	f844 6c0c 	str.w	r6, [r4, #-12]
    86f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
    86fc:	f844 6c08 	str.w	r6, [r4, #-8]
    8700:	3d10      	subs	r5, #16
    8702:	f853 6c04 	ldr.w	r6, [r3, #-4]
    8706:	f844 6c04 	str.w	r6, [r4, #-4]
    870a:	2d0f      	cmp	r5, #15
    870c:	f103 0310 	add.w	r3, r3, #16
    8710:	f104 0410 	add.w	r4, r4, #16
    8714:	d8e8      	bhi.n	86e8 <memmove+0x38>
    8716:	f1a2 0310 	sub.w	r3, r2, #16
    871a:	f023 030f 	bic.w	r3, r3, #15
    871e:	f002 0e0f 	and.w	lr, r2, #15
    8722:	3310      	adds	r3, #16
    8724:	f1be 0f03 	cmp.w	lr, #3
    8728:	4419      	add	r1, r3
    872a:	4403      	add	r3, r0
    872c:	d921      	bls.n	8772 <memmove+0xc2>
    872e:	1f1e      	subs	r6, r3, #4
    8730:	460d      	mov	r5, r1
    8732:	4674      	mov	r4, lr
    8734:	3c04      	subs	r4, #4
    8736:	f855 7b04 	ldr.w	r7, [r5], #4
    873a:	f846 7f04 	str.w	r7, [r6, #4]!
    873e:	2c03      	cmp	r4, #3
    8740:	d8f8      	bhi.n	8734 <memmove+0x84>
    8742:	f1ae 0404 	sub.w	r4, lr, #4
    8746:	f024 0403 	bic.w	r4, r4, #3
    874a:	3404      	adds	r4, #4
    874c:	4423      	add	r3, r4
    874e:	4421      	add	r1, r4
    8750:	f002 0203 	and.w	r2, r2, #3
    8754:	b162      	cbz	r2, 8770 <memmove+0xc0>
    8756:	3b01      	subs	r3, #1
    8758:	440a      	add	r2, r1
    875a:	f811 4b01 	ldrb.w	r4, [r1], #1
    875e:	f803 4f01 	strb.w	r4, [r3, #1]!
    8762:	428a      	cmp	r2, r1
    8764:	d1f9      	bne.n	875a <memmove+0xaa>
    8766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8768:	4603      	mov	r3, r0
    876a:	e7f3      	b.n	8754 <memmove+0xa4>
    876c:	4603      	mov	r3, r0
    876e:	e7f2      	b.n	8756 <memmove+0xa6>
    8770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8772:	4672      	mov	r2, lr
    8774:	e7ee      	b.n	8754 <memmove+0xa4>
    8776:	bf00      	nop

00008778 <memset>:
    8778:	b470      	push	{r4, r5, r6}
    877a:	0784      	lsls	r4, r0, #30
    877c:	d046      	beq.n	880c <memset+0x94>
    877e:	1e54      	subs	r4, r2, #1
    8780:	2a00      	cmp	r2, #0
    8782:	d041      	beq.n	8808 <memset+0x90>
    8784:	b2cd      	uxtb	r5, r1
    8786:	4603      	mov	r3, r0
    8788:	e002      	b.n	8790 <memset+0x18>
    878a:	1e62      	subs	r2, r4, #1
    878c:	b3e4      	cbz	r4, 8808 <memset+0x90>
    878e:	4614      	mov	r4, r2
    8790:	f803 5b01 	strb.w	r5, [r3], #1
    8794:	079a      	lsls	r2, r3, #30
    8796:	d1f8      	bne.n	878a <memset+0x12>
    8798:	2c03      	cmp	r4, #3
    879a:	d92e      	bls.n	87fa <memset+0x82>
    879c:	b2cd      	uxtb	r5, r1
    879e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    87a2:	2c0f      	cmp	r4, #15
    87a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    87a8:	d919      	bls.n	87de <memset+0x66>
    87aa:	f103 0210 	add.w	r2, r3, #16
    87ae:	4626      	mov	r6, r4
    87b0:	3e10      	subs	r6, #16
    87b2:	2e0f      	cmp	r6, #15
    87b4:	f842 5c10 	str.w	r5, [r2, #-16]
    87b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    87bc:	f842 5c08 	str.w	r5, [r2, #-8]
    87c0:	f842 5c04 	str.w	r5, [r2, #-4]
    87c4:	f102 0210 	add.w	r2, r2, #16
    87c8:	d8f2      	bhi.n	87b0 <memset+0x38>
    87ca:	f1a4 0210 	sub.w	r2, r4, #16
    87ce:	f022 020f 	bic.w	r2, r2, #15
    87d2:	f004 040f 	and.w	r4, r4, #15
    87d6:	3210      	adds	r2, #16
    87d8:	2c03      	cmp	r4, #3
    87da:	4413      	add	r3, r2
    87dc:	d90d      	bls.n	87fa <memset+0x82>
    87de:	461e      	mov	r6, r3
    87e0:	4622      	mov	r2, r4
    87e2:	3a04      	subs	r2, #4
    87e4:	2a03      	cmp	r2, #3
    87e6:	f846 5b04 	str.w	r5, [r6], #4
    87ea:	d8fa      	bhi.n	87e2 <memset+0x6a>
    87ec:	1f22      	subs	r2, r4, #4
    87ee:	f022 0203 	bic.w	r2, r2, #3
    87f2:	3204      	adds	r2, #4
    87f4:	4413      	add	r3, r2
    87f6:	f004 0403 	and.w	r4, r4, #3
    87fa:	b12c      	cbz	r4, 8808 <memset+0x90>
    87fc:	b2c9      	uxtb	r1, r1
    87fe:	441c      	add	r4, r3
    8800:	f803 1b01 	strb.w	r1, [r3], #1
    8804:	42a3      	cmp	r3, r4
    8806:	d1fb      	bne.n	8800 <memset+0x88>
    8808:	bc70      	pop	{r4, r5, r6}
    880a:	4770      	bx	lr
    880c:	4614      	mov	r4, r2
    880e:	4603      	mov	r3, r0
    8810:	e7c2      	b.n	8798 <memset+0x20>
    8812:	bf00      	nop

00008814 <__malloc_lock>:
    8814:	4770      	bx	lr
    8816:	bf00      	nop

00008818 <__malloc_unlock>:
    8818:	4770      	bx	lr
    881a:	bf00      	nop

0000881c <realloc>:
    881c:	4b02      	ldr	r3, [pc, #8]	; (8828 <realloc+0xc>)
    881e:	460a      	mov	r2, r1
    8820:	4601      	mov	r1, r0
    8822:	6818      	ldr	r0, [r3, #0]
    8824:	f000 b802 	b.w	882c <_realloc_r>
    8828:	20001530 	.word	0x20001530

0000882c <_realloc_r>:
    882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8830:	4617      	mov	r7, r2
    8832:	b083      	sub	sp, #12
    8834:	2900      	cmp	r1, #0
    8836:	f000 80c1 	beq.w	89bc <_realloc_r+0x190>
    883a:	460e      	mov	r6, r1
    883c:	4681      	mov	r9, r0
    883e:	f107 050b 	add.w	r5, r7, #11
    8842:	f7ff ffe7 	bl	8814 <__malloc_lock>
    8846:	f856 ec04 	ldr.w	lr, [r6, #-4]
    884a:	2d16      	cmp	r5, #22
    884c:	f02e 0403 	bic.w	r4, lr, #3
    8850:	f1a6 0808 	sub.w	r8, r6, #8
    8854:	d840      	bhi.n	88d8 <_realloc_r+0xac>
    8856:	2210      	movs	r2, #16
    8858:	4615      	mov	r5, r2
    885a:	42af      	cmp	r7, r5
    885c:	d841      	bhi.n	88e2 <_realloc_r+0xb6>
    885e:	4294      	cmp	r4, r2
    8860:	da75      	bge.n	894e <_realloc_r+0x122>
    8862:	4bc9      	ldr	r3, [pc, #804]	; (8b88 <_realloc_r+0x35c>)
    8864:	6899      	ldr	r1, [r3, #8]
    8866:	eb08 0004 	add.w	r0, r8, r4
    886a:	4288      	cmp	r0, r1
    886c:	6841      	ldr	r1, [r0, #4]
    886e:	f000 80d9 	beq.w	8a24 <_realloc_r+0x1f8>
    8872:	f021 0301 	bic.w	r3, r1, #1
    8876:	4403      	add	r3, r0
    8878:	685b      	ldr	r3, [r3, #4]
    887a:	07db      	lsls	r3, r3, #31
    887c:	d57d      	bpl.n	897a <_realloc_r+0x14e>
    887e:	f01e 0f01 	tst.w	lr, #1
    8882:	d035      	beq.n	88f0 <_realloc_r+0xc4>
    8884:	4639      	mov	r1, r7
    8886:	4648      	mov	r0, r9
    8888:	f7ff fc12 	bl	80b0 <_malloc_r>
    888c:	4607      	mov	r7, r0
    888e:	b1e0      	cbz	r0, 88ca <_realloc_r+0x9e>
    8890:	f856 3c04 	ldr.w	r3, [r6, #-4]
    8894:	f023 0301 	bic.w	r3, r3, #1
    8898:	4443      	add	r3, r8
    889a:	f1a0 0208 	sub.w	r2, r0, #8
    889e:	429a      	cmp	r2, r3
    88a0:	f000 8144 	beq.w	8b2c <_realloc_r+0x300>
    88a4:	1f22      	subs	r2, r4, #4
    88a6:	2a24      	cmp	r2, #36	; 0x24
    88a8:	f200 8131 	bhi.w	8b0e <_realloc_r+0x2e2>
    88ac:	2a13      	cmp	r2, #19
    88ae:	f200 8104 	bhi.w	8aba <_realloc_r+0x28e>
    88b2:	4603      	mov	r3, r0
    88b4:	4632      	mov	r2, r6
    88b6:	6811      	ldr	r1, [r2, #0]
    88b8:	6019      	str	r1, [r3, #0]
    88ba:	6851      	ldr	r1, [r2, #4]
    88bc:	6059      	str	r1, [r3, #4]
    88be:	6892      	ldr	r2, [r2, #8]
    88c0:	609a      	str	r2, [r3, #8]
    88c2:	4631      	mov	r1, r6
    88c4:	4648      	mov	r0, r9
    88c6:	f003 fe43 	bl	c550 <_free_r>
    88ca:	4648      	mov	r0, r9
    88cc:	f7ff ffa4 	bl	8818 <__malloc_unlock>
    88d0:	4638      	mov	r0, r7
    88d2:	b003      	add	sp, #12
    88d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88d8:	f025 0507 	bic.w	r5, r5, #7
    88dc:	2d00      	cmp	r5, #0
    88de:	462a      	mov	r2, r5
    88e0:	dabb      	bge.n	885a <_realloc_r+0x2e>
    88e2:	230c      	movs	r3, #12
    88e4:	2000      	movs	r0, #0
    88e6:	f8c9 3000 	str.w	r3, [r9]
    88ea:	b003      	add	sp, #12
    88ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88f0:	f856 3c08 	ldr.w	r3, [r6, #-8]
    88f4:	ebc3 0a08 	rsb	sl, r3, r8
    88f8:	f8da 3004 	ldr.w	r3, [sl, #4]
    88fc:	f023 0c03 	bic.w	ip, r3, #3
    8900:	eb04 030c 	add.w	r3, r4, ip
    8904:	4293      	cmp	r3, r2
    8906:	dbbd      	blt.n	8884 <_realloc_r+0x58>
    8908:	4657      	mov	r7, sl
    890a:	f8da 100c 	ldr.w	r1, [sl, #12]
    890e:	f857 0f08 	ldr.w	r0, [r7, #8]!
    8912:	1f22      	subs	r2, r4, #4
    8914:	2a24      	cmp	r2, #36	; 0x24
    8916:	60c1      	str	r1, [r0, #12]
    8918:	6088      	str	r0, [r1, #8]
    891a:	f200 8117 	bhi.w	8b4c <_realloc_r+0x320>
    891e:	2a13      	cmp	r2, #19
    8920:	f240 8112 	bls.w	8b48 <_realloc_r+0x31c>
    8924:	6831      	ldr	r1, [r6, #0]
    8926:	f8ca 1008 	str.w	r1, [sl, #8]
    892a:	6871      	ldr	r1, [r6, #4]
    892c:	f8ca 100c 	str.w	r1, [sl, #12]
    8930:	2a1b      	cmp	r2, #27
    8932:	f200 812b 	bhi.w	8b8c <_realloc_r+0x360>
    8936:	3608      	adds	r6, #8
    8938:	f10a 0210 	add.w	r2, sl, #16
    893c:	6831      	ldr	r1, [r6, #0]
    893e:	6011      	str	r1, [r2, #0]
    8940:	6871      	ldr	r1, [r6, #4]
    8942:	6051      	str	r1, [r2, #4]
    8944:	68b1      	ldr	r1, [r6, #8]
    8946:	6091      	str	r1, [r2, #8]
    8948:	463e      	mov	r6, r7
    894a:	461c      	mov	r4, r3
    894c:	46d0      	mov	r8, sl
    894e:	1b63      	subs	r3, r4, r5
    8950:	2b0f      	cmp	r3, #15
    8952:	d81d      	bhi.n	8990 <_realloc_r+0x164>
    8954:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8958:	f003 0301 	and.w	r3, r3, #1
    895c:	4323      	orrs	r3, r4
    895e:	4444      	add	r4, r8
    8960:	f8c8 3004 	str.w	r3, [r8, #4]
    8964:	6863      	ldr	r3, [r4, #4]
    8966:	f043 0301 	orr.w	r3, r3, #1
    896a:	6063      	str	r3, [r4, #4]
    896c:	4648      	mov	r0, r9
    896e:	f7ff ff53 	bl	8818 <__malloc_unlock>
    8972:	4630      	mov	r0, r6
    8974:	b003      	add	sp, #12
    8976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    897a:	f021 0103 	bic.w	r1, r1, #3
    897e:	4421      	add	r1, r4
    8980:	4291      	cmp	r1, r2
    8982:	db21      	blt.n	89c8 <_realloc_r+0x19c>
    8984:	68c3      	ldr	r3, [r0, #12]
    8986:	6882      	ldr	r2, [r0, #8]
    8988:	460c      	mov	r4, r1
    898a:	60d3      	str	r3, [r2, #12]
    898c:	609a      	str	r2, [r3, #8]
    898e:	e7de      	b.n	894e <_realloc_r+0x122>
    8990:	f8d8 2004 	ldr.w	r2, [r8, #4]
    8994:	eb08 0105 	add.w	r1, r8, r5
    8998:	f002 0201 	and.w	r2, r2, #1
    899c:	4315      	orrs	r5, r2
    899e:	f043 0201 	orr.w	r2, r3, #1
    89a2:	440b      	add	r3, r1
    89a4:	f8c8 5004 	str.w	r5, [r8, #4]
    89a8:	604a      	str	r2, [r1, #4]
    89aa:	685a      	ldr	r2, [r3, #4]
    89ac:	f042 0201 	orr.w	r2, r2, #1
    89b0:	3108      	adds	r1, #8
    89b2:	605a      	str	r2, [r3, #4]
    89b4:	4648      	mov	r0, r9
    89b6:	f003 fdcb 	bl	c550 <_free_r>
    89ba:	e7d7      	b.n	896c <_realloc_r+0x140>
    89bc:	4611      	mov	r1, r2
    89be:	b003      	add	sp, #12
    89c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89c4:	f7ff bb74 	b.w	80b0 <_malloc_r>
    89c8:	f01e 0f01 	tst.w	lr, #1
    89cc:	f47f af5a 	bne.w	8884 <_realloc_r+0x58>
    89d0:	f856 3c08 	ldr.w	r3, [r6, #-8]
    89d4:	ebc3 0a08 	rsb	sl, r3, r8
    89d8:	f8da 3004 	ldr.w	r3, [sl, #4]
    89dc:	f023 0c03 	bic.w	ip, r3, #3
    89e0:	eb01 0e0c 	add.w	lr, r1, ip
    89e4:	4596      	cmp	lr, r2
    89e6:	db8b      	blt.n	8900 <_realloc_r+0xd4>
    89e8:	68c3      	ldr	r3, [r0, #12]
    89ea:	6882      	ldr	r2, [r0, #8]
    89ec:	4657      	mov	r7, sl
    89ee:	60d3      	str	r3, [r2, #12]
    89f0:	609a      	str	r2, [r3, #8]
    89f2:	f857 1f08 	ldr.w	r1, [r7, #8]!
    89f6:	f8da 300c 	ldr.w	r3, [sl, #12]
    89fa:	60cb      	str	r3, [r1, #12]
    89fc:	1f22      	subs	r2, r4, #4
    89fe:	2a24      	cmp	r2, #36	; 0x24
    8a00:	6099      	str	r1, [r3, #8]
    8a02:	f200 8099 	bhi.w	8b38 <_realloc_r+0x30c>
    8a06:	2a13      	cmp	r2, #19
    8a08:	d962      	bls.n	8ad0 <_realloc_r+0x2a4>
    8a0a:	6833      	ldr	r3, [r6, #0]
    8a0c:	f8ca 3008 	str.w	r3, [sl, #8]
    8a10:	6873      	ldr	r3, [r6, #4]
    8a12:	f8ca 300c 	str.w	r3, [sl, #12]
    8a16:	2a1b      	cmp	r2, #27
    8a18:	f200 80a0 	bhi.w	8b5c <_realloc_r+0x330>
    8a1c:	3608      	adds	r6, #8
    8a1e:	f10a 0310 	add.w	r3, sl, #16
    8a22:	e056      	b.n	8ad2 <_realloc_r+0x2a6>
    8a24:	f021 0b03 	bic.w	fp, r1, #3
    8a28:	44a3      	add	fp, r4
    8a2a:	f105 0010 	add.w	r0, r5, #16
    8a2e:	4583      	cmp	fp, r0
    8a30:	da59      	bge.n	8ae6 <_realloc_r+0x2ba>
    8a32:	f01e 0f01 	tst.w	lr, #1
    8a36:	f47f af25 	bne.w	8884 <_realloc_r+0x58>
    8a3a:	f856 1c08 	ldr.w	r1, [r6, #-8]
    8a3e:	ebc1 0a08 	rsb	sl, r1, r8
    8a42:	f8da 1004 	ldr.w	r1, [sl, #4]
    8a46:	f021 0c03 	bic.w	ip, r1, #3
    8a4a:	44e3      	add	fp, ip
    8a4c:	4558      	cmp	r0, fp
    8a4e:	f73f af57 	bgt.w	8900 <_realloc_r+0xd4>
    8a52:	4657      	mov	r7, sl
    8a54:	f8da 100c 	ldr.w	r1, [sl, #12]
    8a58:	f857 0f08 	ldr.w	r0, [r7, #8]!
    8a5c:	1f22      	subs	r2, r4, #4
    8a5e:	2a24      	cmp	r2, #36	; 0x24
    8a60:	60c1      	str	r1, [r0, #12]
    8a62:	6088      	str	r0, [r1, #8]
    8a64:	f200 80b4 	bhi.w	8bd0 <_realloc_r+0x3a4>
    8a68:	2a13      	cmp	r2, #19
    8a6a:	f240 80a5 	bls.w	8bb8 <_realloc_r+0x38c>
    8a6e:	6831      	ldr	r1, [r6, #0]
    8a70:	f8ca 1008 	str.w	r1, [sl, #8]
    8a74:	6871      	ldr	r1, [r6, #4]
    8a76:	f8ca 100c 	str.w	r1, [sl, #12]
    8a7a:	2a1b      	cmp	r2, #27
    8a7c:	f200 80af 	bhi.w	8bde <_realloc_r+0x3b2>
    8a80:	3608      	adds	r6, #8
    8a82:	f10a 0210 	add.w	r2, sl, #16
    8a86:	6831      	ldr	r1, [r6, #0]
    8a88:	6011      	str	r1, [r2, #0]
    8a8a:	6871      	ldr	r1, [r6, #4]
    8a8c:	6051      	str	r1, [r2, #4]
    8a8e:	68b1      	ldr	r1, [r6, #8]
    8a90:	6091      	str	r1, [r2, #8]
    8a92:	eb0a 0105 	add.w	r1, sl, r5
    8a96:	ebc5 020b 	rsb	r2, r5, fp
    8a9a:	f042 0201 	orr.w	r2, r2, #1
    8a9e:	6099      	str	r1, [r3, #8]
    8aa0:	604a      	str	r2, [r1, #4]
    8aa2:	f8da 3004 	ldr.w	r3, [sl, #4]
    8aa6:	f003 0301 	and.w	r3, r3, #1
    8aaa:	431d      	orrs	r5, r3
    8aac:	4648      	mov	r0, r9
    8aae:	f8ca 5004 	str.w	r5, [sl, #4]
    8ab2:	f7ff feb1 	bl	8818 <__malloc_unlock>
    8ab6:	4638      	mov	r0, r7
    8ab8:	e75c      	b.n	8974 <_realloc_r+0x148>
    8aba:	6833      	ldr	r3, [r6, #0]
    8abc:	6003      	str	r3, [r0, #0]
    8abe:	6873      	ldr	r3, [r6, #4]
    8ac0:	6043      	str	r3, [r0, #4]
    8ac2:	2a1b      	cmp	r2, #27
    8ac4:	d827      	bhi.n	8b16 <_realloc_r+0x2ea>
    8ac6:	f100 0308 	add.w	r3, r0, #8
    8aca:	f106 0208 	add.w	r2, r6, #8
    8ace:	e6f2      	b.n	88b6 <_realloc_r+0x8a>
    8ad0:	463b      	mov	r3, r7
    8ad2:	6832      	ldr	r2, [r6, #0]
    8ad4:	601a      	str	r2, [r3, #0]
    8ad6:	6872      	ldr	r2, [r6, #4]
    8ad8:	605a      	str	r2, [r3, #4]
    8ada:	68b2      	ldr	r2, [r6, #8]
    8adc:	609a      	str	r2, [r3, #8]
    8ade:	463e      	mov	r6, r7
    8ae0:	4674      	mov	r4, lr
    8ae2:	46d0      	mov	r8, sl
    8ae4:	e733      	b.n	894e <_realloc_r+0x122>
    8ae6:	eb08 0105 	add.w	r1, r8, r5
    8aea:	ebc5 0b0b 	rsb	fp, r5, fp
    8aee:	f04b 0201 	orr.w	r2, fp, #1
    8af2:	6099      	str	r1, [r3, #8]
    8af4:	604a      	str	r2, [r1, #4]
    8af6:	f856 3c04 	ldr.w	r3, [r6, #-4]
    8afa:	f003 0301 	and.w	r3, r3, #1
    8afe:	431d      	orrs	r5, r3
    8b00:	4648      	mov	r0, r9
    8b02:	f846 5c04 	str.w	r5, [r6, #-4]
    8b06:	f7ff fe87 	bl	8818 <__malloc_unlock>
    8b0a:	4630      	mov	r0, r6
    8b0c:	e732      	b.n	8974 <_realloc_r+0x148>
    8b0e:	4631      	mov	r1, r6
    8b10:	f7ff fdce 	bl	86b0 <memmove>
    8b14:	e6d5      	b.n	88c2 <_realloc_r+0x96>
    8b16:	68b3      	ldr	r3, [r6, #8]
    8b18:	6083      	str	r3, [r0, #8]
    8b1a:	68f3      	ldr	r3, [r6, #12]
    8b1c:	60c3      	str	r3, [r0, #12]
    8b1e:	2a24      	cmp	r2, #36	; 0x24
    8b20:	d028      	beq.n	8b74 <_realloc_r+0x348>
    8b22:	f100 0310 	add.w	r3, r0, #16
    8b26:	f106 0210 	add.w	r2, r6, #16
    8b2a:	e6c4      	b.n	88b6 <_realloc_r+0x8a>
    8b2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    8b30:	f023 0303 	bic.w	r3, r3, #3
    8b34:	441c      	add	r4, r3
    8b36:	e70a      	b.n	894e <_realloc_r+0x122>
    8b38:	4631      	mov	r1, r6
    8b3a:	4638      	mov	r0, r7
    8b3c:	4674      	mov	r4, lr
    8b3e:	46d0      	mov	r8, sl
    8b40:	f7ff fdb6 	bl	86b0 <memmove>
    8b44:	463e      	mov	r6, r7
    8b46:	e702      	b.n	894e <_realloc_r+0x122>
    8b48:	463a      	mov	r2, r7
    8b4a:	e6f7      	b.n	893c <_realloc_r+0x110>
    8b4c:	4631      	mov	r1, r6
    8b4e:	4638      	mov	r0, r7
    8b50:	461c      	mov	r4, r3
    8b52:	46d0      	mov	r8, sl
    8b54:	f7ff fdac 	bl	86b0 <memmove>
    8b58:	463e      	mov	r6, r7
    8b5a:	e6f8      	b.n	894e <_realloc_r+0x122>
    8b5c:	68b3      	ldr	r3, [r6, #8]
    8b5e:	f8ca 3010 	str.w	r3, [sl, #16]
    8b62:	68f3      	ldr	r3, [r6, #12]
    8b64:	f8ca 3014 	str.w	r3, [sl, #20]
    8b68:	2a24      	cmp	r2, #36	; 0x24
    8b6a:	d01b      	beq.n	8ba4 <_realloc_r+0x378>
    8b6c:	3610      	adds	r6, #16
    8b6e:	f10a 0318 	add.w	r3, sl, #24
    8b72:	e7ae      	b.n	8ad2 <_realloc_r+0x2a6>
    8b74:	6933      	ldr	r3, [r6, #16]
    8b76:	6103      	str	r3, [r0, #16]
    8b78:	6973      	ldr	r3, [r6, #20]
    8b7a:	6143      	str	r3, [r0, #20]
    8b7c:	f106 0218 	add.w	r2, r6, #24
    8b80:	f100 0318 	add.w	r3, r0, #24
    8b84:	e697      	b.n	88b6 <_realloc_r+0x8a>
    8b86:	bf00      	nop
    8b88:	200016a0 	.word	0x200016a0
    8b8c:	68b1      	ldr	r1, [r6, #8]
    8b8e:	f8ca 1010 	str.w	r1, [sl, #16]
    8b92:	68f1      	ldr	r1, [r6, #12]
    8b94:	f8ca 1014 	str.w	r1, [sl, #20]
    8b98:	2a24      	cmp	r2, #36	; 0x24
    8b9a:	d00f      	beq.n	8bbc <_realloc_r+0x390>
    8b9c:	3610      	adds	r6, #16
    8b9e:	f10a 0218 	add.w	r2, sl, #24
    8ba2:	e6cb      	b.n	893c <_realloc_r+0x110>
    8ba4:	6933      	ldr	r3, [r6, #16]
    8ba6:	f8ca 3018 	str.w	r3, [sl, #24]
    8baa:	6973      	ldr	r3, [r6, #20]
    8bac:	f8ca 301c 	str.w	r3, [sl, #28]
    8bb0:	3618      	adds	r6, #24
    8bb2:	f10a 0320 	add.w	r3, sl, #32
    8bb6:	e78c      	b.n	8ad2 <_realloc_r+0x2a6>
    8bb8:	463a      	mov	r2, r7
    8bba:	e764      	b.n	8a86 <_realloc_r+0x25a>
    8bbc:	6932      	ldr	r2, [r6, #16]
    8bbe:	f8ca 2018 	str.w	r2, [sl, #24]
    8bc2:	6972      	ldr	r2, [r6, #20]
    8bc4:	f8ca 201c 	str.w	r2, [sl, #28]
    8bc8:	3618      	adds	r6, #24
    8bca:	f10a 0220 	add.w	r2, sl, #32
    8bce:	e6b5      	b.n	893c <_realloc_r+0x110>
    8bd0:	4631      	mov	r1, r6
    8bd2:	4638      	mov	r0, r7
    8bd4:	9301      	str	r3, [sp, #4]
    8bd6:	f7ff fd6b 	bl	86b0 <memmove>
    8bda:	9b01      	ldr	r3, [sp, #4]
    8bdc:	e759      	b.n	8a92 <_realloc_r+0x266>
    8bde:	68b1      	ldr	r1, [r6, #8]
    8be0:	f8ca 1010 	str.w	r1, [sl, #16]
    8be4:	68f1      	ldr	r1, [r6, #12]
    8be6:	f8ca 1014 	str.w	r1, [sl, #20]
    8bea:	2a24      	cmp	r2, #36	; 0x24
    8bec:	d003      	beq.n	8bf6 <_realloc_r+0x3ca>
    8bee:	3610      	adds	r6, #16
    8bf0:	f10a 0218 	add.w	r2, sl, #24
    8bf4:	e747      	b.n	8a86 <_realloc_r+0x25a>
    8bf6:	6932      	ldr	r2, [r6, #16]
    8bf8:	f8ca 2018 	str.w	r2, [sl, #24]
    8bfc:	6972      	ldr	r2, [r6, #20]
    8bfe:	f8ca 201c 	str.w	r2, [sl, #28]
    8c02:	3618      	adds	r6, #24
    8c04:	f10a 0220 	add.w	r2, sl, #32
    8c08:	e73d      	b.n	8a86 <_realloc_r+0x25a>
    8c0a:	bf00      	nop

00008c0c <_sbrk_r>:
    8c0c:	b538      	push	{r3, r4, r5, lr}
    8c0e:	4c07      	ldr	r4, [pc, #28]	; (8c2c <_sbrk_r+0x20>)
    8c10:	2300      	movs	r3, #0
    8c12:	4605      	mov	r5, r0
    8c14:	4608      	mov	r0, r1
    8c16:	6023      	str	r3, [r4, #0]
    8c18:	f7fb fff4 	bl	4c04 <_sbrk>
    8c1c:	1c43      	adds	r3, r0, #1
    8c1e:	d000      	beq.n	8c22 <_sbrk_r+0x16>
    8c20:	bd38      	pop	{r3, r4, r5, pc}
    8c22:	6823      	ldr	r3, [r4, #0]
    8c24:	2b00      	cmp	r3, #0
    8c26:	d0fb      	beq.n	8c20 <_sbrk_r+0x14>
    8c28:	602b      	str	r3, [r5, #0]
    8c2a:	bd38      	pop	{r3, r4, r5, pc}
    8c2c:	2000428c 	.word	0x2000428c

00008c30 <sprintf>:
    8c30:	b40e      	push	{r1, r2, r3}
    8c32:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c34:	b09c      	sub	sp, #112	; 0x70
    8c36:	ab21      	add	r3, sp, #132	; 0x84
    8c38:	490f      	ldr	r1, [pc, #60]	; (8c78 <sprintf+0x48>)
    8c3a:	f853 2b04 	ldr.w	r2, [r3], #4
    8c3e:	9301      	str	r3, [sp, #4]
    8c40:	4605      	mov	r5, r0
    8c42:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    8c46:	6808      	ldr	r0, [r1, #0]
    8c48:	9502      	str	r5, [sp, #8]
    8c4a:	f44f 7702 	mov.w	r7, #520	; 0x208
    8c4e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    8c52:	a902      	add	r1, sp, #8
    8c54:	9506      	str	r5, [sp, #24]
    8c56:	f8ad 7014 	strh.w	r7, [sp, #20]
    8c5a:	9404      	str	r4, [sp, #16]
    8c5c:	9407      	str	r4, [sp, #28]
    8c5e:	f8ad 6016 	strh.w	r6, [sp, #22]
    8c62:	f001 f9f5 	bl	a050 <_svfprintf_r>
    8c66:	9b02      	ldr	r3, [sp, #8]
    8c68:	2200      	movs	r2, #0
    8c6a:	701a      	strb	r2, [r3, #0]
    8c6c:	b01c      	add	sp, #112	; 0x70
    8c6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8c72:	b003      	add	sp, #12
    8c74:	4770      	bx	lr
    8c76:	bf00      	nop
    8c78:	20001530 	.word	0x20001530

00008c7c <strchr>:
    8c7c:	b470      	push	{r4, r5, r6}
    8c7e:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    8c82:	d034      	beq.n	8cee <strchr+0x72>
    8c84:	0785      	lsls	r5, r0, #30
    8c86:	d00f      	beq.n	8ca8 <strchr+0x2c>
    8c88:	7803      	ldrb	r3, [r0, #0]
    8c8a:	2b00      	cmp	r3, #0
    8c8c:	d05a      	beq.n	8d44 <strchr+0xc8>
    8c8e:	429c      	cmp	r4, r3
    8c90:	d02b      	beq.n	8cea <strchr+0x6e>
    8c92:	1c43      	adds	r3, r0, #1
    8c94:	e005      	b.n	8ca2 <strchr+0x26>
    8c96:	f813 2b01 	ldrb.w	r2, [r3], #1
    8c9a:	2a00      	cmp	r2, #0
    8c9c:	d04f      	beq.n	8d3e <strchr+0xc2>
    8c9e:	4294      	cmp	r4, r2
    8ca0:	d023      	beq.n	8cea <strchr+0x6e>
    8ca2:	079a      	lsls	r2, r3, #30
    8ca4:	4618      	mov	r0, r3
    8ca6:	d1f6      	bne.n	8c96 <strchr+0x1a>
    8ca8:	020e      	lsls	r6, r1, #8
    8caa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    8cae:	4326      	orrs	r6, r4
    8cb0:	6803      	ldr	r3, [r0, #0]
    8cb2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    8cb6:	e001      	b.n	8cbc <strchr+0x40>
    8cb8:	f850 3f04 	ldr.w	r3, [r0, #4]!
    8cbc:	ea86 0503 	eor.w	r5, r6, r3
    8cc0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
    8cc4:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
    8cc8:	ea22 0205 	bic.w	r2, r2, r5
    8ccc:	ea21 0303 	bic.w	r3, r1, r3
    8cd0:	4313      	orrs	r3, r2
    8cd2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    8cd6:	d0ef      	beq.n	8cb8 <strchr+0x3c>
    8cd8:	7803      	ldrb	r3, [r0, #0]
    8cda:	b923      	cbnz	r3, 8ce6 <strchr+0x6a>
    8cdc:	e032      	b.n	8d44 <strchr+0xc8>
    8cde:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8ce2:	2b00      	cmp	r3, #0
    8ce4:	d02e      	beq.n	8d44 <strchr+0xc8>
    8ce6:	429c      	cmp	r4, r3
    8ce8:	d1f9      	bne.n	8cde <strchr+0x62>
    8cea:	bc70      	pop	{r4, r5, r6}
    8cec:	4770      	bx	lr
    8cee:	0784      	lsls	r4, r0, #30
    8cf0:	d00b      	beq.n	8d0a <strchr+0x8e>
    8cf2:	7803      	ldrb	r3, [r0, #0]
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d0f8      	beq.n	8cea <strchr+0x6e>
    8cf8:	1c43      	adds	r3, r0, #1
    8cfa:	e003      	b.n	8d04 <strchr+0x88>
    8cfc:	7802      	ldrb	r2, [r0, #0]
    8cfe:	3301      	adds	r3, #1
    8d00:	2a00      	cmp	r2, #0
    8d02:	d0f2      	beq.n	8cea <strchr+0x6e>
    8d04:	0799      	lsls	r1, r3, #30
    8d06:	4618      	mov	r0, r3
    8d08:	d1f8      	bne.n	8cfc <strchr+0x80>
    8d0a:	6802      	ldr	r2, [r0, #0]
    8d0c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    8d10:	ea23 0302 	bic.w	r3, r3, r2
    8d14:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    8d18:	d108      	bne.n	8d2c <strchr+0xb0>
    8d1a:	f850 2f04 	ldr.w	r2, [r0, #4]!
    8d1e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    8d22:	ea23 0302 	bic.w	r3, r3, r2
    8d26:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    8d2a:	d0f6      	beq.n	8d1a <strchr+0x9e>
    8d2c:	7803      	ldrb	r3, [r0, #0]
    8d2e:	2b00      	cmp	r3, #0
    8d30:	d0db      	beq.n	8cea <strchr+0x6e>
    8d32:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8d36:	2b00      	cmp	r3, #0
    8d38:	d1fb      	bne.n	8d32 <strchr+0xb6>
    8d3a:	bc70      	pop	{r4, r5, r6}
    8d3c:	4770      	bx	lr
    8d3e:	4610      	mov	r0, r2
    8d40:	bc70      	pop	{r4, r5, r6}
    8d42:	4770      	bx	lr
    8d44:	4618      	mov	r0, r3
    8d46:	bc70      	pop	{r4, r5, r6}
    8d48:	4770      	bx	lr
    8d4a:	bf00      	nop

00008d4c <strcpy>:
    8d4c:	ea80 0201 	eor.w	r2, r0, r1
    8d50:	4684      	mov	ip, r0
    8d52:	f012 0f03 	tst.w	r2, #3
    8d56:	d14f      	bne.n	8df8 <strcpy+0xac>
    8d58:	f011 0f03 	tst.w	r1, #3
    8d5c:	d132      	bne.n	8dc4 <strcpy+0x78>
    8d5e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    8d62:	f011 0f04 	tst.w	r1, #4
    8d66:	f851 3b04 	ldr.w	r3, [r1], #4
    8d6a:	d00b      	beq.n	8d84 <strcpy+0x38>
    8d6c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8d70:	439a      	bics	r2, r3
    8d72:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8d76:	bf04      	itt	eq
    8d78:	f84c 3b04 	streq.w	r3, [ip], #4
    8d7c:	f851 3b04 	ldreq.w	r3, [r1], #4
    8d80:	d116      	bne.n	8db0 <strcpy+0x64>
    8d82:	bf00      	nop
    8d84:	f851 4b04 	ldr.w	r4, [r1], #4
    8d88:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8d8c:	439a      	bics	r2, r3
    8d8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8d92:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    8d96:	d10b      	bne.n	8db0 <strcpy+0x64>
    8d98:	f84c 3b04 	str.w	r3, [ip], #4
    8d9c:	43a2      	bics	r2, r4
    8d9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8da2:	bf04      	itt	eq
    8da4:	f851 3b04 	ldreq.w	r3, [r1], #4
    8da8:	f84c 4b04 	streq.w	r4, [ip], #4
    8dac:	d0ea      	beq.n	8d84 <strcpy+0x38>
    8dae:	4623      	mov	r3, r4
    8db0:	f80c 3b01 	strb.w	r3, [ip], #1
    8db4:	f013 0fff 	tst.w	r3, #255	; 0xff
    8db8:	ea4f 2333 	mov.w	r3, r3, ror #8
    8dbc:	d1f8      	bne.n	8db0 <strcpy+0x64>
    8dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    8dc2:	4770      	bx	lr
    8dc4:	f011 0f01 	tst.w	r1, #1
    8dc8:	d006      	beq.n	8dd8 <strcpy+0x8c>
    8dca:	f811 2b01 	ldrb.w	r2, [r1], #1
    8dce:	f80c 2b01 	strb.w	r2, [ip], #1
    8dd2:	2a00      	cmp	r2, #0
    8dd4:	bf08      	it	eq
    8dd6:	4770      	bxeq	lr
    8dd8:	f011 0f02 	tst.w	r1, #2
    8ddc:	d0bf      	beq.n	8d5e <strcpy+0x12>
    8dde:	f831 2b02 	ldrh.w	r2, [r1], #2
    8de2:	f012 0fff 	tst.w	r2, #255	; 0xff
    8de6:	bf16      	itet	ne
    8de8:	f82c 2b02 	strhne.w	r2, [ip], #2
    8dec:	f88c 2000 	strbeq.w	r2, [ip]
    8df0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    8df4:	d1b3      	bne.n	8d5e <strcpy+0x12>
    8df6:	4770      	bx	lr
    8df8:	f811 2b01 	ldrb.w	r2, [r1], #1
    8dfc:	f80c 2b01 	strb.w	r2, [ip], #1
    8e00:	2a00      	cmp	r2, #0
    8e02:	d1f9      	bne.n	8df8 <strcpy+0xac>
    8e04:	4770      	bx	lr
    8e06:	bf00      	nop
	...

00008e40 <strlen>:
    8e40:	f890 f000 	pld	[r0]
    8e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    8e48:	f020 0107 	bic.w	r1, r0, #7
    8e4c:	f06f 0c00 	mvn.w	ip, #0
    8e50:	f010 0407 	ands.w	r4, r0, #7
    8e54:	f891 f020 	pld	[r1, #32]
    8e58:	f040 8049 	bne.w	8eee <strlen+0xae>
    8e5c:	f04f 0400 	mov.w	r4, #0
    8e60:	f06f 0007 	mvn.w	r0, #7
    8e64:	e9d1 2300 	ldrd	r2, r3, [r1]
    8e68:	f891 f040 	pld	[r1, #64]	; 0x40
    8e6c:	f100 0008 	add.w	r0, r0, #8
    8e70:	fa82 f24c 	uadd8	r2, r2, ip
    8e74:	faa4 f28c 	sel	r2, r4, ip
    8e78:	fa83 f34c 	uadd8	r3, r3, ip
    8e7c:	faa2 f38c 	sel	r3, r2, ip
    8e80:	bb4b      	cbnz	r3, 8ed6 <strlen+0x96>
    8e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8e86:	fa82 f24c 	uadd8	r2, r2, ip
    8e8a:	f100 0008 	add.w	r0, r0, #8
    8e8e:	faa4 f28c 	sel	r2, r4, ip
    8e92:	fa83 f34c 	uadd8	r3, r3, ip
    8e96:	faa2 f38c 	sel	r3, r2, ip
    8e9a:	b9e3      	cbnz	r3, 8ed6 <strlen+0x96>
    8e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    8ea0:	fa82 f24c 	uadd8	r2, r2, ip
    8ea4:	f100 0008 	add.w	r0, r0, #8
    8ea8:	faa4 f28c 	sel	r2, r4, ip
    8eac:	fa83 f34c 	uadd8	r3, r3, ip
    8eb0:	faa2 f38c 	sel	r3, r2, ip
    8eb4:	b97b      	cbnz	r3, 8ed6 <strlen+0x96>
    8eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    8eba:	f101 0120 	add.w	r1, r1, #32
    8ebe:	fa82 f24c 	uadd8	r2, r2, ip
    8ec2:	f100 0008 	add.w	r0, r0, #8
    8ec6:	faa4 f28c 	sel	r2, r4, ip
    8eca:	fa83 f34c 	uadd8	r3, r3, ip
    8ece:	faa2 f38c 	sel	r3, r2, ip
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d0c6      	beq.n	8e64 <strlen+0x24>
    8ed6:	2a00      	cmp	r2, #0
    8ed8:	bf04      	itt	eq
    8eda:	3004      	addeq	r0, #4
    8edc:	461a      	moveq	r2, r3
    8ede:	ba12      	rev	r2, r2
    8ee0:	fab2 f282 	clz	r2, r2
    8ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    8ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    8eec:	4770      	bx	lr
    8eee:	e9d1 2300 	ldrd	r2, r3, [r1]
    8ef2:	f004 0503 	and.w	r5, r4, #3
    8ef6:	f1c4 0000 	rsb	r0, r4, #0
    8efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    8efe:	f014 0f04 	tst.w	r4, #4
    8f02:	f891 f040 	pld	[r1, #64]	; 0x40
    8f06:	fa0c f505 	lsl.w	r5, ip, r5
    8f0a:	ea62 0205 	orn	r2, r2, r5
    8f0e:	bf1c      	itt	ne
    8f10:	ea63 0305 	ornne	r3, r3, r5
    8f14:	4662      	movne	r2, ip
    8f16:	f04f 0400 	mov.w	r4, #0
    8f1a:	e7a9      	b.n	8e70 <strlen+0x30>

00008f1c <strncmp>:
    8f1c:	2a00      	cmp	r2, #0
    8f1e:	d041      	beq.n	8fa4 <strncmp+0x88>
    8f20:	ea40 0301 	orr.w	r3, r0, r1
    8f24:	f013 0303 	ands.w	r3, r3, #3
    8f28:	b4f0      	push	{r4, r5, r6, r7}
    8f2a:	d125      	bne.n	8f78 <strncmp+0x5c>
    8f2c:	2a03      	cmp	r2, #3
    8f2e:	d923      	bls.n	8f78 <strncmp+0x5c>
    8f30:	6804      	ldr	r4, [r0, #0]
    8f32:	680d      	ldr	r5, [r1, #0]
    8f34:	42ac      	cmp	r4, r5
    8f36:	d11f      	bne.n	8f78 <strncmp+0x5c>
    8f38:	3a04      	subs	r2, #4
    8f3a:	d035      	beq.n	8fa8 <strncmp+0x8c>
    8f3c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
    8f40:	ea25 0404 	bic.w	r4, r5, r4
    8f44:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    8f48:	d131      	bne.n	8fae <strncmp+0x92>
    8f4a:	1d07      	adds	r7, r0, #4
    8f4c:	1d0d      	adds	r5, r1, #4
    8f4e:	e00d      	b.n	8f6c <strncmp+0x50>
    8f50:	f857 3b04 	ldr.w	r3, [r7], #4
    8f54:	680e      	ldr	r6, [r1, #0]
    8f56:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    8f5a:	42b3      	cmp	r3, r6
    8f5c:	ea24 0403 	bic.w	r4, r4, r3
    8f60:	d10a      	bne.n	8f78 <strncmp+0x5c>
    8f62:	3a04      	subs	r2, #4
    8f64:	d020      	beq.n	8fa8 <strncmp+0x8c>
    8f66:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    8f6a:	d123      	bne.n	8fb4 <strncmp+0x98>
    8f6c:	2a03      	cmp	r2, #3
    8f6e:	4629      	mov	r1, r5
    8f70:	4638      	mov	r0, r7
    8f72:	f105 0504 	add.w	r5, r5, #4
    8f76:	d8eb      	bhi.n	8f50 <strncmp+0x34>
    8f78:	7803      	ldrb	r3, [r0, #0]
    8f7a:	780c      	ldrb	r4, [r1, #0]
    8f7c:	429c      	cmp	r4, r3
    8f7e:	f102 32ff 	add.w	r2, r2, #4294967295
    8f82:	d10c      	bne.n	8f9e <strncmp+0x82>
    8f84:	b182      	cbz	r2, 8fa8 <strncmp+0x8c>
    8f86:	b914      	cbnz	r4, 8f8e <strncmp+0x72>
    8f88:	e016      	b.n	8fb8 <strncmp+0x9c>
    8f8a:	b16a      	cbz	r2, 8fa8 <strncmp+0x8c>
    8f8c:	b17b      	cbz	r3, 8fae <strncmp+0x92>
    8f8e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8f92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8f96:	42a3      	cmp	r3, r4
    8f98:	f102 32ff 	add.w	r2, r2, #4294967295
    8f9c:	d0f5      	beq.n	8f8a <strncmp+0x6e>
    8f9e:	1b18      	subs	r0, r3, r4
    8fa0:	bcf0      	pop	{r4, r5, r6, r7}
    8fa2:	4770      	bx	lr
    8fa4:	4610      	mov	r0, r2
    8fa6:	4770      	bx	lr
    8fa8:	4610      	mov	r0, r2
    8faa:	bcf0      	pop	{r4, r5, r6, r7}
    8fac:	4770      	bx	lr
    8fae:	4618      	mov	r0, r3
    8fb0:	bcf0      	pop	{r4, r5, r6, r7}
    8fb2:	4770      	bx	lr
    8fb4:	2000      	movs	r0, #0
    8fb6:	e7f3      	b.n	8fa0 <strncmp+0x84>
    8fb8:	4620      	mov	r0, r4
    8fba:	e7f1      	b.n	8fa0 <strncmp+0x84>

00008fbc <strncpy>:
    8fbc:	ea40 0301 	orr.w	r3, r0, r1
    8fc0:	079b      	lsls	r3, r3, #30
    8fc2:	b470      	push	{r4, r5, r6}
    8fc4:	d12b      	bne.n	901e <strncpy+0x62>
    8fc6:	2a03      	cmp	r2, #3
    8fc8:	d929      	bls.n	901e <strncpy+0x62>
    8fca:	460c      	mov	r4, r1
    8fcc:	4603      	mov	r3, r0
    8fce:	4621      	mov	r1, r4
    8fd0:	f854 6b04 	ldr.w	r6, [r4], #4
    8fd4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    8fd8:	ea25 0506 	bic.w	r5, r5, r6
    8fdc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    8fe0:	d106      	bne.n	8ff0 <strncpy+0x34>
    8fe2:	3a04      	subs	r2, #4
    8fe4:	2a03      	cmp	r2, #3
    8fe6:	f843 6b04 	str.w	r6, [r3], #4
    8fea:	4621      	mov	r1, r4
    8fec:	d8ef      	bhi.n	8fce <strncpy+0x12>
    8fee:	b1a2      	cbz	r2, 901a <strncpy+0x5e>
    8ff0:	780c      	ldrb	r4, [r1, #0]
    8ff2:	701c      	strb	r4, [r3, #0]
    8ff4:	3a01      	subs	r2, #1
    8ff6:	3301      	adds	r3, #1
    8ff8:	3101      	adds	r1, #1
    8ffa:	b13c      	cbz	r4, 900c <strncpy+0x50>
    8ffc:	b16a      	cbz	r2, 901a <strncpy+0x5e>
    8ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
    9002:	f803 4b01 	strb.w	r4, [r3], #1
    9006:	3a01      	subs	r2, #1
    9008:	2c00      	cmp	r4, #0
    900a:	d1f7      	bne.n	8ffc <strncpy+0x40>
    900c:	b12a      	cbz	r2, 901a <strncpy+0x5e>
    900e:	441a      	add	r2, r3
    9010:	2100      	movs	r1, #0
    9012:	f803 1b01 	strb.w	r1, [r3], #1
    9016:	429a      	cmp	r2, r3
    9018:	d1fb      	bne.n	9012 <strncpy+0x56>
    901a:	bc70      	pop	{r4, r5, r6}
    901c:	4770      	bx	lr
    901e:	4603      	mov	r3, r0
    9020:	e7e5      	b.n	8fee <strncpy+0x32>
    9022:	bf00      	nop

00009024 <sulp>:
    9024:	b570      	push	{r4, r5, r6, lr}
    9026:	4604      	mov	r4, r0
    9028:	460d      	mov	r5, r1
    902a:	4616      	mov	r6, r2
    902c:	ec45 4b10 	vmov	d0, r4, r5
    9030:	f004 fa8e 	bl	d550 <__ulp>
    9034:	b17e      	cbz	r6, 9056 <sulp+0x32>
    9036:	f3c5 530a 	ubfx	r3, r5, #20, #11
    903a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    903e:	2b00      	cmp	r3, #0
    9040:	dd09      	ble.n	9056 <sulp+0x32>
    9042:	051b      	lsls	r3, r3, #20
    9044:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    9048:	2000      	movs	r0, #0
    904a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    904e:	ec41 0b17 	vmov	d7, r0, r1
    9052:	ee20 0b07 	vmul.f64	d0, d0, d7
    9056:	bd70      	pop	{r4, r5, r6, pc}

00009058 <_strtod_l>:
    9058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    905c:	ed2d 8b0e 	vpush	{d8-d14}
    9060:	461e      	mov	r6, r3
    9062:	b099      	sub	sp, #100	; 0x64
    9064:	2300      	movs	r3, #0
    9066:	4681      	mov	r9, r0
    9068:	4630      	mov	r0, r6
    906a:	4688      	mov	r8, r1
    906c:	4692      	mov	sl, r2
    906e:	9314      	str	r3, [sp, #80]	; 0x50
    9070:	f003 ff0a 	bl	ce88 <__localeconv_l>
    9074:	2400      	movs	r4, #0
    9076:	2300      	movs	r3, #0
    9078:	4683      	mov	fp, r0
    907a:	6800      	ldr	r0, [r0, #0]
    907c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    9080:	f7ff fede 	bl	8e40 <strlen>
    9084:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9088:	9004      	str	r0, [sp, #16]
    908a:	4643      	mov	r3, r8
    908c:	461d      	mov	r5, r3
    908e:	f813 4b01 	ldrb.w	r4, [r3], #1
    9092:	2c2d      	cmp	r4, #45	; 0x2d
    9094:	f200 811b 	bhi.w	92ce <_strtod_l+0x276>
    9098:	e8df f014 	tbh	[pc, r4, lsl #1]
    909c:	0119002e 	.word	0x0119002e
    90a0:	01190119 	.word	0x01190119
    90a4:	01190119 	.word	0x01190119
    90a8:	01190119 	.word	0x01190119
    90ac:	00ef0119 	.word	0x00ef0119
    90b0:	00ef00ef 	.word	0x00ef00ef
    90b4:	00ef00ef 	.word	0x00ef00ef
    90b8:	01190119 	.word	0x01190119
    90bc:	01190119 	.word	0x01190119
    90c0:	01190119 	.word	0x01190119
    90c4:	01190119 	.word	0x01190119
    90c8:	01190119 	.word	0x01190119
    90cc:	01190119 	.word	0x01190119
    90d0:	01190119 	.word	0x01190119
    90d4:	01190119 	.word	0x01190119
    90d8:	01190119 	.word	0x01190119
    90dc:	011900ef 	.word	0x011900ef
    90e0:	01190119 	.word	0x01190119
    90e4:	01190119 	.word	0x01190119
    90e8:	01190119 	.word	0x01190119
    90ec:	01190119 	.word	0x01190119
    90f0:	00490119 	.word	0x00490119
    90f4:	00ec0119 	.word	0x00ec0119
    90f8:	ed9f 7baf 	vldr	d7, [pc, #700]	; 93b8 <_strtod_l+0x360>
    90fc:	ed8d 7b04 	vstr	d7, [sp, #16]
    9100:	f1ba 0f00 	cmp.w	sl, #0
    9104:	d00c      	beq.n	9120 <_strtod_l+0xc8>
    9106:	2200      	movs	r2, #0
    9108:	4643      	mov	r3, r8
    910a:	9208      	str	r2, [sp, #32]
    910c:	f8ca 3000 	str.w	r3, [sl]
    9110:	9b08      	ldr	r3, [sp, #32]
    9112:	b12b      	cbz	r3, 9120 <_strtod_l+0xc8>
    9114:	ed9d 7b04 	vldr	d7, [sp, #16]
    9118:	eeb1 7b47 	vneg.f64	d7, d7
    911c:	ed8d 7b04 	vstr	d7, [sp, #16]
    9120:	ed9d 0b04 	vldr	d0, [sp, #16]
    9124:	b019      	add	sp, #100	; 0x64
    9126:	ecbd 8b0e 	vpop	{d8-d14}
    912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    912e:	2300      	movs	r3, #0
    9130:	9308      	str	r3, [sp, #32]
    9132:	1c6b      	adds	r3, r5, #1
    9134:	9313      	str	r3, [sp, #76]	; 0x4c
    9136:	786c      	ldrb	r4, [r5, #1]
    9138:	2c00      	cmp	r4, #0
    913a:	d0dd      	beq.n	90f8 <_strtod_l+0xa0>
    913c:	2c30      	cmp	r4, #48	; 0x30
    913e:	461d      	mov	r5, r3
    9140:	f000 80ca 	beq.w	92d8 <_strtod_l+0x280>
    9144:	2300      	movs	r3, #0
    9146:	950a      	str	r5, [sp, #40]	; 0x28
    9148:	9309      	str	r3, [sp, #36]	; 0x24
    914a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    914e:	2b09      	cmp	r3, #9
    9150:	f200 83d5 	bhi.w	98fe <_strtod_l+0x8a6>
    9154:	2700      	movs	r7, #0
    9156:	4628      	mov	r0, r5
    9158:	463e      	mov	r6, r7
    915a:	463d      	mov	r5, r7
    915c:	2d08      	cmp	r5, #8
    915e:	bfc8      	it	gt
    9160:	eb07 0787 	addgt.w	r7, r7, r7, lsl #2
    9164:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    9168:	f100 0001 	add.w	r0, r0, #1
    916c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    9170:	9013      	str	r0, [sp, #76]	; 0x4c
    9172:	bfc4      	itt	gt
    9174:	eb04 0447 	addgt.w	r4, r4, r7, lsl #1
    9178:	f1a4 0730 	subgt.w	r7, r4, #48	; 0x30
    917c:	7804      	ldrb	r4, [r0, #0]
    917e:	bfd8      	it	le
    9180:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    9184:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    9188:	2b09      	cmp	r3, #9
    918a:	f105 0501 	add.w	r5, r5, #1
    918e:	d9e5      	bls.n	915c <_strtod_l+0x104>
    9190:	f8db 1000 	ldr.w	r1, [fp]
    9194:	9a04      	ldr	r2, [sp, #16]
    9196:	f7ff fec1 	bl	8f1c <strncmp>
    919a:	2800      	cmp	r0, #0
    919c:	d06f      	beq.n	927e <_strtod_l+0x226>
    919e:	2000      	movs	r0, #0
    91a0:	4684      	mov	ip, r0
    91a2:	4683      	mov	fp, r0
    91a4:	462a      	mov	r2, r5
    91a6:	2c65      	cmp	r4, #101	; 0x65
    91a8:	f000 8112 	beq.w	93d0 <_strtod_l+0x378>
    91ac:	2c45      	cmp	r4, #69	; 0x45
    91ae:	f000 810f 	beq.w	93d0 <_strtod_l+0x378>
    91b2:	2300      	movs	r3, #0
    91b4:	2d00      	cmp	r5, #0
    91b6:	f040 80aa 	bne.w	930e <_strtod_l+0x2b6>
    91ba:	2800      	cmp	r0, #0
    91bc:	f040 809d 	bne.w	92fa <_strtod_l+0x2a2>
    91c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91c2:	2b00      	cmp	r3, #0
    91c4:	f040 8099 	bne.w	92fa <_strtod_l+0x2a2>
    91c8:	f1bb 0f00 	cmp.w	fp, #0
    91cc:	d194      	bne.n	90f8 <_strtod_l+0xa0>
    91ce:	3c49      	subs	r4, #73	; 0x49
    91d0:	2c25      	cmp	r4, #37	; 0x25
    91d2:	d891      	bhi.n	90f8 <_strtod_l+0xa0>
    91d4:	a301      	add	r3, pc, #4	; (adr r3, 91dc <_strtod_l+0x184>)
    91d6:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    91da:	bf00      	nop
    91dc:	00009383 	.word	0x00009383
    91e0:	000090f9 	.word	0x000090f9
    91e4:	000090f9 	.word	0x000090f9
    91e8:	000090f9 	.word	0x000090f9
    91ec:	000090f9 	.word	0x000090f9
    91f0:	00009897 	.word	0x00009897
    91f4:	000090f9 	.word	0x000090f9
    91f8:	000090f9 	.word	0x000090f9
    91fc:	000090f9 	.word	0x000090f9
    9200:	000090f9 	.word	0x000090f9
    9204:	000090f9 	.word	0x000090f9
    9208:	000090f9 	.word	0x000090f9
    920c:	000090f9 	.word	0x000090f9
    9210:	000090f9 	.word	0x000090f9
    9214:	000090f9 	.word	0x000090f9
    9218:	000090f9 	.word	0x000090f9
    921c:	000090f9 	.word	0x000090f9
    9220:	000090f9 	.word	0x000090f9
    9224:	000090f9 	.word	0x000090f9
    9228:	000090f9 	.word	0x000090f9
    922c:	000090f9 	.word	0x000090f9
    9230:	000090f9 	.word	0x000090f9
    9234:	000090f9 	.word	0x000090f9
    9238:	000090f9 	.word	0x000090f9
    923c:	000090f9 	.word	0x000090f9
    9240:	000090f9 	.word	0x000090f9
    9244:	000090f9 	.word	0x000090f9
    9248:	000090f9 	.word	0x000090f9
    924c:	000090f9 	.word	0x000090f9
    9250:	000090f9 	.word	0x000090f9
    9254:	000090f9 	.word	0x000090f9
    9258:	000090f9 	.word	0x000090f9
    925c:	00009383 	.word	0x00009383
    9260:	000090f9 	.word	0x000090f9
    9264:	000090f9 	.word	0x000090f9
    9268:	000090f9 	.word	0x000090f9
    926c:	000090f9 	.word	0x000090f9
    9270:	00009897 	.word	0x00009897
    9274:	2301      	movs	r3, #1
    9276:	9308      	str	r3, [sp, #32]
    9278:	e75b      	b.n	9132 <_strtod_l+0xda>
    927a:	9313      	str	r3, [sp, #76]	; 0x4c
    927c:	e706      	b.n	908c <_strtod_l+0x34>
    927e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9280:	9904      	ldr	r1, [sp, #16]
    9282:	185a      	adds	r2, r3, r1
    9284:	9213      	str	r2, [sp, #76]	; 0x4c
    9286:	5c5c      	ldrb	r4, [r3, r1]
    9288:	4684      	mov	ip, r0
    928a:	462a      	mov	r2, r5
    928c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    9290:	2b09      	cmp	r3, #9
    9292:	f200 8244 	bhi.w	971e <_strtod_l+0x6c6>
    9296:	1c41      	adds	r1, r0, #1
    9298:	461c      	mov	r4, r3
    929a:	2b00      	cmp	r3, #0
    929c:	f000 8607 	beq.w	9eae <_strtod_l+0xe56>
    92a0:	2901      	cmp	r1, #1
    92a2:	448c      	add	ip, r1
    92a4:	bf18      	it	ne
    92a6:	1940      	addne	r0, r0, r5
    92a8:	d105      	bne.n	92b6 <_strtod_l+0x25e>
    92aa:	f000 bdf2 	b.w	9e92 <_strtod_l+0xe3a>
    92ae:	004e      	lsls	r6, r1, #1
    92b0:	4285      	cmp	r5, r0
    92b2:	f000 8442 	beq.w	9b3a <_strtod_l+0xae2>
    92b6:	3501      	adds	r5, #1
    92b8:	1e69      	subs	r1, r5, #1
    92ba:	2908      	cmp	r1, #8
    92bc:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    92c0:	ddf5      	ble.n	92ae <_strtod_l+0x256>
    92c2:	2d10      	cmp	r5, #16
    92c4:	bfdc      	itt	le
    92c6:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
    92ca:	007f      	lslle	r7, r7, #1
    92cc:	e7f0      	b.n	92b0 <_strtod_l+0x258>
    92ce:	2300      	movs	r3, #0
    92d0:	2c30      	cmp	r4, #48	; 0x30
    92d2:	9308      	str	r3, [sp, #32]
    92d4:	f47f af36 	bne.w	9144 <_strtod_l+0xec>
    92d8:	786b      	ldrb	r3, [r5, #1]
    92da:	2b58      	cmp	r3, #88	; 0x58
    92dc:	f000 82f3 	beq.w	98c6 <_strtod_l+0x86e>
    92e0:	2b78      	cmp	r3, #120	; 0x78
    92e2:	f000 82f0 	beq.w	98c6 <_strtod_l+0x86e>
    92e6:	3501      	adds	r5, #1
    92e8:	9513      	str	r5, [sp, #76]	; 0x4c
    92ea:	782c      	ldrb	r4, [r5, #0]
    92ec:	2c30      	cmp	r4, #48	; 0x30
    92ee:	d0fa      	beq.n	92e6 <_strtod_l+0x28e>
    92f0:	b11c      	cbz	r4, 92fa <_strtod_l+0x2a2>
    92f2:	2301      	movs	r3, #1
    92f4:	950a      	str	r5, [sp, #40]	; 0x28
    92f6:	9309      	str	r3, [sp, #36]	; 0x24
    92f8:	e727      	b.n	914a <_strtod_l+0xf2>
    92fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 93b8 <_strtod_l+0x360>
    92fe:	ed8d 7b04 	vstr	d7, [sp, #16]
    9302:	f1ba 0f00 	cmp.w	sl, #0
    9306:	f43f af03 	beq.w	9110 <_strtod_l+0xb8>
    930a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    930c:	e6fe      	b.n	910c <_strtod_l+0xb4>
    930e:	ee07 6a90 	vmov	s15, r6
    9312:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    9316:	2d10      	cmp	r5, #16
    9318:	ed8d 7b04 	vstr	d7, [sp, #16]
    931c:	ebcc 0403 	rsb	r4, ip, r3
    9320:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    9324:	4629      	mov	r1, r5
    9326:	bfa8      	it	ge
    9328:	2110      	movge	r1, #16
    932a:	2a00      	cmp	r2, #0
    932c:	bf08      	it	eq
    932e:	462a      	moveq	r2, r5
    9330:	2909      	cmp	r1, #9
    9332:	e9cd bc06 	strd	fp, ip, [sp, #24]
    9336:	dd0e      	ble.n	9356 <_strtod_l+0x2fe>
    9338:	4b21      	ldr	r3, [pc, #132]	; (93c0 <_strtod_l+0x368>)
    933a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    933e:	ed13 6b12 	vldr	d6, [r3, #-72]	; 0xffffffb8
    9342:	ed9d 5b04 	vldr	d5, [sp, #16]
    9346:	ee07 7a90 	vmov	s15, r7
    934a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    934e:	eea5 7b06 	vfma.f64	d7, d5, d6
    9352:	ed8d 7b06 	vstr	d7, [sp, #24]
    9356:	2d0f      	cmp	r5, #15
    9358:	f300 808b 	bgt.w	9472 <_strtod_l+0x41a>
    935c:	2c00      	cmp	r4, #0
    935e:	d026      	beq.n	93ae <_strtod_l+0x356>
    9360:	f340 8481 	ble.w	9c66 <_strtod_l+0xc0e>
    9364:	2c16      	cmp	r4, #22
    9366:	f300 8401 	bgt.w	9b6c <_strtod_l+0xb14>
    936a:	4b15      	ldr	r3, [pc, #84]	; (93c0 <_strtod_l+0x368>)
    936c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    9370:	ed94 7b00 	vldr	d7, [r4]
    9374:	ed9d 6b06 	vldr	d6, [sp, #24]
    9378:	ee27 7b06 	vmul.f64	d7, d7, d6
    937c:	ed8d 7b04 	vstr	d7, [sp, #16]
    9380:	e7bf      	b.n	9302 <_strtod_l+0x2aa>
    9382:	a813      	add	r0, sp, #76	; 0x4c
    9384:	490f      	ldr	r1, [pc, #60]	; (93c4 <_strtod_l+0x36c>)
    9386:	f003 fca7 	bl	ccd8 <__match>
    938a:	2800      	cmp	r0, #0
    938c:	f43f aeb4 	beq.w	90f8 <_strtod_l+0xa0>
    9390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9392:	490d      	ldr	r1, [pc, #52]	; (93c8 <_strtod_l+0x370>)
    9394:	3b01      	subs	r3, #1
    9396:	a813      	add	r0, sp, #76	; 0x4c
    9398:	9313      	str	r3, [sp, #76]	; 0x4c
    939a:	f003 fc9d 	bl	ccd8 <__match>
    939e:	b910      	cbnz	r0, 93a6 <_strtod_l+0x34e>
    93a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    93a2:	3301      	adds	r3, #1
    93a4:	9313      	str	r3, [sp, #76]	; 0x4c
    93a6:	4b09      	ldr	r3, [pc, #36]	; (93cc <_strtod_l+0x374>)
    93a8:	9307      	str	r3, [sp, #28]
    93aa:	2300      	movs	r3, #0
    93ac:	9306      	str	r3, [sp, #24]
    93ae:	ed9d 7b06 	vldr	d7, [sp, #24]
    93b2:	ed8d 7b04 	vstr	d7, [sp, #16]
    93b6:	e7a4      	b.n	9302 <_strtod_l+0x2aa>
	...
    93c0:	20000d28 	.word	0x20000d28
    93c4:	20000a40 	.word	0x20000a40
    93c8:	20000a44 	.word	0x20000a44
    93cc:	7ff00000 	.word	0x7ff00000
    93d0:	2d00      	cmp	r5, #0
    93d2:	f000 8199 	beq.w	9708 <_strtod_l+0x6b0>
    93d6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    93da:	f108 0301 	add.w	r3, r8, #1
    93de:	9313      	str	r3, [sp, #76]	; 0x4c
    93e0:	f898 4001 	ldrb.w	r4, [r8, #1]
    93e4:	2c2b      	cmp	r4, #43	; 0x2b
    93e6:	f000 826b 	beq.w	98c0 <_strtod_l+0x868>
    93ea:	2c2d      	cmp	r4, #45	; 0x2d
    93ec:	f000 81b5 	beq.w	975a <_strtod_l+0x702>
    93f0:	2300      	movs	r3, #0
    93f2:	9304      	str	r3, [sp, #16]
    93f4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    93f8:	2b09      	cmp	r3, #9
    93fa:	f200 825d 	bhi.w	98b8 <_strtod_l+0x860>
    93fe:	2c30      	cmp	r4, #48	; 0x30
    9400:	d105      	bne.n	940e <_strtod_l+0x3b6>
    9402:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9404:	3301      	adds	r3, #1
    9406:	9313      	str	r3, [sp, #76]	; 0x4c
    9408:	781c      	ldrb	r4, [r3, #0]
    940a:	2c30      	cmp	r4, #48	; 0x30
    940c:	d0fa      	beq.n	9404 <_strtod_l+0x3ac>
    940e:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    9412:	2b08      	cmp	r3, #8
    9414:	f63f aecd 	bhi.w	91b2 <_strtod_l+0x15a>
    9418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    941a:	930c      	str	r3, [sp, #48]	; 0x30
    941c:	1c59      	adds	r1, r3, #1
    941e:	3c30      	subs	r4, #48	; 0x30
    9420:	9113      	str	r1, [sp, #76]	; 0x4c
    9422:	940b      	str	r4, [sp, #44]	; 0x2c
    9424:	785c      	ldrb	r4, [r3, #1]
    9426:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
    942a:	f1be 0f09 	cmp.w	lr, #9
    942e:	d80f      	bhi.n	9450 <_strtod_l+0x3f8>
    9430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9432:	3101      	adds	r1, #1
    9434:	9113      	str	r1, [sp, #76]	; 0x4c
    9436:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    943a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    943e:	780c      	ldrb	r4, [r1, #0]
    9440:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
    9444:	f1be 0f09 	cmp.w	lr, #9
    9448:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    944c:	d9f1      	bls.n	9432 <_strtod_l+0x3da>
    944e:	930b      	str	r3, [sp, #44]	; 0x2c
    9450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9452:	1ac9      	subs	r1, r1, r3
    9454:	2908      	cmp	r1, #8
    9456:	f300 8381 	bgt.w	9b5c <_strtod_l+0xb04>
    945a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    945c:	f644 611f 	movw	r1, #19999	; 0x4e1f
    9460:	428b      	cmp	r3, r1
    9462:	bfa8      	it	ge
    9464:	460b      	movge	r3, r1
    9466:	9904      	ldr	r1, [sp, #16]
    9468:	2900      	cmp	r1, #0
    946a:	f43f aea3 	beq.w	91b4 <_strtod_l+0x15c>
    946e:	425b      	negs	r3, r3
    9470:	e6a0      	b.n	91b4 <_strtod_l+0x15c>
    9472:	1a6b      	subs	r3, r5, r1
    9474:	4423      	add	r3, r4
    9476:	2b00      	cmp	r3, #0
    9478:	f340 8302 	ble.w	9a80 <_strtod_l+0xa28>
    947c:	f013 000f 	ands.w	r0, r3, #15
    9480:	d00a      	beq.n	9498 <_strtod_l+0x440>
    9482:	49c3      	ldr	r1, [pc, #780]	; (9790 <_strtod_l+0x738>)
    9484:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    9488:	ed9d 6b06 	vldr	d6, [sp, #24]
    948c:	ed91 7b00 	vldr	d7, [r1]
    9490:	ee27 7b06 	vmul.f64	d7, d7, d6
    9494:	ed8d 7b06 	vstr	d7, [sp, #24]
    9498:	f033 030f 	bics.w	r3, r3, #15
    949c:	f040 8186 	bne.w	97ac <_strtod_l+0x754>
    94a0:	2300      	movs	r3, #0
    94a2:	9309      	str	r3, [sp, #36]	; 0x24
    94a4:	9600      	str	r6, [sp, #0]
    94a6:	462b      	mov	r3, r5
    94a8:	990a      	ldr	r1, [sp, #40]	; 0x28
    94aa:	4648      	mov	r0, r9
    94ac:	f003 fdc0 	bl	d030 <__s2b>
    94b0:	4683      	mov	fp, r0
    94b2:	2800      	cmp	r0, #0
    94b4:	f000 8276 	beq.w	99a4 <_strtod_l+0x94c>
    94b8:	2c00      	cmp	r4, #0
    94ba:	f04f 0800 	mov.w	r8, #0
    94be:	f1c4 0300 	rsb	r3, r4, #0
    94c2:	ed9f abab 	vldr	d10, [pc, #684]	; 9770 <_strtod_l+0x718>
    94c6:	bfa8      	it	ge
    94c8:	4643      	movge	r3, r8
    94ca:	ed9f 9bab 	vldr	d9, [pc, #684]	; 9778 <_strtod_l+0x720>
    94ce:	ed9f bbac 	vldr	d11, [pc, #688]	; 9780 <_strtod_l+0x728>
    94d2:	ed9f 8bad 	vldr	d8, [pc, #692]	; 9788 <_strtod_l+0x730>
    94d6:	930b      	str	r3, [sp, #44]	; 0x2c
    94d8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    94dc:	930a      	str	r3, [sp, #40]	; 0x28
    94de:	4644      	mov	r4, r8
    94e0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
    94e4:	f8db 1004 	ldr.w	r1, [fp, #4]
    94e8:	4648      	mov	r0, r9
    94ea:	f003 fd31 	bl	cf50 <_Balloc>
    94ee:	4606      	mov	r6, r0
    94f0:	2800      	cmp	r0, #0
    94f2:	f000 8295 	beq.w	9a20 <_strtod_l+0x9c8>
    94f6:	f8db 2010 	ldr.w	r2, [fp, #16]
    94fa:	ed9d 7b06 	vldr	d7, [sp, #24]
    94fe:	3202      	adds	r2, #2
    9500:	0092      	lsls	r2, r2, #2
    9502:	f10b 010c 	add.w	r1, fp, #12
    9506:	300c      	adds	r0, #12
    9508:	ed8d 7b04 	vstr	d7, [sp, #16]
    950c:	f7fd fad2 	bl	6ab4 <memcpy>
    9510:	ed9d 0b04 	vldr	d0, [sp, #16]
    9514:	aa16      	add	r2, sp, #88	; 0x58
    9516:	a915      	add	r1, sp, #84	; 0x54
    9518:	4648      	mov	r0, r9
    951a:	f004 f8ab 	bl	d674 <__d2b>
    951e:	9014      	str	r0, [sp, #80]	; 0x50
    9520:	2800      	cmp	r0, #0
    9522:	f000 83b1 	beq.w	9c88 <_strtod_l+0xc30>
    9526:	2101      	movs	r1, #1
    9528:	4648      	mov	r0, r9
    952a:	f003 fe1b 	bl	d164 <__i2b>
    952e:	4604      	mov	r4, r0
    9530:	2800      	cmp	r0, #0
    9532:	f000 8275 	beq.w	9a20 <_strtod_l+0x9c8>
    9536:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9538:	2a00      	cmp	r2, #0
    953a:	f2c0 80ec 	blt.w	9716 <_strtod_l+0x6be>
    953e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9540:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9542:	189f      	adds	r7, r3, r2
    9544:	9909      	ldr	r1, [sp, #36]	; 0x24
    9546:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9548:	1a52      	subs	r2, r2, r1
    954a:	441a      	add	r2, r3
    954c:	4991      	ldr	r1, [pc, #580]	; (9794 <_strtod_l+0x73c>)
    954e:	3a01      	subs	r2, #1
    9550:	428a      	cmp	r2, r1
    9552:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    9556:	f280 80c5 	bge.w	96e4 <_strtod_l+0x68c>
    955a:	1a89      	subs	r1, r1, r2
    955c:	291f      	cmp	r1, #31
    955e:	eba3 0301 	sub.w	r3, r3, r1
    9562:	f300 80df 	bgt.w	9724 <_strtod_l+0x6cc>
    9566:	2201      	movs	r2, #1
    9568:	408a      	lsls	r2, r1
    956a:	920d      	str	r2, [sp, #52]	; 0x34
    956c:	2200      	movs	r2, #0
    956e:	920e      	str	r2, [sp, #56]	; 0x38
    9570:	eb07 0a03 	add.w	sl, r7, r3
    9574:	441d      	add	r5, r3
    9576:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9578:	4557      	cmp	r7, sl
    957a:	463a      	mov	r2, r7
    957c:	441d      	add	r5, r3
    957e:	bfa8      	it	ge
    9580:	4652      	movge	r2, sl
    9582:	42aa      	cmp	r2, r5
    9584:	bfa8      	it	ge
    9586:	462a      	movge	r2, r5
    9588:	2a00      	cmp	r2, #0
    958a:	dd03      	ble.n	9594 <_strtod_l+0x53c>
    958c:	ebc2 0a0a 	rsb	sl, r2, sl
    9590:	1aad      	subs	r5, r5, r2
    9592:	1abf      	subs	r7, r7, r2
    9594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9596:	b1bb      	cbz	r3, 95c8 <_strtod_l+0x570>
    9598:	4621      	mov	r1, r4
    959a:	461a      	mov	r2, r3
    959c:	4648      	mov	r0, r9
    959e:	f003 fe83 	bl	d2a8 <__pow5mult>
    95a2:	4604      	mov	r4, r0
    95a4:	2800      	cmp	r0, #0
    95a6:	f000 823b 	beq.w	9a20 <_strtod_l+0x9c8>
    95aa:	4601      	mov	r1, r0
    95ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
    95ae:	4648      	mov	r0, r9
    95b0:	f003 fde2 	bl	d178 <__multiply>
    95b4:	2800      	cmp	r0, #0
    95b6:	f000 8233 	beq.w	9a20 <_strtod_l+0x9c8>
    95ba:	900c      	str	r0, [sp, #48]	; 0x30
    95bc:	9914      	ldr	r1, [sp, #80]	; 0x50
    95be:	4648      	mov	r0, r9
    95c0:	f003 fcec 	bl	cf9c <_Bfree>
    95c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    95c6:	9214      	str	r2, [sp, #80]	; 0x50
    95c8:	f1ba 0f00 	cmp.w	sl, #0
    95cc:	dd08      	ble.n	95e0 <_strtod_l+0x588>
    95ce:	4652      	mov	r2, sl
    95d0:	9914      	ldr	r1, [sp, #80]	; 0x50
    95d2:	4648      	mov	r0, r9
    95d4:	f003 feb8 	bl	d348 <__lshift>
    95d8:	9014      	str	r0, [sp, #80]	; 0x50
    95da:	2800      	cmp	r0, #0
    95dc:	f000 8354 	beq.w	9c88 <_strtod_l+0xc30>
    95e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95e2:	b143      	cbz	r3, 95f6 <_strtod_l+0x59e>
    95e4:	4631      	mov	r1, r6
    95e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    95e8:	4648      	mov	r0, r9
    95ea:	f003 fe5d 	bl	d2a8 <__pow5mult>
    95ee:	4606      	mov	r6, r0
    95f0:	2800      	cmp	r0, #0
    95f2:	f000 8215 	beq.w	9a20 <_strtod_l+0x9c8>
    95f6:	2d00      	cmp	r5, #0
    95f8:	dd08      	ble.n	960c <_strtod_l+0x5b4>
    95fa:	4631      	mov	r1, r6
    95fc:	462a      	mov	r2, r5
    95fe:	4648      	mov	r0, r9
    9600:	f003 fea2 	bl	d348 <__lshift>
    9604:	4606      	mov	r6, r0
    9606:	2800      	cmp	r0, #0
    9608:	f000 820a 	beq.w	9a20 <_strtod_l+0x9c8>
    960c:	2f00      	cmp	r7, #0
    960e:	dd08      	ble.n	9622 <_strtod_l+0x5ca>
    9610:	4621      	mov	r1, r4
    9612:	463a      	mov	r2, r7
    9614:	4648      	mov	r0, r9
    9616:	f003 fe97 	bl	d348 <__lshift>
    961a:	4604      	mov	r4, r0
    961c:	2800      	cmp	r0, #0
    961e:	f000 81ff 	beq.w	9a20 <_strtod_l+0x9c8>
    9622:	4632      	mov	r2, r6
    9624:	9914      	ldr	r1, [sp, #80]	; 0x50
    9626:	4648      	mov	r0, r9
    9628:	f003 ff08 	bl	d43c <__mdiff>
    962c:	4680      	mov	r8, r0
    962e:	2800      	cmp	r0, #0
    9630:	f000 81f6 	beq.w	9a20 <_strtod_l+0x9c8>
    9634:	2300      	movs	r3, #0
    9636:	68c5      	ldr	r5, [r0, #12]
    9638:	60c3      	str	r3, [r0, #12]
    963a:	4621      	mov	r1, r4
    963c:	f003 fedc 	bl	d3f8 <__mcmp>
    9640:	2800      	cmp	r0, #0
    9642:	f2c0 8324 	blt.w	9c8e <_strtod_l+0xc36>
    9646:	f000 8383 	beq.w	9d50 <_strtod_l+0xcf8>
    964a:	4621      	mov	r1, r4
    964c:	4640      	mov	r0, r8
    964e:	f004 f86f 	bl	d730 <__ratio>
    9652:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    9656:	eeb4 0bc7 	vcmpe.f64	d0, d7
    965a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    965e:	d846      	bhi.n	96ee <_strtod_l+0x696>
    9660:	2d00      	cmp	r5, #0
    9662:	d067      	beq.n	9734 <_strtod_l+0x6dc>
    9664:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
    9668:	4b4b      	ldr	r3, [pc, #300]	; (9798 <_strtod_l+0x740>)
    966a:	9907      	ldr	r1, [sp, #28]
    966c:	2200      	movs	r2, #0
    966e:	4f4b      	ldr	r7, [pc, #300]	; (979c <_strtod_l+0x744>)
    9670:	484b      	ldr	r0, [pc, #300]	; (97a0 <_strtod_l+0x748>)
    9672:	400f      	ands	r7, r1
    9674:	4287      	cmp	r7, r0
    9676:	f000 816f 	beq.w	9958 <_strtod_l+0x900>
    967a:	9909      	ldr	r1, [sp, #36]	; 0x24
    967c:	b159      	cbz	r1, 9696 <_strtod_l+0x63e>
    967e:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    9682:	d808      	bhi.n	9696 <_strtod_l+0x63e>
    9684:	eeb4 dbc8 	vcmpe.f64	d13, d8
    9688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    968c:	f240 80f2 	bls.w	9874 <_strtod_l+0x81c>
    9690:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    9694:	1bcb      	subs	r3, r1, r7
    9696:	ed9d 0b04 	vldr	d0, [sp, #16]
    969a:	ec43 2b1c 	vmov	d12, r2, r3
    969e:	f003 ff57 	bl	d550 <__ulp>
    96a2:	ed9d 7b04 	vldr	d7, [sp, #16]
    96a6:	eeac 7b00 	vfma.f64	d7, d12, d0
    96aa:	ec53 2b17 	vmov	r2, r3, d7
    96ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    96b2:	461a      	mov	r2, r3
    96b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96b6:	b923      	cbnz	r3, 96c2 <_strtod_l+0x66a>
    96b8:	4b38      	ldr	r3, [pc, #224]	; (979c <_strtod_l+0x744>)
    96ba:	4013      	ands	r3, r2
    96bc:	429f      	cmp	r7, r3
    96be:	f000 817d 	beq.w	99bc <_strtod_l+0x964>
    96c2:	9914      	ldr	r1, [sp, #80]	; 0x50
    96c4:	4648      	mov	r0, r9
    96c6:	f003 fc69 	bl	cf9c <_Bfree>
    96ca:	4631      	mov	r1, r6
    96cc:	4648      	mov	r0, r9
    96ce:	f003 fc65 	bl	cf9c <_Bfree>
    96d2:	4621      	mov	r1, r4
    96d4:	4648      	mov	r0, r9
    96d6:	f003 fc61 	bl	cf9c <_Bfree>
    96da:	4641      	mov	r1, r8
    96dc:	4648      	mov	r0, r9
    96de:	f003 fc5d 	bl	cf9c <_Bfree>
    96e2:	e6ff      	b.n	94e4 <_strtod_l+0x48c>
    96e4:	2200      	movs	r2, #0
    96e6:	920e      	str	r2, [sp, #56]	; 0x38
    96e8:	2201      	movs	r2, #1
    96ea:	920d      	str	r2, [sp, #52]	; 0x34
    96ec:	e740      	b.n	9570 <_strtod_l+0x518>
    96ee:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    96f2:	ee20 db07 	vmul.f64	d13, d0, d7
    96f6:	bb6d      	cbnz	r5, 9754 <_strtod_l+0x6fc>
    96f8:	eeb1 7b4d 	vneg.f64	d7, d13
    96fc:	ec53 2b17 	vmov	r2, r3, d7
    9700:	9907      	ldr	r1, [sp, #28]
    9702:	e7b4      	b.n	966e <_strtod_l+0x616>
    9704:	f04f 0b01 	mov.w	fp, #1
    9708:	bb78      	cbnz	r0, 976a <_strtod_l+0x712>
    970a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    970c:	2b00      	cmp	r3, #0
    970e:	f43f acf3 	beq.w	90f8 <_strtod_l+0xa0>
    9712:	4605      	mov	r5, r0
    9714:	e65f      	b.n	93d6 <_strtod_l+0x37e>
    9716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9718:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    971a:	1a9d      	subs	r5, r3, r2
    971c:	e712      	b.n	9544 <_strtod_l+0x4ec>
    971e:	f04f 0b01 	mov.w	fp, #1
    9722:	e540      	b.n	91a6 <_strtod_l+0x14e>
    9724:	491f      	ldr	r1, [pc, #124]	; (97a4 <_strtod_l+0x74c>)
    9726:	1a89      	subs	r1, r1, r2
    9728:	2201      	movs	r2, #1
    972a:	fa02 f101 	lsl.w	r1, r2, r1
    972e:	910e      	str	r1, [sp, #56]	; 0x38
    9730:	920d      	str	r2, [sp, #52]	; 0x34
    9732:	e71d      	b.n	9570 <_strtod_l+0x518>
    9734:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    9738:	2900      	cmp	r1, #0
    973a:	f000 8084 	beq.w	9846 <_strtod_l+0x7ee>
    973e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    9742:	2901      	cmp	r1, #1
    9744:	f000 826e 	beq.w	9c24 <_strtod_l+0xbcc>
    9748:	4611      	mov	r1, r2
    974a:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
    974e:	2200      	movs	r2, #0
    9750:	4b15      	ldr	r3, [pc, #84]	; (97a8 <_strtod_l+0x750>)
    9752:	e78c      	b.n	966e <_strtod_l+0x616>
    9754:	ec53 2b1d 	vmov	r2, r3, d13
    9758:	e7d2      	b.n	9700 <_strtod_l+0x6a8>
    975a:	2301      	movs	r3, #1
    975c:	9304      	str	r3, [sp, #16]
    975e:	f108 0302 	add.w	r3, r8, #2
    9762:	9313      	str	r3, [sp, #76]	; 0x4c
    9764:	f898 4002 	ldrb.w	r4, [r8, #2]
    9768:	e644      	b.n	93f4 <_strtod_l+0x39c>
    976a:	2500      	movs	r5, #0
    976c:	e633      	b.n	93d6 <_strtod_l+0x37e>
    976e:	bf00      	nop
    9770:	94a03595 	.word	0x94a03595
    9774:	3fdfffff 	.word	0x3fdfffff
    9778:	35afe535 	.word	0x35afe535
    977c:	3fe00000 	.word	0x3fe00000
    9780:	94a03595 	.word	0x94a03595
    9784:	3fcfffff 	.word	0x3fcfffff
    9788:	ffc00000 	.word	0xffc00000
    978c:	41dfffff 	.word	0x41dfffff
    9790:	20000d28 	.word	0x20000d28
    9794:	fffffc02 	.word	0xfffffc02
    9798:	3ff00000 	.word	0x3ff00000
    979c:	7ff00000 	.word	0x7ff00000
    97a0:	7fe00000 	.word	0x7fe00000
    97a4:	fffffbe2 	.word	0xfffffbe2
    97a8:	bff00000 	.word	0xbff00000
    97ac:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
    97b0:	f300 80f8 	bgt.w	99a4 <_strtod_l+0x94c>
    97b4:	111b      	asrs	r3, r3, #4
    97b6:	2b01      	cmp	r3, #1
    97b8:	f8df e2c0 	ldr.w	lr, [pc, #704]	; 9a7c <_strtod_l+0xa24>
    97bc:	f340 82fd 	ble.w	9dba <_strtod_l+0xd62>
    97c0:	ed9d 7b06 	vldr	d7, [sp, #24]
    97c4:	ed8d 7b04 	vstr	d7, [sp, #16]
    97c8:	2700      	movs	r7, #0
    97ca:	4671      	mov	r1, lr
    97cc:	4638      	mov	r0, r7
    97ce:	f013 0f01 	tst.w	r3, #1
    97d2:	f100 0001 	add.w	r0, r0, #1
    97d6:	ea4f 0363 	mov.w	r3, r3, asr #1
    97da:	d008      	beq.n	97ee <_strtod_l+0x796>
    97dc:	ed9d 6b04 	vldr	d6, [sp, #16]
    97e0:	ed91 7b00 	vldr	d7, [r1]
    97e4:	ee26 7b07 	vmul.f64	d7, d6, d7
    97e8:	ed8d 7b04 	vstr	d7, [sp, #16]
    97ec:	2701      	movs	r7, #1
    97ee:	2b01      	cmp	r3, #1
    97f0:	f101 0108 	add.w	r1, r1, #8
    97f4:	d1eb      	bne.n	97ce <_strtod_l+0x776>
    97f6:	2f00      	cmp	r7, #0
    97f8:	f040 834f 	bne.w	9e9a <_strtod_l+0xe42>
    97fc:	9b07      	ldr	r3, [sp, #28]
    97fe:	4998      	ldr	r1, [pc, #608]	; (9a60 <_strtod_l+0xa08>)
    9800:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    9804:	9307      	str	r3, [sp, #28]
    9806:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    980a:	ed9d 6b06 	vldr	d6, [sp, #24]
    980e:	ed90 7b00 	vldr	d7, [r0]
    9812:	ee27 7b06 	vmul.f64	d7, d7, d6
    9816:	ec58 7b17 	vmov	r7, r8, d7
    981a:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
    981e:	0d1b      	lsrs	r3, r3, #20
    9820:	051b      	lsls	r3, r3, #20
    9822:	428b      	cmp	r3, r1
    9824:	e9cd 7806 	strd	r7, r8, [sp, #24]
    9828:	f200 80bc 	bhi.w	99a4 <_strtod_l+0x94c>
    982c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    9830:	428b      	cmp	r3, r1
    9832:	f240 82a9 	bls.w	9d88 <_strtod_l+0xd30>
    9836:	4b8b      	ldr	r3, [pc, #556]	; (9a64 <_strtod_l+0xa0c>)
    9838:	9307      	str	r3, [sp, #28]
    983a:	2300      	movs	r3, #0
    983c:	9309      	str	r3, [sp, #36]	; 0x24
    983e:	f04f 33ff 	mov.w	r3, #4294967295
    9842:	9306      	str	r3, [sp, #24]
    9844:	e62e      	b.n	94a4 <_strtod_l+0x44c>
    9846:	f3c2 0313 	ubfx	r3, r2, #0, #20
    984a:	4611      	mov	r1, r2
    984c:	2b00      	cmp	r3, #0
    984e:	f47f af7c 	bne.w	974a <_strtod_l+0x6f2>
    9852:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    9856:	eeb4 0bc7 	vcmpe.f64	d0, d7
    985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    985e:	f100 8298 	bmi.w	9d92 <_strtod_l+0xd3a>
    9862:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    9866:	ee20 db07 	vmul.f64	d13, d0, d7
    986a:	eeb1 7b4d 	vneg.f64	d7, d13
    986e:	ec53 2b17 	vmov	r2, r3, d7
    9872:	e6fc      	b.n	966e <_strtod_l+0x616>
    9874:	eebc 0bcd 	vcvt.u32.f64	s0, d13
    9878:	ee10 3a10 	vmov	r3, s0
    987c:	2b00      	cmp	r3, #0
    987e:	f000 8190 	beq.w	9ba2 <_strtod_l+0xb4a>
    9882:	eeb8 db40 	vcvt.f64.u32	d13, s0
    9886:	2d00      	cmp	r5, #0
    9888:	f040 81c9 	bne.w	9c1e <_strtod_l+0xbc6>
    988c:	eeb1 7b4d 	vneg.f64	d7, d13
    9890:	ec53 2b17 	vmov	r2, r3, d7
    9894:	e6fc      	b.n	9690 <_strtod_l+0x638>
    9896:	a813      	add	r0, sp, #76	; 0x4c
    9898:	4973      	ldr	r1, [pc, #460]	; (9a68 <_strtod_l+0xa10>)
    989a:	f003 fa1d 	bl	ccd8 <__match>
    989e:	2800      	cmp	r0, #0
    98a0:	f43f ac2a 	beq.w	90f8 <_strtod_l+0xa0>
    98a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    98a6:	781b      	ldrb	r3, [r3, #0]
    98a8:	2b28      	cmp	r3, #40	; 0x28
    98aa:	f000 82c7 	beq.w	9e3c <_strtod_l+0xde4>
    98ae:	4b6f      	ldr	r3, [pc, #444]	; (9a6c <_strtod_l+0xa14>)
    98b0:	9307      	str	r3, [sp, #28]
    98b2:	2300      	movs	r3, #0
    98b4:	9306      	str	r3, [sp, #24]
    98b6:	e57a      	b.n	93ae <_strtod_l+0x356>
    98b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    98bc:	2300      	movs	r3, #0
    98be:	e479      	b.n	91b4 <_strtod_l+0x15c>
    98c0:	2300      	movs	r3, #0
    98c2:	9304      	str	r3, [sp, #16]
    98c4:	e74b      	b.n	975e <_strtod_l+0x706>
    98c6:	9a08      	ldr	r2, [sp, #32]
    98c8:	9602      	str	r6, [sp, #8]
    98ca:	ab14      	add	r3, sp, #80	; 0x50
    98cc:	9201      	str	r2, [sp, #4]
    98ce:	9300      	str	r3, [sp, #0]
    98d0:	4a67      	ldr	r2, [pc, #412]	; (9a70 <_strtod_l+0xa18>)
    98d2:	ab15      	add	r3, sp, #84	; 0x54
    98d4:	a913      	add	r1, sp, #76	; 0x4c
    98d6:	4648      	mov	r0, r9
    98d8:	f002 ff76 	bl	c7c8 <__gethex>
    98dc:	f010 0607 	ands.w	r6, r0, #7
    98e0:	4604      	mov	r4, r0
    98e2:	f43f ad0a 	beq.w	92fa <_strtod_l+0x2a2>
    98e6:	2e06      	cmp	r6, #6
    98e8:	f040 815e 	bne.w	9ba8 <_strtod_l+0xb50>
    98ec:	ed9f 7b5a 	vldr	d7, [pc, #360]	; 9a58 <_strtod_l+0xa00>
    98f0:	3501      	adds	r5, #1
    98f2:	2300      	movs	r3, #0
    98f4:	9513      	str	r5, [sp, #76]	; 0x4c
    98f6:	ed8d 7b04 	vstr	d7, [sp, #16]
    98fa:	9308      	str	r3, [sp, #32]
    98fc:	e501      	b.n	9302 <_strtod_l+0x2aa>
    98fe:	f8db 1000 	ldr.w	r1, [fp]
    9902:	9a04      	ldr	r2, [sp, #16]
    9904:	4628      	mov	r0, r5
    9906:	f7ff fb09 	bl	8f1c <strncmp>
    990a:	b138      	cbz	r0, 991c <_strtod_l+0x8c4>
    990c:	2200      	movs	r2, #0
    990e:	4617      	mov	r7, r2
    9910:	4616      	mov	r6, r2
    9912:	4610      	mov	r0, r2
    9914:	4694      	mov	ip, r2
    9916:	4615      	mov	r5, r2
    9918:	4693      	mov	fp, r2
    991a:	e444      	b.n	91a6 <_strtod_l+0x14e>
    991c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    991e:	9904      	ldr	r1, [sp, #16]
    9920:	1853      	adds	r3, r2, r1
    9922:	9313      	str	r3, [sp, #76]	; 0x4c
    9924:	5c54      	ldrb	r4, [r2, r1]
    9926:	2c30      	cmp	r4, #48	; 0x30
    9928:	d106      	bne.n	9938 <_strtod_l+0x8e0>
    992a:	3301      	adds	r3, #1
    992c:	9313      	str	r3, [sp, #76]	; 0x4c
    992e:	781c      	ldrb	r4, [r3, #0]
    9930:	2c30      	cmp	r4, #48	; 0x30
    9932:	f100 0001 	add.w	r0, r0, #1
    9936:	d0f8      	beq.n	992a <_strtod_l+0x8d2>
    9938:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    993c:	2b08      	cmp	r3, #8
    993e:	f240 8182 	bls.w	9c46 <_strtod_l+0xbee>
    9942:	2200      	movs	r2, #0
    9944:	2c65      	cmp	r4, #101	; 0x65
    9946:	4617      	mov	r7, r2
    9948:	4616      	mov	r6, r2
    994a:	4694      	mov	ip, r2
    994c:	f43f aeda 	beq.w	9704 <_strtod_l+0x6ac>
    9950:	4615      	mov	r5, r2
    9952:	f04f 0b01 	mov.w	fp, #1
    9956:	e429      	b.n	91ac <_strtod_l+0x154>
    9958:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
    995c:	9107      	str	r1, [sp, #28]
    995e:	ed9d eb06 	vldr	d14, [sp, #24]
    9962:	eeb0 0b4e 	vmov.f64	d0, d14
    9966:	ec43 2b1c 	vmov	d12, r2, r3
    996a:	f003 fdf1 	bl	d550 <__ulp>
    996e:	eeac eb00 	vfma.f64	d14, d12, d0
    9972:	ec53 2b1e 	vmov	r2, r3, d14
    9976:	e9cd 2306 	strd	r2, r3, [sp, #24]
    997a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    997e:	0d1b      	lsrs	r3, r3, #20
    9980:	4a3c      	ldr	r2, [pc, #240]	; (9a74 <_strtod_l+0xa1c>)
    9982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9986:	051b      	lsls	r3, r3, #20
    9988:	4293      	cmp	r3, r2
    998a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    998e:	f240 80e8 	bls.w	9b62 <_strtod_l+0xb0a>
    9992:	4b34      	ldr	r3, [pc, #208]	; (9a64 <_strtod_l+0xa0c>)
    9994:	4299      	cmp	r1, r3
    9996:	d040      	beq.n	9a1a <_strtod_l+0x9c2>
    9998:	4b32      	ldr	r3, [pc, #200]	; (9a64 <_strtod_l+0xa0c>)
    999a:	9307      	str	r3, [sp, #28]
    999c:	f04f 33ff 	mov.w	r3, #4294967295
    99a0:	9306      	str	r3, [sp, #24]
    99a2:	e68e      	b.n	96c2 <_strtod_l+0x66a>
    99a4:	4b34      	ldr	r3, [pc, #208]	; (9a78 <_strtod_l+0xa20>)
    99a6:	9307      	str	r3, [sp, #28]
    99a8:	2200      	movs	r2, #0
    99aa:	9206      	str	r2, [sp, #24]
    99ac:	ed9d 7b06 	vldr	d7, [sp, #24]
    99b0:	2322      	movs	r3, #34	; 0x22
    99b2:	ed8d 7b04 	vstr	d7, [sp, #16]
    99b6:	f8c9 3000 	str.w	r3, [r9]
    99ba:	e4a2      	b.n	9302 <_strtod_l+0x2aa>
    99bc:	eebd 7bcd 	vcvt.s32.f64	s14, d13
    99c0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    99c4:	ee3d 7b47 	vsub.f64	d7, d13, d7
    99c8:	2d00      	cmp	r5, #0
    99ca:	d138      	bne.n	9a3e <_strtod_l+0x9e6>
    99cc:	9b06      	ldr	r3, [sp, #24]
    99ce:	bbb3      	cbnz	r3, 9a3e <_strtod_l+0x9e6>
    99d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
    99d4:	bb9a      	cbnz	r2, 9a3e <_strtod_l+0x9e6>
    99d6:	eeb4 7bcb 	vcmpe.f64	d7, d11
    99da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    99de:	f57f ae70 	bpl.w	96c2 <_strtod_l+0x66a>
    99e2:	ed9d 7b06 	vldr	d7, [sp, #24]
    99e6:	ed8d 7b04 	vstr	d7, [sp, #16]
    99ea:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    99ee:	9814      	ldr	r0, [sp, #80]	; 0x50
    99f0:	4601      	mov	r1, r0
    99f2:	4648      	mov	r0, r9
    99f4:	f003 fad2 	bl	cf9c <_Bfree>
    99f8:	4631      	mov	r1, r6
    99fa:	4648      	mov	r0, r9
    99fc:	f003 face 	bl	cf9c <_Bfree>
    9a00:	4621      	mov	r1, r4
    9a02:	4648      	mov	r0, r9
    9a04:	f003 faca 	bl	cf9c <_Bfree>
    9a08:	4659      	mov	r1, fp
    9a0a:	4648      	mov	r0, r9
    9a0c:	f003 fac6 	bl	cf9c <_Bfree>
    9a10:	4641      	mov	r1, r8
    9a12:	4648      	mov	r0, r9
    9a14:	f003 fac2 	bl	cf9c <_Bfree>
    9a18:	e473      	b.n	9302 <_strtod_l+0x2aa>
    9a1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9a1c:	3301      	adds	r3, #1
    9a1e:	d1bb      	bne.n	9998 <_strtod_l+0x940>
    9a20:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    9a24:	9814      	ldr	r0, [sp, #80]	; 0x50
    9a26:	4b14      	ldr	r3, [pc, #80]	; (9a78 <_strtod_l+0xa20>)
    9a28:	9307      	str	r3, [sp, #28]
    9a2a:	2200      	movs	r2, #0
    9a2c:	9206      	str	r2, [sp, #24]
    9a2e:	ed9d 7b06 	vldr	d7, [sp, #24]
    9a32:	2322      	movs	r3, #34	; 0x22
    9a34:	ed8d 7b04 	vstr	d7, [sp, #16]
    9a38:	f8c9 3000 	str.w	r3, [r9]
    9a3c:	e7d8      	b.n	99f0 <_strtod_l+0x998>
    9a3e:	eeb4 7bca 	vcmpe.f64	d7, d10
    9a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a46:	d4cc      	bmi.n	99e2 <_strtod_l+0x98a>
    9a48:	eeb4 7bc9 	vcmpe.f64	d7, d9
    9a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a50:	f77f ae37 	ble.w	96c2 <_strtod_l+0x66a>
    9a54:	e7c5      	b.n	99e2 <_strtod_l+0x98a>
    9a56:	bf00      	nop
	...
    9a60:	7ca00000 	.word	0x7ca00000
    9a64:	7fefffff 	.word	0x7fefffff
    9a68:	20000a4c 	.word	0x20000a4c
    9a6c:	fff80000 	.word	0xfff80000
    9a70:	20000a2c 	.word	0x20000a2c
    9a74:	7c9fffff 	.word	0x7c9fffff
    9a78:	7ff00000 	.word	0x7ff00000
    9a7c:	20000df0 	.word	0x20000df0
    9a80:	f43f ad0e 	beq.w	94a0 <_strtod_l+0x448>
    9a84:	425b      	negs	r3, r3
    9a86:	f013 000f 	ands.w	r0, r3, #15
    9a8a:	d00a      	beq.n	9aa2 <_strtod_l+0xa4a>
    9a8c:	49ac      	ldr	r1, [pc, #688]	; (9d40 <_strtod_l+0xce8>)
    9a8e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    9a92:	ed9d 5b06 	vldr	d5, [sp, #24]
    9a96:	ed91 7b00 	vldr	d7, [r1]
    9a9a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    9a9e:	ed8d 6b06 	vstr	d6, [sp, #24]
    9aa2:	111b      	asrs	r3, r3, #4
    9aa4:	f43f acfc 	beq.w	94a0 <_strtod_l+0x448>
    9aa8:	2b1f      	cmp	r3, #31
    9aaa:	dc3d      	bgt.n	9b28 <_strtod_l+0xad0>
    9aac:	f013 0110 	ands.w	r1, r3, #16
    9ab0:	f000 81b7 	beq.w	9e22 <_strtod_l+0xdca>
    9ab4:	2b00      	cmp	r3, #0
    9ab6:	f340 81e9 	ble.w	9e8c <_strtod_l+0xe34>
    9aba:	216a      	movs	r1, #106	; 0x6a
    9abc:	9109      	str	r1, [sp, #36]	; 0x24
    9abe:	ed9d 7b06 	vldr	d7, [sp, #24]
    9ac2:	ed8d 7b04 	vstr	d7, [sp, #16]
    9ac6:	499f      	ldr	r1, [pc, #636]	; (9d44 <_strtod_l+0xcec>)
    9ac8:	2000      	movs	r0, #0
    9aca:	07df      	lsls	r7, r3, #31
    9acc:	d508      	bpl.n	9ae0 <_strtod_l+0xa88>
    9ace:	ed9d 6b04 	vldr	d6, [sp, #16]
    9ad2:	ed91 7b00 	vldr	d7, [r1]
    9ad6:	ee26 7b07 	vmul.f64	d7, d6, d7
    9ada:	ed8d 7b04 	vstr	d7, [sp, #16]
    9ade:	2001      	movs	r0, #1
    9ae0:	105b      	asrs	r3, r3, #1
    9ae2:	f101 0108 	add.w	r1, r1, #8
    9ae6:	d1f0      	bne.n	9aca <_strtod_l+0xa72>
    9ae8:	2800      	cmp	r0, #0
    9aea:	f040 81db 	bne.w	9ea4 <_strtod_l+0xe4c>
    9aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9af0:	b193      	cbz	r3, 9b18 <_strtod_l+0xac0>
    9af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    9af6:	f3c1 530a 	ubfx	r3, r1, #20, #11
    9afa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    9afe:	2b00      	cmp	r3, #0
    9b00:	dd0a      	ble.n	9b18 <_strtod_l+0xac0>
    9b02:	2b1f      	cmp	r3, #31
    9b04:	f340 8192 	ble.w	9e2c <_strtod_l+0xdd4>
    9b08:	2000      	movs	r0, #0
    9b0a:	2b34      	cmp	r3, #52	; 0x34
    9b0c:	9006      	str	r0, [sp, #24]
    9b0e:	f340 81b2 	ble.w	9e76 <_strtod_l+0xe1e>
    9b12:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    9b16:	9307      	str	r3, [sp, #28]
    9b18:	ed9d 7b06 	vldr	d7, [sp, #24]
    9b1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    9b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b24:	f47f acbe 	bne.w	94a4 <_strtod_l+0x44c>
    9b28:	ed9f 7b83 	vldr	d7, [pc, #524]	; 9d38 <_strtod_l+0xce0>
    9b2c:	2322      	movs	r3, #34	; 0x22
    9b2e:	f8c9 3000 	str.w	r3, [r9]
    9b32:	ed8d 7b04 	vstr	d7, [sp, #16]
    9b36:	f7ff bbe4 	b.w	9302 <_strtod_l+0x2aa>
    9b3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9b3c:	3501      	adds	r5, #1
    9b3e:	2808      	cmp	r0, #8
    9b40:	f340 808b 	ble.w	9c5a <_strtod_l+0xc02>
    9b44:	2d10      	cmp	r5, #16
    9b46:	bfdc      	itt	le
    9b48:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
    9b4c:	eb03 0747 	addle.w	r7, r3, r7, lsl #1
    9b50:	2000      	movs	r0, #0
    9b52:	1c4b      	adds	r3, r1, #1
    9b54:	9313      	str	r3, [sp, #76]	; 0x4c
    9b56:	784c      	ldrb	r4, [r1, #1]
    9b58:	f7ff bb98 	b.w	928c <_strtod_l+0x234>
    9b5c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    9b60:	e481      	b.n	9466 <_strtod_l+0x40e>
    9b62:	9b07      	ldr	r3, [sp, #28]
    9b64:	f103 7254 	add.w	r2, r3, #55574528	; 0x3500000
    9b68:	9207      	str	r2, [sp, #28]
    9b6a:	e5a3      	b.n	96b4 <_strtod_l+0x65c>
    9b6c:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    9b70:	429c      	cmp	r4, r3
    9b72:	f73f ac7e 	bgt.w	9472 <_strtod_l+0x41a>
    9b76:	f1c5 050f 	rsb	r5, r5, #15
    9b7a:	4b71      	ldr	r3, [pc, #452]	; (9d40 <_strtod_l+0xce8>)
    9b7c:	1b62      	subs	r2, r4, r5
    9b7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    9b82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    9b86:	ed92 6b00 	vldr	d6, [r2]
    9b8a:	ed93 7b00 	vldr	d7, [r3]
    9b8e:	ed9d 5b06 	vldr	d5, [sp, #24]
    9b92:	ee27 7b05 	vmul.f64	d7, d7, d5
    9b96:	ee27 7b06 	vmul.f64	d7, d7, d6
    9b9a:	ed8d 7b04 	vstr	d7, [sp, #16]
    9b9e:	f7ff bbb0 	b.w	9302 <_strtod_l+0x2aa>
    9ba2:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
    9ba6:	e66e      	b.n	9886 <_strtod_l+0x82e>
    9ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9baa:	b13a      	cbz	r2, 9bbc <_strtod_l+0xb64>
    9bac:	2135      	movs	r1, #53	; 0x35
    9bae:	a816      	add	r0, sp, #88	; 0x58
    9bb0:	f003 fdec 	bl	d78c <__copybits>
    9bb4:	4648      	mov	r0, r9
    9bb6:	9914      	ldr	r1, [sp, #80]	; 0x50
    9bb8:	f003 f9f0 	bl	cf9c <_Bfree>
    9bbc:	2e06      	cmp	r6, #6
    9bbe:	d80b      	bhi.n	9bd8 <_strtod_l+0xb80>
    9bc0:	e8df f006 	tbb	[pc, r6]
    9bc4:	13181d29 	.word	0x13181d29
    9bc8:	1d04      	.short	0x1d04
    9bca:	29          	.byte	0x29
    9bcb:	00          	.byte	0x00
    9bcc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    9bd0:	9307      	str	r3, [sp, #28]
    9bd2:	f04f 33ff 	mov.w	r3, #4294967295
    9bd6:	9306      	str	r3, [sp, #24]
    9bd8:	0723      	lsls	r3, r4, #28
    9bda:	f57f abe8 	bpl.w	93ae <_strtod_l+0x356>
    9bde:	9b07      	ldr	r3, [sp, #28]
    9be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9be4:	9307      	str	r3, [sp, #28]
    9be6:	f7ff bbe2 	b.w	93ae <_strtod_l+0x356>
    9bea:	4b57      	ldr	r3, [pc, #348]	; (9d48 <_strtod_l+0xcf0>)
    9bec:	9307      	str	r3, [sp, #28]
    9bee:	2300      	movs	r3, #0
    9bf0:	9306      	str	r3, [sp, #24]
    9bf2:	e7f1      	b.n	9bd8 <_strtod_l+0xb80>
    9bf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9bf6:	9306      	str	r3, [sp, #24]
    9bf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9bfa:	9307      	str	r3, [sp, #28]
    9bfc:	e7ec      	b.n	9bd8 <_strtod_l+0xb80>
    9bfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9c02:	9916      	ldr	r1, [sp, #88]	; 0x58
    9c04:	9106      	str	r1, [sp, #24]
    9c06:	f202 4233 	addw	r2, r2, #1075	; 0x433
    9c0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    9c0e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    9c12:	9307      	str	r3, [sp, #28]
    9c14:	e7e0      	b.n	9bd8 <_strtod_l+0xb80>
    9c16:	2300      	movs	r3, #0
    9c18:	9307      	str	r3, [sp, #28]
    9c1a:	9306      	str	r3, [sp, #24]
    9c1c:	e7dc      	b.n	9bd8 <_strtod_l+0xb80>
    9c1e:	ec53 2b1d 	vmov	r2, r3, d13
    9c22:	e535      	b.n	9690 <_strtod_l+0x638>
    9c24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9c28:	4619      	mov	r1, r3
    9c2a:	2b00      	cmp	r3, #0
    9c2c:	f47f ad8d 	bne.w	974a <_strtod_l+0x6f2>
    9c30:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    9c34:	9814      	ldr	r0, [sp, #80]	; 0x50
    9c36:	ed9f 7b40 	vldr	d7, [pc, #256]	; 9d38 <_strtod_l+0xce0>
    9c3a:	2322      	movs	r3, #34	; 0x22
    9c3c:	f8c9 3000 	str.w	r3, [r9]
    9c40:	ed8d 7b04 	vstr	d7, [sp, #16]
    9c44:	e6d4      	b.n	99f0 <_strtod_l+0x998>
    9c46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9c48:	930a      	str	r3, [sp, #40]	; 0x28
    9c4a:	2600      	movs	r6, #0
    9c4c:	3c30      	subs	r4, #48	; 0x30
    9c4e:	f100 0c01 	add.w	ip, r0, #1
    9c52:	4619      	mov	r1, r3
    9c54:	4632      	mov	r2, r6
    9c56:	4637      	mov	r7, r6
    9c58:	2501      	movs	r5, #1
    9c5a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    9c5e:	eb04 0646 	add.w	r6, r4, r6, lsl #1
    9c62:	2000      	movs	r0, #0
    9c64:	e775      	b.n	9b52 <_strtod_l+0xafa>
    9c66:	f114 0f16 	cmn.w	r4, #22
    9c6a:	f6ff ac02 	blt.w	9472 <_strtod_l+0x41a>
    9c6e:	4b34      	ldr	r3, [pc, #208]	; (9d40 <_strtod_l+0xce8>)
    9c70:	eba3 04c4 	sub.w	r4, r3, r4, lsl #3
    9c74:	ed94 7b00 	vldr	d7, [r4]
    9c78:	ed9d 5b06 	vldr	d5, [sp, #24]
    9c7c:	ee85 6b07 	vdiv.f64	d6, d5, d7
    9c80:	ed8d 6b04 	vstr	d6, [sp, #16]
    9c84:	f7ff bb3d 	b.w	9302 <_strtod_l+0x2aa>
    9c88:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    9c8c:	e6cb      	b.n	9a26 <_strtod_l+0x9ce>
    9c8e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    9c92:	bb9d      	cbnz	r5, 9cfc <_strtod_l+0xca4>
    9c94:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    9c98:	bb81      	cbnz	r1, 9cfc <_strtod_l+0xca4>
    9c9a:	f3c2 0313 	ubfx	r3, r2, #0, #20
    9c9e:	4617      	mov	r7, r2
    9ca0:	bb63      	cbnz	r3, 9cfc <_strtod_l+0xca4>
    9ca2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    9ca6:	0d1b      	lsrs	r3, r3, #20
    9ca8:	051b      	lsls	r3, r3, #20
    9caa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    9cae:	d925      	bls.n	9cfc <_strtod_l+0xca4>
    9cb0:	f8d8 3014 	ldr.w	r3, [r8, #20]
    9cb4:	b91b      	cbnz	r3, 9cbe <_strtod_l+0xc66>
    9cb6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    9cba:	2b01      	cmp	r3, #1
    9cbc:	dd1e      	ble.n	9cfc <_strtod_l+0xca4>
    9cbe:	4641      	mov	r1, r8
    9cc0:	2201      	movs	r2, #1
    9cc2:	4648      	mov	r0, r9
    9cc4:	f003 fb40 	bl	d348 <__lshift>
    9cc8:	4621      	mov	r1, r4
    9cca:	4680      	mov	r8, r0
    9ccc:	f003 fb94 	bl	d3f8 <__mcmp>
    9cd0:	2800      	cmp	r0, #0
    9cd2:	dd13      	ble.n	9cfc <_strtod_l+0xca4>
    9cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9cd6:	2b00      	cmp	r3, #0
    9cd8:	f040 80c2 	bne.w	9e60 <_strtod_l+0xe08>
    9cdc:	4b1a      	ldr	r3, [pc, #104]	; (9d48 <_strtod_l+0xcf0>)
    9cde:	403b      	ands	r3, r7
    9ce0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    9ce4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    9ce8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    9cec:	9307      	str	r3, [sp, #28]
    9cee:	f04f 33ff 	mov.w	r3, #4294967295
    9cf2:	9306      	str	r3, [sp, #24]
    9cf4:	ed9d 7b06 	vldr	d7, [sp, #24]
    9cf8:	ed8d 7b04 	vstr	d7, [sp, #16]
    9cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9cfe:	b1bb      	cbz	r3, 9d30 <_strtod_l+0xcd8>
    9d00:	4b12      	ldr	r3, [pc, #72]	; (9d4c <_strtod_l+0xcf4>)
    9d02:	9311      	str	r3, [sp, #68]	; 0x44
    9d04:	2300      	movs	r3, #0
    9d06:	9310      	str	r3, [sp, #64]	; 0x40
    9d08:	ed9d 7b04 	vldr	d7, [sp, #16]
    9d0c:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
    9d10:	ee27 7b06 	vmul.f64	d7, d7, d6
    9d14:	ed8d 7b04 	vstr	d7, [sp, #16]
    9d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9d20:	b933      	cbnz	r3, 9d30 <_strtod_l+0xcd8>
    9d22:	9b06      	ldr	r3, [sp, #24]
    9d24:	b923      	cbnz	r3, 9d30 <_strtod_l+0xcd8>
    9d26:	2322      	movs	r3, #34	; 0x22
    9d28:	9814      	ldr	r0, [sp, #80]	; 0x50
    9d2a:	f8c9 3000 	str.w	r3, [r9]
    9d2e:	e65f      	b.n	99f0 <_strtod_l+0x998>
    9d30:	9814      	ldr	r0, [sp, #80]	; 0x50
    9d32:	e65d      	b.n	99f0 <_strtod_l+0x998>
    9d34:	f3af 8000 	nop.w
	...
    9d40:	20000d28 	.word	0x20000d28
    9d44:	20000a68 	.word	0x20000a68
    9d48:	7ff00000 	.word	0x7ff00000
    9d4c:	39500000 	.word	0x39500000
    9d50:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    9d54:	b315      	cbz	r5, 9d9c <_strtod_l+0xd44>
    9d56:	9a07      	ldr	r2, [sp, #28]
    9d58:	4b56      	ldr	r3, [pc, #344]	; (9eb4 <_strtod_l+0xe5c>)
    9d5a:	f3c2 0113 	ubfx	r1, r2, #0, #20
    9d5e:	4299      	cmp	r1, r3
    9d60:	d02d      	beq.n	9dbe <_strtod_l+0xd66>
    9d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d64:	b323      	cbz	r3, 9db0 <_strtod_l+0xd58>
    9d66:	9a07      	ldr	r2, [sp, #28]
    9d68:	4213      	tst	r3, r2
    9d6a:	d0c7      	beq.n	9cfc <_strtod_l+0xca4>
    9d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    9d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d72:	2d00      	cmp	r5, #0
    9d74:	d043      	beq.n	9dfe <_strtod_l+0xda6>
    9d76:	f7ff f955 	bl	9024 <sulp>
    9d7a:	ed9d 7b04 	vldr	d7, [sp, #16]
    9d7e:	ee37 7b00 	vadd.f64	d7, d7, d0
    9d82:	ed8d 7b04 	vstr	d7, [sp, #16]
    9d86:	e7b9      	b.n	9cfc <_strtod_l+0xca4>
    9d88:	f108 7354 	add.w	r3, r8, #55574528	; 0x3500000
    9d8c:	9307      	str	r3, [sp, #28]
    9d8e:	f7ff bb87 	b.w	94a0 <_strtod_l+0x448>
    9d92:	2200      	movs	r2, #0
    9d94:	4b48      	ldr	r3, [pc, #288]	; (9eb8 <_strtod_l+0xe60>)
    9d96:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
    9d9a:	e468      	b.n	966e <_strtod_l+0x616>
    9d9c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    9da0:	f3c2 0313 	ubfx	r3, r2, #0, #20
    9da4:	4617      	mov	r7, r2
    9da6:	2b00      	cmp	r3, #0
    9da8:	d1db      	bne.n	9d62 <_strtod_l+0xd0a>
    9daa:	2900      	cmp	r1, #0
    9dac:	d1d9      	bne.n	9d62 <_strtod_l+0xd0a>
    9dae:	e791      	b.n	9cd4 <_strtod_l+0xc7c>
    9db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9db2:	9a06      	ldr	r2, [sp, #24]
    9db4:	4213      	tst	r3, r2
    9db6:	d0a1      	beq.n	9cfc <_strtod_l+0xca4>
    9db8:	e7d8      	b.n	9d6c <_strtod_l+0xd14>
    9dba:	2000      	movs	r0, #0
    9dbc:	e51e      	b.n	97fc <_strtod_l+0x7a4>
    9dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9dc0:	9906      	ldr	r1, [sp, #24]
    9dc2:	b35b      	cbz	r3, 9e1c <_strtod_l+0xdc4>
    9dc4:	4b3d      	ldr	r3, [pc, #244]	; (9ebc <_strtod_l+0xe64>)
    9dc6:	4013      	ands	r3, r2
    9dc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    9dcc:	d826      	bhi.n	9e1c <_strtod_l+0xdc4>
    9dce:	0d1b      	lsrs	r3, r3, #20
    9dd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    9dd4:	f04f 30ff 	mov.w	r0, #4294967295
    9dd8:	fa00 f303 	lsl.w	r3, r0, r3
    9ddc:	428b      	cmp	r3, r1
    9dde:	d1c0      	bne.n	9d62 <_strtod_l+0xd0a>
    9de0:	4937      	ldr	r1, [pc, #220]	; (9ec0 <_strtod_l+0xe68>)
    9de2:	428a      	cmp	r2, r1
    9de4:	d04f      	beq.n	9e86 <_strtod_l+0xe2e>
    9de6:	4b35      	ldr	r3, [pc, #212]	; (9ebc <_strtod_l+0xe64>)
    9de8:	4013      	ands	r3, r2
    9dea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    9dee:	9307      	str	r3, [sp, #28]
    9df0:	2300      	movs	r3, #0
    9df2:	9306      	str	r3, [sp, #24]
    9df4:	ed9d 7b06 	vldr	d7, [sp, #24]
    9df8:	ed8d 7b04 	vstr	d7, [sp, #16]
    9dfc:	e77e      	b.n	9cfc <_strtod_l+0xca4>
    9dfe:	f7ff f911 	bl	9024 <sulp>
    9e02:	ed9d 7b04 	vldr	d7, [sp, #16]
    9e06:	ee37 7b40 	vsub.f64	d7, d7, d0
    9e0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
    9e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9e12:	ed8d 7b04 	vstr	d7, [sp, #16]
    9e16:	f43f af0d 	beq.w	9c34 <_strtod_l+0xbdc>
    9e1a:	e76f      	b.n	9cfc <_strtod_l+0xca4>
    9e1c:	f04f 33ff 	mov.w	r3, #4294967295
    9e20:	e7dc      	b.n	9ddc <_strtod_l+0xd84>
    9e22:	2b00      	cmp	r3, #0
    9e24:	9109      	str	r1, [sp, #36]	; 0x24
    9e26:	f73f ae4a 	bgt.w	9abe <_strtod_l+0xa66>
    9e2a:	e675      	b.n	9b18 <_strtod_l+0xac0>
    9e2c:	f04f 31ff 	mov.w	r1, #4294967295
    9e30:	fa01 f303 	lsl.w	r3, r1, r3
    9e34:	9906      	ldr	r1, [sp, #24]
    9e36:	4019      	ands	r1, r3
    9e38:	9106      	str	r1, [sp, #24]
    9e3a:	e66d      	b.n	9b18 <_strtod_l+0xac0>
    9e3c:	a813      	add	r0, sp, #76	; 0x4c
    9e3e:	aa16      	add	r2, sp, #88	; 0x58
    9e40:	4920      	ldr	r1, [pc, #128]	; (9ec4 <_strtod_l+0xe6c>)
    9e42:	f002 ff61 	bl	cd08 <__hexnan>
    9e46:	2805      	cmp	r0, #5
    9e48:	f47f ad31 	bne.w	98ae <_strtod_l+0x856>
    9e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e4e:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    9e52:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    9e56:	9307      	str	r3, [sp, #28]
    9e58:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9e5a:	9306      	str	r3, [sp, #24]
    9e5c:	f7ff baa7 	b.w	93ae <_strtod_l+0x356>
    9e60:	4b16      	ldr	r3, [pc, #88]	; (9ebc <_strtod_l+0xe64>)
    9e62:	403b      	ands	r3, r7
    9e64:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    9e68:	f73f af3a 	bgt.w	9ce0 <_strtod_l+0xc88>
    9e6c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    9e70:	f73f af46 	bgt.w	9d00 <_strtod_l+0xca8>
    9e74:	e6de      	b.n	9c34 <_strtod_l+0xbdc>
    9e76:	3b20      	subs	r3, #32
    9e78:	f04f 30ff 	mov.w	r0, #4294967295
    9e7c:	fa00 f303 	lsl.w	r3, r0, r3
    9e80:	400b      	ands	r3, r1
    9e82:	9307      	str	r3, [sp, #28]
    9e84:	e648      	b.n	9b18 <_strtod_l+0xac0>
    9e86:	3301      	adds	r3, #1
    9e88:	d1ad      	bne.n	9de6 <_strtod_l+0xd8e>
    9e8a:	e5cb      	b.n	9a24 <_strtod_l+0x9cc>
    9e8c:	236a      	movs	r3, #106	; 0x6a
    9e8e:	9309      	str	r3, [sp, #36]	; 0x24
    9e90:	e62f      	b.n	9af2 <_strtod_l+0xa9a>
    9e92:	4628      	mov	r0, r5
    9e94:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9e96:	3501      	adds	r5, #1
    9e98:	e651      	b.n	9b3e <_strtod_l+0xae6>
    9e9a:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    9e9e:	e9cd 7806 	strd	r7, r8, [sp, #24]
    9ea2:	e4ab      	b.n	97fc <_strtod_l+0x7a4>
    9ea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9ea8:	e9cd 0106 	strd	r0, r1, [sp, #24]
    9eac:	e61f      	b.n	9aee <_strtod_l+0xa96>
    9eae:	4608      	mov	r0, r1
    9eb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9eb2:	e64e      	b.n	9b52 <_strtod_l+0xafa>
    9eb4:	000fffff 	.word	0x000fffff
    9eb8:	bfe00000 	.word	0xbfe00000
    9ebc:	7ff00000 	.word	0x7ff00000
    9ec0:	7fefffff 	.word	0x7fefffff
    9ec4:	20000a50 	.word	0x20000a50

00009ec8 <strtod>:
    9ec8:	4b06      	ldr	r3, [pc, #24]	; (9ee4 <strtod+0x1c>)
    9eca:	b430      	push	{r4, r5}
    9ecc:	681c      	ldr	r4, [r3, #0]
    9ece:	4d06      	ldr	r5, [pc, #24]	; (9ee8 <strtod+0x20>)
    9ed0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ed2:	460a      	mov	r2, r1
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	bf08      	it	eq
    9ed8:	462b      	moveq	r3, r5
    9eda:	4601      	mov	r1, r0
    9edc:	4620      	mov	r0, r4
    9ede:	bc30      	pop	{r4, r5}
    9ee0:	f7ff b8ba 	b.w	9058 <_strtod_l>
    9ee4:	20001530 	.word	0x20001530
    9ee8:	20001534 	.word	0x20001534

00009eec <_strtol_l.isra.0>:
    9eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ef0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    9ef4:	460f      	mov	r7, r1
    9ef6:	4680      	mov	r8, r0
    9ef8:	4616      	mov	r6, r2
    9efa:	461d      	mov	r5, r3
    9efc:	468b      	mov	fp, r1
    9efe:	e000      	b.n	9f02 <_strtol_l.isra.0+0x16>
    9f00:	46a3      	mov	fp, r4
    9f02:	465c      	mov	r4, fp
    9f04:	4648      	mov	r0, r9
    9f06:	f814 ab01 	ldrb.w	sl, [r4], #1
    9f0a:	f7fe f8bd 	bl	8088 <__locale_ctype_ptr_l>
    9f0e:	4450      	add	r0, sl
    9f10:	7841      	ldrb	r1, [r0, #1]
    9f12:	f001 0108 	and.w	r1, r1, #8
    9f16:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    9f1a:	2900      	cmp	r1, #0
    9f1c:	d1f0      	bne.n	9f00 <_strtol_l.isra.0+0x14>
    9f1e:	4652      	mov	r2, sl
    9f20:	2a2d      	cmp	r2, #45	; 0x2d
    9f22:	d061      	beq.n	9fe8 <_strtol_l.isra.0+0xfc>
    9f24:	2a2b      	cmp	r2, #43	; 0x2b
    9f26:	bf04      	itt	eq
    9f28:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    9f2c:	f10b 0402 	addeq.w	r4, fp, #2
    9f30:	2d00      	cmp	r5, #0
    9f32:	d043      	beq.n	9fbc <_strtol_l.isra.0+0xd0>
    9f34:	2d10      	cmp	r5, #16
    9f36:	d065      	beq.n	a004 <_strtol_l.isra.0+0x118>
    9f38:	46a9      	mov	r9, r5
    9f3a:	f1bc 0f00 	cmp.w	ip, #0
    9f3e:	bf0c      	ite	eq
    9f40:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    9f44:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    9f48:	2100      	movs	r1, #0
    9f4a:	fbba fef9 	udiv	lr, sl, r9
    9f4e:	4608      	mov	r0, r1
    9f50:	fb09 aa1e 	mls	sl, r9, lr, sl
    9f54:	e005      	b.n	9f62 <_strtol_l.isra.0+0x76>
    9f56:	d029      	beq.n	9fac <_strtol_l.isra.0+0xc0>
    9f58:	fb09 3000 	mla	r0, r9, r0, r3
    9f5c:	2101      	movs	r1, #1
    9f5e:	f814 2b01 	ldrb.w	r2, [r4], #1
    9f62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9f66:	2b09      	cmp	r3, #9
    9f68:	d905      	bls.n	9f76 <_strtol_l.isra.0+0x8a>
    9f6a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    9f6e:	2b19      	cmp	r3, #25
    9f70:	d80a      	bhi.n	9f88 <_strtol_l.isra.0+0x9c>
    9f72:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    9f76:	429d      	cmp	r5, r3
    9f78:	dd0e      	ble.n	9f98 <_strtol_l.isra.0+0xac>
    9f7a:	1c4a      	adds	r2, r1, #1
    9f7c:	d0ef      	beq.n	9f5e <_strtol_l.isra.0+0x72>
    9f7e:	4586      	cmp	lr, r0
    9f80:	d2e9      	bcs.n	9f56 <_strtol_l.isra.0+0x6a>
    9f82:	f04f 31ff 	mov.w	r1, #4294967295
    9f86:	e7ea      	b.n	9f5e <_strtol_l.isra.0+0x72>
    9f88:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    9f8c:	2b19      	cmp	r3, #25
    9f8e:	d803      	bhi.n	9f98 <_strtol_l.isra.0+0xac>
    9f90:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    9f94:	429d      	cmp	r5, r3
    9f96:	dcf0      	bgt.n	9f7a <_strtol_l.isra.0+0x8e>
    9f98:	1c4b      	adds	r3, r1, #1
    9f9a:	d015      	beq.n	9fc8 <_strtol_l.isra.0+0xdc>
    9f9c:	f1bc 0f00 	cmp.w	ip, #0
    9fa0:	d110      	bne.n	9fc4 <_strtol_l.isra.0+0xd8>
    9fa2:	b14e      	cbz	r6, 9fb8 <_strtol_l.isra.0+0xcc>
    9fa4:	b9e1      	cbnz	r1, 9fe0 <_strtol_l.isra.0+0xf4>
    9fa6:	6037      	str	r7, [r6, #0]
    9fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fac:	459a      	cmp	sl, r3
    9fae:	dad3      	bge.n	9f58 <_strtol_l.isra.0+0x6c>
    9fb0:	4670      	mov	r0, lr
    9fb2:	f04f 31ff 	mov.w	r1, #4294967295
    9fb6:	e7d2      	b.n	9f5e <_strtol_l.isra.0+0x72>
    9fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fbc:	2a30      	cmp	r2, #48	; 0x30
    9fbe:	d01a      	beq.n	9ff6 <_strtol_l.isra.0+0x10a>
    9fc0:	250a      	movs	r5, #10
    9fc2:	e7b9      	b.n	9f38 <_strtol_l.isra.0+0x4c>
    9fc4:	4240      	negs	r0, r0
    9fc6:	e7ec      	b.n	9fa2 <_strtol_l.isra.0+0xb6>
    9fc8:	f1bc 0f00 	cmp.w	ip, #0
    9fcc:	f04f 0322 	mov.w	r3, #34	; 0x22
    9fd0:	bf0c      	ite	eq
    9fd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    9fd6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    9fda:	f8c8 3000 	str.w	r3, [r8]
    9fde:	b1f6      	cbz	r6, a01e <_strtol_l.isra.0+0x132>
    9fe0:	1e67      	subs	r7, r4, #1
    9fe2:	6037      	str	r7, [r6, #0]
    9fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fe8:	f10b 0402 	add.w	r4, fp, #2
    9fec:	f89b 2001 	ldrb.w	r2, [fp, #1]
    9ff0:	f04f 0c01 	mov.w	ip, #1
    9ff4:	e79c      	b.n	9f30 <_strtol_l.isra.0+0x44>
    9ff6:	7823      	ldrb	r3, [r4, #0]
    9ff8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9ffc:	2b58      	cmp	r3, #88	; 0x58
    9ffe:	d008      	beq.n	a012 <_strtol_l.isra.0+0x126>
    a000:	2508      	movs	r5, #8
    a002:	e799      	b.n	9f38 <_strtol_l.isra.0+0x4c>
    a004:	2a30      	cmp	r2, #48	; 0x30
    a006:	d197      	bne.n	9f38 <_strtol_l.isra.0+0x4c>
    a008:	7823      	ldrb	r3, [r4, #0]
    a00a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a00e:	2b58      	cmp	r3, #88	; 0x58
    a010:	d192      	bne.n	9f38 <_strtol_l.isra.0+0x4c>
    a012:	f04f 0910 	mov.w	r9, #16
    a016:	7862      	ldrb	r2, [r4, #1]
    a018:	464d      	mov	r5, r9
    a01a:	3402      	adds	r4, #2
    a01c:	e78d      	b.n	9f3a <_strtol_l.isra.0+0x4e>
    a01e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a022:	bf00      	nop

0000a024 <strtol>:
    a024:	b530      	push	{r4, r5, lr}
    a026:	4c08      	ldr	r4, [pc, #32]	; (a048 <strtol+0x24>)
    a028:	4b08      	ldr	r3, [pc, #32]	; (a04c <strtol+0x28>)
    a02a:	6825      	ldr	r5, [r4, #0]
    a02c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    a02e:	b083      	sub	sp, #12
    a030:	2c00      	cmp	r4, #0
    a032:	bf08      	it	eq
    a034:	461c      	moveq	r4, r3
    a036:	9400      	str	r4, [sp, #0]
    a038:	4613      	mov	r3, r2
    a03a:	460a      	mov	r2, r1
    a03c:	4601      	mov	r1, r0
    a03e:	4628      	mov	r0, r5
    a040:	f7ff ff54 	bl	9eec <_strtol_l.isra.0>
    a044:	b003      	add	sp, #12
    a046:	bd30      	pop	{r4, r5, pc}
    a048:	20001530 	.word	0x20001530
    a04c:	20001534 	.word	0x20001534

0000a050 <_svfprintf_r>:
    a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a054:	ed2d 8b06 	vpush	{d8-d10}
    a058:	b0b9      	sub	sp, #228	; 0xe4
    a05a:	460c      	mov	r4, r1
    a05c:	9103      	str	r1, [sp, #12]
    a05e:	4692      	mov	sl, r2
    a060:	9309      	str	r3, [sp, #36]	; 0x24
    a062:	9005      	str	r0, [sp, #20]
    a064:	f002 ff12 	bl	ce8c <_localeconv_r>
    a068:	6803      	ldr	r3, [r0, #0]
    a06a:	9310      	str	r3, [sp, #64]	; 0x40
    a06c:	4618      	mov	r0, r3
    a06e:	f7fe fee7 	bl	8e40 <strlen>
    a072:	89a3      	ldrh	r3, [r4, #12]
    a074:	900f      	str	r0, [sp, #60]	; 0x3c
    a076:	0619      	lsls	r1, r3, #24
    a078:	d503      	bpl.n	a082 <_svfprintf_r+0x32>
    a07a:	6923      	ldr	r3, [r4, #16]
    a07c:	2b00      	cmp	r3, #0
    a07e:	f001 807d 	beq.w	b17c <_svfprintf_r+0x112c>
    a082:	2300      	movs	r3, #0
    a084:	ed9f 8ba4 	vldr	d8, [pc, #656]	; a318 <_svfprintf_r+0x2c8>
    a088:	ed9f 9ba5 	vldr	d9, [pc, #660]	; a320 <_svfprintf_r+0x2d0>
    a08c:	930d      	str	r3, [sp, #52]	; 0x34
    a08e:	931d      	str	r3, [sp, #116]	; 0x74
    a090:	931c      	str	r3, [sp, #112]	; 0x70
    a092:	9311      	str	r3, [sp, #68]	; 0x44
    a094:	9306      	str	r3, [sp, #24]
    a096:	ab28      	add	r3, sp, #160	; 0xa0
    a098:	931b      	str	r3, [sp, #108]	; 0x6c
    a09a:	4699      	mov	r9, r3
    a09c:	f89a 3000 	ldrb.w	r3, [sl]
    a0a0:	4654      	mov	r4, sl
    a0a2:	b1eb      	cbz	r3, a0e0 <_svfprintf_r+0x90>
    a0a4:	2b25      	cmp	r3, #37	; 0x25
    a0a6:	d102      	bne.n	a0ae <_svfprintf_r+0x5e>
    a0a8:	e01a      	b.n	a0e0 <_svfprintf_r+0x90>
    a0aa:	2b25      	cmp	r3, #37	; 0x25
    a0ac:	d003      	beq.n	a0b6 <_svfprintf_r+0x66>
    a0ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d1f9      	bne.n	a0aa <_svfprintf_r+0x5a>
    a0b6:	ebca 0504 	rsb	r5, sl, r4
    a0ba:	b18d      	cbz	r5, a0e0 <_svfprintf_r+0x90>
    a0bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a0be:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    a0c0:	f8c9 a000 	str.w	sl, [r9]
    a0c4:	3301      	adds	r3, #1
    a0c6:	442a      	add	r2, r5
    a0c8:	2b07      	cmp	r3, #7
    a0ca:	f8c9 5004 	str.w	r5, [r9, #4]
    a0ce:	921d      	str	r2, [sp, #116]	; 0x74
    a0d0:	931c      	str	r3, [sp, #112]	; 0x70
    a0d2:	f300 80a3 	bgt.w	a21c <_svfprintf_r+0x1cc>
    a0d6:	f109 0908 	add.w	r9, r9, #8
    a0da:	9b06      	ldr	r3, [sp, #24]
    a0dc:	442b      	add	r3, r5
    a0de:	9306      	str	r3, [sp, #24]
    a0e0:	7823      	ldrb	r3, [r4, #0]
    a0e2:	2b00      	cmp	r3, #0
    a0e4:	f000 80a3 	beq.w	a22e <_svfprintf_r+0x1de>
    a0e8:	2300      	movs	r3, #0
    a0ea:	461a      	mov	r2, r3
    a0ec:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    a0f0:	4619      	mov	r1, r3
    a0f2:	9307      	str	r3, [sp, #28]
    a0f4:	469b      	mov	fp, r3
    a0f6:	f04f 38ff 	mov.w	r8, #4294967295
    a0fa:	7863      	ldrb	r3, [r4, #1]
    a0fc:	f104 0a01 	add.w	sl, r4, #1
    a100:	4645      	mov	r5, r8
    a102:	f10a 0a01 	add.w	sl, sl, #1
    a106:	f1a3 0020 	sub.w	r0, r3, #32
    a10a:	2858      	cmp	r0, #88	; 0x58
    a10c:	f200 83f8 	bhi.w	a900 <_svfprintf_r+0x8b0>
    a110:	e8df f010 	tbh	[pc, r0, lsl #1]
    a114:	03f60363 	.word	0x03f60363
    a118:	036b03f6 	.word	0x036b03f6
    a11c:	03f603f6 	.word	0x03f603f6
    a120:	03f603f6 	.word	0x03f603f6
    a124:	03f603f6 	.word	0x03f603f6
    a128:	037e0370 	.word	0x037e0370
    a12c:	005d03f6 	.word	0x005d03f6
    a130:	03f600df 	.word	0x03f600df
    a134:	010c00fb 	.word	0x010c00fb
    a138:	010c010c 	.word	0x010c010c
    a13c:	010c010c 	.word	0x010c010c
    a140:	010c010c 	.word	0x010c010c
    a144:	010c010c 	.word	0x010c010c
    a148:	03f603f6 	.word	0x03f603f6
    a14c:	03f603f6 	.word	0x03f603f6
    a150:	03f603f6 	.word	0x03f603f6
    a154:	03f603f6 	.word	0x03f603f6
    a158:	03f603f6 	.word	0x03f603f6
    a15c:	015e011c 	.word	0x015e011c
    a160:	015e03f6 	.word	0x015e03f6
    a164:	03f603f6 	.word	0x03f603f6
    a168:	03f603f6 	.word	0x03f603f6
    a16c:	03f602a1 	.word	0x03f602a1
    a170:	02a603f6 	.word	0x02a603f6
    a174:	03f603f6 	.word	0x03f603f6
    a178:	03f603f6 	.word	0x03f603f6
    a17c:	02d803f6 	.word	0x02d803f6
    a180:	03f603f6 	.word	0x03f603f6
    a184:	03f60305 	.word	0x03f60305
    a188:	03f603f6 	.word	0x03f603f6
    a18c:	03f603f6 	.word	0x03f603f6
    a190:	03f603f6 	.word	0x03f603f6
    a194:	03f603f6 	.word	0x03f603f6
    a198:	034303f6 	.word	0x034303f6
    a19c:	015e0356 	.word	0x015e0356
    a1a0:	015e015e 	.word	0x015e015e
    a1a4:	0356035e 	.word	0x0356035e
    a1a8:	03f603f6 	.word	0x03f603f6
    a1ac:	03f603a4 	.word	0x03f603a4
    a1b0:	00a203b1 	.word	0x00a203b1
    a1b4:	03c30062 	.word	0x03c30062
    a1b8:	03c803f6 	.word	0x03c803f6
    a1bc:	038303f6 	.word	0x038303f6
    a1c0:	03f603f6 	.word	0x03f603f6
    a1c4:	038b      	.short	0x038b
    a1c6:	9807      	ldr	r0, [sp, #28]
    a1c8:	9309      	str	r3, [sp, #36]	; 0x24
    a1ca:	4240      	negs	r0, r0
    a1cc:	9007      	str	r0, [sp, #28]
    a1ce:	f04b 0b04 	orr.w	fp, fp, #4
    a1d2:	f89a 3000 	ldrb.w	r3, [sl]
    a1d6:	e794      	b.n	a102 <_svfprintf_r+0xb2>
    a1d8:	46a8      	mov	r8, r5
    a1da:	9809      	ldr	r0, [sp, #36]	; 0x24
    a1dc:	2100      	movs	r1, #0
    a1de:	2330      	movs	r3, #48	; 0x30
    a1e0:	2278      	movs	r2, #120	; 0x78
    a1e2:	4588      	cmp	r8, r1
    a1e4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    a1e8:	6804      	ldr	r4, [r0, #0]
    a1ea:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    a1ee:	f100 0704 	add.w	r7, r0, #4
    a1f2:	f04f 0500 	mov.w	r5, #0
    a1f6:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    a1fa:	f04b 0302 	orr.w	r3, fp, #2
    a1fe:	f2c0 839c 	blt.w	a93a <_svfprintf_r+0x8ea>
    a202:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    a206:	f043 0b02 	orr.w	fp, r3, #2
    a20a:	ea54 0305 	orrs.w	r3, r4, r5
    a20e:	9709      	str	r7, [sp, #36]	; 0x24
    a210:	f000 8369 	beq.w	a8e6 <_svfprintf_r+0x896>
    a214:	460f      	mov	r7, r1
    a216:	920c      	str	r2, [sp, #48]	; 0x30
    a218:	4843      	ldr	r0, [pc, #268]	; (a328 <_svfprintf_r+0x2d8>)
    a21a:	e2ae      	b.n	a77a <_svfprintf_r+0x72a>
    a21c:	aa1b      	add	r2, sp, #108	; 0x6c
    a21e:	9903      	ldr	r1, [sp, #12]
    a220:	9805      	ldr	r0, [sp, #20]
    a222:	f003 fb07 	bl	d834 <__ssprint_r>
    a226:	b948      	cbnz	r0, a23c <_svfprintf_r+0x1ec>
    a228:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    a22c:	e755      	b.n	a0da <_svfprintf_r+0x8a>
    a22e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a230:	b123      	cbz	r3, a23c <_svfprintf_r+0x1ec>
    a232:	9805      	ldr	r0, [sp, #20]
    a234:	9903      	ldr	r1, [sp, #12]
    a236:	aa1b      	add	r2, sp, #108	; 0x6c
    a238:	f003 fafc 	bl	d834 <__ssprint_r>
    a23c:	9b03      	ldr	r3, [sp, #12]
    a23e:	899b      	ldrh	r3, [r3, #12]
    a240:	f013 0f40 	tst.w	r3, #64	; 0x40
    a244:	9b06      	ldr	r3, [sp, #24]
    a246:	bf18      	it	ne
    a248:	f04f 33ff 	movne.w	r3, #4294967295
    a24c:	4618      	mov	r0, r3
    a24e:	b039      	add	sp, #228	; 0xe4
    a250:	ecbd 8b06 	vpop	{d8-d10}
    a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a258:	930c      	str	r3, [sp, #48]	; 0x30
    a25a:	46a8      	mov	r8, r5
    a25c:	2a00      	cmp	r2, #0
    a25e:	f041 819a 	bne.w	b596 <_svfprintf_r+0x1546>
    a262:	f01b 0320 	ands.w	r3, fp, #32
    a266:	f000 8206 	beq.w	a676 <_svfprintf_r+0x626>
    a26a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a26c:	3707      	adds	r7, #7
    a26e:	f027 0307 	bic.w	r3, r7, #7
    a272:	2700      	movs	r7, #0
    a274:	f103 0208 	add.w	r2, r3, #8
    a278:	45b8      	cmp	r8, r7
    a27a:	9209      	str	r2, [sp, #36]	; 0x24
    a27c:	e9d3 4500 	ldrd	r4, r5, [r3]
    a280:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    a284:	f2c0 865e 	blt.w	af44 <_svfprintf_r+0xef4>
    a288:	ea54 0305 	orrs.w	r3, r4, r5
    a28c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    a290:	f000 834b 	beq.w	a92a <_svfprintf_r+0x8da>
    a294:	ae28      	add	r6, sp, #160	; 0xa0
    a296:	08e2      	lsrs	r2, r4, #3
    a298:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    a29c:	08e9      	lsrs	r1, r5, #3
    a29e:	f004 0307 	and.w	r3, r4, #7
    a2a2:	460d      	mov	r5, r1
    a2a4:	4614      	mov	r4, r2
    a2a6:	3330      	adds	r3, #48	; 0x30
    a2a8:	ea54 0205 	orrs.w	r2, r4, r5
    a2ac:	f806 3d01 	strb.w	r3, [r6, #-1]!
    a2b0:	d1f1      	bne.n	a296 <_svfprintf_r+0x246>
    a2b2:	f01b 0f01 	tst.w	fp, #1
    a2b6:	f000 8227 	beq.w	a708 <_svfprintf_r+0x6b8>
    a2ba:	2b30      	cmp	r3, #48	; 0x30
    a2bc:	f000 8224 	beq.w	a708 <_svfprintf_r+0x6b8>
    a2c0:	2230      	movs	r2, #48	; 0x30
    a2c2:	1e73      	subs	r3, r6, #1
    a2c4:	f806 2c01 	strb.w	r2, [r6, #-1]
    a2c8:	aa28      	add	r2, sp, #160	; 0xa0
    a2ca:	1ad2      	subs	r2, r2, r3
    a2cc:	9208      	str	r2, [sp, #32]
    a2ce:	461e      	mov	r6, r3
    a2d0:	e21d      	b.n	a70e <_svfprintf_r+0x6be>
    a2d2:	f89a 3000 	ldrb.w	r3, [sl]
    a2d6:	2b2a      	cmp	r3, #42	; 0x2a
    a2d8:	f10a 0401 	add.w	r4, sl, #1
    a2dc:	f001 812f 	beq.w	b53e <_svfprintf_r+0x14ee>
    a2e0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a2e4:	2809      	cmp	r0, #9
    a2e6:	bf98      	it	ls
    a2e8:	2500      	movls	r5, #0
    a2ea:	f201 80d5 	bhi.w	b498 <_svfprintf_r+0x1448>
    a2ee:	f814 3b01 	ldrb.w	r3, [r4], #1
    a2f2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    a2f6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    a2fa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a2fe:	2809      	cmp	r0, #9
    a300:	d9f5      	bls.n	a2ee <_svfprintf_r+0x29e>
    a302:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    a306:	46a2      	mov	sl, r4
    a308:	e6fd      	b.n	a106 <_svfprintf_r+0xb6>
    a30a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    a30e:	f89a 3000 	ldrb.w	r3, [sl]
    a312:	e6f6      	b.n	a102 <_svfprintf_r+0xb2>
    a314:	f3af 8000 	nop.w
	...
    a320:	ffffffff 	.word	0xffffffff
    a324:	7fefffff 	.word	0x7fefffff
    a328:	20000abc 	.word	0x20000abc
    a32c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a330:	2300      	movs	r3, #0
    a332:	461c      	mov	r4, r3
    a334:	f81a 3b01 	ldrb.w	r3, [sl], #1
    a338:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    a33c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    a340:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a344:	2809      	cmp	r0, #9
    a346:	d9f5      	bls.n	a334 <_svfprintf_r+0x2e4>
    a348:	9407      	str	r4, [sp, #28]
    a34a:	e6dc      	b.n	a106 <_svfprintf_r+0xb6>
    a34c:	930c      	str	r3, [sp, #48]	; 0x30
    a34e:	46a8      	mov	r8, r5
    a350:	2a00      	cmp	r2, #0
    a352:	f041 812c 	bne.w	b5ae <_svfprintf_r+0x155e>
    a356:	f04b 0b10 	orr.w	fp, fp, #16
    a35a:	f01b 0f20 	tst.w	fp, #32
    a35e:	f000 8503 	beq.w	ad68 <_svfprintf_r+0xd18>
    a362:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a364:	3707      	adds	r7, #7
    a366:	f027 0707 	bic.w	r7, r7, #7
    a36a:	e9d7 2300 	ldrd	r2, r3, [r7]
    a36e:	f107 0108 	add.w	r1, r7, #8
    a372:	9109      	str	r1, [sp, #36]	; 0x24
    a374:	4614      	mov	r4, r2
    a376:	461d      	mov	r5, r3
    a378:	2a00      	cmp	r2, #0
    a37a:	f173 0300 	sbcs.w	r3, r3, #0
    a37e:	f2c0 8537 	blt.w	adf0 <_svfprintf_r+0xda0>
    a382:	f1b8 0f00 	cmp.w	r8, #0
    a386:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    a38a:	f2c0 81b5 	blt.w	a6f8 <_svfprintf_r+0x6a8>
    a38e:	ea54 0305 	orrs.w	r3, r4, r5
    a392:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    a396:	f000 83f6 	beq.w	ab86 <_svfprintf_r+0xb36>
    a39a:	2d00      	cmp	r5, #0
    a39c:	bf08      	it	eq
    a39e:	2c0a      	cmpeq	r4, #10
    a3a0:	f0c0 81ae 	bcc.w	a700 <_svfprintf_r+0x6b0>
    a3a4:	ae28      	add	r6, sp, #160	; 0xa0
    a3a6:	4620      	mov	r0, r4
    a3a8:	4629      	mov	r1, r5
    a3aa:	220a      	movs	r2, #10
    a3ac:	2300      	movs	r3, #0
    a3ae:	f003 faf1 	bl	d994 <__aeabi_uldivmod>
    a3b2:	3230      	adds	r2, #48	; 0x30
    a3b4:	f806 2d01 	strb.w	r2, [r6, #-1]!
    a3b8:	4620      	mov	r0, r4
    a3ba:	4629      	mov	r1, r5
    a3bc:	2300      	movs	r3, #0
    a3be:	220a      	movs	r2, #10
    a3c0:	f003 fae8 	bl	d994 <__aeabi_uldivmod>
    a3c4:	4604      	mov	r4, r0
    a3c6:	460d      	mov	r5, r1
    a3c8:	ea54 0305 	orrs.w	r3, r4, r5
    a3cc:	d1eb      	bne.n	a3a6 <_svfprintf_r+0x356>
    a3ce:	e19b      	b.n	a708 <_svfprintf_r+0x6b8>
    a3d0:	930c      	str	r3, [sp, #48]	; 0x30
    a3d2:	46a8      	mov	r8, r5
    a3d4:	2a00      	cmp	r2, #0
    a3d6:	f041 80e6 	bne.w	b5a6 <_svfprintf_r+0x1556>
    a3da:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a3dc:	f01b 0f08 	tst.w	fp, #8
    a3e0:	f107 0707 	add.w	r7, r7, #7
    a3e4:	f000 8640 	beq.w	b068 <_svfprintf_r+0x1018>
    a3e8:	f027 0307 	bic.w	r3, r7, #7
    a3ec:	ed93 8b00 	vldr	d8, [r3]
    a3f0:	f103 0208 	add.w	r2, r3, #8
    a3f4:	9209      	str	r2, [sp, #36]	; 0x24
    a3f6:	eeb0 7bc8 	vabs.f64	d7, d8
    a3fa:	eeb4 7b49 	vcmp.f64	d7, d9
    a3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a402:	f340 85bc 	ble.w	af7e <_svfprintf_r+0xf2e>
    a406:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    a40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a40e:	f100 87ca 	bmi.w	b3a6 <_svfprintf_r+0x1356>
    a412:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    a416:	4ea7      	ldr	r6, [pc, #668]	; (a6b4 <_svfprintf_r+0x664>)
    a418:	4ba7      	ldr	r3, [pc, #668]	; (a6b8 <_svfprintf_r+0x668>)
    a41a:	990c      	ldr	r1, [sp, #48]	; 0x30
    a41c:	2203      	movs	r2, #3
    a41e:	f04f 0800 	mov.w	r8, #0
    a422:	9204      	str	r2, [sp, #16]
    a424:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    a428:	2947      	cmp	r1, #71	; 0x47
    a42a:	bfd8      	it	le
    a42c:	461e      	movle	r6, r3
    a42e:	9208      	str	r2, [sp, #32]
    a430:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    a434:	b117      	cbz	r7, a43c <_svfprintf_r+0x3ec>
    a436:	9b04      	ldr	r3, [sp, #16]
    a438:	3301      	adds	r3, #1
    a43a:	9304      	str	r3, [sp, #16]
    a43c:	f01b 0302 	ands.w	r3, fp, #2
    a440:	930a      	str	r3, [sp, #40]	; 0x28
    a442:	d002      	beq.n	a44a <_svfprintf_r+0x3fa>
    a444:	9b04      	ldr	r3, [sp, #16]
    a446:	3302      	adds	r3, #2
    a448:	9304      	str	r3, [sp, #16]
    a44a:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    a44e:	930b      	str	r3, [sp, #44]	; 0x2c
    a450:	f040 8280 	bne.w	a954 <_svfprintf_r+0x904>
    a454:	9b07      	ldr	r3, [sp, #28]
    a456:	9a04      	ldr	r2, [sp, #16]
    a458:	1a9c      	subs	r4, r3, r2
    a45a:	2c00      	cmp	r4, #0
    a45c:	f340 827a 	ble.w	a954 <_svfprintf_r+0x904>
    a460:	2c10      	cmp	r4, #16
    a462:	991d      	ldr	r1, [sp, #116]	; 0x74
    a464:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a466:	4f95      	ldr	r7, [pc, #596]	; (a6bc <_svfprintf_r+0x66c>)
    a468:	dd23      	ble.n	a4b2 <_svfprintf_r+0x462>
    a46a:	4648      	mov	r0, r9
    a46c:	2510      	movs	r5, #16
    a46e:	46c1      	mov	r9, r8
    a470:	46b0      	mov	r8, r6
    a472:	9e05      	ldr	r6, [sp, #20]
    a474:	e004      	b.n	a480 <_svfprintf_r+0x430>
    a476:	3c10      	subs	r4, #16
    a478:	2c10      	cmp	r4, #16
    a47a:	f100 0008 	add.w	r0, r0, #8
    a47e:	dd15      	ble.n	a4ac <_svfprintf_r+0x45c>
    a480:	3201      	adds	r2, #1
    a482:	3110      	adds	r1, #16
    a484:	2a07      	cmp	r2, #7
    a486:	911d      	str	r1, [sp, #116]	; 0x74
    a488:	921c      	str	r2, [sp, #112]	; 0x70
    a48a:	6007      	str	r7, [r0, #0]
    a48c:	6045      	str	r5, [r0, #4]
    a48e:	ddf2      	ble.n	a476 <_svfprintf_r+0x426>
    a490:	aa1b      	add	r2, sp, #108	; 0x6c
    a492:	9903      	ldr	r1, [sp, #12]
    a494:	4630      	mov	r0, r6
    a496:	f003 f9cd 	bl	d834 <__ssprint_r>
    a49a:	2800      	cmp	r0, #0
    a49c:	f47f aece 	bne.w	a23c <_svfprintf_r+0x1ec>
    a4a0:	3c10      	subs	r4, #16
    a4a2:	2c10      	cmp	r4, #16
    a4a4:	991d      	ldr	r1, [sp, #116]	; 0x74
    a4a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a4a8:	a828      	add	r0, sp, #160	; 0xa0
    a4aa:	dce9      	bgt.n	a480 <_svfprintf_r+0x430>
    a4ac:	4646      	mov	r6, r8
    a4ae:	46c8      	mov	r8, r9
    a4b0:	4681      	mov	r9, r0
    a4b2:	3201      	adds	r2, #1
    a4b4:	1863      	adds	r3, r4, r1
    a4b6:	2a07      	cmp	r2, #7
    a4b8:	931d      	str	r3, [sp, #116]	; 0x74
    a4ba:	921c      	str	r2, [sp, #112]	; 0x70
    a4bc:	f8c9 7000 	str.w	r7, [r9]
    a4c0:	f8c9 4004 	str.w	r4, [r9, #4]
    a4c4:	f300 83e2 	bgt.w	ac8c <_svfprintf_r+0xc3c>
    a4c8:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    a4cc:	f109 0908 	add.w	r9, r9, #8
    a4d0:	b177      	cbz	r7, a4f0 <_svfprintf_r+0x4a0>
    a4d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a4d4:	3201      	adds	r2, #1
    a4d6:	3301      	adds	r3, #1
    a4d8:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    a4dc:	2101      	movs	r1, #1
    a4de:	2a07      	cmp	r2, #7
    a4e0:	931d      	str	r3, [sp, #116]	; 0x74
    a4e2:	921c      	str	r2, [sp, #112]	; 0x70
    a4e4:	e889 0003 	stmia.w	r9, {r0, r1}
    a4e8:	f300 835f 	bgt.w	abaa <_svfprintf_r+0xb5a>
    a4ec:	f109 0908 	add.w	r9, r9, #8
    a4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a4f2:	b16a      	cbz	r2, a510 <_svfprintf_r+0x4c0>
    a4f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a4f6:	3201      	adds	r2, #1
    a4f8:	3302      	adds	r3, #2
    a4fa:	a814      	add	r0, sp, #80	; 0x50
    a4fc:	2102      	movs	r1, #2
    a4fe:	2a07      	cmp	r2, #7
    a500:	931d      	str	r3, [sp, #116]	; 0x74
    a502:	921c      	str	r2, [sp, #112]	; 0x70
    a504:	e889 0003 	stmia.w	r9, {r0, r1}
    a508:	f300 835b 	bgt.w	abc2 <_svfprintf_r+0xb72>
    a50c:	f109 0908 	add.w	r9, r9, #8
    a510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a512:	2a80      	cmp	r2, #128	; 0x80
    a514:	f000 827e 	beq.w	aa14 <_svfprintf_r+0x9c4>
    a518:	9a08      	ldr	r2, [sp, #32]
    a51a:	ebc2 0408 	rsb	r4, r2, r8
    a51e:	2c00      	cmp	r4, #0
    a520:	dd34      	ble.n	a58c <_svfprintf_r+0x53c>
    a522:	2c10      	cmp	r4, #16
    a524:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a526:	4f66      	ldr	r7, [pc, #408]	; (a6c0 <_svfprintf_r+0x670>)
    a528:	dd23      	ble.n	a572 <_svfprintf_r+0x522>
    a52a:	4649      	mov	r1, r9
    a52c:	f04f 0810 	mov.w	r8, #16
    a530:	46b1      	mov	r9, r6
    a532:	9d05      	ldr	r5, [sp, #20]
    a534:	9e03      	ldr	r6, [sp, #12]
    a536:	e004      	b.n	a542 <_svfprintf_r+0x4f2>
    a538:	3c10      	subs	r4, #16
    a53a:	2c10      	cmp	r4, #16
    a53c:	f101 0108 	add.w	r1, r1, #8
    a540:	dd15      	ble.n	a56e <_svfprintf_r+0x51e>
    a542:	3201      	adds	r2, #1
    a544:	3310      	adds	r3, #16
    a546:	2a07      	cmp	r2, #7
    a548:	931d      	str	r3, [sp, #116]	; 0x74
    a54a:	921c      	str	r2, [sp, #112]	; 0x70
    a54c:	e881 0180 	stmia.w	r1, {r7, r8}
    a550:	ddf2      	ble.n	a538 <_svfprintf_r+0x4e8>
    a552:	aa1b      	add	r2, sp, #108	; 0x6c
    a554:	4631      	mov	r1, r6
    a556:	4628      	mov	r0, r5
    a558:	f003 f96c 	bl	d834 <__ssprint_r>
    a55c:	2800      	cmp	r0, #0
    a55e:	f47f ae6d 	bne.w	a23c <_svfprintf_r+0x1ec>
    a562:	3c10      	subs	r4, #16
    a564:	2c10      	cmp	r4, #16
    a566:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a568:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a56a:	a928      	add	r1, sp, #160	; 0xa0
    a56c:	dce9      	bgt.n	a542 <_svfprintf_r+0x4f2>
    a56e:	464e      	mov	r6, r9
    a570:	4689      	mov	r9, r1
    a572:	3201      	adds	r2, #1
    a574:	4423      	add	r3, r4
    a576:	2a07      	cmp	r2, #7
    a578:	931d      	str	r3, [sp, #116]	; 0x74
    a57a:	921c      	str	r2, [sp, #112]	; 0x70
    a57c:	f8c9 7000 	str.w	r7, [r9]
    a580:	f8c9 4004 	str.w	r4, [r9, #4]
    a584:	f300 8305 	bgt.w	ab92 <_svfprintf_r+0xb42>
    a588:	f109 0908 	add.w	r9, r9, #8
    a58c:	f41b 7f80 	tst.w	fp, #256	; 0x100
    a590:	f040 81e2 	bne.w	a958 <_svfprintf_r+0x908>
    a594:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a596:	9808      	ldr	r0, [sp, #32]
    a598:	f8c9 6000 	str.w	r6, [r9]
    a59c:	3201      	adds	r2, #1
    a59e:	4403      	add	r3, r0
    a5a0:	2a07      	cmp	r2, #7
    a5a2:	931d      	str	r3, [sp, #116]	; 0x74
    a5a4:	f8c9 0004 	str.w	r0, [r9, #4]
    a5a8:	921c      	str	r2, [sp, #112]	; 0x70
    a5aa:	f300 82c2 	bgt.w	ab32 <_svfprintf_r+0xae2>
    a5ae:	f109 0908 	add.w	r9, r9, #8
    a5b2:	f01b 0f04 	tst.w	fp, #4
    a5b6:	d03e      	beq.n	a636 <_svfprintf_r+0x5e6>
    a5b8:	9a07      	ldr	r2, [sp, #28]
    a5ba:	9904      	ldr	r1, [sp, #16]
    a5bc:	1a54      	subs	r4, r2, r1
    a5be:	2c00      	cmp	r4, #0
    a5c0:	dd39      	ble.n	a636 <_svfprintf_r+0x5e6>
    a5c2:	2c10      	cmp	r4, #16
    a5c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a5c6:	4f3d      	ldr	r7, [pc, #244]	; (a6bc <_svfprintf_r+0x66c>)
    a5c8:	dd22      	ble.n	a610 <_svfprintf_r+0x5c0>
    a5ca:	2510      	movs	r5, #16
    a5cc:	9e05      	ldr	r6, [sp, #20]
    a5ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
    a5d2:	e004      	b.n	a5de <_svfprintf_r+0x58e>
    a5d4:	3c10      	subs	r4, #16
    a5d6:	2c10      	cmp	r4, #16
    a5d8:	f109 0908 	add.w	r9, r9, #8
    a5dc:	dd18      	ble.n	a610 <_svfprintf_r+0x5c0>
    a5de:	3201      	adds	r2, #1
    a5e0:	3310      	adds	r3, #16
    a5e2:	2a07      	cmp	r2, #7
    a5e4:	931d      	str	r3, [sp, #116]	; 0x74
    a5e6:	921c      	str	r2, [sp, #112]	; 0x70
    a5e8:	f8c9 7000 	str.w	r7, [r9]
    a5ec:	f8c9 5004 	str.w	r5, [r9, #4]
    a5f0:	ddf0      	ble.n	a5d4 <_svfprintf_r+0x584>
    a5f2:	aa1b      	add	r2, sp, #108	; 0x6c
    a5f4:	4641      	mov	r1, r8
    a5f6:	4630      	mov	r0, r6
    a5f8:	f003 f91c 	bl	d834 <__ssprint_r>
    a5fc:	2800      	cmp	r0, #0
    a5fe:	f47f ae1d 	bne.w	a23c <_svfprintf_r+0x1ec>
    a602:	3c10      	subs	r4, #16
    a604:	2c10      	cmp	r4, #16
    a606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a608:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a60a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    a60e:	dce6      	bgt.n	a5de <_svfprintf_r+0x58e>
    a610:	3201      	adds	r2, #1
    a612:	4423      	add	r3, r4
    a614:	2a07      	cmp	r2, #7
    a616:	931d      	str	r3, [sp, #116]	; 0x74
    a618:	921c      	str	r2, [sp, #112]	; 0x70
    a61a:	f8c9 7000 	str.w	r7, [r9]
    a61e:	f8c9 4004 	str.w	r4, [r9, #4]
    a622:	dd08      	ble.n	a636 <_svfprintf_r+0x5e6>
    a624:	aa1b      	add	r2, sp, #108	; 0x6c
    a626:	9903      	ldr	r1, [sp, #12]
    a628:	9805      	ldr	r0, [sp, #20]
    a62a:	f003 f903 	bl	d834 <__ssprint_r>
    a62e:	2800      	cmp	r0, #0
    a630:	f47f ae04 	bne.w	a23c <_svfprintf_r+0x1ec>
    a634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a636:	9a06      	ldr	r2, [sp, #24]
    a638:	9907      	ldr	r1, [sp, #28]
    a63a:	9804      	ldr	r0, [sp, #16]
    a63c:	4281      	cmp	r1, r0
    a63e:	bfac      	ite	ge
    a640:	1852      	addge	r2, r2, r1
    a642:	1812      	addlt	r2, r2, r0
    a644:	9206      	str	r2, [sp, #24]
    a646:	2b00      	cmp	r3, #0
    a648:	f040 827f 	bne.w	ab4a <_svfprintf_r+0xafa>
    a64c:	2300      	movs	r3, #0
    a64e:	931c      	str	r3, [sp, #112]	; 0x70
    a650:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    a654:	e522      	b.n	a09c <_svfprintf_r+0x4c>
    a656:	f04b 0b08 	orr.w	fp, fp, #8
    a65a:	f89a 3000 	ldrb.w	r3, [sl]
    a65e:	e550      	b.n	a102 <_svfprintf_r+0xb2>
    a660:	930c      	str	r3, [sp, #48]	; 0x30
    a662:	46a8      	mov	r8, r5
    a664:	2a00      	cmp	r2, #0
    a666:	f040 879a 	bne.w	b59e <_svfprintf_r+0x154e>
    a66a:	f04b 0b10 	orr.w	fp, fp, #16
    a66e:	f01b 0320 	ands.w	r3, fp, #32
    a672:	f47f adfa 	bne.w	a26a <_svfprintf_r+0x21a>
    a676:	f01b 0210 	ands.w	r2, fp, #16
    a67a:	f040 8391 	bne.w	ada0 <_svfprintf_r+0xd50>
    a67e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    a682:	f000 838d 	beq.w	ada0 <_svfprintf_r+0xd50>
    a686:	9909      	ldr	r1, [sp, #36]	; 0x24
    a688:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    a68c:	460b      	mov	r3, r1
    a68e:	f1b8 0f00 	cmp.w	r8, #0
    a692:	f103 0304 	add.w	r3, r3, #4
    a696:	880c      	ldrh	r4, [r1, #0]
    a698:	f04f 0500 	mov.w	r5, #0
    a69c:	f2c0 85ab 	blt.w	b1f6 <_svfprintf_r+0x11a6>
    a6a0:	ea54 0105 	orrs.w	r1, r4, r5
    a6a4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    a6a8:	9309      	str	r3, [sp, #36]	; 0x24
    a6aa:	f000 813e 	beq.w	a92a <_svfprintf_r+0x8da>
    a6ae:	4617      	mov	r7, r2
    a6b0:	e5f0      	b.n	a294 <_svfprintf_r+0x244>
    a6b2:	bf00      	nop
    a6b4:	200009d8 	.word	0x200009d8
    a6b8:	20000aa0 	.word	0x20000aa0
    a6bc:	20000adc 	.word	0x20000adc
    a6c0:	20000a90 	.word	0x20000a90
    a6c4:	930c      	str	r3, [sp, #48]	; 0x30
    a6c6:	46a8      	mov	r8, r5
    a6c8:	2a00      	cmp	r2, #0
    a6ca:	f040 8759 	bne.w	b580 <_svfprintf_r+0x1530>
    a6ce:	f04b 0b10 	orr.w	fp, fp, #16
    a6d2:	f01b 0320 	ands.w	r3, fp, #32
    a6d6:	f000 82e7 	beq.w	aca8 <_svfprintf_r+0xc58>
    a6da:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a6dc:	3707      	adds	r7, #7
    a6de:	f027 0307 	bic.w	r3, r7, #7
    a6e2:	2700      	movs	r7, #0
    a6e4:	f103 0208 	add.w	r2, r3, #8
    a6e8:	45b8      	cmp	r8, r7
    a6ea:	9209      	str	r2, [sp, #36]	; 0x24
    a6ec:	e9d3 4500 	ldrd	r4, r5, [r3]
    a6f0:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    a6f4:	f6bf ae4b 	bge.w	a38e <_svfprintf_r+0x33e>
    a6f8:	ea54 0305 	orrs.w	r3, r4, r5
    a6fc:	f47f ae4d 	bne.w	a39a <_svfprintf_r+0x34a>
    a700:	ae38      	add	r6, sp, #224	; 0xe0
    a702:	3430      	adds	r4, #48	; 0x30
    a704:	f806 4d41 	strb.w	r4, [r6, #-65]!
    a708:	ab28      	add	r3, sp, #160	; 0xa0
    a70a:	1b9b      	subs	r3, r3, r6
    a70c:	9308      	str	r3, [sp, #32]
    a70e:	9b08      	ldr	r3, [sp, #32]
    a710:	4543      	cmp	r3, r8
    a712:	bfb8      	it	lt
    a714:	4643      	movlt	r3, r8
    a716:	9304      	str	r3, [sp, #16]
    a718:	2300      	movs	r3, #0
    a71a:	930e      	str	r3, [sp, #56]	; 0x38
    a71c:	e68a      	b.n	a434 <_svfprintf_r+0x3e4>
    a71e:	930c      	str	r3, [sp, #48]	; 0x30
    a720:	46a8      	mov	r8, r5
    a722:	2a00      	cmp	r2, #0
    a724:	f040 8728 	bne.w	b578 <_svfprintf_r+0x1528>
    a728:	f01b 0f20 	tst.w	fp, #32
    a72c:	48c2      	ldr	r0, [pc, #776]	; (aa38 <_svfprintf_r+0x9e8>)
    a72e:	f000 8086 	beq.w	a83e <_svfprintf_r+0x7ee>
    a732:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a734:	3707      	adds	r7, #7
    a736:	f027 0307 	bic.w	r3, r7, #7
    a73a:	e9d3 4500 	ldrd	r4, r5, [r3]
    a73e:	f103 0208 	add.w	r2, r3, #8
    a742:	9209      	str	r2, [sp, #36]	; 0x24
    a744:	f01b 0701 	ands.w	r7, fp, #1
    a748:	f000 8247 	beq.w	abda <_svfprintf_r+0xb8a>
    a74c:	ea54 0305 	orrs.w	r3, r4, r5
    a750:	f000 84a3 	beq.w	b09a <_svfprintf_r+0x104a>
    a754:	2700      	movs	r7, #0
    a756:	2330      	movs	r3, #48	; 0x30
    a758:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a75c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    a760:	45b8      	cmp	r8, r7
    a762:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    a766:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    a76a:	f04b 0302 	orr.w	r3, fp, #2
    a76e:	f2c0 8617 	blt.w	b3a0 <_svfprintf_r+0x1350>
    a772:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    a776:	f043 0b02 	orr.w	fp, r3, #2
    a77a:	ae28      	add	r6, sp, #160	; 0xa0
    a77c:	0923      	lsrs	r3, r4, #4
    a77e:	f004 010f 	and.w	r1, r4, #15
    a782:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    a786:	092a      	lsrs	r2, r5, #4
    a788:	461c      	mov	r4, r3
    a78a:	4615      	mov	r5, r2
    a78c:	5c43      	ldrb	r3, [r0, r1]
    a78e:	f806 3d01 	strb.w	r3, [r6, #-1]!
    a792:	ea54 0305 	orrs.w	r3, r4, r5
    a796:	d1f1      	bne.n	a77c <_svfprintf_r+0x72c>
    a798:	e7b6      	b.n	a708 <_svfprintf_r+0x6b8>
    a79a:	9909      	ldr	r1, [sp, #36]	; 0x24
    a79c:	930c      	str	r3, [sp, #48]	; 0x30
    a79e:	680a      	ldr	r2, [r1, #0]
    a7a0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    a7a4:	2300      	movs	r3, #0
    a7a6:	460a      	mov	r2, r1
    a7a8:	461f      	mov	r7, r3
    a7aa:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    a7ae:	3204      	adds	r2, #4
    a7b0:	2301      	movs	r3, #1
    a7b2:	9304      	str	r3, [sp, #16]
    a7b4:	46b8      	mov	r8, r7
    a7b6:	970e      	str	r7, [sp, #56]	; 0x38
    a7b8:	9209      	str	r2, [sp, #36]	; 0x24
    a7ba:	9308      	str	r3, [sp, #32]
    a7bc:	ae1e      	add	r6, sp, #120	; 0x78
    a7be:	e63d      	b.n	a43c <_svfprintf_r+0x3ec>
    a7c0:	930c      	str	r3, [sp, #48]	; 0x30
    a7c2:	46a8      	mov	r8, r5
    a7c4:	2a00      	cmp	r2, #0
    a7c6:	f43f adc8 	beq.w	a35a <_svfprintf_r+0x30a>
    a7ca:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    a7ce:	e5c4      	b.n	a35a <_svfprintf_r+0x30a>
    a7d0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    a7d4:	f89a 3000 	ldrb.w	r3, [sl]
    a7d8:	e493      	b.n	a102 <_svfprintf_r+0xb2>
    a7da:	f89a 3000 	ldrb.w	r3, [sl]
    a7de:	2900      	cmp	r1, #0
    a7e0:	f47f ac8f 	bne.w	a102 <_svfprintf_r+0xb2>
    a7e4:	2201      	movs	r2, #1
    a7e6:	2120      	movs	r1, #32
    a7e8:	e48b      	b.n	a102 <_svfprintf_r+0xb2>
    a7ea:	f04b 0b01 	orr.w	fp, fp, #1
    a7ee:	f89a 3000 	ldrb.w	r3, [sl]
    a7f2:	e486      	b.n	a102 <_svfprintf_r+0xb2>
    a7f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a7f6:	6823      	ldr	r3, [r4, #0]
    a7f8:	9307      	str	r3, [sp, #28]
    a7fa:	4618      	mov	r0, r3
    a7fc:	2800      	cmp	r0, #0
    a7fe:	4623      	mov	r3, r4
    a800:	f103 0304 	add.w	r3, r3, #4
    a804:	f6ff acdf 	blt.w	a1c6 <_svfprintf_r+0x176>
    a808:	9309      	str	r3, [sp, #36]	; 0x24
    a80a:	f89a 3000 	ldrb.w	r3, [sl]
    a80e:	e478      	b.n	a102 <_svfprintf_r+0xb2>
    a810:	f89a 3000 	ldrb.w	r3, [sl]
    a814:	2201      	movs	r2, #1
    a816:	212b      	movs	r1, #43	; 0x2b
    a818:	e473      	b.n	a102 <_svfprintf_r+0xb2>
    a81a:	930c      	str	r3, [sp, #48]	; 0x30
    a81c:	46a8      	mov	r8, r5
    a81e:	2a00      	cmp	r2, #0
    a820:	f43f af57 	beq.w	a6d2 <_svfprintf_r+0x682>
    a824:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    a828:	e753      	b.n	a6d2 <_svfprintf_r+0x682>
    a82a:	930c      	str	r3, [sp, #48]	; 0x30
    a82c:	46a8      	mov	r8, r5
    a82e:	2a00      	cmp	r2, #0
    a830:	f040 86aa 	bne.w	b588 <_svfprintf_r+0x1538>
    a834:	f01b 0f20 	tst.w	fp, #32
    a838:	4880      	ldr	r0, [pc, #512]	; (aa3c <_svfprintf_r+0x9ec>)
    a83a:	f47f af7a 	bne.w	a732 <_svfprintf_r+0x6e2>
    a83e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a840:	f01b 0f10 	tst.w	fp, #16
    a844:	4613      	mov	r3, r2
    a846:	f040 82c1 	bne.w	adcc <_svfprintf_r+0xd7c>
    a84a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    a84e:	f000 82bd 	beq.w	adcc <_svfprintf_r+0xd7c>
    a852:	3304      	adds	r3, #4
    a854:	8814      	ldrh	r4, [r2, #0]
    a856:	9309      	str	r3, [sp, #36]	; 0x24
    a858:	2500      	movs	r5, #0
    a85a:	e773      	b.n	a744 <_svfprintf_r+0x6f4>
    a85c:	f89a 3000 	ldrb.w	r3, [sl]
    a860:	2b6c      	cmp	r3, #108	; 0x6c
    a862:	bf03      	ittte	eq
    a864:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    a868:	f04b 0b20 	orreq.w	fp, fp, #32
    a86c:	f10a 0a01 	addeq.w	sl, sl, #1
    a870:	f04b 0b10 	orrne.w	fp, fp, #16
    a874:	e445      	b.n	a102 <_svfprintf_r+0xb2>
    a876:	2a00      	cmp	r2, #0
    a878:	f040 866f 	bne.w	b55a <_svfprintf_r+0x150a>
    a87c:	f01b 0f20 	tst.w	fp, #32
    a880:	f000 8366 	beq.w	af50 <_svfprintf_r+0xf00>
    a884:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a886:	9906      	ldr	r1, [sp, #24]
    a888:	6813      	ldr	r3, [r2, #0]
    a88a:	17cd      	asrs	r5, r1, #31
    a88c:	4608      	mov	r0, r1
    a88e:	3204      	adds	r2, #4
    a890:	4629      	mov	r1, r5
    a892:	9209      	str	r2, [sp, #36]	; 0x24
    a894:	e9c3 0100 	strd	r0, r1, [r3]
    a898:	e400      	b.n	a09c <_svfprintf_r+0x4c>
    a89a:	f04b 0b20 	orr.w	fp, fp, #32
    a89e:	f89a 3000 	ldrb.w	r3, [sl]
    a8a2:	e42e      	b.n	a102 <_svfprintf_r+0xb2>
    a8a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a8a6:	930c      	str	r3, [sp, #48]	; 0x30
    a8a8:	6816      	ldr	r6, [r2, #0]
    a8aa:	2400      	movs	r4, #0
    a8ac:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
    a8b0:	1d17      	adds	r7, r2, #4
    a8b2:	2e00      	cmp	r6, #0
    a8b4:	f000 8565 	beq.w	b382 <_svfprintf_r+0x1332>
    a8b8:	2d00      	cmp	r5, #0
    a8ba:	f2c0 84a2 	blt.w	b202 <_svfprintf_r+0x11b2>
    a8be:	462a      	mov	r2, r5
    a8c0:	4621      	mov	r1, r4
    a8c2:	4630      	mov	r0, r6
    a8c4:	f002 faf4 	bl	ceb0 <memchr>
    a8c8:	2800      	cmp	r0, #0
    a8ca:	f000 85cc 	beq.w	b466 <_svfprintf_r+0x1416>
    a8ce:	1b83      	subs	r3, r0, r6
    a8d0:	9308      	str	r3, [sp, #32]
    a8d2:	46a0      	mov	r8, r4
    a8d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a8d8:	9709      	str	r7, [sp, #36]	; 0x24
    a8da:	9304      	str	r3, [sp, #16]
    a8dc:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    a8e0:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    a8e4:	e5a6      	b.n	a434 <_svfprintf_r+0x3e4>
    a8e6:	4855      	ldr	r0, [pc, #340]	; (aa3c <_svfprintf_r+0x9ec>)
    a8e8:	920c      	str	r2, [sp, #48]	; 0x30
    a8ea:	f1b8 0f00 	cmp.w	r8, #0
    a8ee:	f040 8184 	bne.w	abfa <_svfprintf_r+0xbaa>
    a8f2:	4647      	mov	r7, r8
    a8f4:	f04f 0800 	mov.w	r8, #0
    a8f8:	f8cd 8020 	str.w	r8, [sp, #32]
    a8fc:	ae28      	add	r6, sp, #160	; 0xa0
    a8fe:	e706      	b.n	a70e <_svfprintf_r+0x6be>
    a900:	930c      	str	r3, [sp, #48]	; 0x30
    a902:	2a00      	cmp	r2, #0
    a904:	f040 862d 	bne.w	b562 <_svfprintf_r+0x1512>
    a908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a90a:	2a00      	cmp	r2, #0
    a90c:	f43f ac8f 	beq.w	a22e <_svfprintf_r+0x1de>
    a910:	2300      	movs	r3, #0
    a912:	2101      	movs	r1, #1
    a914:	461f      	mov	r7, r3
    a916:	9104      	str	r1, [sp, #16]
    a918:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    a91c:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    a920:	4698      	mov	r8, r3
    a922:	930e      	str	r3, [sp, #56]	; 0x38
    a924:	9108      	str	r1, [sp, #32]
    a926:	ae1e      	add	r6, sp, #120	; 0x78
    a928:	e588      	b.n	a43c <_svfprintf_r+0x3ec>
    a92a:	f1b8 0f00 	cmp.w	r8, #0
    a92e:	f000 858b 	beq.w	b448 <_svfprintf_r+0x13f8>
    a932:	2700      	movs	r7, #0
    a934:	2400      	movs	r4, #0
    a936:	2500      	movs	r5, #0
    a938:	e4ac      	b.n	a294 <_svfprintf_r+0x244>
    a93a:	4840      	ldr	r0, [pc, #256]	; (aa3c <_svfprintf_r+0x9ec>)
    a93c:	920c      	str	r2, [sp, #48]	; 0x30
    a93e:	469b      	mov	fp, r3
    a940:	ea54 0305 	orrs.w	r3, r4, r5
    a944:	9709      	str	r7, [sp, #36]	; 0x24
    a946:	f04f 0700 	mov.w	r7, #0
    a94a:	f47f af16 	bne.w	a77a <_svfprintf_r+0x72a>
    a94e:	2400      	movs	r4, #0
    a950:	2500      	movs	r5, #0
    a952:	e712      	b.n	a77a <_svfprintf_r+0x72a>
    a954:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a956:	e5bb      	b.n	a4d0 <_svfprintf_r+0x480>
    a958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a95a:	2a65      	cmp	r2, #101	; 0x65
    a95c:	f340 80a1 	ble.w	aaa2 <_svfprintf_r+0xa52>
    a960:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a968:	f040 8149 	bne.w	abfe <_svfprintf_r+0xbae>
    a96c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a96e:	4934      	ldr	r1, [pc, #208]	; (aa40 <_svfprintf_r+0x9f0>)
    a970:	f8c9 1000 	str.w	r1, [r9]
    a974:	3201      	adds	r2, #1
    a976:	3301      	adds	r3, #1
    a978:	2101      	movs	r1, #1
    a97a:	2a07      	cmp	r2, #7
    a97c:	931d      	str	r3, [sp, #116]	; 0x74
    a97e:	921c      	str	r2, [sp, #112]	; 0x70
    a980:	f8c9 1004 	str.w	r1, [r9, #4]
    a984:	f300 8392 	bgt.w	b0ac <_svfprintf_r+0x105c>
    a988:	f109 0908 	add.w	r9, r9, #8
    a98c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a98e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a990:	428a      	cmp	r2, r1
    a992:	db03      	blt.n	a99c <_svfprintf_r+0x94c>
    a994:	f01b 0f01 	tst.w	fp, #1
    a998:	f43f ae0b 	beq.w	a5b2 <_svfprintf_r+0x562>
    a99c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a99e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a9a0:	9910      	ldr	r1, [sp, #64]	; 0x40
    a9a2:	f8c9 1000 	str.w	r1, [r9]
    a9a6:	3201      	adds	r2, #1
    a9a8:	4403      	add	r3, r0
    a9aa:	2a07      	cmp	r2, #7
    a9ac:	931d      	str	r3, [sp, #116]	; 0x74
    a9ae:	f8c9 0004 	str.w	r0, [r9, #4]
    a9b2:	921c      	str	r2, [sp, #112]	; 0x70
    a9b4:	f300 83d6 	bgt.w	b164 <_svfprintf_r+0x1114>
    a9b8:	f109 0908 	add.w	r9, r9, #8
    a9bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a9be:	1e54      	subs	r4, r2, #1
    a9c0:	2c00      	cmp	r4, #0
    a9c2:	f77f adf6 	ble.w	a5b2 <_svfprintf_r+0x562>
    a9c6:	2c10      	cmp	r4, #16
    a9c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a9ca:	4f1e      	ldr	r7, [pc, #120]	; (aa44 <_svfprintf_r+0x9f4>)
    a9cc:	f340 81dc 	ble.w	ad88 <_svfprintf_r+0xd38>
    a9d0:	2510      	movs	r5, #16
    a9d2:	9e05      	ldr	r6, [sp, #20]
    a9d4:	f8dd 800c 	ldr.w	r8, [sp, #12]
    a9d8:	e005      	b.n	a9e6 <_svfprintf_r+0x996>
    a9da:	f109 0908 	add.w	r9, r9, #8
    a9de:	3c10      	subs	r4, #16
    a9e0:	2c10      	cmp	r4, #16
    a9e2:	f340 81d1 	ble.w	ad88 <_svfprintf_r+0xd38>
    a9e6:	3201      	adds	r2, #1
    a9e8:	3310      	adds	r3, #16
    a9ea:	2a07      	cmp	r2, #7
    a9ec:	931d      	str	r3, [sp, #116]	; 0x74
    a9ee:	921c      	str	r2, [sp, #112]	; 0x70
    a9f0:	f8c9 7000 	str.w	r7, [r9]
    a9f4:	f8c9 5004 	str.w	r5, [r9, #4]
    a9f8:	ddef      	ble.n	a9da <_svfprintf_r+0x98a>
    a9fa:	aa1b      	add	r2, sp, #108	; 0x6c
    a9fc:	4641      	mov	r1, r8
    a9fe:	4630      	mov	r0, r6
    aa00:	f002 ff18 	bl	d834 <__ssprint_r>
    aa04:	2800      	cmp	r0, #0
    aa06:	f47f ac19 	bne.w	a23c <_svfprintf_r+0x1ec>
    aa0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    aa0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    aa0e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    aa12:	e7e4      	b.n	a9de <_svfprintf_r+0x98e>
    aa14:	9a07      	ldr	r2, [sp, #28]
    aa16:	9904      	ldr	r1, [sp, #16]
    aa18:	1a54      	subs	r4, r2, r1
    aa1a:	2c00      	cmp	r4, #0
    aa1c:	f77f ad7c 	ble.w	a518 <_svfprintf_r+0x4c8>
    aa20:	2c10      	cmp	r4, #16
    aa22:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    aa24:	4f07      	ldr	r7, [pc, #28]	; (aa44 <_svfprintf_r+0x9f4>)
    aa26:	dd2e      	ble.n	aa86 <_svfprintf_r+0xa36>
    aa28:	4649      	mov	r1, r9
    aa2a:	2510      	movs	r5, #16
    aa2c:	46c1      	mov	r9, r8
    aa2e:	4618      	mov	r0, r3
    aa30:	46b0      	mov	r8, r6
    aa32:	9e05      	ldr	r6, [sp, #20]
    aa34:	e00d      	b.n	aa52 <_svfprintf_r+0xa02>
    aa36:	bf00      	nop
    aa38:	20000aa8 	.word	0x20000aa8
    aa3c:	20000abc 	.word	0x20000abc
    aa40:	20000ad8 	.word	0x20000ad8
    aa44:	20000a90 	.word	0x20000a90
    aa48:	3c10      	subs	r4, #16
    aa4a:	2c10      	cmp	r4, #16
    aa4c:	f101 0108 	add.w	r1, r1, #8
    aa50:	dd15      	ble.n	aa7e <_svfprintf_r+0xa2e>
    aa52:	3201      	adds	r2, #1
    aa54:	3010      	adds	r0, #16
    aa56:	2a07      	cmp	r2, #7
    aa58:	901d      	str	r0, [sp, #116]	; 0x74
    aa5a:	921c      	str	r2, [sp, #112]	; 0x70
    aa5c:	600f      	str	r7, [r1, #0]
    aa5e:	604d      	str	r5, [r1, #4]
    aa60:	ddf2      	ble.n	aa48 <_svfprintf_r+0x9f8>
    aa62:	aa1b      	add	r2, sp, #108	; 0x6c
    aa64:	9903      	ldr	r1, [sp, #12]
    aa66:	4630      	mov	r0, r6
    aa68:	f002 fee4 	bl	d834 <__ssprint_r>
    aa6c:	2800      	cmp	r0, #0
    aa6e:	f47f abe5 	bne.w	a23c <_svfprintf_r+0x1ec>
    aa72:	3c10      	subs	r4, #16
    aa74:	2c10      	cmp	r4, #16
    aa76:	981d      	ldr	r0, [sp, #116]	; 0x74
    aa78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    aa7a:	a928      	add	r1, sp, #160	; 0xa0
    aa7c:	dce9      	bgt.n	aa52 <_svfprintf_r+0xa02>
    aa7e:	4646      	mov	r6, r8
    aa80:	4603      	mov	r3, r0
    aa82:	46c8      	mov	r8, r9
    aa84:	4689      	mov	r9, r1
    aa86:	3201      	adds	r2, #1
    aa88:	4423      	add	r3, r4
    aa8a:	2a07      	cmp	r2, #7
    aa8c:	931d      	str	r3, [sp, #116]	; 0x74
    aa8e:	921c      	str	r2, [sp, #112]	; 0x70
    aa90:	f8c9 7000 	str.w	r7, [r9]
    aa94:	f8c9 4004 	str.w	r4, [r9, #4]
    aa98:	f300 8246 	bgt.w	af28 <_svfprintf_r+0xed8>
    aa9c:	f109 0908 	add.w	r9, r9, #8
    aaa0:	e53a      	b.n	a518 <_svfprintf_r+0x4c8>
    aaa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    aaa4:	f8c9 6000 	str.w	r6, [r9]
    aaa8:	2a01      	cmp	r2, #1
    aaaa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    aaac:	f103 0301 	add.w	r3, r3, #1
    aab0:	f102 0201 	add.w	r2, r2, #1
    aab4:	f04f 0101 	mov.w	r1, #1
    aab8:	931d      	str	r3, [sp, #116]	; 0x74
    aaba:	921c      	str	r2, [sp, #112]	; 0x70
    aabc:	f8c9 1004 	str.w	r1, [r9, #4]
    aac0:	f340 8210 	ble.w	aee4 <_svfprintf_r+0xe94>
    aac4:	2a07      	cmp	r2, #7
    aac6:	f300 8215 	bgt.w	aef4 <_svfprintf_r+0xea4>
    aaca:	f109 0908 	add.w	r9, r9, #8
    aace:	980f      	ldr	r0, [sp, #60]	; 0x3c
    aad0:	9910      	ldr	r1, [sp, #64]	; 0x40
    aad2:	f8c9 1000 	str.w	r1, [r9]
    aad6:	3201      	adds	r2, #1
    aad8:	4403      	add	r3, r0
    aada:	2a07      	cmp	r2, #7
    aadc:	931d      	str	r3, [sp, #116]	; 0x74
    aade:	921c      	str	r2, [sp, #112]	; 0x70
    aae0:	f8c9 0004 	str.w	r0, [r9, #4]
    aae4:	f300 8213 	bgt.w	af0e <_svfprintf_r+0xebe>
    aae8:	f109 0908 	add.w	r9, r9, #8
    aaec:	eeb5 8b40 	vcmp.f64	d8, #0.0
    aaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aaf4:	990d      	ldr	r1, [sp, #52]	; 0x34
    aaf6:	f000 80f5 	beq.w	ace4 <_svfprintf_r+0xc94>
    aafa:	3901      	subs	r1, #1
    aafc:	3201      	adds	r2, #1
    aafe:	3601      	adds	r6, #1
    ab00:	440b      	add	r3, r1
    ab02:	2a07      	cmp	r2, #7
    ab04:	f8c9 6000 	str.w	r6, [r9]
    ab08:	921c      	str	r2, [sp, #112]	; 0x70
    ab0a:	931d      	str	r3, [sp, #116]	; 0x74
    ab0c:	f8c9 1004 	str.w	r1, [r9, #4]
    ab10:	f300 811d 	bgt.w	ad4e <_svfprintf_r+0xcfe>
    ab14:	f109 0908 	add.w	r9, r9, #8
    ab18:	9811      	ldr	r0, [sp, #68]	; 0x44
    ab1a:	f8c9 0004 	str.w	r0, [r9, #4]
    ab1e:	3201      	adds	r2, #1
    ab20:	4403      	add	r3, r0
    ab22:	a917      	add	r1, sp, #92	; 0x5c
    ab24:	2a07      	cmp	r2, #7
    ab26:	931d      	str	r3, [sp, #116]	; 0x74
    ab28:	921c      	str	r2, [sp, #112]	; 0x70
    ab2a:	f8c9 1000 	str.w	r1, [r9]
    ab2e:	f77f ad3e 	ble.w	a5ae <_svfprintf_r+0x55e>
    ab32:	aa1b      	add	r2, sp, #108	; 0x6c
    ab34:	9903      	ldr	r1, [sp, #12]
    ab36:	9805      	ldr	r0, [sp, #20]
    ab38:	f002 fe7c 	bl	d834 <__ssprint_r>
    ab3c:	2800      	cmp	r0, #0
    ab3e:	f47f ab7d 	bne.w	a23c <_svfprintf_r+0x1ec>
    ab42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ab44:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ab48:	e533      	b.n	a5b2 <_svfprintf_r+0x562>
    ab4a:	aa1b      	add	r2, sp, #108	; 0x6c
    ab4c:	9903      	ldr	r1, [sp, #12]
    ab4e:	9805      	ldr	r0, [sp, #20]
    ab50:	f002 fe70 	bl	d834 <__ssprint_r>
    ab54:	2800      	cmp	r0, #0
    ab56:	f43f ad79 	beq.w	a64c <_svfprintf_r+0x5fc>
    ab5a:	f7ff bb6f 	b.w	a23c <_svfprintf_r+0x1ec>
    ab5e:	9909      	ldr	r1, [sp, #36]	; 0x24
    ab60:	f1b8 0f00 	cmp.w	r8, #0
    ab64:	680c      	ldr	r4, [r1, #0]
    ab66:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    ab6a:	f101 0704 	add.w	r7, r1, #4
    ab6e:	f04f 0500 	mov.w	r5, #0
    ab72:	f2c0 8371 	blt.w	b258 <_svfprintf_r+0x1208>
    ab76:	ea54 0205 	orrs.w	r2, r4, r5
    ab7a:	9709      	str	r7, [sp, #36]	; 0x24
    ab7c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    ab80:	461f      	mov	r7, r3
    ab82:	f47f ac0a 	bne.w	a39a <_svfprintf_r+0x34a>
    ab86:	f1b8 0f00 	cmp.w	r8, #0
    ab8a:	f43f aeb3 	beq.w	a8f4 <_svfprintf_r+0x8a4>
    ab8e:	2400      	movs	r4, #0
    ab90:	e5b6      	b.n	a700 <_svfprintf_r+0x6b0>
    ab92:	aa1b      	add	r2, sp, #108	; 0x6c
    ab94:	9903      	ldr	r1, [sp, #12]
    ab96:	9805      	ldr	r0, [sp, #20]
    ab98:	f002 fe4c 	bl	d834 <__ssprint_r>
    ab9c:	2800      	cmp	r0, #0
    ab9e:	f47f ab4d 	bne.w	a23c <_svfprintf_r+0x1ec>
    aba2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    aba4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    aba8:	e4f0      	b.n	a58c <_svfprintf_r+0x53c>
    abaa:	aa1b      	add	r2, sp, #108	; 0x6c
    abac:	9903      	ldr	r1, [sp, #12]
    abae:	9805      	ldr	r0, [sp, #20]
    abb0:	f002 fe40 	bl	d834 <__ssprint_r>
    abb4:	2800      	cmp	r0, #0
    abb6:	f47f ab41 	bne.w	a23c <_svfprintf_r+0x1ec>
    abba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    abbc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    abc0:	e496      	b.n	a4f0 <_svfprintf_r+0x4a0>
    abc2:	aa1b      	add	r2, sp, #108	; 0x6c
    abc4:	9903      	ldr	r1, [sp, #12]
    abc6:	9805      	ldr	r0, [sp, #20]
    abc8:	f002 fe34 	bl	d834 <__ssprint_r>
    abcc:	2800      	cmp	r0, #0
    abce:	f47f ab35 	bne.w	a23c <_svfprintf_r+0x1ec>
    abd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    abd4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    abd8:	e49a      	b.n	a510 <_svfprintf_r+0x4c0>
    abda:	f1b8 0f00 	cmp.w	r8, #0
    abde:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    abe2:	f2c0 826f 	blt.w	b0c4 <_svfprintf_r+0x1074>
    abe6:	ea54 0305 	orrs.w	r3, r4, r5
    abea:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    abee:	f47f adc4 	bne.w	a77a <_svfprintf_r+0x72a>
    abf2:	f1b8 0f00 	cmp.w	r8, #0
    abf6:	f43f ae7c 	beq.w	a8f2 <_svfprintf_r+0x8a2>
    abfa:	2700      	movs	r7, #0
    abfc:	e6a7      	b.n	a94e <_svfprintf_r+0x8fe>
    abfe:	9c15      	ldr	r4, [sp, #84]	; 0x54
    ac00:	2c00      	cmp	r4, #0
    ac02:	f340 8261 	ble.w	b0c8 <_svfprintf_r+0x1078>
    ac06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ac08:	990d      	ldr	r1, [sp, #52]	; 0x34
    ac0a:	428a      	cmp	r2, r1
    ac0c:	bfa8      	it	ge
    ac0e:	460a      	movge	r2, r1
    ac10:	2a00      	cmp	r2, #0
    ac12:	4614      	mov	r4, r2
    ac14:	dd0d      	ble.n	ac32 <_svfprintf_r+0xbe2>
    ac16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ac18:	f8c9 6000 	str.w	r6, [r9]
    ac1c:	3201      	adds	r2, #1
    ac1e:	4423      	add	r3, r4
    ac20:	2a07      	cmp	r2, #7
    ac22:	931d      	str	r3, [sp, #116]	; 0x74
    ac24:	f8c9 4004 	str.w	r4, [r9, #4]
    ac28:	921c      	str	r2, [sp, #112]	; 0x70
    ac2a:	f300 8372 	bgt.w	b312 <_svfprintf_r+0x12c2>
    ac2e:	f109 0908 	add.w	r9, r9, #8
    ac32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ac34:	2c00      	cmp	r4, #0
    ac36:	bfa8      	it	ge
    ac38:	1b12      	subge	r2, r2, r4
    ac3a:	2a00      	cmp	r2, #0
    ac3c:	4614      	mov	r4, r2
    ac3e:	f340 80f1 	ble.w	ae24 <_svfprintf_r+0xdd4>
    ac42:	2c10      	cmp	r4, #16
    ac44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ac46:	4fc1      	ldr	r7, [pc, #772]	; (af4c <_svfprintf_r+0xefc>)
    ac48:	f340 8219 	ble.w	b07e <_svfprintf_r+0x102e>
    ac4c:	4649      	mov	r1, r9
    ac4e:	2510      	movs	r5, #16
    ac50:	46b1      	mov	r9, r6
    ac52:	f8dd 8014 	ldr.w	r8, [sp, #20]
    ac56:	9e03      	ldr	r6, [sp, #12]
    ac58:	e004      	b.n	ac64 <_svfprintf_r+0xc14>
    ac5a:	3108      	adds	r1, #8
    ac5c:	3c10      	subs	r4, #16
    ac5e:	2c10      	cmp	r4, #16
    ac60:	f340 820b 	ble.w	b07a <_svfprintf_r+0x102a>
    ac64:	3201      	adds	r2, #1
    ac66:	3310      	adds	r3, #16
    ac68:	2a07      	cmp	r2, #7
    ac6a:	931d      	str	r3, [sp, #116]	; 0x74
    ac6c:	921c      	str	r2, [sp, #112]	; 0x70
    ac6e:	600f      	str	r7, [r1, #0]
    ac70:	604d      	str	r5, [r1, #4]
    ac72:	ddf2      	ble.n	ac5a <_svfprintf_r+0xc0a>
    ac74:	aa1b      	add	r2, sp, #108	; 0x6c
    ac76:	4631      	mov	r1, r6
    ac78:	4640      	mov	r0, r8
    ac7a:	f002 fddb 	bl	d834 <__ssprint_r>
    ac7e:	2800      	cmp	r0, #0
    ac80:	f47f aadc 	bne.w	a23c <_svfprintf_r+0x1ec>
    ac84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ac86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ac88:	a928      	add	r1, sp, #160	; 0xa0
    ac8a:	e7e7      	b.n	ac5c <_svfprintf_r+0xc0c>
    ac8c:	aa1b      	add	r2, sp, #108	; 0x6c
    ac8e:	9903      	ldr	r1, [sp, #12]
    ac90:	9805      	ldr	r0, [sp, #20]
    ac92:	f002 fdcf 	bl	d834 <__ssprint_r>
    ac96:	2800      	cmp	r0, #0
    ac98:	f47f aad0 	bne.w	a23c <_svfprintf_r+0x1ec>
    ac9c:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    aca0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    aca2:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    aca6:	e413      	b.n	a4d0 <_svfprintf_r+0x480>
    aca8:	f01b 0210 	ands.w	r2, fp, #16
    acac:	f47f af57 	bne.w	ab5e <_svfprintf_r+0xb0e>
    acb0:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    acb4:	f43f af53 	beq.w	ab5e <_svfprintf_r+0xb0e>
    acb8:	9909      	ldr	r1, [sp, #36]	; 0x24
    acba:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    acbe:	460b      	mov	r3, r1
    acc0:	f1b8 0f00 	cmp.w	r8, #0
    acc4:	f103 0304 	add.w	r3, r3, #4
    acc8:	880c      	ldrh	r4, [r1, #0]
    acca:	f04f 0500 	mov.w	r5, #0
    acce:	f2c0 8294 	blt.w	b1fa <_svfprintf_r+0x11aa>
    acd2:	ea54 0105 	orrs.w	r1, r4, r5
    acd6:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    acda:	9309      	str	r3, [sp, #36]	; 0x24
    acdc:	4617      	mov	r7, r2
    acde:	f47f ab5c 	bne.w	a39a <_svfprintf_r+0x34a>
    ace2:	e750      	b.n	ab86 <_svfprintf_r+0xb36>
    ace4:	1e4c      	subs	r4, r1, #1
    ace6:	2c00      	cmp	r4, #0
    ace8:	f77f af16 	ble.w	ab18 <_svfprintf_r+0xac8>
    acec:	2c10      	cmp	r4, #16
    acee:	4f97      	ldr	r7, [pc, #604]	; (af4c <_svfprintf_r+0xefc>)
    acf0:	dd22      	ble.n	ad38 <_svfprintf_r+0xce8>
    acf2:	2510      	movs	r5, #16
    acf4:	9e05      	ldr	r6, [sp, #20]
    acf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
    acfa:	e004      	b.n	ad06 <_svfprintf_r+0xcb6>
    acfc:	3c10      	subs	r4, #16
    acfe:	2c10      	cmp	r4, #16
    ad00:	f109 0908 	add.w	r9, r9, #8
    ad04:	dd18      	ble.n	ad38 <_svfprintf_r+0xce8>
    ad06:	3201      	adds	r2, #1
    ad08:	3310      	adds	r3, #16
    ad0a:	2a07      	cmp	r2, #7
    ad0c:	931d      	str	r3, [sp, #116]	; 0x74
    ad0e:	921c      	str	r2, [sp, #112]	; 0x70
    ad10:	f8c9 7000 	str.w	r7, [r9]
    ad14:	f8c9 5004 	str.w	r5, [r9, #4]
    ad18:	ddf0      	ble.n	acfc <_svfprintf_r+0xcac>
    ad1a:	aa1b      	add	r2, sp, #108	; 0x6c
    ad1c:	4641      	mov	r1, r8
    ad1e:	4630      	mov	r0, r6
    ad20:	f002 fd88 	bl	d834 <__ssprint_r>
    ad24:	2800      	cmp	r0, #0
    ad26:	f47f aa89 	bne.w	a23c <_svfprintf_r+0x1ec>
    ad2a:	3c10      	subs	r4, #16
    ad2c:	2c10      	cmp	r4, #16
    ad2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ad30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ad32:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ad36:	dce6      	bgt.n	ad06 <_svfprintf_r+0xcb6>
    ad38:	3201      	adds	r2, #1
    ad3a:	4423      	add	r3, r4
    ad3c:	2a07      	cmp	r2, #7
    ad3e:	931d      	str	r3, [sp, #116]	; 0x74
    ad40:	921c      	str	r2, [sp, #112]	; 0x70
    ad42:	f8c9 7000 	str.w	r7, [r9]
    ad46:	f8c9 4004 	str.w	r4, [r9, #4]
    ad4a:	f77f aee3 	ble.w	ab14 <_svfprintf_r+0xac4>
    ad4e:	aa1b      	add	r2, sp, #108	; 0x6c
    ad50:	9903      	ldr	r1, [sp, #12]
    ad52:	9805      	ldr	r0, [sp, #20]
    ad54:	f002 fd6e 	bl	d834 <__ssprint_r>
    ad58:	2800      	cmp	r0, #0
    ad5a:	f47f aa6f 	bne.w	a23c <_svfprintf_r+0x1ec>
    ad5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ad60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ad62:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ad66:	e6d7      	b.n	ab18 <_svfprintf_r+0xac8>
    ad68:	f01b 0f10 	tst.w	fp, #16
    ad6c:	d133      	bne.n	add6 <_svfprintf_r+0xd86>
    ad6e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    ad72:	d030      	beq.n	add6 <_svfprintf_r+0xd86>
    ad74:	9909      	ldr	r1, [sp, #36]	; 0x24
    ad76:	f9b1 4000 	ldrsh.w	r4, [r1]
    ad7a:	3104      	adds	r1, #4
    ad7c:	17e5      	asrs	r5, r4, #31
    ad7e:	4622      	mov	r2, r4
    ad80:	462b      	mov	r3, r5
    ad82:	9109      	str	r1, [sp, #36]	; 0x24
    ad84:	f7ff baf8 	b.w	a378 <_svfprintf_r+0x328>
    ad88:	3201      	adds	r2, #1
    ad8a:	4423      	add	r3, r4
    ad8c:	2a07      	cmp	r2, #7
    ad8e:	931d      	str	r3, [sp, #116]	; 0x74
    ad90:	921c      	str	r2, [sp, #112]	; 0x70
    ad92:	f8c9 7000 	str.w	r7, [r9]
    ad96:	f8c9 4004 	str.w	r4, [r9, #4]
    ad9a:	f77f ac08 	ble.w	a5ae <_svfprintf_r+0x55e>
    ad9e:	e6c8      	b.n	ab32 <_svfprintf_r+0xae2>
    ada0:	9909      	ldr	r1, [sp, #36]	; 0x24
    ada2:	f1b8 0f00 	cmp.w	r8, #0
    ada6:	680c      	ldr	r4, [r1, #0]
    ada8:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    adac:	f101 0704 	add.w	r7, r1, #4
    adb0:	f04f 0500 	mov.w	r5, #0
    adb4:	f2c0 80c5 	blt.w	af42 <_svfprintf_r+0xef2>
    adb8:	ea54 0205 	orrs.w	r2, r4, r5
    adbc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    adc0:	9709      	str	r7, [sp, #36]	; 0x24
    adc2:	f43f adb2 	beq.w	a92a <_svfprintf_r+0x8da>
    adc6:	461f      	mov	r7, r3
    adc8:	f7ff ba64 	b.w	a294 <_svfprintf_r+0x244>
    adcc:	681c      	ldr	r4, [r3, #0]
    adce:	3304      	adds	r3, #4
    add0:	9309      	str	r3, [sp, #36]	; 0x24
    add2:	2500      	movs	r5, #0
    add4:	e4b6      	b.n	a744 <_svfprintf_r+0x6f4>
    add6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    add8:	6814      	ldr	r4, [r2, #0]
    adda:	4613      	mov	r3, r2
    addc:	3304      	adds	r3, #4
    adde:	17e5      	asrs	r5, r4, #31
    ade0:	4622      	mov	r2, r4
    ade2:	9309      	str	r3, [sp, #36]	; 0x24
    ade4:	2a00      	cmp	r2, #0
    ade6:	462b      	mov	r3, r5
    ade8:	f173 0300 	sbcs.w	r3, r3, #0
    adec:	f6bf aac9 	bge.w	a382 <_svfprintf_r+0x332>
    adf0:	4264      	negs	r4, r4
    adf2:	f04f 072d 	mov.w	r7, #45	; 0x2d
    adf6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    adfa:	f1b8 0f00 	cmp.w	r8, #0
    adfe:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    ae02:	f6ff aaca 	blt.w	a39a <_svfprintf_r+0x34a>
    ae06:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    ae0a:	f7ff bac6 	b.w	a39a <_svfprintf_r+0x34a>
    ae0e:	aa1b      	add	r2, sp, #108	; 0x6c
    ae10:	9903      	ldr	r1, [sp, #12]
    ae12:	9805      	ldr	r0, [sp, #20]
    ae14:	f002 fd0e 	bl	d834 <__ssprint_r>
    ae18:	2800      	cmp	r0, #0
    ae1a:	f47f aa0f 	bne.w	a23c <_svfprintf_r+0x1ec>
    ae1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ae20:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ae24:	990e      	ldr	r1, [sp, #56]	; 0x38
    ae26:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ae28:	4431      	add	r1, r6
    ae2a:	460d      	mov	r5, r1
    ae2c:	990d      	ldr	r1, [sp, #52]	; 0x34
    ae2e:	428a      	cmp	r2, r1
    ae30:	db47      	blt.n	aec2 <_svfprintf_r+0xe72>
    ae32:	f01b 0f01 	tst.w	fp, #1
    ae36:	d144      	bne.n	aec2 <_svfprintf_r+0xe72>
    ae38:	980d      	ldr	r0, [sp, #52]	; 0x34
    ae3a:	4406      	add	r6, r0
    ae3c:	1b74      	subs	r4, r6, r5
    ae3e:	1a82      	subs	r2, r0, r2
    ae40:	4294      	cmp	r4, r2
    ae42:	bfa8      	it	ge
    ae44:	4614      	movge	r4, r2
    ae46:	2c00      	cmp	r4, #0
    ae48:	4626      	mov	r6, r4
    ae4a:	dd0d      	ble.n	ae68 <_svfprintf_r+0xe18>
    ae4c:	991c      	ldr	r1, [sp, #112]	; 0x70
    ae4e:	f8c9 5000 	str.w	r5, [r9]
    ae52:	3101      	adds	r1, #1
    ae54:	4423      	add	r3, r4
    ae56:	2907      	cmp	r1, #7
    ae58:	931d      	str	r3, [sp, #116]	; 0x74
    ae5a:	f8c9 4004 	str.w	r4, [r9, #4]
    ae5e:	911c      	str	r1, [sp, #112]	; 0x70
    ae60:	f300 8280 	bgt.w	b364 <_svfprintf_r+0x1314>
    ae64:	f109 0908 	add.w	r9, r9, #8
    ae68:	2e00      	cmp	r6, #0
    ae6a:	bfac      	ite	ge
    ae6c:	1b94      	subge	r4, r2, r6
    ae6e:	4614      	movlt	r4, r2
    ae70:	2c00      	cmp	r4, #0
    ae72:	f77f ab9e 	ble.w	a5b2 <_svfprintf_r+0x562>
    ae76:	2c10      	cmp	r4, #16
    ae78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ae7a:	4f34      	ldr	r7, [pc, #208]	; (af4c <_svfprintf_r+0xefc>)
    ae7c:	dd84      	ble.n	ad88 <_svfprintf_r+0xd38>
    ae7e:	2510      	movs	r5, #16
    ae80:	9e05      	ldr	r6, [sp, #20]
    ae82:	f8dd 800c 	ldr.w	r8, [sp, #12]
    ae86:	e005      	b.n	ae94 <_svfprintf_r+0xe44>
    ae88:	f109 0908 	add.w	r9, r9, #8
    ae8c:	3c10      	subs	r4, #16
    ae8e:	2c10      	cmp	r4, #16
    ae90:	f77f af7a 	ble.w	ad88 <_svfprintf_r+0xd38>
    ae94:	3201      	adds	r2, #1
    ae96:	3310      	adds	r3, #16
    ae98:	2a07      	cmp	r2, #7
    ae9a:	931d      	str	r3, [sp, #116]	; 0x74
    ae9c:	921c      	str	r2, [sp, #112]	; 0x70
    ae9e:	f8c9 7000 	str.w	r7, [r9]
    aea2:	f8c9 5004 	str.w	r5, [r9, #4]
    aea6:	ddef      	ble.n	ae88 <_svfprintf_r+0xe38>
    aea8:	aa1b      	add	r2, sp, #108	; 0x6c
    aeaa:	4641      	mov	r1, r8
    aeac:	4630      	mov	r0, r6
    aeae:	f002 fcc1 	bl	d834 <__ssprint_r>
    aeb2:	2800      	cmp	r0, #0
    aeb4:	f47f a9c2 	bne.w	a23c <_svfprintf_r+0x1ec>
    aeb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    aeba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    aebc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    aec0:	e7e4      	b.n	ae8c <_svfprintf_r+0xe3c>
    aec2:	991c      	ldr	r1, [sp, #112]	; 0x70
    aec4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    aec6:	9810      	ldr	r0, [sp, #64]	; 0x40
    aec8:	f8c9 0000 	str.w	r0, [r9]
    aecc:	3101      	adds	r1, #1
    aece:	4423      	add	r3, r4
    aed0:	2907      	cmp	r1, #7
    aed2:	931d      	str	r3, [sp, #116]	; 0x74
    aed4:	f8c9 4004 	str.w	r4, [r9, #4]
    aed8:	911c      	str	r1, [sp, #112]	; 0x70
    aeda:	f300 8226 	bgt.w	b32a <_svfprintf_r+0x12da>
    aede:	f109 0908 	add.w	r9, r9, #8
    aee2:	e7a9      	b.n	ae38 <_svfprintf_r+0xde8>
    aee4:	f01b 0f01 	tst.w	fp, #1
    aee8:	f47f adec 	bne.w	aac4 <_svfprintf_r+0xa74>
    aeec:	2a07      	cmp	r2, #7
    aeee:	f77f ae11 	ble.w	ab14 <_svfprintf_r+0xac4>
    aef2:	e72c      	b.n	ad4e <_svfprintf_r+0xcfe>
    aef4:	aa1b      	add	r2, sp, #108	; 0x6c
    aef6:	9903      	ldr	r1, [sp, #12]
    aef8:	9805      	ldr	r0, [sp, #20]
    aefa:	f002 fc9b 	bl	d834 <__ssprint_r>
    aefe:	2800      	cmp	r0, #0
    af00:	f47f a99c 	bne.w	a23c <_svfprintf_r+0x1ec>
    af04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    af06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    af08:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    af0c:	e5df      	b.n	aace <_svfprintf_r+0xa7e>
    af0e:	aa1b      	add	r2, sp, #108	; 0x6c
    af10:	9903      	ldr	r1, [sp, #12]
    af12:	9805      	ldr	r0, [sp, #20]
    af14:	f002 fc8e 	bl	d834 <__ssprint_r>
    af18:	2800      	cmp	r0, #0
    af1a:	f47f a98f 	bne.w	a23c <_svfprintf_r+0x1ec>
    af1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    af20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    af22:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    af26:	e5e1      	b.n	aaec <_svfprintf_r+0xa9c>
    af28:	aa1b      	add	r2, sp, #108	; 0x6c
    af2a:	9903      	ldr	r1, [sp, #12]
    af2c:	9805      	ldr	r0, [sp, #20]
    af2e:	f002 fc81 	bl	d834 <__ssprint_r>
    af32:	2800      	cmp	r0, #0
    af34:	f47f a982 	bne.w	a23c <_svfprintf_r+0x1ec>
    af38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    af3a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    af3e:	f7ff baeb 	b.w	a518 <_svfprintf_r+0x4c8>
    af42:	9709      	str	r7, [sp, #36]	; 0x24
    af44:	2700      	movs	r7, #0
    af46:	f7ff b9a5 	b.w	a294 <_svfprintf_r+0x244>
    af4a:	bf00      	nop
    af4c:	20000a90 	.word	0x20000a90
    af50:	f01b 0f10 	tst.w	fp, #16
    af54:	d10b      	bne.n	af6e <_svfprintf_r+0xf1e>
    af56:	f01b 0f40 	tst.w	fp, #64	; 0x40
    af5a:	d008      	beq.n	af6e <_svfprintf_r+0xf1e>
    af5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    af5e:	6813      	ldr	r3, [r2, #0]
    af60:	3204      	adds	r2, #4
    af62:	9209      	str	r2, [sp, #36]	; 0x24
    af64:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    af68:	801a      	strh	r2, [r3, #0]
    af6a:	f7ff b897 	b.w	a09c <_svfprintf_r+0x4c>
    af6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    af70:	6813      	ldr	r3, [r2, #0]
    af72:	3204      	adds	r2, #4
    af74:	9209      	str	r2, [sp, #36]	; 0x24
    af76:	9a06      	ldr	r2, [sp, #24]
    af78:	601a      	str	r2, [r3, #0]
    af7a:	f7ff b88f 	b.w	a09c <_svfprintf_r+0x4c>
    af7e:	eeb4 8b48 	vcmp.f64	d8, d8
    af82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af86:	f180 829e 	bvs.w	b4c6 <_svfprintf_r+0x1476>
    af8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af8c:	f1b8 3fff 	cmp.w	r8, #4294967295
    af90:	f023 0520 	bic.w	r5, r3, #32
    af94:	f000 8225 	beq.w	b3e2 <_svfprintf_r+0x1392>
    af98:	2d47      	cmp	r5, #71	; 0x47
    af9a:	f000 8126 	beq.w	b1ea <_svfprintf_r+0x119a>
    af9e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    afa2:	930a      	str	r3, [sp, #40]	; 0x28
    afa4:	ee18 3a90 	vmov	r3, s17
    afa8:	2b00      	cmp	r3, #0
    afaa:	f2c0 821d 	blt.w	b3e8 <_svfprintf_r+0x1398>
    afae:	eeb0 ab48 	vmov.f64	d10, d8
    afb2:	2700      	movs	r7, #0
    afb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afb6:	2b66      	cmp	r3, #102	; 0x66
    afb8:	f000 8202 	beq.w	b3c0 <_svfprintf_r+0x1370>
    afbc:	2b46      	cmp	r3, #70	; 0x46
    afbe:	f000 80ec 	beq.w	b19a <_svfprintf_r+0x114a>
    afc2:	eeb0 0b4a 	vmov.f64	d0, d10
    afc6:	2d45      	cmp	r5, #69	; 0x45
    afc8:	bf0c      	ite	eq
    afca:	f108 0401 	addeq.w	r4, r8, #1
    afce:	4644      	movne	r4, r8
    afd0:	aa19      	add	r2, sp, #100	; 0x64
    afd2:	ab16      	add	r3, sp, #88	; 0x58
    afd4:	9201      	str	r2, [sp, #4]
    afd6:	9300      	str	r3, [sp, #0]
    afd8:	4622      	mov	r2, r4
    afda:	ab15      	add	r3, sp, #84	; 0x54
    afdc:	2102      	movs	r1, #2
    afde:	9805      	ldr	r0, [sp, #20]
    afe0:	f000 fc26 	bl	b830 <_dtoa_r>
    afe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afe6:	2b67      	cmp	r3, #103	; 0x67
    afe8:	4606      	mov	r6, r0
    afea:	f040 820e 	bne.w	b40a <_svfprintf_r+0x13ba>
    afee:	f01b 0f01 	tst.w	fp, #1
    aff2:	f000 8266 	beq.w	b4c2 <_svfprintf_r+0x1472>
    aff6:	1931      	adds	r1, r6, r4
    aff8:	eeb5 ab40 	vcmp.f64	d10, #0.0
    affc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b000:	f000 8185 	beq.w	b30e <_svfprintf_r+0x12be>
    b004:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b006:	4299      	cmp	r1, r3
    b008:	d906      	bls.n	b018 <_svfprintf_r+0xfc8>
    b00a:	2030      	movs	r0, #48	; 0x30
    b00c:	1c5a      	adds	r2, r3, #1
    b00e:	9219      	str	r2, [sp, #100]	; 0x64
    b010:	7018      	strb	r0, [r3, #0]
    b012:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b014:	4299      	cmp	r1, r3
    b016:	d8f9      	bhi.n	b00c <_svfprintf_r+0xfbc>
    b018:	1b9b      	subs	r3, r3, r6
    b01a:	2d47      	cmp	r5, #71	; 0x47
    b01c:	930d      	str	r3, [sp, #52]	; 0x34
    b01e:	f000 811f 	beq.w	b260 <_svfprintf_r+0x1210>
    b022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b024:	2b65      	cmp	r3, #101	; 0x65
    b026:	f340 81ff 	ble.w	b428 <_svfprintf_r+0x13d8>
    b02a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b02c:	2b66      	cmp	r3, #102	; 0x66
    b02e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b030:	f000 81fc 	beq.w	b42c <_svfprintf_r+0x13dc>
    b034:	930e      	str	r3, [sp, #56]	; 0x38
    b036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b038:	990d      	ldr	r1, [sp, #52]	; 0x34
    b03a:	428a      	cmp	r2, r1
    b03c:	f2c0 81d8 	blt.w	b3f0 <_svfprintf_r+0x13a0>
    b040:	f01b 0f01 	tst.w	fp, #1
    b044:	f040 8234 	bne.w	b4b0 <_svfprintf_r+0x1460>
    b048:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b04c:	9208      	str	r2, [sp, #32]
    b04e:	2267      	movs	r2, #103	; 0x67
    b050:	920c      	str	r2, [sp, #48]	; 0x30
    b052:	2f00      	cmp	r7, #0
    b054:	f040 80f6 	bne.w	b244 <_svfprintf_r+0x11f4>
    b058:	46b8      	mov	r8, r7
    b05a:	9304      	str	r3, [sp, #16]
    b05c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    b060:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    b064:	f7ff b9e6 	b.w	a434 <_svfprintf_r+0x3e4>
    b068:	f027 0707 	bic.w	r7, r7, #7
    b06c:	f107 0308 	add.w	r3, r7, #8
    b070:	ed97 8b00 	vldr	d8, [r7]
    b074:	9309      	str	r3, [sp, #36]	; 0x24
    b076:	f7ff b9be 	b.w	a3f6 <_svfprintf_r+0x3a6>
    b07a:	464e      	mov	r6, r9
    b07c:	4689      	mov	r9, r1
    b07e:	3201      	adds	r2, #1
    b080:	4423      	add	r3, r4
    b082:	2a07      	cmp	r2, #7
    b084:	931d      	str	r3, [sp, #116]	; 0x74
    b086:	921c      	str	r2, [sp, #112]	; 0x70
    b088:	f8c9 7000 	str.w	r7, [r9]
    b08c:	f8c9 4004 	str.w	r4, [r9, #4]
    b090:	f73f aebd 	bgt.w	ae0e <_svfprintf_r+0xdbe>
    b094:	f109 0908 	add.w	r9, r9, #8
    b098:	e6c4      	b.n	ae24 <_svfprintf_r+0xdd4>
    b09a:	2700      	movs	r7, #0
    b09c:	45b8      	cmp	r8, r7
    b09e:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    b0a2:	f6ff ac54 	blt.w	a94e <_svfprintf_r+0x8fe>
    b0a6:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    b0aa:	e41e      	b.n	a8ea <_svfprintf_r+0x89a>
    b0ac:	aa1b      	add	r2, sp, #108	; 0x6c
    b0ae:	9903      	ldr	r1, [sp, #12]
    b0b0:	9805      	ldr	r0, [sp, #20]
    b0b2:	f002 fbbf 	bl	d834 <__ssprint_r>
    b0b6:	2800      	cmp	r0, #0
    b0b8:	f47f a8c0 	bne.w	a23c <_svfprintf_r+0x1ec>
    b0bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b0be:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    b0c2:	e463      	b.n	a98c <_svfprintf_r+0x93c>
    b0c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b0c6:	e43b      	b.n	a940 <_svfprintf_r+0x8f0>
    b0c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b0ca:	49b9      	ldr	r1, [pc, #740]	; (b3b0 <_svfprintf_r+0x1360>)
    b0cc:	f8c9 1000 	str.w	r1, [r9]
    b0d0:	3201      	adds	r2, #1
    b0d2:	3301      	adds	r3, #1
    b0d4:	2101      	movs	r1, #1
    b0d6:	2a07      	cmp	r2, #7
    b0d8:	931d      	str	r3, [sp, #116]	; 0x74
    b0da:	921c      	str	r2, [sp, #112]	; 0x70
    b0dc:	f8c9 1004 	str.w	r1, [r9, #4]
    b0e0:	dc76      	bgt.n	b1d0 <_svfprintf_r+0x1180>
    b0e2:	f109 0908 	add.w	r9, r9, #8
    b0e6:	b92c      	cbnz	r4, b0f4 <_svfprintf_r+0x10a4>
    b0e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b0ea:	b91a      	cbnz	r2, b0f4 <_svfprintf_r+0x10a4>
    b0ec:	f01b 0f01 	tst.w	fp, #1
    b0f0:	f43f aa5f 	beq.w	a5b2 <_svfprintf_r+0x562>
    b0f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b0f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b0f8:	9910      	ldr	r1, [sp, #64]	; 0x40
    b0fa:	f8c9 1000 	str.w	r1, [r9]
    b0fe:	3201      	adds	r2, #1
    b100:	4403      	add	r3, r0
    b102:	2a07      	cmp	r2, #7
    b104:	931d      	str	r3, [sp, #116]	; 0x74
    b106:	f8c9 0004 	str.w	r0, [r9, #4]
    b10a:	921c      	str	r2, [sp, #112]	; 0x70
    b10c:	f300 81b6 	bgt.w	b47c <_svfprintf_r+0x142c>
    b110:	f109 0908 	add.w	r9, r9, #8
    b114:	4264      	negs	r4, r4
    b116:	2c00      	cmp	r4, #0
    b118:	f340 8087 	ble.w	b22a <_svfprintf_r+0x11da>
    b11c:	2c10      	cmp	r4, #16
    b11e:	4fa5      	ldr	r7, [pc, #660]	; (b3b4 <_svfprintf_r+0x1364>)
    b120:	f340 8112 	ble.w	b348 <_svfprintf_r+0x12f8>
    b124:	4649      	mov	r1, r9
    b126:	2510      	movs	r5, #16
    b128:	46b1      	mov	r9, r6
    b12a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    b12e:	9e03      	ldr	r6, [sp, #12]
    b130:	e004      	b.n	b13c <_svfprintf_r+0x10ec>
    b132:	3108      	adds	r1, #8
    b134:	3c10      	subs	r4, #16
    b136:	2c10      	cmp	r4, #16
    b138:	f340 8104 	ble.w	b344 <_svfprintf_r+0x12f4>
    b13c:	3201      	adds	r2, #1
    b13e:	3310      	adds	r3, #16
    b140:	2a07      	cmp	r2, #7
    b142:	931d      	str	r3, [sp, #116]	; 0x74
    b144:	921c      	str	r2, [sp, #112]	; 0x70
    b146:	600f      	str	r7, [r1, #0]
    b148:	604d      	str	r5, [r1, #4]
    b14a:	ddf2      	ble.n	b132 <_svfprintf_r+0x10e2>
    b14c:	aa1b      	add	r2, sp, #108	; 0x6c
    b14e:	4631      	mov	r1, r6
    b150:	4640      	mov	r0, r8
    b152:	f002 fb6f 	bl	d834 <__ssprint_r>
    b156:	2800      	cmp	r0, #0
    b158:	f47f a870 	bne.w	a23c <_svfprintf_r+0x1ec>
    b15c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b15e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b160:	a928      	add	r1, sp, #160	; 0xa0
    b162:	e7e7      	b.n	b134 <_svfprintf_r+0x10e4>
    b164:	aa1b      	add	r2, sp, #108	; 0x6c
    b166:	9903      	ldr	r1, [sp, #12]
    b168:	9805      	ldr	r0, [sp, #20]
    b16a:	f002 fb63 	bl	d834 <__ssprint_r>
    b16e:	2800      	cmp	r0, #0
    b170:	f47f a864 	bne.w	a23c <_svfprintf_r+0x1ec>
    b174:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b176:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    b17a:	e41f      	b.n	a9bc <_svfprintf_r+0x96c>
    b17c:	2140      	movs	r1, #64	; 0x40
    b17e:	9805      	ldr	r0, [sp, #20]
    b180:	f7fc ff96 	bl	80b0 <_malloc_r>
    b184:	9a03      	ldr	r2, [sp, #12]
    b186:	6010      	str	r0, [r2, #0]
    b188:	6110      	str	r0, [r2, #16]
    b18a:	2800      	cmp	r0, #0
    b18c:	f000 81ed 	beq.w	b56a <_svfprintf_r+0x151a>
    b190:	9a03      	ldr	r2, [sp, #12]
    b192:	2340      	movs	r3, #64	; 0x40
    b194:	6153      	str	r3, [r2, #20]
    b196:	f7fe bf74 	b.w	a082 <_svfprintf_r+0x32>
    b19a:	aa19      	add	r2, sp, #100	; 0x64
    b19c:	ab16      	add	r3, sp, #88	; 0x58
    b19e:	9201      	str	r2, [sp, #4]
    b1a0:	9300      	str	r3, [sp, #0]
    b1a2:	4642      	mov	r2, r8
    b1a4:	ab15      	add	r3, sp, #84	; 0x54
    b1a6:	2103      	movs	r1, #3
    b1a8:	eeb0 0b4a 	vmov.f64	d0, d10
    b1ac:	9805      	ldr	r0, [sp, #20]
    b1ae:	f000 fb3f 	bl	b830 <_dtoa_r>
    b1b2:	4644      	mov	r4, r8
    b1b4:	4606      	mov	r6, r0
    b1b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b1b8:	2b46      	cmp	r3, #70	; 0x46
    b1ba:	eb06 0104 	add.w	r1, r6, r4
    b1be:	f47f af1b 	bne.w	aff8 <_svfprintf_r+0xfa8>
    b1c2:	7833      	ldrb	r3, [r6, #0]
    b1c4:	2b30      	cmp	r3, #48	; 0x30
    b1c6:	f000 818d 	beq.w	b4e4 <_svfprintf_r+0x1494>
    b1ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
    b1cc:	4421      	add	r1, r4
    b1ce:	e713      	b.n	aff8 <_svfprintf_r+0xfa8>
    b1d0:	aa1b      	add	r2, sp, #108	; 0x6c
    b1d2:	9903      	ldr	r1, [sp, #12]
    b1d4:	9805      	ldr	r0, [sp, #20]
    b1d6:	f002 fb2d 	bl	d834 <__ssprint_r>
    b1da:	2800      	cmp	r0, #0
    b1dc:	f47f a82e 	bne.w	a23c <_svfprintf_r+0x1ec>
    b1e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
    b1e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b1e4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    b1e8:	e77d      	b.n	b0e6 <_svfprintf_r+0x1096>
    b1ea:	f1b8 0f00 	cmp.w	r8, #0
    b1ee:	bf08      	it	eq
    b1f0:	f04f 0801 	moveq.w	r8, #1
    b1f4:	e6d3      	b.n	af9e <_svfprintf_r+0xf4e>
    b1f6:	9309      	str	r3, [sp, #36]	; 0x24
    b1f8:	e6a4      	b.n	af44 <_svfprintf_r+0xef4>
    b1fa:	9309      	str	r3, [sp, #36]	; 0x24
    b1fc:	4617      	mov	r7, r2
    b1fe:	f7ff ba7b 	b.w	a6f8 <_svfprintf_r+0x6a8>
    b202:	4630      	mov	r0, r6
    b204:	f7fd fe1c 	bl	8e40 <strlen>
    b208:	46a0      	mov	r8, r4
    b20a:	4603      	mov	r3, r0
    b20c:	9008      	str	r0, [sp, #32]
    b20e:	f7ff bb61 	b.w	a8d4 <_svfprintf_r+0x884>
    b212:	aa1b      	add	r2, sp, #108	; 0x6c
    b214:	9903      	ldr	r1, [sp, #12]
    b216:	9805      	ldr	r0, [sp, #20]
    b218:	f002 fb0c 	bl	d834 <__ssprint_r>
    b21c:	2800      	cmp	r0, #0
    b21e:	f47f a80d 	bne.w	a23c <_svfprintf_r+0x1ec>
    b222:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b224:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b226:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    b22a:	980d      	ldr	r0, [sp, #52]	; 0x34
    b22c:	f8c9 6000 	str.w	r6, [r9]
    b230:	3201      	adds	r2, #1
    b232:	4403      	add	r3, r0
    b234:	2a07      	cmp	r2, #7
    b236:	931d      	str	r3, [sp, #116]	; 0x74
    b238:	921c      	str	r2, [sp, #112]	; 0x70
    b23a:	f8c9 0004 	str.w	r0, [r9, #4]
    b23e:	f77f a9b6 	ble.w	a5ae <_svfprintf_r+0x55e>
    b242:	e476      	b.n	ab32 <_svfprintf_r+0xae2>
    b244:	272d      	movs	r7, #45	; 0x2d
    b246:	9304      	str	r3, [sp, #16]
    b248:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    b24c:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    b250:	f04f 0800 	mov.w	r8, #0
    b254:	f7ff b8ef 	b.w	a436 <_svfprintf_r+0x3e6>
    b258:	9709      	str	r7, [sp, #36]	; 0x24
    b25a:	461f      	mov	r7, r3
    b25c:	f7ff ba4c 	b.w	a6f8 <_svfprintf_r+0x6a8>
    b260:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b262:	1cda      	adds	r2, r3, #3
    b264:	db02      	blt.n	b26c <_svfprintf_r+0x121c>
    b266:	4598      	cmp	r8, r3
    b268:	f6bf aee4 	bge.w	b034 <_svfprintf_r+0xfe4>
    b26c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b26e:	3a02      	subs	r2, #2
    b270:	920c      	str	r2, [sp, #48]	; 0x30
    b272:	3b01      	subs	r3, #1
    b274:	2b00      	cmp	r3, #0
    b276:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b27a:	9315      	str	r3, [sp, #84]	; 0x54
    b27c:	bfb8      	it	lt
    b27e:	425b      	neglt	r3, r3
    b280:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
    b284:	bfb4      	ite	lt
    b286:	222d      	movlt	r2, #45	; 0x2d
    b288:	222b      	movge	r2, #43	; 0x2b
    b28a:	2b09      	cmp	r3, #9
    b28c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    b290:	f340 8106 	ble.w	b4a0 <_svfprintf_r+0x1450>
    b294:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
    b298:	4604      	mov	r4, r0
    b29a:	4a47      	ldr	r2, [pc, #284]	; (b3b8 <_svfprintf_r+0x1368>)
    b29c:	fb82 2103 	smull	r2, r1, r2, r3
    b2a0:	17da      	asrs	r2, r3, #31
    b2a2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    b2a6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    b2aa:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    b2ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
    b2b2:	2a09      	cmp	r2, #9
    b2b4:	4613      	mov	r3, r2
    b2b6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b2ba:	dcee      	bgt.n	b29a <_svfprintf_r+0x124a>
    b2bc:	4621      	mov	r1, r4
    b2be:	3330      	adds	r3, #48	; 0x30
    b2c0:	b2da      	uxtb	r2, r3
    b2c2:	f801 2d01 	strb.w	r2, [r1, #-1]!
    b2c6:	4288      	cmp	r0, r1
    b2c8:	f240 8162 	bls.w	b590 <_svfprintf_r+0x1540>
    b2cc:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
    b2d0:	4623      	mov	r3, r4
    b2d2:	e001      	b.n	b2d8 <_svfprintf_r+0x1288>
    b2d4:	f813 2b01 	ldrb.w	r2, [r3], #1
    b2d8:	f801 2b01 	strb.w	r2, [r1], #1
    b2dc:	4298      	cmp	r0, r3
    b2de:	d1f9      	bne.n	b2d4 <_svfprintf_r+0x1284>
    b2e0:	1c43      	adds	r3, r0, #1
    b2e2:	1b1b      	subs	r3, r3, r4
    b2e4:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
    b2e8:	4413      	add	r3, r2
    b2ea:	aa17      	add	r2, sp, #92	; 0x5c
    b2ec:	1a9b      	subs	r3, r3, r2
    b2ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b2f0:	9311      	str	r3, [sp, #68]	; 0x44
    b2f2:	2a01      	cmp	r2, #1
    b2f4:	4413      	add	r3, r2
    b2f6:	9308      	str	r3, [sp, #32]
    b2f8:	f340 80ff 	ble.w	b4fa <_svfprintf_r+0x14aa>
    b2fc:	9b08      	ldr	r3, [sp, #32]
    b2fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b300:	4413      	add	r3, r2
    b302:	2200      	movs	r2, #0
    b304:	9308      	str	r3, [sp, #32]
    b306:	920e      	str	r2, [sp, #56]	; 0x38
    b308:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b30c:	e6a1      	b.n	b052 <_svfprintf_r+0x1002>
    b30e:	460b      	mov	r3, r1
    b310:	e682      	b.n	b018 <_svfprintf_r+0xfc8>
    b312:	aa1b      	add	r2, sp, #108	; 0x6c
    b314:	9903      	ldr	r1, [sp, #12]
    b316:	9805      	ldr	r0, [sp, #20]
    b318:	f002 fa8c 	bl	d834 <__ssprint_r>
    b31c:	2800      	cmp	r0, #0
    b31e:	f47e af8d 	bne.w	a23c <_svfprintf_r+0x1ec>
    b322:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b324:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    b328:	e483      	b.n	ac32 <_svfprintf_r+0xbe2>
    b32a:	aa1b      	add	r2, sp, #108	; 0x6c
    b32c:	9903      	ldr	r1, [sp, #12]
    b32e:	9805      	ldr	r0, [sp, #20]
    b330:	f002 fa80 	bl	d834 <__ssprint_r>
    b334:	2800      	cmp	r0, #0
    b336:	f47e af81 	bne.w	a23c <_svfprintf_r+0x1ec>
    b33a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    b33c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b33e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    b342:	e579      	b.n	ae38 <_svfprintf_r+0xde8>
    b344:	464e      	mov	r6, r9
    b346:	4689      	mov	r9, r1
    b348:	3201      	adds	r2, #1
    b34a:	4423      	add	r3, r4
    b34c:	2a07      	cmp	r2, #7
    b34e:	931d      	str	r3, [sp, #116]	; 0x74
    b350:	921c      	str	r2, [sp, #112]	; 0x70
    b352:	f8c9 7000 	str.w	r7, [r9]
    b356:	f8c9 4004 	str.w	r4, [r9, #4]
    b35a:	f73f af5a 	bgt.w	b212 <_svfprintf_r+0x11c2>
    b35e:	f109 0908 	add.w	r9, r9, #8
    b362:	e762      	b.n	b22a <_svfprintf_r+0x11da>
    b364:	aa1b      	add	r2, sp, #108	; 0x6c
    b366:	9903      	ldr	r1, [sp, #12]
    b368:	9805      	ldr	r0, [sp, #20]
    b36a:	f002 fa63 	bl	d834 <__ssprint_r>
    b36e:	2800      	cmp	r0, #0
    b370:	f47e af64 	bne.w	a23c <_svfprintf_r+0x1ec>
    b374:	9a15      	ldr	r2, [sp, #84]	; 0x54
    b376:	990d      	ldr	r1, [sp, #52]	; 0x34
    b378:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b37a:	1a8a      	subs	r2, r1, r2
    b37c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    b380:	e572      	b.n	ae68 <_svfprintf_r+0xe18>
    b382:	2d06      	cmp	r5, #6
    b384:	462b      	mov	r3, r5
    b386:	bf28      	it	cs
    b388:	2306      	movcs	r3, #6
    b38a:	9308      	str	r3, [sp, #32]
    b38c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b390:	46b0      	mov	r8, r6
    b392:	9709      	str	r7, [sp, #36]	; 0x24
    b394:	960e      	str	r6, [sp, #56]	; 0x38
    b396:	4637      	mov	r7, r6
    b398:	9304      	str	r3, [sp, #16]
    b39a:	4e08      	ldr	r6, [pc, #32]	; (b3bc <_svfprintf_r+0x136c>)
    b39c:	f7ff b84a 	b.w	a434 <_svfprintf_r+0x3e4>
    b3a0:	469b      	mov	fp, r3
    b3a2:	f7ff b9ea 	b.w	a77a <_svfprintf_r+0x72a>
    b3a6:	272d      	movs	r7, #45	; 0x2d
    b3a8:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    b3ac:	f7ff b833 	b.w	a416 <_svfprintf_r+0x3c6>
    b3b0:	20000ad8 	.word	0x20000ad8
    b3b4:	20000a90 	.word	0x20000a90
    b3b8:	66666667 	.word	0x66666667
    b3bc:	20000ad0 	.word	0x20000ad0
    b3c0:	aa19      	add	r2, sp, #100	; 0x64
    b3c2:	ab16      	add	r3, sp, #88	; 0x58
    b3c4:	9201      	str	r2, [sp, #4]
    b3c6:	9300      	str	r3, [sp, #0]
    b3c8:	2103      	movs	r1, #3
    b3ca:	ab15      	add	r3, sp, #84	; 0x54
    b3cc:	4642      	mov	r2, r8
    b3ce:	eeb0 0b4a 	vmov.f64	d0, d10
    b3d2:	9805      	ldr	r0, [sp, #20]
    b3d4:	f000 fa2c 	bl	b830 <_dtoa_r>
    b3d8:	4644      	mov	r4, r8
    b3da:	4606      	mov	r6, r0
    b3dc:	eb00 0108 	add.w	r1, r0, r8
    b3e0:	e6ef      	b.n	b1c2 <_svfprintf_r+0x1172>
    b3e2:	f04f 0806 	mov.w	r8, #6
    b3e6:	e5da      	b.n	af9e <_svfprintf_r+0xf4e>
    b3e8:	eeb1 ab48 	vneg.f64	d10, d8
    b3ec:	272d      	movs	r7, #45	; 0x2d
    b3ee:	e5e1      	b.n	afb4 <_svfprintf_r+0xf64>
    b3f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b3f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b3f4:	4413      	add	r3, r2
    b3f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b3f8:	9308      	str	r3, [sp, #32]
    b3fa:	2a00      	cmp	r2, #0
    b3fc:	f340 8086 	ble.w	b50c <_svfprintf_r+0x14bc>
    b400:	2267      	movs	r2, #103	; 0x67
    b402:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b406:	920c      	str	r2, [sp, #48]	; 0x30
    b408:	e623      	b.n	b052 <_svfprintf_r+0x1002>
    b40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b40c:	2b47      	cmp	r3, #71	; 0x47
    b40e:	f47f adf2 	bne.w	aff6 <_svfprintf_r+0xfa6>
    b412:	f01b 0f01 	tst.w	fp, #1
    b416:	f47f aece 	bne.w	b1b6 <_svfprintf_r+0x1166>
    b41a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b41c:	2d47      	cmp	r5, #71	; 0x47
    b41e:	eba3 0306 	sub.w	r3, r3, r6
    b422:	930d      	str	r3, [sp, #52]	; 0x34
    b424:	f43f af1c 	beq.w	b260 <_svfprintf_r+0x1210>
    b428:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b42a:	e722      	b.n	b272 <_svfprintf_r+0x1222>
    b42c:	2b00      	cmp	r3, #0
    b42e:	461a      	mov	r2, r3
    b430:	930e      	str	r3, [sp, #56]	; 0x38
    b432:	dd73      	ble.n	b51c <_svfprintf_r+0x14cc>
    b434:	f1b8 0f00 	cmp.w	r8, #0
    b438:	d14b      	bne.n	b4d2 <_svfprintf_r+0x1482>
    b43a:	f01b 0f01 	tst.w	fp, #1
    b43e:	d148      	bne.n	b4d2 <_svfprintf_r+0x1482>
    b440:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b444:	9208      	str	r2, [sp, #32]
    b446:	e604      	b.n	b052 <_svfprintf_r+0x1002>
    b448:	f01b 0f01 	tst.w	fp, #1
    b44c:	4647      	mov	r7, r8
    b44e:	d005      	beq.n	b45c <_svfprintf_r+0x140c>
    b450:	ae38      	add	r6, sp, #224	; 0xe0
    b452:	2330      	movs	r3, #48	; 0x30
    b454:	f806 3d41 	strb.w	r3, [r6, #-65]!
    b458:	f7ff b956 	b.w	a708 <_svfprintf_r+0x6b8>
    b45c:	f8cd 8020 	str.w	r8, [sp, #32]
    b460:	ae28      	add	r6, sp, #160	; 0xa0
    b462:	f7ff b954 	b.w	a70e <_svfprintf_r+0x6be>
    b466:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    b46a:	9709      	str	r7, [sp, #36]	; 0x24
    b46c:	9304      	str	r3, [sp, #16]
    b46e:	9508      	str	r5, [sp, #32]
    b470:	4680      	mov	r8, r0
    b472:	900e      	str	r0, [sp, #56]	; 0x38
    b474:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    b478:	f7fe bfdc 	b.w	a434 <_svfprintf_r+0x3e4>
    b47c:	aa1b      	add	r2, sp, #108	; 0x6c
    b47e:	9903      	ldr	r1, [sp, #12]
    b480:	9805      	ldr	r0, [sp, #20]
    b482:	f002 f9d7 	bl	d834 <__ssprint_r>
    b486:	2800      	cmp	r0, #0
    b488:	f47e aed8 	bne.w	a23c <_svfprintf_r+0x1ec>
    b48c:	9c15      	ldr	r4, [sp, #84]	; 0x54
    b48e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b490:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b492:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    b496:	e63d      	b.n	b114 <_svfprintf_r+0x10c4>
    b498:	46a2      	mov	sl, r4
    b49a:	2500      	movs	r5, #0
    b49c:	f7fe be33 	b.w	a106 <_svfprintf_r+0xb6>
    b4a0:	3330      	adds	r3, #48	; 0x30
    b4a2:	2230      	movs	r2, #48	; 0x30
    b4a4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    b4a8:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    b4ac:	ab18      	add	r3, sp, #96	; 0x60
    b4ae:	e71c      	b.n	b2ea <_svfprintf_r+0x129a>
    b4b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b4b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b4b4:	4413      	add	r3, r2
    b4b6:	2267      	movs	r2, #103	; 0x67
    b4b8:	9308      	str	r3, [sp, #32]
    b4ba:	920c      	str	r2, [sp, #48]	; 0x30
    b4bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b4c0:	e5c7      	b.n	b052 <_svfprintf_r+0x1002>
    b4c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b4c4:	e5a8      	b.n	b018 <_svfprintf_r+0xfc8>
    b4c6:	4e3c      	ldr	r6, [pc, #240]	; (b5b8 <_svfprintf_r+0x1568>)
    b4c8:	4b3c      	ldr	r3, [pc, #240]	; (b5bc <_svfprintf_r+0x156c>)
    b4ca:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    b4ce:	f7fe bfa4 	b.w	a41a <_svfprintf_r+0x3ca>
    b4d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b4d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b4d6:	189d      	adds	r5, r3, r2
    b4d8:	eb05 0308 	add.w	r3, r5, r8
    b4dc:	9308      	str	r3, [sp, #32]
    b4de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b4e2:	e5b6      	b.n	b052 <_svfprintf_r+0x1002>
    b4e4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    b4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b4ec:	f43f ae6d 	beq.w	b1ca <_svfprintf_r+0x117a>
    b4f0:	f1c4 0401 	rsb	r4, r4, #1
    b4f4:	9415      	str	r4, [sp, #84]	; 0x54
    b4f6:	4421      	add	r1, r4
    b4f8:	e57e      	b.n	aff8 <_svfprintf_r+0xfa8>
    b4fa:	f01b 0301 	ands.w	r3, fp, #1
    b4fe:	f47f aefd 	bne.w	b2fc <_svfprintf_r+0x12ac>
    b502:	930e      	str	r3, [sp, #56]	; 0x38
    b504:	9b08      	ldr	r3, [sp, #32]
    b506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b50a:	e5a2      	b.n	b052 <_svfprintf_r+0x1002>
    b50c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b50e:	9a08      	ldr	r2, [sp, #32]
    b510:	f1c3 0301 	rsb	r3, r3, #1
    b514:	441a      	add	r2, r3
    b516:	4613      	mov	r3, r2
    b518:	9208      	str	r2, [sp, #32]
    b51a:	e771      	b.n	b400 <_svfprintf_r+0x13b0>
    b51c:	f1b8 0f00 	cmp.w	r8, #0
    b520:	d102      	bne.n	b528 <_svfprintf_r+0x14d8>
    b522:	f01b 0f01 	tst.w	fp, #1
    b526:	d007      	beq.n	b538 <_svfprintf_r+0x14e8>
    b528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b52a:	1c5d      	adds	r5, r3, #1
    b52c:	eb05 0308 	add.w	r3, r5, r8
    b530:	9308      	str	r3, [sp, #32]
    b532:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b536:	e58c      	b.n	b052 <_svfprintf_r+0x1002>
    b538:	2301      	movs	r3, #1
    b53a:	9308      	str	r3, [sp, #32]
    b53c:	e589      	b.n	b052 <_svfprintf_r+0x1002>
    b53e:	9809      	ldr	r0, [sp, #36]	; 0x24
    b540:	f89a 3001 	ldrb.w	r3, [sl, #1]
    b544:	6805      	ldr	r5, [r0, #0]
    b546:	3004      	adds	r0, #4
    b548:	2d00      	cmp	r5, #0
    b54a:	9009      	str	r0, [sp, #36]	; 0x24
    b54c:	46a2      	mov	sl, r4
    b54e:	f6be add8 	bge.w	a102 <_svfprintf_r+0xb2>
    b552:	f04f 35ff 	mov.w	r5, #4294967295
    b556:	f7fe bdd4 	b.w	a102 <_svfprintf_r+0xb2>
    b55a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b55e:	f7ff b98d 	b.w	a87c <_svfprintf_r+0x82c>
    b562:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b566:	f7ff b9cf 	b.w	a908 <_svfprintf_r+0x8b8>
    b56a:	9a05      	ldr	r2, [sp, #20]
    b56c:	230c      	movs	r3, #12
    b56e:	6013      	str	r3, [r2, #0]
    b570:	f04f 30ff 	mov.w	r0, #4294967295
    b574:	f7fe be6b 	b.w	a24e <_svfprintf_r+0x1fe>
    b578:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b57c:	f7ff b8d4 	b.w	a728 <_svfprintf_r+0x6d8>
    b580:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b584:	f7ff b8a3 	b.w	a6ce <_svfprintf_r+0x67e>
    b588:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b58c:	f7ff b952 	b.w	a834 <_svfprintf_r+0x7e4>
    b590:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    b594:	e6a9      	b.n	b2ea <_svfprintf_r+0x129a>
    b596:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b59a:	f7fe be62 	b.w	a262 <_svfprintf_r+0x212>
    b59e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b5a2:	f7ff b862 	b.w	a66a <_svfprintf_r+0x61a>
    b5a6:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b5aa:	f7fe bf16 	b.w	a3da <_svfprintf_r+0x38a>
    b5ae:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    b5b2:	f7fe bed0 	b.w	a356 <_svfprintf_r+0x306>
    b5b6:	bf00      	nop
    b5b8:	200009d0 	.word	0x200009d0
    b5bc:	20000aa4 	.word	0x20000aa4

0000b5c0 <__utoa>:
    b5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5c2:	f8df e078 	ldr.w	lr, [pc, #120]	; b63c <__utoa+0x7c>
    b5c6:	4616      	mov	r6, r2
    b5c8:	4604      	mov	r4, r0
    b5ca:	460f      	mov	r7, r1
    b5cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    b5d0:	b08b      	sub	sp, #44	; 0x2c
    b5d2:	466d      	mov	r5, sp
    b5d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b5d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    b5da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b5dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
    b5e0:	1eb3      	subs	r3, r6, #2
    b5e2:	f845 0b04 	str.w	r0, [r5], #4
    b5e6:	2b22      	cmp	r3, #34	; 0x22
    b5e8:	7029      	strb	r1, [r5, #0]
    b5ea:	d822      	bhi.n	b632 <__utoa+0x72>
    b5ec:	1e7d      	subs	r5, r7, #1
    b5ee:	4628      	mov	r0, r5
    b5f0:	2200      	movs	r2, #0
    b5f2:	e000      	b.n	b5f6 <__utoa+0x36>
    b5f4:	461a      	mov	r2, r3
    b5f6:	fbb4 f1f6 	udiv	r1, r4, r6
    b5fa:	ab0a      	add	r3, sp, #40	; 0x28
    b5fc:	fb06 4411 	mls	r4, r6, r1, r4
    b600:	4423      	add	r3, r4
    b602:	460c      	mov	r4, r1
    b604:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    b608:	f800 3f01 	strb.w	r3, [r0, #1]!
    b60c:	1c53      	adds	r3, r2, #1
    b60e:	2900      	cmp	r1, #0
    b610:	d1f0      	bne.n	b5f4 <__utoa+0x34>
    b612:	54f9      	strb	r1, [r7, r3]
    b614:	18bb      	adds	r3, r7, r2
    b616:	b14a      	cbz	r2, b62c <__utoa+0x6c>
    b618:	7819      	ldrb	r1, [r3, #0]
    b61a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    b61e:	7029      	strb	r1, [r5, #0]
    b620:	3401      	adds	r4, #1
    b622:	1b11      	subs	r1, r2, r4
    b624:	428c      	cmp	r4, r1
    b626:	f803 0901 	strb.w	r0, [r3], #-1
    b62a:	dbf5      	blt.n	b618 <__utoa+0x58>
    b62c:	4638      	mov	r0, r7
    b62e:	b00b      	add	sp, #44	; 0x2c
    b630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b632:	2000      	movs	r0, #0
    b634:	7038      	strb	r0, [r7, #0]
    b636:	b00b      	add	sp, #44	; 0x2c
    b638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b63a:	bf00      	nop
    b63c:	20000aec 	.word	0x20000aec

0000b640 <utoa>:
    b640:	f7ff bfbe 	b.w	b5c0 <__utoa>

0000b644 <__ascii_wctomb>:
    b644:	b121      	cbz	r1, b650 <__ascii_wctomb+0xc>
    b646:	2aff      	cmp	r2, #255	; 0xff
    b648:	d804      	bhi.n	b654 <__ascii_wctomb+0x10>
    b64a:	700a      	strb	r2, [r1, #0]
    b64c:	2001      	movs	r0, #1
    b64e:	4770      	bx	lr
    b650:	4608      	mov	r0, r1
    b652:	4770      	bx	lr
    b654:	238a      	movs	r3, #138	; 0x8a
    b656:	6003      	str	r3, [r0, #0]
    b658:	f04f 30ff 	mov.w	r0, #4294967295
    b65c:	4770      	bx	lr
    b65e:	bf00      	nop

0000b660 <__register_exitproc>:
    b660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b664:	4c25      	ldr	r4, [pc, #148]	; (b6fc <__register_exitproc+0x9c>)
    b666:	6825      	ldr	r5, [r4, #0]
    b668:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    b66c:	4606      	mov	r6, r0
    b66e:	4688      	mov	r8, r1
    b670:	4692      	mov	sl, r2
    b672:	4699      	mov	r9, r3
    b674:	b3c4      	cbz	r4, b6e8 <__register_exitproc+0x88>
    b676:	6860      	ldr	r0, [r4, #4]
    b678:	281f      	cmp	r0, #31
    b67a:	dc17      	bgt.n	b6ac <__register_exitproc+0x4c>
    b67c:	1c43      	adds	r3, r0, #1
    b67e:	b176      	cbz	r6, b69e <__register_exitproc+0x3e>
    b680:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    b684:	2201      	movs	r2, #1
    b686:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    b68a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    b68e:	4082      	lsls	r2, r0
    b690:	4311      	orrs	r1, r2
    b692:	2e02      	cmp	r6, #2
    b694:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    b698:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    b69c:	d01e      	beq.n	b6dc <__register_exitproc+0x7c>
    b69e:	3002      	adds	r0, #2
    b6a0:	6063      	str	r3, [r4, #4]
    b6a2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    b6a6:	2000      	movs	r0, #0
    b6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6ac:	4b14      	ldr	r3, [pc, #80]	; (b700 <__register_exitproc+0xa0>)
    b6ae:	b303      	cbz	r3, b6f2 <__register_exitproc+0x92>
    b6b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b6b4:	f7fc fcec 	bl	8090 <malloc>
    b6b8:	4604      	mov	r4, r0
    b6ba:	b1d0      	cbz	r0, b6f2 <__register_exitproc+0x92>
    b6bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    b6c0:	2700      	movs	r7, #0
    b6c2:	e880 0088 	stmia.w	r0, {r3, r7}
    b6c6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b6ca:	4638      	mov	r0, r7
    b6cc:	2301      	movs	r3, #1
    b6ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    b6d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    b6d6:	2e00      	cmp	r6, #0
    b6d8:	d0e1      	beq.n	b69e <__register_exitproc+0x3e>
    b6da:	e7d1      	b.n	b680 <__register_exitproc+0x20>
    b6dc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    b6e0:	430a      	orrs	r2, r1
    b6e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    b6e6:	e7da      	b.n	b69e <__register_exitproc+0x3e>
    b6e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    b6ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b6f0:	e7c1      	b.n	b676 <__register_exitproc+0x16>
    b6f2:	f04f 30ff 	mov.w	r0, #4294967295
    b6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6fa:	bf00      	nop
    b6fc:	20000a18 	.word	0x20000a18
    b700:	00008091 	.word	0x00008091

0000b704 <quorem>:
    b704:	6902      	ldr	r2, [r0, #16]
    b706:	690b      	ldr	r3, [r1, #16]
    b708:	4293      	cmp	r3, r2
    b70a:	f300 808d 	bgt.w	b828 <quorem+0x124>
    b70e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b712:	f103 38ff 	add.w	r8, r3, #4294967295
    b716:	f101 0714 	add.w	r7, r1, #20
    b71a:	f100 0b14 	add.w	fp, r0, #20
    b71e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    b722:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    b726:	ea4f 0488 	mov.w	r4, r8, lsl #2
    b72a:	b083      	sub	sp, #12
    b72c:	3201      	adds	r2, #1
    b72e:	fbb3 f9f2 	udiv	r9, r3, r2
    b732:	eb0b 0304 	add.w	r3, fp, r4
    b736:	9400      	str	r4, [sp, #0]
    b738:	eb07 0a04 	add.w	sl, r7, r4
    b73c:	9301      	str	r3, [sp, #4]
    b73e:	f1b9 0f00 	cmp.w	r9, #0
    b742:	d039      	beq.n	b7b8 <quorem+0xb4>
    b744:	2500      	movs	r5, #0
    b746:	46bc      	mov	ip, r7
    b748:	46de      	mov	lr, fp
    b74a:	462b      	mov	r3, r5
    b74c:	f85c 6b04 	ldr.w	r6, [ip], #4
    b750:	f8de 2000 	ldr.w	r2, [lr]
    b754:	b2b4      	uxth	r4, r6
    b756:	fb09 5504 	mla	r5, r9, r4, r5
    b75a:	0c36      	lsrs	r6, r6, #16
    b75c:	0c2c      	lsrs	r4, r5, #16
    b75e:	fb09 4406 	mla	r4, r9, r6, r4
    b762:	b2ad      	uxth	r5, r5
    b764:	1b5b      	subs	r3, r3, r5
    b766:	b2a6      	uxth	r6, r4
    b768:	fa13 f382 	uxtah	r3, r3, r2
    b76c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    b770:	eb06 4623 	add.w	r6, r6, r3, asr #16
    b774:	b29b      	uxth	r3, r3
    b776:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    b77a:	45e2      	cmp	sl, ip
    b77c:	f84e 3b04 	str.w	r3, [lr], #4
    b780:	ea4f 4514 	mov.w	r5, r4, lsr #16
    b784:	ea4f 4326 	mov.w	r3, r6, asr #16
    b788:	d2e0      	bcs.n	b74c <quorem+0x48>
    b78a:	9b00      	ldr	r3, [sp, #0]
    b78c:	f85b 3003 	ldr.w	r3, [fp, r3]
    b790:	b993      	cbnz	r3, b7b8 <quorem+0xb4>
    b792:	9c01      	ldr	r4, [sp, #4]
    b794:	1f23      	subs	r3, r4, #4
    b796:	459b      	cmp	fp, r3
    b798:	d20c      	bcs.n	b7b4 <quorem+0xb0>
    b79a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b79e:	b94b      	cbnz	r3, b7b4 <quorem+0xb0>
    b7a0:	f1a4 0308 	sub.w	r3, r4, #8
    b7a4:	e002      	b.n	b7ac <quorem+0xa8>
    b7a6:	681a      	ldr	r2, [r3, #0]
    b7a8:	3b04      	subs	r3, #4
    b7aa:	b91a      	cbnz	r2, b7b4 <quorem+0xb0>
    b7ac:	459b      	cmp	fp, r3
    b7ae:	f108 38ff 	add.w	r8, r8, #4294967295
    b7b2:	d3f8      	bcc.n	b7a6 <quorem+0xa2>
    b7b4:	f8c0 8010 	str.w	r8, [r0, #16]
    b7b8:	4604      	mov	r4, r0
    b7ba:	f001 fe1d 	bl	d3f8 <__mcmp>
    b7be:	2800      	cmp	r0, #0
    b7c0:	db2e      	blt.n	b820 <quorem+0x11c>
    b7c2:	f109 0901 	add.w	r9, r9, #1
    b7c6:	465d      	mov	r5, fp
    b7c8:	2300      	movs	r3, #0
    b7ca:	f857 1b04 	ldr.w	r1, [r7], #4
    b7ce:	6828      	ldr	r0, [r5, #0]
    b7d0:	b28a      	uxth	r2, r1
    b7d2:	1a9a      	subs	r2, r3, r2
    b7d4:	0c09      	lsrs	r1, r1, #16
    b7d6:	fa12 f280 	uxtah	r2, r2, r0
    b7da:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    b7de:	eb03 4322 	add.w	r3, r3, r2, asr #16
    b7e2:	b291      	uxth	r1, r2
    b7e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    b7e8:	45ba      	cmp	sl, r7
    b7ea:	f845 1b04 	str.w	r1, [r5], #4
    b7ee:	ea4f 4323 	mov.w	r3, r3, asr #16
    b7f2:	d2ea      	bcs.n	b7ca <quorem+0xc6>
    b7f4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    b7f8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    b7fc:	b982      	cbnz	r2, b820 <quorem+0x11c>
    b7fe:	1f1a      	subs	r2, r3, #4
    b800:	4593      	cmp	fp, r2
    b802:	d20b      	bcs.n	b81c <quorem+0x118>
    b804:	f853 2c04 	ldr.w	r2, [r3, #-4]
    b808:	b942      	cbnz	r2, b81c <quorem+0x118>
    b80a:	3b08      	subs	r3, #8
    b80c:	e002      	b.n	b814 <quorem+0x110>
    b80e:	681a      	ldr	r2, [r3, #0]
    b810:	3b04      	subs	r3, #4
    b812:	b91a      	cbnz	r2, b81c <quorem+0x118>
    b814:	459b      	cmp	fp, r3
    b816:	f108 38ff 	add.w	r8, r8, #4294967295
    b81a:	d3f8      	bcc.n	b80e <quorem+0x10a>
    b81c:	f8c4 8010 	str.w	r8, [r4, #16]
    b820:	4648      	mov	r0, r9
    b822:	b003      	add	sp, #12
    b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b828:	2000      	movs	r0, #0
    b82a:	4770      	bx	lr
    b82c:	0000      	movs	r0, r0
	...

0000b830 <_dtoa_r>:
    b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b834:	ec57 6b10 	vmov	r6, r7, d0
    b838:	b093      	sub	sp, #76	; 0x4c
    b83a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b83c:	9101      	str	r1, [sp, #4]
    b83e:	4604      	mov	r4, r0
    b840:	4690      	mov	r8, r2
    b842:	9304      	str	r3, [sp, #16]
    b844:	ee10 aa10 	vmov	sl, s0
    b848:	46bb      	mov	fp, r7
    b84a:	b14d      	cbz	r5, b860 <_dtoa_r+0x30>
    b84c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    b84e:	606a      	str	r2, [r5, #4]
    b850:	2301      	movs	r3, #1
    b852:	4093      	lsls	r3, r2
    b854:	60ab      	str	r3, [r5, #8]
    b856:	4629      	mov	r1, r5
    b858:	f001 fba0 	bl	cf9c <_Bfree>
    b85c:	2300      	movs	r3, #0
    b85e:	6423      	str	r3, [r4, #64]	; 0x40
    b860:	f1bb 0f00 	cmp.w	fp, #0
    b864:	465e      	mov	r6, fp
    b866:	db34      	blt.n	b8d2 <_dtoa_r+0xa2>
    b868:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b86a:	2300      	movs	r3, #0
    b86c:	6013      	str	r3, [r2, #0]
    b86e:	4bc4      	ldr	r3, [pc, #784]	; (bb80 <_dtoa_r+0x350>)
    b870:	461a      	mov	r2, r3
    b872:	4033      	ands	r3, r6
    b874:	4293      	cmp	r3, r2
    b876:	d015      	beq.n	b8a4 <_dtoa_r+0x74>
    b878:	ec4b ab17 	vmov	d7, sl, fp
    b87c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b884:	e9cd ab02 	strd	sl, fp, [sp, #8]
    b888:	d12a      	bne.n	b8e0 <_dtoa_r+0xb0>
    b88a:	9a04      	ldr	r2, [sp, #16]
    b88c:	2301      	movs	r3, #1
    b88e:	6013      	str	r3, [r2, #0]
    b890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b892:	2b00      	cmp	r3, #0
    b894:	f000 80b7 	beq.w	ba06 <_dtoa_r+0x1d6>
    b898:	48ba      	ldr	r0, [pc, #744]	; (bb84 <_dtoa_r+0x354>)
    b89a:	6018      	str	r0, [r3, #0]
    b89c:	3801      	subs	r0, #1
    b89e:	b013      	add	sp, #76	; 0x4c
    b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8a4:	9a04      	ldr	r2, [sp, #16]
    b8a6:	f242 730f 	movw	r3, #9999	; 0x270f
    b8aa:	6013      	str	r3, [r2, #0]
    b8ac:	f1ba 0f00 	cmp.w	sl, #0
    b8b0:	f000 8092 	beq.w	b9d8 <_dtoa_r+0x1a8>
    b8b4:	48b4      	ldr	r0, [pc, #720]	; (bb88 <_dtoa_r+0x358>)
    b8b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b8b8:	2b00      	cmp	r3, #0
    b8ba:	d0f0      	beq.n	b89e <_dtoa_r+0x6e>
    b8bc:	78c3      	ldrb	r3, [r0, #3]
    b8be:	2b00      	cmp	r3, #0
    b8c0:	f000 80a3 	beq.w	ba0a <_dtoa_r+0x1da>
    b8c4:	f100 0308 	add.w	r3, r0, #8
    b8c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    b8ca:	6013      	str	r3, [r2, #0]
    b8cc:	b013      	add	sp, #76	; 0x4c
    b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b8d4:	2301      	movs	r3, #1
    b8d6:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    b8da:	6013      	str	r3, [r2, #0]
    b8dc:	46b3      	mov	fp, r6
    b8de:	e7c6      	b.n	b86e <_dtoa_r+0x3e>
    b8e0:	a911      	add	r1, sp, #68	; 0x44
    b8e2:	aa10      	add	r2, sp, #64	; 0x40
    b8e4:	ed9d 0b02 	vldr	d0, [sp, #8]
    b8e8:	4620      	mov	r0, r4
    b8ea:	f001 fec3 	bl	d674 <__d2b>
    b8ee:	0d31      	lsrs	r1, r6, #20
    b8f0:	9007      	str	r0, [sp, #28]
    b8f2:	d17a      	bne.n	b9ea <_dtoa_r+0x1ba>
    b8f4:	9810      	ldr	r0, [sp, #64]	; 0x40
    b8f6:	9911      	ldr	r1, [sp, #68]	; 0x44
    b8f8:	4401      	add	r1, r0
    b8fa:	f201 4332 	addw	r3, r1, #1074	; 0x432
    b8fe:	2b20      	cmp	r3, #32
    b900:	f340 8241 	ble.w	bd86 <_dtoa_r+0x556>
    b904:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    b908:	f201 4212 	addw	r2, r1, #1042	; 0x412
    b90c:	409e      	lsls	r6, r3
    b90e:	fa2a f302 	lsr.w	r3, sl, r2
    b912:	4333      	orrs	r3, r6
    b914:	ee07 3a90 	vmov	s15, r3
    b918:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    b91c:	2501      	movs	r5, #1
    b91e:	ec53 2b17 	vmov	r2, r3, d7
    b922:	3901      	subs	r1, #1
    b924:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    b928:	950a      	str	r5, [sp, #40]	; 0x28
    b92a:	ec43 2b17 	vmov	d7, r2, r3
    b92e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    b932:	ed9f 4b8d 	vldr	d4, [pc, #564]	; bb68 <_dtoa_r+0x338>
    b936:	ee37 6b46 	vsub.f64	d6, d7, d6
    b93a:	ed9f 7b8d 	vldr	d7, [pc, #564]	; bb70 <_dtoa_r+0x340>
    b93e:	ed9f 5b8e 	vldr	d5, [pc, #568]	; bb78 <_dtoa_r+0x348>
    b942:	eea6 7b04 	vfma.f64	d7, d6, d4
    b946:	ee06 1a90 	vmov	s13, r1
    b94a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    b94e:	eea6 7b05 	vfma.f64	d7, d6, d5
    b952:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b956:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b95e:	edcd 6a02 	vstr	s13, [sp, #8]
    b962:	f100 811c 	bmi.w	bb9e <_dtoa_r+0x36e>
    b966:	9d02      	ldr	r5, [sp, #8]
    b968:	2d16      	cmp	r5, #22
    b96a:	f200 8115 	bhi.w	bb98 <_dtoa_r+0x368>
    b96e:	4b87      	ldr	r3, [pc, #540]	; (bb8c <_dtoa_r+0x35c>)
    b970:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    b974:	ed93 7b00 	vldr	d7, [r3]
    b978:	ec4b ab16 	vmov	d6, sl, fp
    b97c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b984:	f340 8206 	ble.w	bd94 <_dtoa_r+0x564>
    b988:	1e6b      	subs	r3, r5, #1
    b98a:	9302      	str	r3, [sp, #8]
    b98c:	2300      	movs	r3, #0
    b98e:	930c      	str	r3, [sp, #48]	; 0x30
    b990:	1a41      	subs	r1, r0, r1
    b992:	f1b1 0901 	subs.w	r9, r1, #1
    b996:	f100 8117 	bmi.w	bbc8 <_dtoa_r+0x398>
    b99a:	2300      	movs	r3, #0
    b99c:	9306      	str	r3, [sp, #24]
    b99e:	9b02      	ldr	r3, [sp, #8]
    b9a0:	2b00      	cmp	r3, #0
    b9a2:	f2c0 8108 	blt.w	bbb6 <_dtoa_r+0x386>
    b9a6:	4499      	add	r9, r3
    b9a8:	930b      	str	r3, [sp, #44]	; 0x2c
    b9aa:	2300      	movs	r3, #0
    b9ac:	9305      	str	r3, [sp, #20]
    b9ae:	9b01      	ldr	r3, [sp, #4]
    b9b0:	2b09      	cmp	r3, #9
    b9b2:	d82c      	bhi.n	ba0e <_dtoa_r+0x1de>
    b9b4:	2b05      	cmp	r3, #5
    b9b6:	f340 855f 	ble.w	c478 <_dtoa_r+0xc48>
    b9ba:	3b04      	subs	r3, #4
    b9bc:	9301      	str	r3, [sp, #4]
    b9be:	2300      	movs	r3, #0
    b9c0:	930e      	str	r3, [sp, #56]	; 0x38
    b9c2:	9b01      	ldr	r3, [sp, #4]
    b9c4:	3b02      	subs	r3, #2
    b9c6:	2b03      	cmp	r3, #3
    b9c8:	f200 855f 	bhi.w	c48a <_dtoa_r+0xc5a>
    b9cc:	e8df f013 	tbh	[pc, r3, lsl #1]
    b9d0:	01e502a9 	.word	0x01e502a9
    b9d4:	03c802b5 	.word	0x03c802b5
    b9d8:	4b6b      	ldr	r3, [pc, #428]	; (bb88 <_dtoa_r+0x358>)
    b9da:	4a6d      	ldr	r2, [pc, #436]	; (bb90 <_dtoa_r+0x360>)
    b9dc:	f3c6 0013 	ubfx	r0, r6, #0, #20
    b9e0:	2800      	cmp	r0, #0
    b9e2:	bf14      	ite	ne
    b9e4:	4618      	movne	r0, r3
    b9e6:	4610      	moveq	r0, r2
    b9e8:	e765      	b.n	b8b6 <_dtoa_r+0x86>
    b9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b9ee:	f3c3 0013 	ubfx	r0, r3, #0, #20
    b9f2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    b9f6:	2500      	movs	r5, #0
    b9f8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    b9fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ba00:	9810      	ldr	r0, [sp, #64]	; 0x40
    ba02:	950a      	str	r5, [sp, #40]	; 0x28
    ba04:	e791      	b.n	b92a <_dtoa_r+0xfa>
    ba06:	4863      	ldr	r0, [pc, #396]	; (bb94 <_dtoa_r+0x364>)
    ba08:	e749      	b.n	b89e <_dtoa_r+0x6e>
    ba0a:	1cc3      	adds	r3, r0, #3
    ba0c:	e75c      	b.n	b8c8 <_dtoa_r+0x98>
    ba0e:	2100      	movs	r1, #0
    ba10:	6461      	str	r1, [r4, #68]	; 0x44
    ba12:	4620      	mov	r0, r4
    ba14:	4688      	mov	r8, r1
    ba16:	9101      	str	r1, [sp, #4]
    ba18:	f001 fa9a 	bl	cf50 <_Balloc>
    ba1c:	f04f 37ff 	mov.w	r7, #4294967295
    ba20:	2301      	movs	r3, #1
    ba22:	9008      	str	r0, [sp, #32]
    ba24:	6420      	str	r0, [r4, #64]	; 0x40
    ba26:	970d      	str	r7, [sp, #52]	; 0x34
    ba28:	9309      	str	r3, [sp, #36]	; 0x24
    ba2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba2c:	2b00      	cmp	r3, #0
    ba2e:	db7a      	blt.n	bb26 <_dtoa_r+0x2f6>
    ba30:	9a02      	ldr	r2, [sp, #8]
    ba32:	2a0e      	cmp	r2, #14
    ba34:	dc77      	bgt.n	bb26 <_dtoa_r+0x2f6>
    ba36:	4b55      	ldr	r3, [pc, #340]	; (bb8c <_dtoa_r+0x35c>)
    ba38:	f1b8 0f00 	cmp.w	r8, #0
    ba3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ba40:	ed93 4b00 	vldr	d4, [r3]
    ba44:	f2c0 8284 	blt.w	bf50 <_dtoa_r+0x720>
    ba48:	eeb1 2b44 	vneg.f64	d2, d4
    ba4c:	ec4b ab17 	vmov	d7, sl, fp
    ba50:	ee87 6b04 	vdiv.f64	d6, d7, d4
    ba54:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    ba58:	9a08      	ldr	r2, [sp, #32]
    ba5a:	ee16 3a10 	vmov	r3, s12
    ba5e:	2f01      	cmp	r7, #1
    ba60:	f103 0330 	add.w	r3, r3, #48	; 0x30
    ba64:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    ba68:	f102 0b01 	add.w	fp, r2, #1
    ba6c:	7013      	strb	r3, [r2, #0]
    ba6e:	eea2 7b05 	vfma.f64	d7, d2, d5
    ba72:	d022      	beq.n	baba <_dtoa_r+0x28a>
    ba74:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    ba78:	ee27 7b03 	vmul.f64	d7, d7, d3
    ba7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ba84:	d03a      	beq.n	bafc <_dtoa_r+0x2cc>
    ba86:	9a08      	ldr	r2, [sp, #32]
    ba88:	e006      	b.n	ba98 <_dtoa_r+0x268>
    ba8a:	ee27 7b03 	vmul.f64	d7, d7, d3
    ba8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
    ba92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ba96:	d031      	beq.n	bafc <_dtoa_r+0x2cc>
    ba98:	ee87 6b04 	vdiv.f64	d6, d7, d4
    ba9c:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    baa0:	ee16 3a10 	vmov	r3, s12
    baa4:	3330      	adds	r3, #48	; 0x30
    baa6:	f80b 3b01 	strb.w	r3, [fp], #1
    baaa:	ebc2 030b 	rsb	r3, r2, fp
    baae:	42bb      	cmp	r3, r7
    bab0:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    bab4:	eea2 7b05 	vfma.f64	d7, d2, d5
    bab8:	d1e7      	bne.n	ba8a <_dtoa_r+0x25a>
    baba:	ee37 7b07 	vadd.f64	d7, d7, d7
    babe:	eeb4 4bc7 	vcmpe.f64	d4, d7
    bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bac6:	d408      	bmi.n	bada <_dtoa_r+0x2aa>
    bac8:	eeb4 4b47 	vcmp.f64	d4, d7
    bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bad0:	d114      	bne.n	bafc <_dtoa_r+0x2cc>
    bad2:	ee16 3a10 	vmov	r3, s12
    bad6:	07db      	lsls	r3, r3, #31
    bad8:	d510      	bpl.n	bafc <_dtoa_r+0x2cc>
    bada:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    bade:	9a08      	ldr	r2, [sp, #32]
    bae0:	f10b 33ff 	add.w	r3, fp, #4294967295
    bae4:	e004      	b.n	baf0 <_dtoa_r+0x2c0>
    bae6:	429a      	cmp	r2, r3
    bae8:	f000 83e5 	beq.w	c2b6 <_dtoa_r+0xa86>
    baec:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    baf0:	2839      	cmp	r0, #57	; 0x39
    baf2:	f103 0b01 	add.w	fp, r3, #1
    baf6:	d0f6      	beq.n	bae6 <_dtoa_r+0x2b6>
    baf8:	3001      	adds	r0, #1
    bafa:	7018      	strb	r0, [r3, #0]
    bafc:	9907      	ldr	r1, [sp, #28]
    bafe:	4620      	mov	r0, r4
    bb00:	f001 fa4c 	bl	cf9c <_Bfree>
    bb04:	2200      	movs	r2, #0
    bb06:	9b02      	ldr	r3, [sp, #8]
    bb08:	f88b 2000 	strb.w	r2, [fp]
    bb0c:	9a04      	ldr	r2, [sp, #16]
    bb0e:	3301      	adds	r3, #1
    bb10:	6013      	str	r3, [r2, #0]
    bb12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    bb14:	2b00      	cmp	r3, #0
    bb16:	f000 8366 	beq.w	c1e6 <_dtoa_r+0x9b6>
    bb1a:	9808      	ldr	r0, [sp, #32]
    bb1c:	f8c3 b000 	str.w	fp, [r3]
    bb20:	b013      	add	sp, #76	; 0x4c
    bb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb28:	2a00      	cmp	r2, #0
    bb2a:	d053      	beq.n	bbd4 <_dtoa_r+0x3a4>
    bb2c:	9a01      	ldr	r2, [sp, #4]
    bb2e:	2a01      	cmp	r2, #1
    bb30:	f340 822e 	ble.w	bf90 <_dtoa_r+0x760>
    bb34:	9905      	ldr	r1, [sp, #20]
    bb36:	1e7a      	subs	r2, r7, #1
    bb38:	4291      	cmp	r1, r2
    bb3a:	f2c0 8357 	blt.w	c1ec <_dtoa_r+0x9bc>
    bb3e:	1a8b      	subs	r3, r1, r2
    bb40:	930e      	str	r3, [sp, #56]	; 0x38
    bb42:	2f00      	cmp	r7, #0
    bb44:	9b06      	ldr	r3, [sp, #24]
    bb46:	f2c0 8424 	blt.w	c392 <_dtoa_r+0xb62>
    bb4a:	930a      	str	r3, [sp, #40]	; 0x28
    bb4c:	463b      	mov	r3, r7
    bb4e:	9a06      	ldr	r2, [sp, #24]
    bb50:	2101      	movs	r1, #1
    bb52:	441a      	add	r2, r3
    bb54:	4620      	mov	r0, r4
    bb56:	9206      	str	r2, [sp, #24]
    bb58:	4499      	add	r9, r3
    bb5a:	f001 fb03 	bl	d164 <__i2b>
    bb5e:	4606      	mov	r6, r0
    bb60:	e03d      	b.n	bbde <_dtoa_r+0x3ae>
    bb62:	bf00      	nop
    bb64:	f3af 8000 	nop.w
    bb68:	636f4361 	.word	0x636f4361
    bb6c:	3fd287a7 	.word	0x3fd287a7
    bb70:	8b60c8b3 	.word	0x8b60c8b3
    bb74:	3fc68a28 	.word	0x3fc68a28
    bb78:	509f79fb 	.word	0x509f79fb
    bb7c:	3fd34413 	.word	0x3fd34413
    bb80:	7ff00000 	.word	0x7ff00000
    bb84:	20000ad9 	.word	0x20000ad9
    bb88:	20000c24 	.word	0x20000c24
    bb8c:	20000d28 	.word	0x20000d28
    bb90:	20000c18 	.word	0x20000c18
    bb94:	20000ad8 	.word	0x20000ad8
    bb98:	2301      	movs	r3, #1
    bb9a:	930c      	str	r3, [sp, #48]	; 0x30
    bb9c:	e6f8      	b.n	b990 <_dtoa_r+0x160>
    bb9e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    bba2:	eeb4 7b46 	vcmp.f64	d7, d6
    bba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bbaa:	f43f aedc 	beq.w	b966 <_dtoa_r+0x136>
    bbae:	9b02      	ldr	r3, [sp, #8]
    bbb0:	3b01      	subs	r3, #1
    bbb2:	9302      	str	r3, [sp, #8]
    bbb4:	e6d7      	b.n	b966 <_dtoa_r+0x136>
    bbb6:	9a06      	ldr	r2, [sp, #24]
    bbb8:	9b02      	ldr	r3, [sp, #8]
    bbba:	1ad2      	subs	r2, r2, r3
    bbbc:	425b      	negs	r3, r3
    bbbe:	9305      	str	r3, [sp, #20]
    bbc0:	2300      	movs	r3, #0
    bbc2:	9206      	str	r2, [sp, #24]
    bbc4:	930b      	str	r3, [sp, #44]	; 0x2c
    bbc6:	e6f2      	b.n	b9ae <_dtoa_r+0x17e>
    bbc8:	f1c9 0300 	rsb	r3, r9, #0
    bbcc:	9306      	str	r3, [sp, #24]
    bbce:	f04f 0900 	mov.w	r9, #0
    bbd2:	e6e4      	b.n	b99e <_dtoa_r+0x16e>
    bbd4:	9b05      	ldr	r3, [sp, #20]
    bbd6:	930e      	str	r3, [sp, #56]	; 0x38
    bbd8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    bbda:	9b06      	ldr	r3, [sp, #24]
    bbdc:	930a      	str	r3, [sp, #40]	; 0x28
    bbde:	990a      	ldr	r1, [sp, #40]	; 0x28
    bbe0:	460b      	mov	r3, r1
    bbe2:	b161      	cbz	r1, bbfe <_dtoa_r+0x3ce>
    bbe4:	f1b9 0f00 	cmp.w	r9, #0
    bbe8:	dd09      	ble.n	bbfe <_dtoa_r+0x3ce>
    bbea:	4549      	cmp	r1, r9
    bbec:	9a06      	ldr	r2, [sp, #24]
    bbee:	bfa8      	it	ge
    bbf0:	464b      	movge	r3, r9
    bbf2:	1ad2      	subs	r2, r2, r3
    bbf4:	9206      	str	r2, [sp, #24]
    bbf6:	1aca      	subs	r2, r1, r3
    bbf8:	920a      	str	r2, [sp, #40]	; 0x28
    bbfa:	ebc3 0909 	rsb	r9, r3, r9
    bbfe:	9b05      	ldr	r3, [sp, #20]
    bc00:	2b00      	cmp	r3, #0
    bc02:	f340 8280 	ble.w	c106 <_dtoa_r+0x8d6>
    bc06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bc08:	2a00      	cmp	r2, #0
    bc0a:	f000 819a 	beq.w	bf42 <_dtoa_r+0x712>
    bc0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bc10:	2a00      	cmp	r2, #0
    bc12:	f000 8196 	beq.w	bf42 <_dtoa_r+0x712>
    bc16:	4631      	mov	r1, r6
    bc18:	4620      	mov	r0, r4
    bc1a:	f001 fb45 	bl	d2a8 <__pow5mult>
    bc1e:	9a07      	ldr	r2, [sp, #28]
    bc20:	4601      	mov	r1, r0
    bc22:	4606      	mov	r6, r0
    bc24:	4620      	mov	r0, r4
    bc26:	f001 faa7 	bl	d178 <__multiply>
    bc2a:	9907      	ldr	r1, [sp, #28]
    bc2c:	4605      	mov	r5, r0
    bc2e:	4620      	mov	r0, r4
    bc30:	f001 f9b4 	bl	cf9c <_Bfree>
    bc34:	9b05      	ldr	r3, [sp, #20]
    bc36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bc38:	1a9b      	subs	r3, r3, r2
    bc3a:	9305      	str	r3, [sp, #20]
    bc3c:	f040 8180 	bne.w	bf40 <_dtoa_r+0x710>
    bc40:	2101      	movs	r1, #1
    bc42:	4620      	mov	r0, r4
    bc44:	f001 fa8e 	bl	d164 <__i2b>
    bc48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc4a:	9005      	str	r0, [sp, #20]
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	f000 81ac 	beq.w	bfaa <_dtoa_r+0x77a>
    bc52:	4601      	mov	r1, r0
    bc54:	461a      	mov	r2, r3
    bc56:	4620      	mov	r0, r4
    bc58:	f001 fb26 	bl	d2a8 <__pow5mult>
    bc5c:	9b01      	ldr	r3, [sp, #4]
    bc5e:	9005      	str	r0, [sp, #20]
    bc60:	2b01      	cmp	r3, #1
    bc62:	f340 8280 	ble.w	c166 <_dtoa_r+0x936>
    bc66:	2300      	movs	r3, #0
    bc68:	9307      	str	r3, [sp, #28]
    bc6a:	9a05      	ldr	r2, [sp, #20]
    bc6c:	6913      	ldr	r3, [r2, #16]
    bc6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bc72:	6918      	ldr	r0, [r3, #16]
    bc74:	f001 fa28 	bl	d0c8 <__hi0bits>
    bc78:	f1c0 0020 	rsb	r0, r0, #32
    bc7c:	4448      	add	r0, r9
    bc7e:	f010 001f 	ands.w	r0, r0, #31
    bc82:	f000 8190 	beq.w	bfa6 <_dtoa_r+0x776>
    bc86:	f1c0 0320 	rsb	r3, r0, #32
    bc8a:	2b04      	cmp	r3, #4
    bc8c:	f340 83f8 	ble.w	c480 <_dtoa_r+0xc50>
    bc90:	f1c0 001c 	rsb	r0, r0, #28
    bc94:	9b06      	ldr	r3, [sp, #24]
    bc96:	4403      	add	r3, r0
    bc98:	9306      	str	r3, [sp, #24]
    bc9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bc9c:	4403      	add	r3, r0
    bc9e:	930a      	str	r3, [sp, #40]	; 0x28
    bca0:	4481      	add	r9, r0
    bca2:	9b06      	ldr	r3, [sp, #24]
    bca4:	2b00      	cmp	r3, #0
    bca6:	dd05      	ble.n	bcb4 <_dtoa_r+0x484>
    bca8:	4629      	mov	r1, r5
    bcaa:	461a      	mov	r2, r3
    bcac:	4620      	mov	r0, r4
    bcae:	f001 fb4b 	bl	d348 <__lshift>
    bcb2:	4605      	mov	r5, r0
    bcb4:	f1b9 0f00 	cmp.w	r9, #0
    bcb8:	dd05      	ble.n	bcc6 <_dtoa_r+0x496>
    bcba:	464a      	mov	r2, r9
    bcbc:	9905      	ldr	r1, [sp, #20]
    bcbe:	4620      	mov	r0, r4
    bcc0:	f001 fb42 	bl	d348 <__lshift>
    bcc4:	9005      	str	r0, [sp, #20]
    bcc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bcc8:	2b00      	cmp	r3, #0
    bcca:	f040 8201 	bne.w	c0d0 <_dtoa_r+0x8a0>
    bcce:	2f00      	cmp	r7, #0
    bcd0:	f340 8220 	ble.w	c114 <_dtoa_r+0x8e4>
    bcd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bcd6:	2b00      	cmp	r3, #0
    bcd8:	f040 817b 	bne.w	bfd2 <_dtoa_r+0x7a2>
    bcdc:	f8dd b020 	ldr.w	fp, [sp, #32]
    bce0:	f8dd a014 	ldr.w	sl, [sp, #20]
    bce4:	46d8      	mov	r8, fp
    bce6:	e002      	b.n	bcee <_dtoa_r+0x4be>
    bce8:	f001 f962 	bl	cfb0 <__multadd>
    bcec:	4605      	mov	r5, r0
    bcee:	4651      	mov	r1, sl
    bcf0:	4628      	mov	r0, r5
    bcf2:	f7ff fd07 	bl	b704 <quorem>
    bcf6:	f100 0930 	add.w	r9, r0, #48	; 0x30
    bcfa:	f808 9b01 	strb.w	r9, [r8], #1
    bcfe:	ebcb 0308 	rsb	r3, fp, r8
    bd02:	42bb      	cmp	r3, r7
    bd04:	f04f 020a 	mov.w	r2, #10
    bd08:	f04f 0300 	mov.w	r3, #0
    bd0c:	4629      	mov	r1, r5
    bd0e:	4620      	mov	r0, r4
    bd10:	dbea      	blt.n	bce8 <_dtoa_r+0x4b8>
    bd12:	9b08      	ldr	r3, [sp, #32]
    bd14:	2f01      	cmp	r7, #1
    bd16:	bfac      	ite	ge
    bd18:	19db      	addge	r3, r3, r7
    bd1a:	3301      	addlt	r3, #1
    bd1c:	469b      	mov	fp, r3
    bd1e:	f04f 0a00 	mov.w	sl, #0
    bd22:	4629      	mov	r1, r5
    bd24:	2201      	movs	r2, #1
    bd26:	4620      	mov	r0, r4
    bd28:	f001 fb0e 	bl	d348 <__lshift>
    bd2c:	9905      	ldr	r1, [sp, #20]
    bd2e:	9007      	str	r0, [sp, #28]
    bd30:	f001 fb62 	bl	d3f8 <__mcmp>
    bd34:	2800      	cmp	r0, #0
    bd36:	f340 828c 	ble.w	c252 <_dtoa_r+0xa22>
    bd3a:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    bd3e:	9908      	ldr	r1, [sp, #32]
    bd40:	f10b 33ff 	add.w	r3, fp, #4294967295
    bd44:	e004      	b.n	bd50 <_dtoa_r+0x520>
    bd46:	428b      	cmp	r3, r1
    bd48:	f000 8203 	beq.w	c152 <_dtoa_r+0x922>
    bd4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    bd50:	2a39      	cmp	r2, #57	; 0x39
    bd52:	f103 0b01 	add.w	fp, r3, #1
    bd56:	d0f6      	beq.n	bd46 <_dtoa_r+0x516>
    bd58:	3201      	adds	r2, #1
    bd5a:	701a      	strb	r2, [r3, #0]
    bd5c:	9905      	ldr	r1, [sp, #20]
    bd5e:	4620      	mov	r0, r4
    bd60:	f001 f91c 	bl	cf9c <_Bfree>
    bd64:	2e00      	cmp	r6, #0
    bd66:	f43f aec9 	beq.w	bafc <_dtoa_r+0x2cc>
    bd6a:	f1ba 0f00 	cmp.w	sl, #0
    bd6e:	d005      	beq.n	bd7c <_dtoa_r+0x54c>
    bd70:	45b2      	cmp	sl, r6
    bd72:	d003      	beq.n	bd7c <_dtoa_r+0x54c>
    bd74:	4651      	mov	r1, sl
    bd76:	4620      	mov	r0, r4
    bd78:	f001 f910 	bl	cf9c <_Bfree>
    bd7c:	4631      	mov	r1, r6
    bd7e:	4620      	mov	r0, r4
    bd80:	f001 f90c 	bl	cf9c <_Bfree>
    bd84:	e6ba      	b.n	bafc <_dtoa_r+0x2cc>
    bd86:	f1c3 0320 	rsb	r3, r3, #32
    bd8a:	fa0a f303 	lsl.w	r3, sl, r3
    bd8e:	ee07 3a90 	vmov	s15, r3
    bd92:	e5c1      	b.n	b918 <_dtoa_r+0xe8>
    bd94:	2300      	movs	r3, #0
    bd96:	930c      	str	r3, [sp, #48]	; 0x30
    bd98:	e5fa      	b.n	b990 <_dtoa_r+0x160>
    bd9a:	2300      	movs	r3, #0
    bd9c:	9309      	str	r3, [sp, #36]	; 0x24
    bd9e:	9b02      	ldr	r3, [sp, #8]
    bda0:	4443      	add	r3, r8
    bda2:	1c5f      	adds	r7, r3, #1
    bda4:	2f00      	cmp	r7, #0
    bda6:	930d      	str	r3, [sp, #52]	; 0x34
    bda8:	f340 822d 	ble.w	c206 <_dtoa_r+0x9d6>
    bdac:	463e      	mov	r6, r7
    bdae:	463d      	mov	r5, r7
    bdb0:	2100      	movs	r1, #0
    bdb2:	2e17      	cmp	r6, #23
    bdb4:	6461      	str	r1, [r4, #68]	; 0x44
    bdb6:	d90a      	bls.n	bdce <_dtoa_r+0x59e>
    bdb8:	2201      	movs	r2, #1
    bdba:	2304      	movs	r3, #4
    bdbc:	005b      	lsls	r3, r3, #1
    bdbe:	f103 0014 	add.w	r0, r3, #20
    bdc2:	42b0      	cmp	r0, r6
    bdc4:	4611      	mov	r1, r2
    bdc6:	f102 0201 	add.w	r2, r2, #1
    bdca:	d9f7      	bls.n	bdbc <_dtoa_r+0x58c>
    bdcc:	6461      	str	r1, [r4, #68]	; 0x44
    bdce:	4620      	mov	r0, r4
    bdd0:	f001 f8be 	bl	cf50 <_Balloc>
    bdd4:	2d0e      	cmp	r5, #14
    bdd6:	9008      	str	r0, [sp, #32]
    bdd8:	6420      	str	r0, [r4, #64]	; 0x40
    bdda:	f63f ae26 	bhi.w	ba2a <_dtoa_r+0x1fa>
    bdde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bde0:	2b00      	cmp	r3, #0
    bde2:	f43f ae22 	beq.w	ba2a <_dtoa_r+0x1fa>
    bde6:	9902      	ldr	r1, [sp, #8]
    bde8:	2900      	cmp	r1, #0
    bdea:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    bdee:	f340 8241 	ble.w	c274 <_dtoa_r+0xa44>
    bdf2:	4bc6      	ldr	r3, [pc, #792]	; (c10c <_dtoa_r+0x8dc>)
    bdf4:	f001 020f 	and.w	r2, r1, #15
    bdf8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    bdfc:	110b      	asrs	r3, r1, #4
    bdfe:	06de      	lsls	r6, r3, #27
    be00:	ed92 6b00 	vldr	d6, [r2]
    be04:	f140 81fb 	bpl.w	c1fe <_dtoa_r+0x9ce>
    be08:	4ac1      	ldr	r2, [pc, #772]	; (c110 <_dtoa_r+0x8e0>)
    be0a:	ed92 7b08 	vldr	d7, [r2, #32]
    be0e:	ec4b ab14 	vmov	d4, sl, fp
    be12:	f003 030f 	and.w	r3, r3, #15
    be16:	2103      	movs	r1, #3
    be18:	ee84 5b07 	vdiv.f64	d5, d4, d7
    be1c:	b15b      	cbz	r3, be36 <_dtoa_r+0x606>
    be1e:	4abc      	ldr	r2, [pc, #752]	; (c110 <_dtoa_r+0x8e0>)
    be20:	07dd      	lsls	r5, r3, #31
    be22:	d504      	bpl.n	be2e <_dtoa_r+0x5fe>
    be24:	ed92 7b00 	vldr	d7, [r2]
    be28:	3101      	adds	r1, #1
    be2a:	ee26 6b07 	vmul.f64	d6, d6, d7
    be2e:	105b      	asrs	r3, r3, #1
    be30:	f102 0208 	add.w	r2, r2, #8
    be34:	d1f4      	bne.n	be20 <_dtoa_r+0x5f0>
    be36:	ee85 4b06 	vdiv.f64	d4, d5, d6
    be3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be3c:	b13b      	cbz	r3, be4e <_dtoa_r+0x61e>
    be3e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    be42:	eeb4 4bc7 	vcmpe.f64	d4, d7
    be46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    be4a:	f100 82b7 	bmi.w	c3bc <_dtoa_r+0xb8c>
    be4e:	ee07 1a90 	vmov	s15, r1
    be52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    be56:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    be5a:	eea6 7b04 	vfma.f64	d7, d6, d4
    be5e:	ec53 2b17 	vmov	r2, r3, d7
    be62:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    be66:	2f00      	cmp	r7, #0
    be68:	f000 81a6 	beq.w	c1b8 <_dtoa_r+0x988>
    be6c:	9e02      	ldr	r6, [sp, #8]
    be6e:	4639      	mov	r1, r7
    be70:	9809      	ldr	r0, [sp, #36]	; 0x24
    be72:	2800      	cmp	r0, #0
    be74:	f000 824d 	beq.w	c312 <_dtoa_r+0xae2>
    be78:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    be7c:	48a3      	ldr	r0, [pc, #652]	; (c10c <_dtoa_r+0x8dc>)
    be7e:	9d08      	ldr	r5, [sp, #32]
    be80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    be84:	ed10 6b02 	vldr	d6, [r0, #-8]
    be88:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    be8c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    be90:	ee17 0a10 	vmov	r0, s14
    be94:	ec43 2b16 	vmov	d6, r2, r3
    be98:	3030      	adds	r0, #48	; 0x30
    be9a:	b2c0      	uxtb	r0, r0
    be9c:	ee35 5b46 	vsub.f64	d5, d5, d6
    bea0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    bea4:	ee34 7b47 	vsub.f64	d7, d4, d7
    bea8:	eeb4 5bc7 	vcmpe.f64	d5, d7
    beac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    beb0:	7028      	strb	r0, [r5, #0]
    beb2:	f105 0b01 	add.w	fp, r5, #1
    beb6:	dc32      	bgt.n	bf1e <_dtoa_r+0x6ee>
    beb8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    bebc:	ee33 6b47 	vsub.f64	d6, d3, d7
    bec0:	eeb4 5bc6 	vcmpe.f64	d5, d6
    bec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bec8:	f300 82ae 	bgt.w	c428 <_dtoa_r+0xbf8>
    becc:	2901      	cmp	r1, #1
    bece:	f340 81cd 	ble.w	c26c <_dtoa_r+0xa3c>
    bed2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    bed6:	9b08      	ldr	r3, [sp, #32]
    bed8:	4419      	add	r1, r3
    beda:	e00a      	b.n	bef2 <_dtoa_r+0x6c2>
    bedc:	ee33 6b47 	vsub.f64	d6, d3, d7
    bee0:	eeb4 6bc5 	vcmpe.f64	d6, d5
    bee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bee8:	f100 829e 	bmi.w	c428 <_dtoa_r+0xbf8>
    beec:	458b      	cmp	fp, r1
    beee:	f000 81bd 	beq.w	c26c <_dtoa_r+0xa3c>
    bef2:	ee27 7b04 	vmul.f64	d7, d7, d4
    bef6:	ee25 5b04 	vmul.f64	d5, d5, d4
    befa:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    befe:	ee16 3a10 	vmov	r3, s12
    bf02:	f103 0030 	add.w	r0, r3, #48	; 0x30
    bf06:	b2c0      	uxtb	r0, r0
    bf08:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    bf0c:	ee37 7b46 	vsub.f64	d7, d7, d6
    bf10:	eeb4 7bc5 	vcmpe.f64	d7, d5
    bf14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf18:	f80b 0b01 	strb.w	r0, [fp], #1
    bf1c:	d5de      	bpl.n	bedc <_dtoa_r+0x6ac>
    bf1e:	9602      	str	r6, [sp, #8]
    bf20:	e5ec      	b.n	bafc <_dtoa_r+0x2cc>
    bf22:	2300      	movs	r3, #0
    bf24:	9309      	str	r3, [sp, #36]	; 0x24
    bf26:	f1b8 0f00 	cmp.w	r8, #0
    bf2a:	f340 8170 	ble.w	c20e <_dtoa_r+0x9de>
    bf2e:	4646      	mov	r6, r8
    bf30:	4645      	mov	r5, r8
    bf32:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    bf36:	4647      	mov	r7, r8
    bf38:	e73a      	b.n	bdb0 <_dtoa_r+0x580>
    bf3a:	2301      	movs	r3, #1
    bf3c:	9309      	str	r3, [sp, #36]	; 0x24
    bf3e:	e7f2      	b.n	bf26 <_dtoa_r+0x6f6>
    bf40:	9507      	str	r5, [sp, #28]
    bf42:	9a05      	ldr	r2, [sp, #20]
    bf44:	9907      	ldr	r1, [sp, #28]
    bf46:	4620      	mov	r0, r4
    bf48:	f001 f9ae 	bl	d2a8 <__pow5mult>
    bf4c:	4605      	mov	r5, r0
    bf4e:	e677      	b.n	bc40 <_dtoa_r+0x410>
    bf50:	2f00      	cmp	r7, #0
    bf52:	f73f ad79 	bgt.w	ba48 <_dtoa_r+0x218>
    bf56:	f040 8142 	bne.w	c1de <_dtoa_r+0x9ae>
    bf5a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    bf5e:	ee24 4b07 	vmul.f64	d4, d4, d7
    bf62:	ec4b ab17 	vmov	d7, sl, fp
    bf66:	eeb4 4bc7 	vcmpe.f64	d4, d7
    bf6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf6e:	463e      	mov	r6, r7
    bf70:	9705      	str	r7, [sp, #20]
    bf72:	f2c0 80e5 	blt.w	c140 <_dtoa_r+0x910>
    bf76:	ea6f 0308 	mvn.w	r3, r8
    bf7a:	f8dd b020 	ldr.w	fp, [sp, #32]
    bf7e:	9302      	str	r3, [sp, #8]
    bf80:	9905      	ldr	r1, [sp, #20]
    bf82:	4620      	mov	r0, r4
    bf84:	f001 f80a 	bl	cf9c <_Bfree>
    bf88:	2e00      	cmp	r6, #0
    bf8a:	f43f adb7 	beq.w	bafc <_dtoa_r+0x2cc>
    bf8e:	e6f5      	b.n	bd7c <_dtoa_r+0x54c>
    bf90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf92:	2a00      	cmp	r2, #0
    bf94:	f000 8202 	beq.w	c39c <_dtoa_r+0xb6c>
    bf98:	9a05      	ldr	r2, [sp, #20]
    bf9a:	920e      	str	r2, [sp, #56]	; 0x38
    bf9c:	9a06      	ldr	r2, [sp, #24]
    bf9e:	920a      	str	r2, [sp, #40]	; 0x28
    bfa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    bfa4:	e5d3      	b.n	bb4e <_dtoa_r+0x31e>
    bfa6:	201c      	movs	r0, #28
    bfa8:	e674      	b.n	bc94 <_dtoa_r+0x464>
    bfaa:	9b01      	ldr	r3, [sp, #4]
    bfac:	2b01      	cmp	r3, #1
    bfae:	f340 8240 	ble.w	c432 <_dtoa_r+0xc02>
    bfb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bfb4:	9307      	str	r3, [sp, #28]
    bfb6:	2001      	movs	r0, #1
    bfb8:	e660      	b.n	bc7c <_dtoa_r+0x44c>
    bfba:	4631      	mov	r1, r6
    bfbc:	2300      	movs	r3, #0
    bfbe:	220a      	movs	r2, #10
    bfc0:	4620      	mov	r0, r4
    bfc2:	f000 fff5 	bl	cfb0 <__multadd>
    bfc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bfc8:	2b00      	cmp	r3, #0
    bfca:	4606      	mov	r6, r0
    bfcc:	f340 824d 	ble.w	c46a <_dtoa_r+0xc3a>
    bfd0:	461f      	mov	r7, r3
    bfd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bfd4:	2b00      	cmp	r3, #0
    bfd6:	dd05      	ble.n	bfe4 <_dtoa_r+0x7b4>
    bfd8:	4631      	mov	r1, r6
    bfda:	461a      	mov	r2, r3
    bfdc:	4620      	mov	r0, r4
    bfde:	f001 f9b3 	bl	d348 <__lshift>
    bfe2:	4606      	mov	r6, r0
    bfe4:	9b07      	ldr	r3, [sp, #28]
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	f040 816e 	bne.w	c2c8 <_dtoa_r+0xa98>
    bfec:	46b0      	mov	r8, r6
    bfee:	9b08      	ldr	r3, [sp, #32]
    bff0:	3f01      	subs	r7, #1
    bff2:	19da      	adds	r2, r3, r7
    bff4:	9209      	str	r2, [sp, #36]	; 0x24
    bff6:	f00a 0201 	and.w	r2, sl, #1
    bffa:	920a      	str	r2, [sp, #40]	; 0x28
    bffc:	461f      	mov	r7, r3
    bffe:	f8dd b014 	ldr.w	fp, [sp, #20]
    c002:	4628      	mov	r0, r5
    c004:	4659      	mov	r1, fp
    c006:	f7ff fb7d 	bl	b704 <quorem>
    c00a:	4631      	mov	r1, r6
    c00c:	4682      	mov	sl, r0
    c00e:	4628      	mov	r0, r5
    c010:	f001 f9f2 	bl	d3f8 <__mcmp>
    c014:	4642      	mov	r2, r8
    c016:	4659      	mov	r1, fp
    c018:	4681      	mov	r9, r0
    c01a:	4620      	mov	r0, r4
    c01c:	f001 fa0e 	bl	d43c <__mdiff>
    c020:	68c3      	ldr	r3, [r0, #12]
    c022:	4683      	mov	fp, r0
    c024:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    c028:	2b00      	cmp	r3, #0
    c02a:	d149      	bne.n	c0c0 <_dtoa_r+0x890>
    c02c:	4601      	mov	r1, r0
    c02e:	4628      	mov	r0, r5
    c030:	9207      	str	r2, [sp, #28]
    c032:	f001 f9e1 	bl	d3f8 <__mcmp>
    c036:	4659      	mov	r1, fp
    c038:	9006      	str	r0, [sp, #24]
    c03a:	4620      	mov	r0, r4
    c03c:	f000 ffae 	bl	cf9c <_Bfree>
    c040:	9b06      	ldr	r3, [sp, #24]
    c042:	9a07      	ldr	r2, [sp, #28]
    c044:	b92b      	cbnz	r3, c052 <_dtoa_r+0x822>
    c046:	9901      	ldr	r1, [sp, #4]
    c048:	b919      	cbnz	r1, c052 <_dtoa_r+0x822>
    c04a:	990a      	ldr	r1, [sp, #40]	; 0x28
    c04c:	2900      	cmp	r1, #0
    c04e:	f000 81f5 	beq.w	c43c <_dtoa_r+0xc0c>
    c052:	f1b9 0f00 	cmp.w	r9, #0
    c056:	f2c0 80df 	blt.w	c218 <_dtoa_r+0x9e8>
    c05a:	d105      	bne.n	c068 <_dtoa_r+0x838>
    c05c:	9901      	ldr	r1, [sp, #4]
    c05e:	b919      	cbnz	r1, c068 <_dtoa_r+0x838>
    c060:	990a      	ldr	r1, [sp, #40]	; 0x28
    c062:	2900      	cmp	r1, #0
    c064:	f000 80d8 	beq.w	c218 <_dtoa_r+0x9e8>
    c068:	2b00      	cmp	r3, #0
    c06a:	f300 8141 	bgt.w	c2f0 <_dtoa_r+0xac0>
    c06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c070:	703a      	strb	r2, [r7, #0]
    c072:	f107 0901 	add.w	r9, r7, #1
    c076:	429f      	cmp	r7, r3
    c078:	46cb      	mov	fp, r9
    c07a:	f000 8146 	beq.w	c30a <_dtoa_r+0xada>
    c07e:	4629      	mov	r1, r5
    c080:	2300      	movs	r3, #0
    c082:	220a      	movs	r2, #10
    c084:	4620      	mov	r0, r4
    c086:	f000 ff93 	bl	cfb0 <__multadd>
    c08a:	4546      	cmp	r6, r8
    c08c:	4605      	mov	r5, r0
    c08e:	4631      	mov	r1, r6
    c090:	f04f 0300 	mov.w	r3, #0
    c094:	f04f 020a 	mov.w	r2, #10
    c098:	4620      	mov	r0, r4
    c09a:	d00b      	beq.n	c0b4 <_dtoa_r+0x884>
    c09c:	f000 ff88 	bl	cfb0 <__multadd>
    c0a0:	4641      	mov	r1, r8
    c0a2:	4606      	mov	r6, r0
    c0a4:	2300      	movs	r3, #0
    c0a6:	220a      	movs	r2, #10
    c0a8:	4620      	mov	r0, r4
    c0aa:	f000 ff81 	bl	cfb0 <__multadd>
    c0ae:	464f      	mov	r7, r9
    c0b0:	4680      	mov	r8, r0
    c0b2:	e7a4      	b.n	bffe <_dtoa_r+0x7ce>
    c0b4:	f000 ff7c 	bl	cfb0 <__multadd>
    c0b8:	464f      	mov	r7, r9
    c0ba:	4606      	mov	r6, r0
    c0bc:	4680      	mov	r8, r0
    c0be:	e79e      	b.n	bffe <_dtoa_r+0x7ce>
    c0c0:	4601      	mov	r1, r0
    c0c2:	4620      	mov	r0, r4
    c0c4:	9206      	str	r2, [sp, #24]
    c0c6:	f000 ff69 	bl	cf9c <_Bfree>
    c0ca:	2301      	movs	r3, #1
    c0cc:	9a06      	ldr	r2, [sp, #24]
    c0ce:	e7c0      	b.n	c052 <_dtoa_r+0x822>
    c0d0:	9905      	ldr	r1, [sp, #20]
    c0d2:	4628      	mov	r0, r5
    c0d4:	f001 f990 	bl	d3f8 <__mcmp>
    c0d8:	2800      	cmp	r0, #0
    c0da:	f6bf adf8 	bge.w	bcce <_dtoa_r+0x49e>
    c0de:	4629      	mov	r1, r5
    c0e0:	9d02      	ldr	r5, [sp, #8]
    c0e2:	2300      	movs	r3, #0
    c0e4:	3d01      	subs	r5, #1
    c0e6:	220a      	movs	r2, #10
    c0e8:	4620      	mov	r0, r4
    c0ea:	9502      	str	r5, [sp, #8]
    c0ec:	f000 ff60 	bl	cfb0 <__multadd>
    c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0f2:	4605      	mov	r5, r0
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	f47f af60 	bne.w	bfba <_dtoa_r+0x78a>
    c0fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	f340 81ad 	ble.w	c45c <_dtoa_r+0xc2c>
    c102:	461f      	mov	r7, r3
    c104:	e5ea      	b.n	bcdc <_dtoa_r+0x4ac>
    c106:	9d07      	ldr	r5, [sp, #28]
    c108:	e59a      	b.n	bc40 <_dtoa_r+0x410>
    c10a:	bf00      	nop
    c10c:	20000d28 	.word	0x20000d28
    c110:	20000df0 	.word	0x20000df0
    c114:	9b01      	ldr	r3, [sp, #4]
    c116:	2b02      	cmp	r3, #2
    c118:	f77f addc 	ble.w	bcd4 <_dtoa_r+0x4a4>
    c11c:	2f00      	cmp	r7, #0
    c11e:	f040 8169 	bne.w	c3f4 <_dtoa_r+0xbc4>
    c122:	463b      	mov	r3, r7
    c124:	9905      	ldr	r1, [sp, #20]
    c126:	2205      	movs	r2, #5
    c128:	4620      	mov	r0, r4
    c12a:	f000 ff41 	bl	cfb0 <__multadd>
    c12e:	4601      	mov	r1, r0
    c130:	9005      	str	r0, [sp, #20]
    c132:	4628      	mov	r0, r5
    c134:	f001 f960 	bl	d3f8 <__mcmp>
    c138:	2800      	cmp	r0, #0
    c13a:	9507      	str	r5, [sp, #28]
    c13c:	f77f af1b 	ble.w	bf76 <_dtoa_r+0x746>
    c140:	9a02      	ldr	r2, [sp, #8]
    c142:	9908      	ldr	r1, [sp, #32]
    c144:	2331      	movs	r3, #49	; 0x31
    c146:	3201      	adds	r2, #1
    c148:	9202      	str	r2, [sp, #8]
    c14a:	700b      	strb	r3, [r1, #0]
    c14c:	f101 0b01 	add.w	fp, r1, #1
    c150:	e716      	b.n	bf80 <_dtoa_r+0x750>
    c152:	9a02      	ldr	r2, [sp, #8]
    c154:	3201      	adds	r2, #1
    c156:	9202      	str	r2, [sp, #8]
    c158:	9a08      	ldr	r2, [sp, #32]
    c15a:	2331      	movs	r3, #49	; 0x31
    c15c:	7013      	strb	r3, [r2, #0]
    c15e:	e5fd      	b.n	bd5c <_dtoa_r+0x52c>
    c160:	2301      	movs	r3, #1
    c162:	9309      	str	r3, [sp, #36]	; 0x24
    c164:	e61b      	b.n	bd9e <_dtoa_r+0x56e>
    c166:	f1ba 0f00 	cmp.w	sl, #0
    c16a:	f47f ad7c 	bne.w	bc66 <_dtoa_r+0x436>
    c16e:	f3cb 0313 	ubfx	r3, fp, #0, #20
    c172:	2b00      	cmp	r3, #0
    c174:	f040 811b 	bne.w	c3ae <_dtoa_r+0xb7e>
    c178:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    c17c:	0d1b      	lsrs	r3, r3, #20
    c17e:	051b      	lsls	r3, r3, #20
    c180:	2b00      	cmp	r3, #0
    c182:	f000 8154 	beq.w	c42e <_dtoa_r+0xbfe>
    c186:	9b06      	ldr	r3, [sp, #24]
    c188:	3301      	adds	r3, #1
    c18a:	9306      	str	r3, [sp, #24]
    c18c:	2301      	movs	r3, #1
    c18e:	f109 0901 	add.w	r9, r9, #1
    c192:	9307      	str	r3, [sp, #28]
    c194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c196:	2001      	movs	r0, #1
    c198:	2b00      	cmp	r3, #0
    c19a:	f43f ad6f 	beq.w	bc7c <_dtoa_r+0x44c>
    c19e:	e564      	b.n	bc6a <_dtoa_r+0x43a>
    c1a0:	ee07 1a90 	vmov	s15, r1
    c1a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    c1a8:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    c1ac:	eea4 7b06 	vfma.f64	d7, d4, d6
    c1b0:	ec53 2b17 	vmov	r2, r3, d7
    c1b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    c1b8:	ec43 2b16 	vmov	d6, r2, r3
    c1bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    c1c0:	ee34 7b47 	vsub.f64	d7, d4, d7
    c1c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    c1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c1cc:	f300 80dd 	bgt.w	c38a <_dtoa_r+0xb5a>
    c1d0:	eeb1 6b46 	vneg.f64	d6, d6
    c1d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    c1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c1dc:	d546      	bpl.n	c26c <_dtoa_r+0xa3c>
    c1de:	2300      	movs	r3, #0
    c1e0:	9305      	str	r3, [sp, #20]
    c1e2:	461e      	mov	r6, r3
    c1e4:	e6c7      	b.n	bf76 <_dtoa_r+0x746>
    c1e6:	9808      	ldr	r0, [sp, #32]
    c1e8:	f7ff bb59 	b.w	b89e <_dtoa_r+0x6e>
    c1ec:	9b05      	ldr	r3, [sp, #20]
    c1ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c1f0:	9205      	str	r2, [sp, #20]
    c1f2:	1ad3      	subs	r3, r2, r3
    c1f4:	4419      	add	r1, r3
    c1f6:	2300      	movs	r3, #0
    c1f8:	910b      	str	r1, [sp, #44]	; 0x2c
    c1fa:	930e      	str	r3, [sp, #56]	; 0x38
    c1fc:	e4a1      	b.n	bb42 <_dtoa_r+0x312>
    c1fe:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    c202:	2102      	movs	r1, #2
    c204:	e60a      	b.n	be1c <_dtoa_r+0x5ec>
    c206:	463d      	mov	r5, r7
    c208:	2100      	movs	r1, #0
    c20a:	6461      	str	r1, [r4, #68]	; 0x44
    c20c:	e5df      	b.n	bdce <_dtoa_r+0x59e>
    c20e:	2501      	movs	r5, #1
    c210:	950d      	str	r5, [sp, #52]	; 0x34
    c212:	462f      	mov	r7, r5
    c214:	46a8      	mov	r8, r5
    c216:	e7f7      	b.n	c208 <_dtoa_r+0x9d8>
    c218:	2b00      	cmp	r3, #0
    c21a:	4691      	mov	r9, r2
    c21c:	dd11      	ble.n	c242 <_dtoa_r+0xa12>
    c21e:	4629      	mov	r1, r5
    c220:	2201      	movs	r2, #1
    c222:	4620      	mov	r0, r4
    c224:	f001 f890 	bl	d348 <__lshift>
    c228:	9905      	ldr	r1, [sp, #20]
    c22a:	4605      	mov	r5, r0
    c22c:	f001 f8e4 	bl	d3f8 <__mcmp>
    c230:	2800      	cmp	r0, #0
    c232:	f340 810c 	ble.w	c44e <_dtoa_r+0xc1e>
    c236:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    c23a:	f000 80dd 	beq.w	c3f8 <_dtoa_r+0xbc8>
    c23e:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    c242:	46b2      	mov	sl, r6
    c244:	f887 9000 	strb.w	r9, [r7]
    c248:	f107 0b01 	add.w	fp, r7, #1
    c24c:	4646      	mov	r6, r8
    c24e:	9507      	str	r5, [sp, #28]
    c250:	e584      	b.n	bd5c <_dtoa_r+0x52c>
    c252:	d104      	bne.n	c25e <_dtoa_r+0xa2e>
    c254:	f019 0f01 	tst.w	r9, #1
    c258:	d001      	beq.n	c25e <_dtoa_r+0xa2e>
    c25a:	e56e      	b.n	bd3a <_dtoa_r+0x50a>
    c25c:	4693      	mov	fp, r2
    c25e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    c262:	2b30      	cmp	r3, #48	; 0x30
    c264:	f10b 32ff 	add.w	r2, fp, #4294967295
    c268:	d0f8      	beq.n	c25c <_dtoa_r+0xa2c>
    c26a:	e577      	b.n	bd5c <_dtoa_r+0x52c>
    c26c:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    c270:	f7ff bbdb 	b.w	ba2a <_dtoa_r+0x1fa>
    c274:	9b02      	ldr	r3, [sp, #8]
    c276:	425b      	negs	r3, r3
    c278:	2b00      	cmp	r3, #0
    c27a:	f000 809b 	beq.w	c3b4 <_dtoa_r+0xb84>
    c27e:	4a8b      	ldr	r2, [pc, #556]	; (c4ac <_dtoa_r+0xc7c>)
    c280:	f003 010f 	and.w	r1, r3, #15
    c284:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    c288:	ed92 7b00 	vldr	d7, [r2]
    c28c:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    c290:	111b      	asrs	r3, r3, #4
    c292:	ee26 4b07 	vmul.f64	d4, d6, d7
    c296:	f000 80e6 	beq.w	c466 <_dtoa_r+0xc36>
    c29a:	4a85      	ldr	r2, [pc, #532]	; (c4b0 <_dtoa_r+0xc80>)
    c29c:	2102      	movs	r1, #2
    c29e:	07d8      	lsls	r0, r3, #31
    c2a0:	d504      	bpl.n	c2ac <_dtoa_r+0xa7c>
    c2a2:	ed92 7b00 	vldr	d7, [r2]
    c2a6:	3101      	adds	r1, #1
    c2a8:	ee24 4b07 	vmul.f64	d4, d4, d7
    c2ac:	105b      	asrs	r3, r3, #1
    c2ae:	f102 0208 	add.w	r2, r2, #8
    c2b2:	d1f4      	bne.n	c29e <_dtoa_r+0xa6e>
    c2b4:	e5c1      	b.n	be3a <_dtoa_r+0x60a>
    c2b6:	9908      	ldr	r1, [sp, #32]
    c2b8:	2230      	movs	r2, #48	; 0x30
    c2ba:	700a      	strb	r2, [r1, #0]
    c2bc:	9a02      	ldr	r2, [sp, #8]
    c2be:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    c2c2:	3201      	adds	r2, #1
    c2c4:	9202      	str	r2, [sp, #8]
    c2c6:	e417      	b.n	baf8 <_dtoa_r+0x2c8>
    c2c8:	6871      	ldr	r1, [r6, #4]
    c2ca:	4620      	mov	r0, r4
    c2cc:	f000 fe40 	bl	cf50 <_Balloc>
    c2d0:	6933      	ldr	r3, [r6, #16]
    c2d2:	1c9a      	adds	r2, r3, #2
    c2d4:	4680      	mov	r8, r0
    c2d6:	0092      	lsls	r2, r2, #2
    c2d8:	f106 010c 	add.w	r1, r6, #12
    c2dc:	300c      	adds	r0, #12
    c2de:	f7fa fbe9 	bl	6ab4 <memcpy>
    c2e2:	4641      	mov	r1, r8
    c2e4:	2201      	movs	r2, #1
    c2e6:	4620      	mov	r0, r4
    c2e8:	f001 f82e 	bl	d348 <__lshift>
    c2ec:	4680      	mov	r8, r0
    c2ee:	e67e      	b.n	bfee <_dtoa_r+0x7be>
    c2f0:	2a39      	cmp	r2, #57	; 0x39
    c2f2:	f000 8081 	beq.w	c3f8 <_dtoa_r+0xbc8>
    c2f6:	f102 0901 	add.w	r9, r2, #1
    c2fa:	46b2      	mov	sl, r6
    c2fc:	f887 9000 	strb.w	r9, [r7]
    c300:	f107 0b01 	add.w	fp, r7, #1
    c304:	4646      	mov	r6, r8
    c306:	9507      	str	r5, [sp, #28]
    c308:	e528      	b.n	bd5c <_dtoa_r+0x52c>
    c30a:	46b2      	mov	sl, r6
    c30c:	4691      	mov	r9, r2
    c30e:	4646      	mov	r6, r8
    c310:	e507      	b.n	bd22 <_dtoa_r+0x4f2>
    c312:	4866      	ldr	r0, [pc, #408]	; (c4ac <_dtoa_r+0xc7c>)
    c314:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    c318:	1e4d      	subs	r5, r1, #1
    c31a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    c31e:	ec43 2b17 	vmov	d7, r2, r3
    c322:	ed90 3b00 	vldr	d3, [r0]
    c326:	ee16 3a10 	vmov	r3, s12
    c32a:	ee23 3b07 	vmul.f64	d3, d3, d7
    c32e:	9808      	ldr	r0, [sp, #32]
    c330:	3330      	adds	r3, #48	; 0x30
    c332:	2901      	cmp	r1, #1
    c334:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    c338:	7003      	strb	r3, [r0, #0]
    c33a:	f100 0b01 	add.w	fp, r0, #1
    c33e:	ee34 7b46 	vsub.f64	d7, d4, d6
    c342:	d014      	beq.n	c36e <_dtoa_r+0xb3e>
    c344:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    c348:	9b08      	ldr	r3, [sp, #32]
    c34a:	4419      	add	r1, r3
    c34c:	465b      	mov	r3, fp
    c34e:	ee27 7b05 	vmul.f64	d7, d7, d5
    c352:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    c356:	ee16 2a10 	vmov	r2, s12
    c35a:	3230      	adds	r2, #48	; 0x30
    c35c:	f803 2b01 	strb.w	r2, [r3], #1
    c360:	4299      	cmp	r1, r3
    c362:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    c366:	ee37 7b46 	vsub.f64	d7, d7, d6
    c36a:	d1f0      	bne.n	c34e <_dtoa_r+0xb1e>
    c36c:	44ab      	add	fp, r5
    c36e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    c372:	ee33 5b06 	vadd.f64	d5, d3, d6
    c376:	eeb4 5bc7 	vcmpe.f64	d5, d7
    c37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c37e:	d543      	bpl.n	c408 <_dtoa_r+0xbd8>
    c380:	9602      	str	r6, [sp, #8]
    c382:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    c386:	f7ff bbaa 	b.w	bade <_dtoa_r+0x2ae>
    c38a:	2300      	movs	r3, #0
    c38c:	9305      	str	r3, [sp, #20]
    c38e:	461e      	mov	r6, r3
    c390:	e6d6      	b.n	c140 <_dtoa_r+0x910>
    c392:	1bdb      	subs	r3, r3, r7
    c394:	930a      	str	r3, [sp, #40]	; 0x28
    c396:	2300      	movs	r3, #0
    c398:	f7ff bbd9 	b.w	bb4e <_dtoa_r+0x31e>
    c39c:	9a05      	ldr	r2, [sp, #20]
    c39e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c3a0:	920e      	str	r2, [sp, #56]	; 0x38
    c3a2:	9a06      	ldr	r2, [sp, #24]
    c3a4:	920a      	str	r2, [sp, #40]	; 0x28
    c3a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    c3aa:	f7ff bbd0 	b.w	bb4e <_dtoa_r+0x31e>
    c3ae:	2300      	movs	r3, #0
    c3b0:	9307      	str	r3, [sp, #28]
    c3b2:	e6ef      	b.n	c194 <_dtoa_r+0x964>
    c3b4:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    c3b8:	2102      	movs	r1, #2
    c3ba:	e53e      	b.n	be3a <_dtoa_r+0x60a>
    c3bc:	2f00      	cmp	r7, #0
    c3be:	f43f aeef 	beq.w	c1a0 <_dtoa_r+0x970>
    c3c2:	980d      	ldr	r0, [sp, #52]	; 0x34
    c3c4:	2800      	cmp	r0, #0
    c3c6:	f77f af51 	ble.w	c26c <_dtoa_r+0xa3c>
    c3ca:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    c3ce:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    c3d2:	3101      	adds	r1, #1
    c3d4:	ee06 1a90 	vmov	s13, r1
    c3d8:	ee24 4b05 	vmul.f64	d4, d4, d5
    c3dc:	9b02      	ldr	r3, [sp, #8]
    c3de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    c3e2:	1e5e      	subs	r6, r3, #1
    c3e4:	eea4 7b06 	vfma.f64	d7, d4, d6
    c3e8:	ec53 2b17 	vmov	r2, r3, d7
    c3ec:	4601      	mov	r1, r0
    c3ee:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    c3f2:	e53d      	b.n	be70 <_dtoa_r+0x640>
    c3f4:	9507      	str	r5, [sp, #28]
    c3f6:	e5be      	b.n	bf76 <_dtoa_r+0x746>
    c3f8:	2239      	movs	r2, #57	; 0x39
    c3fa:	46b2      	mov	sl, r6
    c3fc:	9507      	str	r5, [sp, #28]
    c3fe:	4646      	mov	r6, r8
    c400:	703a      	strb	r2, [r7, #0]
    c402:	f107 0b01 	add.w	fp, r7, #1
    c406:	e49a      	b.n	bd3e <_dtoa_r+0x50e>
    c408:	ee36 6b43 	vsub.f64	d6, d6, d3
    c40c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    c410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c414:	dc01      	bgt.n	c41a <_dtoa_r+0xbea>
    c416:	e729      	b.n	c26c <_dtoa_r+0xa3c>
    c418:	4693      	mov	fp, r2
    c41a:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    c41e:	2b30      	cmp	r3, #48	; 0x30
    c420:	f10b 32ff 	add.w	r2, fp, #4294967295
    c424:	d0f8      	beq.n	c418 <_dtoa_r+0xbe8>
    c426:	e57a      	b.n	bf1e <_dtoa_r+0x6ee>
    c428:	9602      	str	r6, [sp, #8]
    c42a:	f7ff bb58 	b.w	bade <_dtoa_r+0x2ae>
    c42e:	9307      	str	r3, [sp, #28]
    c430:	e6b0      	b.n	c194 <_dtoa_r+0x964>
    c432:	f1ba 0f00 	cmp.w	sl, #0
    c436:	f47f adbc 	bne.w	bfb2 <_dtoa_r+0x782>
    c43a:	e698      	b.n	c16e <_dtoa_r+0x93e>
    c43c:	2a39      	cmp	r2, #57	; 0x39
    c43e:	46cb      	mov	fp, r9
    c440:	4691      	mov	r9, r2
    c442:	d0d9      	beq.n	c3f8 <_dtoa_r+0xbc8>
    c444:	f1bb 0f00 	cmp.w	fp, #0
    c448:	f73f aef9 	bgt.w	c23e <_dtoa_r+0xa0e>
    c44c:	e6f9      	b.n	c242 <_dtoa_r+0xa12>
    c44e:	f47f aef8 	bne.w	c242 <_dtoa_r+0xa12>
    c452:	f019 0f01 	tst.w	r9, #1
    c456:	f43f aef4 	beq.w	c242 <_dtoa_r+0xa12>
    c45a:	e6ec      	b.n	c236 <_dtoa_r+0xa06>
    c45c:	9b01      	ldr	r3, [sp, #4]
    c45e:	2b02      	cmp	r3, #2
    c460:	dc08      	bgt.n	c474 <_dtoa_r+0xc44>
    c462:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    c464:	e43a      	b.n	bcdc <_dtoa_r+0x4ac>
    c466:	2102      	movs	r1, #2
    c468:	e4e7      	b.n	be3a <_dtoa_r+0x60a>
    c46a:	9b01      	ldr	r3, [sp, #4]
    c46c:	2b02      	cmp	r3, #2
    c46e:	dc01      	bgt.n	c474 <_dtoa_r+0xc44>
    c470:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    c472:	e5ae      	b.n	bfd2 <_dtoa_r+0x7a2>
    c474:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    c476:	e651      	b.n	c11c <_dtoa_r+0x8ec>
    c478:	2301      	movs	r3, #1
    c47a:	930e      	str	r3, [sp, #56]	; 0x38
    c47c:	f7ff baa1 	b.w	b9c2 <_dtoa_r+0x192>
    c480:	f43f ac0f 	beq.w	bca2 <_dtoa_r+0x472>
    c484:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    c488:	e404      	b.n	bc94 <_dtoa_r+0x464>
    c48a:	2500      	movs	r5, #0
    c48c:	6465      	str	r5, [r4, #68]	; 0x44
    c48e:	4629      	mov	r1, r5
    c490:	4620      	mov	r0, r4
    c492:	f000 fd5d 	bl	cf50 <_Balloc>
    c496:	f04f 37ff 	mov.w	r7, #4294967295
    c49a:	2301      	movs	r3, #1
    c49c:	9008      	str	r0, [sp, #32]
    c49e:	46a8      	mov	r8, r5
    c4a0:	6420      	str	r0, [r4, #64]	; 0x40
    c4a2:	970d      	str	r7, [sp, #52]	; 0x34
    c4a4:	9309      	str	r3, [sp, #36]	; 0x24
    c4a6:	f7ff bac0 	b.w	ba2a <_dtoa_r+0x1fa>
    c4aa:	bf00      	nop
    c4ac:	20000d28 	.word	0x20000d28
    c4b0:	20000df0 	.word	0x20000df0

0000c4b4 <_malloc_trim_r>:
    c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4b6:	4f23      	ldr	r7, [pc, #140]	; (c544 <_malloc_trim_r+0x90>)
    c4b8:	460c      	mov	r4, r1
    c4ba:	4606      	mov	r6, r0
    c4bc:	f7fc f9aa 	bl	8814 <__malloc_lock>
    c4c0:	68bb      	ldr	r3, [r7, #8]
    c4c2:	685d      	ldr	r5, [r3, #4]
    c4c4:	f025 0503 	bic.w	r5, r5, #3
    c4c8:	1b29      	subs	r1, r5, r4
    c4ca:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    c4ce:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    c4d2:	f021 010f 	bic.w	r1, r1, #15
    c4d6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    c4da:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c4de:	db07      	blt.n	c4f0 <_malloc_trim_r+0x3c>
    c4e0:	2100      	movs	r1, #0
    c4e2:	4630      	mov	r0, r6
    c4e4:	f7fc fb92 	bl	8c0c <_sbrk_r>
    c4e8:	68bb      	ldr	r3, [r7, #8]
    c4ea:	442b      	add	r3, r5
    c4ec:	4298      	cmp	r0, r3
    c4ee:	d004      	beq.n	c4fa <_malloc_trim_r+0x46>
    c4f0:	4630      	mov	r0, r6
    c4f2:	f7fc f991 	bl	8818 <__malloc_unlock>
    c4f6:	2000      	movs	r0, #0
    c4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4fa:	4261      	negs	r1, r4
    c4fc:	4630      	mov	r0, r6
    c4fe:	f7fc fb85 	bl	8c0c <_sbrk_r>
    c502:	3001      	adds	r0, #1
    c504:	d00d      	beq.n	c522 <_malloc_trim_r+0x6e>
    c506:	4b10      	ldr	r3, [pc, #64]	; (c548 <_malloc_trim_r+0x94>)
    c508:	68ba      	ldr	r2, [r7, #8]
    c50a:	6819      	ldr	r1, [r3, #0]
    c50c:	1b2d      	subs	r5, r5, r4
    c50e:	f045 0501 	orr.w	r5, r5, #1
    c512:	4630      	mov	r0, r6
    c514:	1b09      	subs	r1, r1, r4
    c516:	6055      	str	r5, [r2, #4]
    c518:	6019      	str	r1, [r3, #0]
    c51a:	f7fc f97d 	bl	8818 <__malloc_unlock>
    c51e:	2001      	movs	r0, #1
    c520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c522:	2100      	movs	r1, #0
    c524:	4630      	mov	r0, r6
    c526:	f7fc fb71 	bl	8c0c <_sbrk_r>
    c52a:	68ba      	ldr	r2, [r7, #8]
    c52c:	1a83      	subs	r3, r0, r2
    c52e:	2b0f      	cmp	r3, #15
    c530:	ddde      	ble.n	c4f0 <_malloc_trim_r+0x3c>
    c532:	4c06      	ldr	r4, [pc, #24]	; (c54c <_malloc_trim_r+0x98>)
    c534:	4904      	ldr	r1, [pc, #16]	; (c548 <_malloc_trim_r+0x94>)
    c536:	6824      	ldr	r4, [r4, #0]
    c538:	f043 0301 	orr.w	r3, r3, #1
    c53c:	1b00      	subs	r0, r0, r4
    c53e:	6053      	str	r3, [r2, #4]
    c540:	6008      	str	r0, [r1, #0]
    c542:	e7d5      	b.n	c4f0 <_malloc_trim_r+0x3c>
    c544:	200016a0 	.word	0x200016a0
    c548:	20002520 	.word	0x20002520
    c54c:	20001aac 	.word	0x20001aac

0000c550 <_free_r>:
    c550:	2900      	cmp	r1, #0
    c552:	d045      	beq.n	c5e0 <_free_r+0x90>
    c554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c558:	460d      	mov	r5, r1
    c55a:	4680      	mov	r8, r0
    c55c:	f7fc f95a 	bl	8814 <__malloc_lock>
    c560:	f855 7c04 	ldr.w	r7, [r5, #-4]
    c564:	496a      	ldr	r1, [pc, #424]	; (c710 <_free_r+0x1c0>)
    c566:	f027 0301 	bic.w	r3, r7, #1
    c56a:	f1a5 0408 	sub.w	r4, r5, #8
    c56e:	18e2      	adds	r2, r4, r3
    c570:	688e      	ldr	r6, [r1, #8]
    c572:	6850      	ldr	r0, [r2, #4]
    c574:	42b2      	cmp	r2, r6
    c576:	f020 0003 	bic.w	r0, r0, #3
    c57a:	d062      	beq.n	c642 <_free_r+0xf2>
    c57c:	07fe      	lsls	r6, r7, #31
    c57e:	6050      	str	r0, [r2, #4]
    c580:	d40b      	bmi.n	c59a <_free_r+0x4a>
    c582:	f855 7c08 	ldr.w	r7, [r5, #-8]
    c586:	1be4      	subs	r4, r4, r7
    c588:	f101 0e08 	add.w	lr, r1, #8
    c58c:	68a5      	ldr	r5, [r4, #8]
    c58e:	4575      	cmp	r5, lr
    c590:	443b      	add	r3, r7
    c592:	d06f      	beq.n	c674 <_free_r+0x124>
    c594:	68e7      	ldr	r7, [r4, #12]
    c596:	60ef      	str	r7, [r5, #12]
    c598:	60bd      	str	r5, [r7, #8]
    c59a:	1815      	adds	r5, r2, r0
    c59c:	686d      	ldr	r5, [r5, #4]
    c59e:	07ed      	lsls	r5, r5, #31
    c5a0:	d542      	bpl.n	c628 <_free_r+0xd8>
    c5a2:	f043 0201 	orr.w	r2, r3, #1
    c5a6:	6062      	str	r2, [r4, #4]
    c5a8:	50e3      	str	r3, [r4, r3]
    c5aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c5ae:	d218      	bcs.n	c5e2 <_free_r+0x92>
    c5b0:	08db      	lsrs	r3, r3, #3
    c5b2:	1c5a      	adds	r2, r3, #1
    c5b4:	684d      	ldr	r5, [r1, #4]
    c5b6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    c5ba:	60a7      	str	r7, [r4, #8]
    c5bc:	2001      	movs	r0, #1
    c5be:	109b      	asrs	r3, r3, #2
    c5c0:	fa00 f303 	lsl.w	r3, r0, r3
    c5c4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    c5c8:	431d      	orrs	r5, r3
    c5ca:	3808      	subs	r0, #8
    c5cc:	60e0      	str	r0, [r4, #12]
    c5ce:	604d      	str	r5, [r1, #4]
    c5d0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    c5d4:	60fc      	str	r4, [r7, #12]
    c5d6:	4640      	mov	r0, r8
    c5d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c5dc:	f7fc b91c 	b.w	8818 <__malloc_unlock>
    c5e0:	4770      	bx	lr
    c5e2:	0a5a      	lsrs	r2, r3, #9
    c5e4:	2a04      	cmp	r2, #4
    c5e6:	d853      	bhi.n	c690 <_free_r+0x140>
    c5e8:	099a      	lsrs	r2, r3, #6
    c5ea:	f102 0739 	add.w	r7, r2, #57	; 0x39
    c5ee:	007f      	lsls	r7, r7, #1
    c5f0:	f102 0538 	add.w	r5, r2, #56	; 0x38
    c5f4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    c5f8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    c5fc:	4944      	ldr	r1, [pc, #272]	; (c710 <_free_r+0x1c0>)
    c5fe:	3808      	subs	r0, #8
    c600:	4290      	cmp	r0, r2
    c602:	d04d      	beq.n	c6a0 <_free_r+0x150>
    c604:	6851      	ldr	r1, [r2, #4]
    c606:	f021 0103 	bic.w	r1, r1, #3
    c60a:	428b      	cmp	r3, r1
    c60c:	d202      	bcs.n	c614 <_free_r+0xc4>
    c60e:	6892      	ldr	r2, [r2, #8]
    c610:	4290      	cmp	r0, r2
    c612:	d1f7      	bne.n	c604 <_free_r+0xb4>
    c614:	68d0      	ldr	r0, [r2, #12]
    c616:	60e0      	str	r0, [r4, #12]
    c618:	60a2      	str	r2, [r4, #8]
    c61a:	6084      	str	r4, [r0, #8]
    c61c:	60d4      	str	r4, [r2, #12]
    c61e:	4640      	mov	r0, r8
    c620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c624:	f7fc b8f8 	b.w	8818 <__malloc_unlock>
    c628:	6895      	ldr	r5, [r2, #8]
    c62a:	4f3a      	ldr	r7, [pc, #232]	; (c714 <_free_r+0x1c4>)
    c62c:	42bd      	cmp	r5, r7
    c62e:	4403      	add	r3, r0
    c630:	d03f      	beq.n	c6b2 <_free_r+0x162>
    c632:	68d0      	ldr	r0, [r2, #12]
    c634:	60e8      	str	r0, [r5, #12]
    c636:	f043 0201 	orr.w	r2, r3, #1
    c63a:	6085      	str	r5, [r0, #8]
    c63c:	6062      	str	r2, [r4, #4]
    c63e:	50e3      	str	r3, [r4, r3]
    c640:	e7b3      	b.n	c5aa <_free_r+0x5a>
    c642:	07ff      	lsls	r7, r7, #31
    c644:	4403      	add	r3, r0
    c646:	d407      	bmi.n	c658 <_free_r+0x108>
    c648:	f855 2c08 	ldr.w	r2, [r5, #-8]
    c64c:	1aa4      	subs	r4, r4, r2
    c64e:	4413      	add	r3, r2
    c650:	68a0      	ldr	r0, [r4, #8]
    c652:	68e2      	ldr	r2, [r4, #12]
    c654:	60c2      	str	r2, [r0, #12]
    c656:	6090      	str	r0, [r2, #8]
    c658:	4a2f      	ldr	r2, [pc, #188]	; (c718 <_free_r+0x1c8>)
    c65a:	6812      	ldr	r2, [r2, #0]
    c65c:	f043 0001 	orr.w	r0, r3, #1
    c660:	4293      	cmp	r3, r2
    c662:	6060      	str	r0, [r4, #4]
    c664:	608c      	str	r4, [r1, #8]
    c666:	d3b6      	bcc.n	c5d6 <_free_r+0x86>
    c668:	4b2c      	ldr	r3, [pc, #176]	; (c71c <_free_r+0x1cc>)
    c66a:	4640      	mov	r0, r8
    c66c:	6819      	ldr	r1, [r3, #0]
    c66e:	f7ff ff21 	bl	c4b4 <_malloc_trim_r>
    c672:	e7b0      	b.n	c5d6 <_free_r+0x86>
    c674:	1811      	adds	r1, r2, r0
    c676:	6849      	ldr	r1, [r1, #4]
    c678:	07c9      	lsls	r1, r1, #31
    c67a:	d444      	bmi.n	c706 <_free_r+0x1b6>
    c67c:	6891      	ldr	r1, [r2, #8]
    c67e:	68d2      	ldr	r2, [r2, #12]
    c680:	60ca      	str	r2, [r1, #12]
    c682:	4403      	add	r3, r0
    c684:	f043 0001 	orr.w	r0, r3, #1
    c688:	6091      	str	r1, [r2, #8]
    c68a:	6060      	str	r0, [r4, #4]
    c68c:	50e3      	str	r3, [r4, r3]
    c68e:	e7a2      	b.n	c5d6 <_free_r+0x86>
    c690:	2a14      	cmp	r2, #20
    c692:	d817      	bhi.n	c6c4 <_free_r+0x174>
    c694:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    c698:	007f      	lsls	r7, r7, #1
    c69a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    c69e:	e7a9      	b.n	c5f4 <_free_r+0xa4>
    c6a0:	10aa      	asrs	r2, r5, #2
    c6a2:	684b      	ldr	r3, [r1, #4]
    c6a4:	2501      	movs	r5, #1
    c6a6:	fa05 f202 	lsl.w	r2, r5, r2
    c6aa:	4313      	orrs	r3, r2
    c6ac:	604b      	str	r3, [r1, #4]
    c6ae:	4602      	mov	r2, r0
    c6b0:	e7b1      	b.n	c616 <_free_r+0xc6>
    c6b2:	f043 0201 	orr.w	r2, r3, #1
    c6b6:	614c      	str	r4, [r1, #20]
    c6b8:	610c      	str	r4, [r1, #16]
    c6ba:	60e5      	str	r5, [r4, #12]
    c6bc:	60a5      	str	r5, [r4, #8]
    c6be:	6062      	str	r2, [r4, #4]
    c6c0:	50e3      	str	r3, [r4, r3]
    c6c2:	e788      	b.n	c5d6 <_free_r+0x86>
    c6c4:	2a54      	cmp	r2, #84	; 0x54
    c6c6:	d806      	bhi.n	c6d6 <_free_r+0x186>
    c6c8:	0b1a      	lsrs	r2, r3, #12
    c6ca:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    c6ce:	007f      	lsls	r7, r7, #1
    c6d0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    c6d4:	e78e      	b.n	c5f4 <_free_r+0xa4>
    c6d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    c6da:	d806      	bhi.n	c6ea <_free_r+0x19a>
    c6dc:	0bda      	lsrs	r2, r3, #15
    c6de:	f102 0778 	add.w	r7, r2, #120	; 0x78
    c6e2:	007f      	lsls	r7, r7, #1
    c6e4:	f102 0577 	add.w	r5, r2, #119	; 0x77
    c6e8:	e784      	b.n	c5f4 <_free_r+0xa4>
    c6ea:	f240 5054 	movw	r0, #1364	; 0x554
    c6ee:	4282      	cmp	r2, r0
    c6f0:	d806      	bhi.n	c700 <_free_r+0x1b0>
    c6f2:	0c9a      	lsrs	r2, r3, #18
    c6f4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    c6f8:	007f      	lsls	r7, r7, #1
    c6fa:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    c6fe:	e779      	b.n	c5f4 <_free_r+0xa4>
    c700:	27fe      	movs	r7, #254	; 0xfe
    c702:	257e      	movs	r5, #126	; 0x7e
    c704:	e776      	b.n	c5f4 <_free_r+0xa4>
    c706:	f043 0201 	orr.w	r2, r3, #1
    c70a:	6062      	str	r2, [r4, #4]
    c70c:	50e3      	str	r3, [r4, r3]
    c70e:	e762      	b.n	c5d6 <_free_r+0x86>
    c710:	200016a0 	.word	0x200016a0
    c714:	200016a8 	.word	0x200016a8
    c718:	20001aa8 	.word	0x20001aa8
    c71c:	2000251c 	.word	0x2000251c

0000c720 <rshift>:
    c720:	6902      	ldr	r2, [r0, #16]
    c722:	114b      	asrs	r3, r1, #5
    c724:	4293      	cmp	r3, r2
    c726:	da2e      	bge.n	c786 <rshift+0x66>
    c728:	b5f0      	push	{r4, r5, r6, r7, lr}
    c72a:	f011 011f 	ands.w	r1, r1, #31
    c72e:	f100 0614 	add.w	r6, r0, #20
    c732:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    c736:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
    c73a:	d029      	beq.n	c790 <rshift+0x70>
    c73c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    c740:	f10e 0504 	add.w	r5, lr, #4
    c744:	42aa      	cmp	r2, r5
    c746:	fa23 f401 	lsr.w	r4, r3, r1
    c74a:	f1c1 0c20 	rsb	ip, r1, #32
    c74e:	d939      	bls.n	c7c4 <rshift+0xa4>
    c750:	f100 0710 	add.w	r7, r0, #16
    c754:	682b      	ldr	r3, [r5, #0]
    c756:	fa03 f30c 	lsl.w	r3, r3, ip
    c75a:	4323      	orrs	r3, r4
    c75c:	f847 3f04 	str.w	r3, [r7, #4]!
    c760:	f855 3b04 	ldr.w	r3, [r5], #4
    c764:	42aa      	cmp	r2, r5
    c766:	fa23 f401 	lsr.w	r4, r3, r1
    c76a:	d8f3      	bhi.n	c754 <rshift+0x34>
    c76c:	ebce 0202 	rsb	r2, lr, r2
    c770:	3a05      	subs	r2, #5
    c772:	f022 0203 	bic.w	r2, r2, #3
    c776:	3204      	adds	r2, #4
    c778:	4432      	add	r2, r6
    c77a:	6014      	str	r4, [r2, #0]
    c77c:	b104      	cbz	r4, c780 <rshift+0x60>
    c77e:	3204      	adds	r2, #4
    c780:	1b93      	subs	r3, r2, r6
    c782:	109b      	asrs	r3, r3, #2
    c784:	e016      	b.n	c7b4 <rshift+0x94>
    c786:	2300      	movs	r3, #0
    c788:	6103      	str	r3, [r0, #16]
    c78a:	2300      	movs	r3, #0
    c78c:	6143      	str	r3, [r0, #20]
    c78e:	4770      	bx	lr
    c790:	4572      	cmp	r2, lr
    c792:	d912      	bls.n	c7ba <rshift+0x9a>
    c794:	f100 0410 	add.w	r4, r0, #16
    c798:	4671      	mov	r1, lr
    c79a:	f851 5b04 	ldr.w	r5, [r1], #4
    c79e:	f844 5f04 	str.w	r5, [r4, #4]!
    c7a2:	428a      	cmp	r2, r1
    c7a4:	d8f9      	bhi.n	c79a <rshift+0x7a>
    c7a6:	ea6f 030e 	mvn.w	r3, lr
    c7aa:	4413      	add	r3, r2
    c7ac:	f023 0303 	bic.w	r3, r3, #3
    c7b0:	3304      	adds	r3, #4
    c7b2:	109b      	asrs	r3, r3, #2
    c7b4:	6103      	str	r3, [r0, #16]
    c7b6:	b113      	cbz	r3, c7be <rshift+0x9e>
    c7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7ba:	2300      	movs	r3, #0
    c7bc:	6103      	str	r3, [r0, #16]
    c7be:	2300      	movs	r3, #0
    c7c0:	6143      	str	r3, [r0, #20]
    c7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7c4:	4632      	mov	r2, r6
    c7c6:	e7d8      	b.n	c77a <rshift+0x5a>

0000c7c8 <__gethex>:
    c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7cc:	b08b      	sub	sp, #44	; 0x2c
    c7ce:	4689      	mov	r9, r1
    c7d0:	9005      	str	r0, [sp, #20]
    c7d2:	9816      	ldr	r0, [sp, #88]	; 0x58
    c7d4:	9203      	str	r2, [sp, #12]
    c7d6:	9308      	str	r3, [sp, #32]
    c7d8:	f000 fb56 	bl	ce88 <__localeconv_l>
    c7dc:	6803      	ldr	r3, [r0, #0]
    c7de:	9302      	str	r3, [sp, #8]
    c7e0:	4618      	mov	r0, r3
    c7e2:	461c      	mov	r4, r3
    c7e4:	f7fc fb2c 	bl	8e40 <strlen>
    c7e8:	f8d9 3000 	ldr.w	r3, [r9]
    c7ec:	9000      	str	r0, [sp, #0]
    c7ee:	789a      	ldrb	r2, [r3, #2]
    c7f0:	1821      	adds	r1, r4, r0
    c7f2:	2a30      	cmp	r2, #48	; 0x30
    c7f4:	f811 bc01 	ldrb.w	fp, [r1, #-1]
    c7f8:	f040 81a9 	bne.w	cb4e <__gethex+0x386>
    c7fc:	3303      	adds	r3, #3
    c7fe:	f04f 0800 	mov.w	r8, #0
    c802:	461c      	mov	r4, r3
    c804:	f813 2b01 	ldrb.w	r2, [r3], #1
    c808:	2a30      	cmp	r2, #48	; 0x30
    c80a:	f108 0801 	add.w	r8, r8, #1
    c80e:	d0f8      	beq.n	c802 <__gethex+0x3a>
    c810:	4eb2      	ldr	r6, [pc, #712]	; (cadc <__gethex+0x314>)
    c812:	5cb3      	ldrb	r3, [r6, r2]
    c814:	2b00      	cmp	r3, #0
    c816:	f000 80f0 	beq.w	c9fa <__gethex+0x232>
    c81a:	7823      	ldrb	r3, [r4, #0]
    c81c:	f04f 0a00 	mov.w	sl, #0
    c820:	5cf3      	ldrb	r3, [r6, r3]
    c822:	4655      	mov	r5, sl
    c824:	4627      	mov	r7, r4
    c826:	b123      	cbz	r3, c832 <__gethex+0x6a>
    c828:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    c82c:	5cf3      	ldrb	r3, [r6, r3]
    c82e:	2b00      	cmp	r3, #0
    c830:	d1fa      	bne.n	c828 <__gethex+0x60>
    c832:	9a00      	ldr	r2, [sp, #0]
    c834:	9902      	ldr	r1, [sp, #8]
    c836:	4638      	mov	r0, r7
    c838:	f7fc fb70 	bl	8f1c <strncmp>
    c83c:	2800      	cmp	r0, #0
    c83e:	f000 8092 	beq.w	c966 <__gethex+0x19e>
    c842:	783b      	ldrb	r3, [r7, #0]
    c844:	2d00      	cmp	r5, #0
    c846:	f000 8171 	beq.w	cb2c <__gethex+0x364>
    c84a:	1bed      	subs	r5, r5, r7
    c84c:	00aa      	lsls	r2, r5, #2
    c84e:	9201      	str	r2, [sp, #4]
    c850:	2b50      	cmp	r3, #80	; 0x50
    c852:	f000 8091 	beq.w	c978 <__gethex+0x1b0>
    c856:	2b70      	cmp	r3, #112	; 0x70
    c858:	f000 808e 	beq.w	c978 <__gethex+0x1b0>
    c85c:	463d      	mov	r5, r7
    c85e:	f8c9 7000 	str.w	r7, [r9]
    c862:	f1ba 0f00 	cmp.w	sl, #0
    c866:	f040 80b7 	bne.w	c9d8 <__gethex+0x210>
    c86a:	1b2b      	subs	r3, r5, r4
    c86c:	3b01      	subs	r3, #1
    c86e:	2b07      	cmp	r3, #7
    c870:	4651      	mov	r1, sl
    c872:	dd04      	ble.n	c87e <__gethex+0xb6>
    c874:	105b      	asrs	r3, r3, #1
    c876:	2b07      	cmp	r3, #7
    c878:	f101 0101 	add.w	r1, r1, #1
    c87c:	dcfa      	bgt.n	c874 <__gethex+0xac>
    c87e:	9805      	ldr	r0, [sp, #20]
    c880:	f000 fb66 	bl	cf50 <_Balloc>
    c884:	4603      	mov	r3, r0
    c886:	3314      	adds	r3, #20
    c888:	42a5      	cmp	r5, r4
    c88a:	9004      	str	r0, [sp, #16]
    c88c:	9307      	str	r3, [sp, #28]
    c88e:	f240 81d3 	bls.w	cc38 <__gethex+0x470>
    c892:	4699      	mov	r9, r3
    c894:	9b00      	ldr	r3, [sp, #0]
    c896:	f04f 0800 	mov.w	r8, #0
    c89a:	f1c3 0301 	rsb	r3, r3, #1
    c89e:	4647      	mov	r7, r8
    c8a0:	9306      	str	r3, [sp, #24]
    c8a2:	e00f      	b.n	c8c4 <__gethex+0xfc>
    c8a4:	2f20      	cmp	r7, #32
    c8a6:	f000 809f 	beq.w	c9e8 <__gethex+0x220>
    c8aa:	463a      	mov	r2, r7
    c8ac:	3704      	adds	r7, #4
    c8ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    c8b2:	5cf3      	ldrb	r3, [r6, r3]
    c8b4:	4655      	mov	r5, sl
    c8b6:	f003 030f 	and.w	r3, r3, #15
    c8ba:	4093      	lsls	r3, r2
    c8bc:	42a5      	cmp	r5, r4
    c8be:	ea48 0803 	orr.w	r8, r8, r3
    c8c2:	d915      	bls.n	c8f0 <__gethex+0x128>
    c8c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    c8c8:	455b      	cmp	r3, fp
    c8ca:	f105 3aff 	add.w	sl, r5, #4294967295
    c8ce:	d1e9      	bne.n	c8a4 <__gethex+0xdc>
    c8d0:	9b06      	ldr	r3, [sp, #24]
    c8d2:	4453      	add	r3, sl
    c8d4:	42a3      	cmp	r3, r4
    c8d6:	d3e5      	bcc.n	c8a4 <__gethex+0xdc>
    c8d8:	4618      	mov	r0, r3
    c8da:	9a00      	ldr	r2, [sp, #0]
    c8dc:	9902      	ldr	r1, [sp, #8]
    c8de:	9309      	str	r3, [sp, #36]	; 0x24
    c8e0:	f7fc fb1c 	bl	8f1c <strncmp>
    c8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d1dc      	bne.n	c8a4 <__gethex+0xdc>
    c8ea:	461d      	mov	r5, r3
    c8ec:	42a5      	cmp	r5, r4
    c8ee:	d8e9      	bhi.n	c8c4 <__gethex+0xfc>
    c8f0:	f849 8b04 	str.w	r8, [r9], #4
    c8f4:	9b07      	ldr	r3, [sp, #28]
    c8f6:	9a04      	ldr	r2, [sp, #16]
    c8f8:	ebc3 0909 	rsb	r9, r3, r9
    c8fc:	ea4f 03a9 	mov.w	r3, r9, asr #2
    c900:	6113      	str	r3, [r2, #16]
    c902:	4640      	mov	r0, r8
    c904:	ea4f 1943 	mov.w	r9, r3, lsl #5
    c908:	f000 fbde 	bl	d0c8 <__hi0bits>
    c90c:	9b03      	ldr	r3, [sp, #12]
    c90e:	681e      	ldr	r6, [r3, #0]
    c910:	ebc0 0009 	rsb	r0, r0, r9
    c914:	42b0      	cmp	r0, r6
    c916:	f300 80e3 	bgt.w	cae0 <__gethex+0x318>
    c91a:	f2c0 8109 	blt.w	cb30 <__gethex+0x368>
    c91e:	2700      	movs	r7, #0
    c920:	9b03      	ldr	r3, [sp, #12]
    c922:	9a01      	ldr	r2, [sp, #4]
    c924:	689b      	ldr	r3, [r3, #8]
    c926:	429a      	cmp	r2, r3
    c928:	f300 8097 	bgt.w	ca5a <__gethex+0x292>
    c92c:	9803      	ldr	r0, [sp, #12]
    c92e:	9901      	ldr	r1, [sp, #4]
    c930:	6843      	ldr	r3, [r0, #4]
    c932:	4299      	cmp	r1, r3
    c934:	f280 80b5 	bge.w	caa2 <__gethex+0x2da>
    c938:	1a5d      	subs	r5, r3, r1
    c93a:	42ae      	cmp	r6, r5
    c93c:	f300 810f 	bgt.w	cb5e <__gethex+0x396>
    c940:	68c2      	ldr	r2, [r0, #12]
    c942:	2a02      	cmp	r2, #2
    c944:	f000 817f 	beq.w	cc46 <__gethex+0x47e>
    c948:	2a03      	cmp	r2, #3
    c94a:	f000 815c 	beq.w	cc06 <__gethex+0x43e>
    c94e:	2a01      	cmp	r2, #1
    c950:	f000 817d 	beq.w	cc4e <__gethex+0x486>
    c954:	9805      	ldr	r0, [sp, #20]
    c956:	9904      	ldr	r1, [sp, #16]
    c958:	f000 fb20 	bl	cf9c <_Bfree>
    c95c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c95e:	2300      	movs	r3, #0
    c960:	6013      	str	r3, [r2, #0]
    c962:	2050      	movs	r0, #80	; 0x50
    c964:	e03d      	b.n	c9e2 <__gethex+0x21a>
    c966:	2d00      	cmp	r5, #0
    c968:	f000 8119 	beq.w	cb9e <__gethex+0x3d6>
    c96c:	783b      	ldrb	r3, [r7, #0]
    c96e:	e76c      	b.n	c84a <__gethex+0x82>
    c970:	2300      	movs	r3, #0
    c972:	9301      	str	r3, [sp, #4]
    c974:	f04f 0a01 	mov.w	sl, #1
    c978:	787b      	ldrb	r3, [r7, #1]
    c97a:	2b2b      	cmp	r3, #43	; 0x2b
    c97c:	f000 80ac 	beq.w	cad8 <__gethex+0x310>
    c980:	2b2d      	cmp	r3, #45	; 0x2d
    c982:	d075      	beq.n	ca70 <__gethex+0x2a8>
    c984:	1c79      	adds	r1, r7, #1
    c986:	2500      	movs	r5, #0
    c988:	5cf3      	ldrb	r3, [r6, r3]
    c98a:	4854      	ldr	r0, [pc, #336]	; (cadc <__gethex+0x314>)
    c98c:	1e5a      	subs	r2, r3, #1
    c98e:	2a18      	cmp	r2, #24
    c990:	f63f af64 	bhi.w	c85c <__gethex+0x94>
    c994:	784a      	ldrb	r2, [r1, #1]
    c996:	5c82      	ldrb	r2, [r0, r2]
    c998:	1e50      	subs	r0, r2, #1
    c99a:	2818      	cmp	r0, #24
    c99c:	f1a3 0310 	sub.w	r3, r3, #16
    c9a0:	f101 0101 	add.w	r1, r1, #1
    c9a4:	d80b      	bhi.n	c9be <__gethex+0x1f6>
    c9a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    c9aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c9ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    c9b2:	5c32      	ldrb	r2, [r6, r0]
    c9b4:	1e50      	subs	r0, r2, #1
    c9b6:	2818      	cmp	r0, #24
    c9b8:	f1a3 0310 	sub.w	r3, r3, #16
    c9bc:	d9f3      	bls.n	c9a6 <__gethex+0x1de>
    c9be:	b105      	cbz	r5, c9c2 <__gethex+0x1fa>
    c9c0:	425b      	negs	r3, r3
    c9c2:	9a01      	ldr	r2, [sp, #4]
    c9c4:	463d      	mov	r5, r7
    c9c6:	441a      	add	r2, r3
    c9c8:	460f      	mov	r7, r1
    c9ca:	9201      	str	r2, [sp, #4]
    c9cc:	f8c9 7000 	str.w	r7, [r9]
    c9d0:	f1ba 0f00 	cmp.w	sl, #0
    c9d4:	f43f af49 	beq.w	c86a <__gethex+0xa2>
    c9d8:	f1b8 0f00 	cmp.w	r8, #0
    c9dc:	bf0c      	ite	eq
    c9de:	2006      	moveq	r0, #6
    c9e0:	2000      	movne	r0, #0
    c9e2:	b00b      	add	sp, #44	; 0x2c
    c9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9e8:	f8c9 8000 	str.w	r8, [r9]
    c9ec:	f04f 0800 	mov.w	r8, #0
    c9f0:	f109 0904 	add.w	r9, r9, #4
    c9f4:	4642      	mov	r2, r8
    c9f6:	2704      	movs	r7, #4
    c9f8:	e759      	b.n	c8ae <__gethex+0xe6>
    c9fa:	9d00      	ldr	r5, [sp, #0]
    c9fc:	9902      	ldr	r1, [sp, #8]
    c9fe:	462a      	mov	r2, r5
    ca00:	4620      	mov	r0, r4
    ca02:	f7fc fa8b 	bl	8f1c <strncmp>
    ca06:	2800      	cmp	r0, #0
    ca08:	d036      	beq.n	ca78 <__gethex+0x2b0>
    ca0a:	7823      	ldrb	r3, [r4, #0]
    ca0c:	4627      	mov	r7, r4
    ca0e:	2b50      	cmp	r3, #80	; 0x50
    ca10:	d0ae      	beq.n	c970 <__gethex+0x1a8>
    ca12:	2b70      	cmp	r3, #112	; 0x70
    ca14:	d0ac      	beq.n	c970 <__gethex+0x1a8>
    ca16:	f8c9 7000 	str.w	r7, [r9]
    ca1a:	e7dd      	b.n	c9d8 <__gethex+0x210>
    ca1c:	9b04      	ldr	r3, [sp, #16]
    ca1e:	689b      	ldr	r3, [r3, #8]
    ca20:	429f      	cmp	r7, r3
    ca22:	f280 8134 	bge.w	cc8e <__gethex+0x4c6>
    ca26:	463b      	mov	r3, r7
    ca28:	9804      	ldr	r0, [sp, #16]
    ca2a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    ca2e:	2101      	movs	r1, #1
    ca30:	3301      	adds	r3, #1
    ca32:	2c02      	cmp	r4, #2
    ca34:	6103      	str	r3, [r0, #16]
    ca36:	6151      	str	r1, [r2, #20]
    ca38:	f000 8118 	beq.w	cc6c <__gethex+0x4a4>
    ca3c:	429f      	cmp	r7, r3
    ca3e:	f280 80db 	bge.w	cbf8 <__gethex+0x430>
    ca42:	2101      	movs	r1, #1
    ca44:	9804      	ldr	r0, [sp, #16]
    ca46:	f7ff fe6b 	bl	c720 <rshift>
    ca4a:	9b03      	ldr	r3, [sp, #12]
    ca4c:	9a01      	ldr	r2, [sp, #4]
    ca4e:	689b      	ldr	r3, [r3, #8]
    ca50:	3201      	adds	r2, #1
    ca52:	429a      	cmp	r2, r3
    ca54:	9201      	str	r2, [sp, #4]
    ca56:	f340 80d2 	ble.w	cbfe <__gethex+0x436>
    ca5a:	9805      	ldr	r0, [sp, #20]
    ca5c:	9904      	ldr	r1, [sp, #16]
    ca5e:	f000 fa9d 	bl	cf9c <_Bfree>
    ca62:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ca64:	2300      	movs	r3, #0
    ca66:	20a3      	movs	r0, #163	; 0xa3
    ca68:	6013      	str	r3, [r2, #0]
    ca6a:	b00b      	add	sp, #44	; 0x2c
    ca6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca70:	2501      	movs	r5, #1
    ca72:	78bb      	ldrb	r3, [r7, #2]
    ca74:	1cb9      	adds	r1, r7, #2
    ca76:	e787      	b.n	c988 <__gethex+0x1c0>
    ca78:	5d62      	ldrb	r2, [r4, r5]
    ca7a:	5cb3      	ldrb	r3, [r6, r2]
    ca7c:	1967      	adds	r7, r4, r5
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d069      	beq.n	cb56 <__gethex+0x38e>
    ca82:	2a30      	cmp	r2, #48	; 0x30
    ca84:	463c      	mov	r4, r7
    ca86:	d104      	bne.n	ca92 <__gethex+0x2ca>
    ca88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ca8c:	2b30      	cmp	r3, #48	; 0x30
    ca8e:	d0fb      	beq.n	ca88 <__gethex+0x2c0>
    ca90:	5cf3      	ldrb	r3, [r6, r3]
    ca92:	fab3 fa83 	clz	sl, r3
    ca96:	463d      	mov	r5, r7
    ca98:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    ca9c:	f04f 0801 	mov.w	r8, #1
    caa0:	e6c0      	b.n	c824 <__gethex+0x5c>
    caa2:	2401      	movs	r4, #1
    caa4:	b167      	cbz	r7, cac0 <__gethex+0x2f8>
    caa6:	9b03      	ldr	r3, [sp, #12]
    caa8:	68db      	ldr	r3, [r3, #12]
    caaa:	2b02      	cmp	r3, #2
    caac:	f000 8085 	beq.w	cbba <__gethex+0x3f2>
    cab0:	2b03      	cmp	r3, #3
    cab2:	f000 8086 	beq.w	cbc2 <__gethex+0x3fa>
    cab6:	2b01      	cmp	r3, #1
    cab8:	f000 80b5 	beq.w	cc26 <__gethex+0x45e>
    cabc:	f044 0410 	orr.w	r4, r4, #16
    cac0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cac2:	461a      	mov	r2, r3
    cac4:	9b04      	ldr	r3, [sp, #16]
    cac6:	6013      	str	r3, [r2, #0]
    cac8:	9b08      	ldr	r3, [sp, #32]
    caca:	461a      	mov	r2, r3
    cacc:	9b01      	ldr	r3, [sp, #4]
    cace:	6013      	str	r3, [r2, #0]
    cad0:	4620      	mov	r0, r4
    cad2:	b00b      	add	sp, #44	; 0x2c
    cad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cad8:	2500      	movs	r5, #0
    cada:	e7ca      	b.n	ca72 <__gethex+0x2aa>
    cadc:	20000c28 	.word	0x20000c28
    cae0:	1b84      	subs	r4, r0, r6
    cae2:	4621      	mov	r1, r4
    cae4:	9804      	ldr	r0, [sp, #16]
    cae6:	f000 fe75 	bl	d7d4 <__any_on>
    caea:	2800      	cmp	r0, #0
    caec:	d035      	beq.n	cb5a <__gethex+0x392>
    caee:	1e62      	subs	r2, r4, #1
    caf0:	1151      	asrs	r1, r2, #5
    caf2:	9807      	ldr	r0, [sp, #28]
    caf4:	f002 031f 	and.w	r3, r2, #31
    caf8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    cafc:	2701      	movs	r7, #1
    cafe:	fa07 f303 	lsl.w	r3, r7, r3
    cb02:	420b      	tst	r3, r1
    cb04:	d00a      	beq.n	cb1c <__gethex+0x354>
    cb06:	42ba      	cmp	r2, r7
    cb08:	f340 809b 	ble.w	cc42 <__gethex+0x47a>
    cb0c:	1ea1      	subs	r1, r4, #2
    cb0e:	9804      	ldr	r0, [sp, #16]
    cb10:	f000 fe60 	bl	d7d4 <__any_on>
    cb14:	2800      	cmp	r0, #0
    cb16:	f000 8094 	beq.w	cc42 <__gethex+0x47a>
    cb1a:	2703      	movs	r7, #3
    cb1c:	9b01      	ldr	r3, [sp, #4]
    cb1e:	9804      	ldr	r0, [sp, #16]
    cb20:	4423      	add	r3, r4
    cb22:	4621      	mov	r1, r4
    cb24:	9301      	str	r3, [sp, #4]
    cb26:	f7ff fdfb 	bl	c720 <rshift>
    cb2a:	e6f9      	b.n	c920 <__gethex+0x158>
    cb2c:	9501      	str	r5, [sp, #4]
    cb2e:	e68f      	b.n	c850 <__gethex+0x88>
    cb30:	1a34      	subs	r4, r6, r0
    cb32:	9904      	ldr	r1, [sp, #16]
    cb34:	9805      	ldr	r0, [sp, #20]
    cb36:	4622      	mov	r2, r4
    cb38:	f000 fc06 	bl	d348 <__lshift>
    cb3c:	9b01      	ldr	r3, [sp, #4]
    cb3e:	9004      	str	r0, [sp, #16]
    cb40:	1b1b      	subs	r3, r3, r4
    cb42:	9301      	str	r3, [sp, #4]
    cb44:	4603      	mov	r3, r0
    cb46:	3314      	adds	r3, #20
    cb48:	9307      	str	r3, [sp, #28]
    cb4a:	2700      	movs	r7, #0
    cb4c:	e6e8      	b.n	c920 <__gethex+0x158>
    cb4e:	1c9c      	adds	r4, r3, #2
    cb50:	f04f 0800 	mov.w	r8, #0
    cb54:	e65c      	b.n	c810 <__gethex+0x48>
    cb56:	4613      	mov	r3, r2
    cb58:	e759      	b.n	ca0e <__gethex+0x246>
    cb5a:	4607      	mov	r7, r0
    cb5c:	e7de      	b.n	cb1c <__gethex+0x354>
    cb5e:	1e6c      	subs	r4, r5, #1
    cb60:	2f00      	cmp	r7, #0
    cb62:	d14e      	bne.n	cc02 <__gethex+0x43a>
    cb64:	b124      	cbz	r4, cb70 <__gethex+0x3a8>
    cb66:	4621      	mov	r1, r4
    cb68:	9804      	ldr	r0, [sp, #16]
    cb6a:	f000 fe33 	bl	d7d4 <__any_on>
    cb6e:	4607      	mov	r7, r0
    cb70:	1163      	asrs	r3, r4, #5
    cb72:	9a07      	ldr	r2, [sp, #28]
    cb74:	9804      	ldr	r0, [sp, #16]
    cb76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    cb7a:	f004 041f 	and.w	r4, r4, #31
    cb7e:	2301      	movs	r3, #1
    cb80:	fa03 f404 	lsl.w	r4, r3, r4
    cb84:	4214      	tst	r4, r2
    cb86:	4629      	mov	r1, r5
    cb88:	bf18      	it	ne
    cb8a:	f047 0702 	orrne.w	r7, r7, #2
    cb8e:	f7ff fdc7 	bl	c720 <rshift>
    cb92:	9b03      	ldr	r3, [sp, #12]
    cb94:	685b      	ldr	r3, [r3, #4]
    cb96:	9301      	str	r3, [sp, #4]
    cb98:	1b76      	subs	r6, r6, r5
    cb9a:	2402      	movs	r4, #2
    cb9c:	e782      	b.n	caa4 <__gethex+0x2dc>
    cb9e:	9900      	ldr	r1, [sp, #0]
    cba0:	5c7b      	ldrb	r3, [r7, r1]
    cba2:	5cf2      	ldrb	r2, [r6, r3]
    cba4:	187d      	adds	r5, r7, r1
    cba6:	462f      	mov	r7, r5
    cba8:	2a00      	cmp	r2, #0
    cbaa:	f43f ae4e 	beq.w	c84a <__gethex+0x82>
    cbae:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    cbb2:	5cf2      	ldrb	r2, [r6, r3]
    cbb4:	2a00      	cmp	r2, #0
    cbb6:	d1fa      	bne.n	cbae <__gethex+0x3e6>
    cbb8:	e647      	b.n	c84a <__gethex+0x82>
    cbba:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cbbc:	f1c3 0301 	rsb	r3, r3, #1
    cbc0:	9315      	str	r3, [sp, #84]	; 0x54
    cbc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cbc4:	2b00      	cmp	r3, #0
    cbc6:	f43f af79 	beq.w	cabc <__gethex+0x2f4>
    cbca:	9b04      	ldr	r3, [sp, #16]
    cbcc:	9d07      	ldr	r5, [sp, #28]
    cbce:	691f      	ldr	r7, [r3, #16]
    cbd0:	ea4f 0887 	mov.w	r8, r7, lsl #2
    cbd4:	eb05 0008 	add.w	r0, r5, r8
    cbd8:	462b      	mov	r3, r5
    cbda:	2100      	movs	r1, #0
    cbdc:	e004      	b.n	cbe8 <__gethex+0x420>
    cbde:	f843 1b04 	str.w	r1, [r3], #4
    cbe2:	4298      	cmp	r0, r3
    cbe4:	f67f af1a 	bls.w	ca1c <__gethex+0x254>
    cbe8:	681a      	ldr	r2, [r3, #0]
    cbea:	f1b2 3fff 	cmp.w	r2, #4294967295
    cbee:	d0f6      	beq.n	cbde <__gethex+0x416>
    cbf0:	3201      	adds	r2, #1
    cbf2:	2c02      	cmp	r4, #2
    cbf4:	601a      	str	r2, [r3, #0]
    cbf6:	d039      	beq.n	cc6c <__gethex+0x4a4>
    cbf8:	f016 061f 	ands.w	r6, r6, #31
    cbfc:	d13d      	bne.n	cc7a <__gethex+0x4b2>
    cbfe:	2421      	movs	r4, #33	; 0x21
    cc00:	e75e      	b.n	cac0 <__gethex+0x2f8>
    cc02:	2701      	movs	r7, #1
    cc04:	e7b4      	b.n	cb70 <__gethex+0x3a8>
    cc06:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cc08:	2a00      	cmp	r2, #0
    cc0a:	f43f aea3 	beq.w	c954 <__gethex+0x18c>
    cc0e:	9908      	ldr	r1, [sp, #32]
    cc10:	600b      	str	r3, [r1, #0]
    cc12:	9b07      	ldr	r3, [sp, #28]
    cc14:	9904      	ldr	r1, [sp, #16]
    cc16:	2201      	movs	r2, #1
    cc18:	610a      	str	r2, [r1, #16]
    cc1a:	601a      	str	r2, [r3, #0]
    cc1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc1e:	461a      	mov	r2, r3
    cc20:	2062      	movs	r0, #98	; 0x62
    cc22:	6011      	str	r1, [r2, #0]
    cc24:	e6dd      	b.n	c9e2 <__gethex+0x21a>
    cc26:	07ba      	lsls	r2, r7, #30
    cc28:	f57f af48 	bpl.w	cabc <__gethex+0x2f4>
    cc2c:	9b07      	ldr	r3, [sp, #28]
    cc2e:	681b      	ldr	r3, [r3, #0]
    cc30:	433b      	orrs	r3, r7
    cc32:	07db      	lsls	r3, r3, #31
    cc34:	d4c9      	bmi.n	cbca <__gethex+0x402>
    cc36:	e741      	b.n	cabc <__gethex+0x2f4>
    cc38:	f8dd 901c 	ldr.w	r9, [sp, #28]
    cc3c:	f04f 0800 	mov.w	r8, #0
    cc40:	e656      	b.n	c8f0 <__gethex+0x128>
    cc42:	2702      	movs	r7, #2
    cc44:	e76a      	b.n	cb1c <__gethex+0x354>
    cc46:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cc48:	2a00      	cmp	r2, #0
    cc4a:	d0e0      	beq.n	cc0e <__gethex+0x446>
    cc4c:	e682      	b.n	c954 <__gethex+0x18c>
    cc4e:	42ae      	cmp	r6, r5
    cc50:	f47f ae80 	bne.w	c954 <__gethex+0x18c>
    cc54:	2e01      	cmp	r6, #1
    cc56:	ddda      	ble.n	cc0e <__gethex+0x446>
    cc58:	1e71      	subs	r1, r6, #1
    cc5a:	9804      	ldr	r0, [sp, #16]
    cc5c:	f000 fdba 	bl	d7d4 <__any_on>
    cc60:	2800      	cmp	r0, #0
    cc62:	f43f ae77 	beq.w	c954 <__gethex+0x18c>
    cc66:	9b03      	ldr	r3, [sp, #12]
    cc68:	685b      	ldr	r3, [r3, #4]
    cc6a:	e7d0      	b.n	cc0e <__gethex+0x446>
    cc6c:	9b03      	ldr	r3, [sp, #12]
    cc6e:	681b      	ldr	r3, [r3, #0]
    cc70:	3b01      	subs	r3, #1
    cc72:	429e      	cmp	r6, r3
    cc74:	d024      	beq.n	ccc0 <__gethex+0x4f8>
    cc76:	2422      	movs	r4, #34	; 0x22
    cc78:	e722      	b.n	cac0 <__gethex+0x2f8>
    cc7a:	4445      	add	r5, r8
    cc7c:	f1c6 0620 	rsb	r6, r6, #32
    cc80:	f855 0c04 	ldr.w	r0, [r5, #-4]
    cc84:	f000 fa20 	bl	d0c8 <__hi0bits>
    cc88:	42b0      	cmp	r0, r6
    cc8a:	dab8      	bge.n	cbfe <__gethex+0x436>
    cc8c:	e6d9      	b.n	ca42 <__gethex+0x27a>
    cc8e:	9b04      	ldr	r3, [sp, #16]
    cc90:	f8dd 9014 	ldr.w	r9, [sp, #20]
    cc94:	6859      	ldr	r1, [r3, #4]
    cc96:	4648      	mov	r0, r9
    cc98:	3101      	adds	r1, #1
    cc9a:	f000 f959 	bl	cf50 <_Balloc>
    cc9e:	9904      	ldr	r1, [sp, #16]
    cca0:	690b      	ldr	r3, [r1, #16]
    cca2:	1c9a      	adds	r2, r3, #2
    cca4:	4605      	mov	r5, r0
    cca6:	0092      	lsls	r2, r2, #2
    cca8:	310c      	adds	r1, #12
    ccaa:	300c      	adds	r0, #12
    ccac:	f7f9 ff02 	bl	6ab4 <memcpy>
    ccb0:	9904      	ldr	r1, [sp, #16]
    ccb2:	4648      	mov	r0, r9
    ccb4:	f000 f972 	bl	cf9c <_Bfree>
    ccb8:	9504      	str	r5, [sp, #16]
    ccba:	692b      	ldr	r3, [r5, #16]
    ccbc:	3514      	adds	r5, #20
    ccbe:	e6b3      	b.n	ca28 <__gethex+0x260>
    ccc0:	1173      	asrs	r3, r6, #5
    ccc2:	f006 061f 	and.w	r6, r6, #31
    ccc6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    ccca:	2301      	movs	r3, #1
    cccc:	40b3      	lsls	r3, r6
    ccce:	4213      	tst	r3, r2
    ccd0:	bf14      	ite	ne
    ccd2:	2421      	movne	r4, #33	; 0x21
    ccd4:	2422      	moveq	r4, #34	; 0x22
    ccd6:	e6f3      	b.n	cac0 <__gethex+0x2f8>

0000ccd8 <__match>:
    ccd8:	b430      	push	{r4, r5}
    ccda:	6804      	ldr	r4, [r0, #0]
    ccdc:	e008      	b.n	ccf0 <__match+0x18>
    ccde:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    cce2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
    cce6:	2d19      	cmp	r5, #25
    cce8:	bf98      	it	ls
    ccea:	3320      	addls	r3, #32
    ccec:	4293      	cmp	r3, r2
    ccee:	d108      	bne.n	cd02 <__match+0x2a>
    ccf0:	f811 2b01 	ldrb.w	r2, [r1], #1
    ccf4:	2a00      	cmp	r2, #0
    ccf6:	d1f2      	bne.n	ccde <__match+0x6>
    ccf8:	3401      	adds	r4, #1
    ccfa:	6004      	str	r4, [r0, #0]
    ccfc:	2001      	movs	r0, #1
    ccfe:	bc30      	pop	{r4, r5}
    cd00:	4770      	bx	lr
    cd02:	2000      	movs	r0, #0
    cd04:	bc30      	pop	{r4, r5}
    cd06:	4770      	bx	lr

0000cd08 <__hexnan>:
    cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd0c:	680b      	ldr	r3, [r1, #0]
    cd0e:	f8df 9174 	ldr.w	r9, [pc, #372]	; ce84 <__hexnan+0x17c>
    cd12:	b085      	sub	sp, #20
    cd14:	1159      	asrs	r1, r3, #5
    cd16:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    cd1a:	f013 031f 	ands.w	r3, r3, #31
    cd1e:	9101      	str	r1, [sp, #4]
    cd20:	bf1c      	itt	ne
    cd22:	3104      	addne	r1, #4
    cd24:	9101      	strne	r1, [sp, #4]
    cd26:	9c01      	ldr	r4, [sp, #4]
    cd28:	9002      	str	r0, [sp, #8]
    cd2a:	9303      	str	r3, [sp, #12]
    cd2c:	2300      	movs	r3, #0
    cd2e:	4619      	mov	r1, r3
    cd30:	f844 3c04 	str.w	r3, [r4, #-4]
    cd34:	469a      	mov	sl, r3
    cd36:	469e      	mov	lr, r3
    cd38:	9b02      	ldr	r3, [sp, #8]
    cd3a:	f1a4 0c04 	sub.w	ip, r4, #4
    cd3e:	681d      	ldr	r5, [r3, #0]
    cd40:	46e0      	mov	r8, ip
    cd42:	4660      	mov	r0, ip
    cd44:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    cd48:	b323      	cbz	r3, cd94 <__hexnan+0x8c>
    cd4a:	f819 4003 	ldrb.w	r4, [r9, r3]
    cd4e:	2c00      	cmp	r4, #0
    cd50:	d143      	bne.n	cdda <__hexnan+0xd2>
    cd52:	2b20      	cmp	r3, #32
    cd54:	d85d      	bhi.n	ce12 <__hexnan+0x10a>
    cd56:	45d6      	cmp	lr, sl
    cd58:	ddf4      	ble.n	cd44 <__hexnan+0x3c>
    cd5a:	4540      	cmp	r0, r8
    cd5c:	d213      	bcs.n	cd86 <__hexnan+0x7e>
    cd5e:	2907      	cmp	r1, #7
    cd60:	dc11      	bgt.n	cd86 <__hexnan+0x7e>
    cd62:	f1c1 0108 	rsb	r1, r1, #8
    cd66:	0089      	lsls	r1, r1, #2
    cd68:	6806      	ldr	r6, [r0, #0]
    cd6a:	f1c1 0b20 	rsb	fp, r1, #32
    cd6e:	4603      	mov	r3, r0
    cd70:	685f      	ldr	r7, [r3, #4]
    cd72:	fa07 f40b 	lsl.w	r4, r7, fp
    cd76:	4334      	orrs	r4, r6
    cd78:	fa27 f601 	lsr.w	r6, r7, r1
    cd7c:	601c      	str	r4, [r3, #0]
    cd7e:	f843 6f04 	str.w	r6, [r3, #4]!
    cd82:	4598      	cmp	r8, r3
    cd84:	d8f4      	bhi.n	cd70 <__hexnan+0x68>
    cd86:	4290      	cmp	r0, r2
    cd88:	d83a      	bhi.n	ce00 <__hexnan+0xf8>
    cd8a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    cd8e:	2108      	movs	r1, #8
    cd90:	2b00      	cmp	r3, #0
    cd92:	d1da      	bne.n	cd4a <__hexnan+0x42>
    cd94:	f1be 0f00 	cmp.w	lr, #0
    cd98:	d03d      	beq.n	ce16 <__hexnan+0x10e>
    cd9a:	4540      	cmp	r0, r8
    cd9c:	d201      	bcs.n	cda2 <__hexnan+0x9a>
    cd9e:	2907      	cmp	r1, #7
    cda0:	dd5c      	ble.n	ce5c <__hexnan+0x154>
    cda2:	4290      	cmp	r0, r2
    cda4:	d93b      	bls.n	ce1e <__hexnan+0x116>
    cda6:	4613      	mov	r3, r2
    cda8:	f850 1b04 	ldr.w	r1, [r0], #4
    cdac:	f843 1b04 	str.w	r1, [r3], #4
    cdb0:	4584      	cmp	ip, r0
    cdb2:	d2f9      	bcs.n	cda8 <__hexnan+0xa0>
    cdb4:	2100      	movs	r1, #0
    cdb6:	f843 1b04 	str.w	r1, [r3], #4
    cdba:	459c      	cmp	ip, r3
    cdbc:	d2fb      	bcs.n	cdb6 <__hexnan+0xae>
    cdbe:	9b01      	ldr	r3, [sp, #4]
    cdc0:	f853 3c04 	ldr.w	r3, [r3, #-4]
    cdc4:	b92b      	cbnz	r3, cdd2 <__hexnan+0xca>
    cdc6:	4562      	cmp	r2, ip
    cdc8:	d03a      	beq.n	ce40 <__hexnan+0x138>
    cdca:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d0f9      	beq.n	cdc6 <__hexnan+0xbe>
    cdd2:	2005      	movs	r0, #5
    cdd4:	b005      	add	sp, #20
    cdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdda:	3101      	adds	r1, #1
    cddc:	2908      	cmp	r1, #8
    cdde:	f10e 0e01 	add.w	lr, lr, #1
    cde2:	dd06      	ble.n	cdf2 <__hexnan+0xea>
    cde4:	4290      	cmp	r0, r2
    cde6:	d9ad      	bls.n	cd44 <__hexnan+0x3c>
    cde8:	2300      	movs	r3, #0
    cdea:	f840 3c04 	str.w	r3, [r0, #-4]
    cdee:	2101      	movs	r1, #1
    cdf0:	3804      	subs	r0, #4
    cdf2:	6803      	ldr	r3, [r0, #0]
    cdf4:	f004 040f 	and.w	r4, r4, #15
    cdf8:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    cdfc:	6004      	str	r4, [r0, #0]
    cdfe:	e7a1      	b.n	cd44 <__hexnan+0x3c>
    ce00:	2300      	movs	r3, #0
    ce02:	f1a0 0804 	sub.w	r8, r0, #4
    ce06:	f840 3c04 	str.w	r3, [r0, #-4]
    ce0a:	46f2      	mov	sl, lr
    ce0c:	4640      	mov	r0, r8
    ce0e:	4619      	mov	r1, r3
    ce10:	e798      	b.n	cd44 <__hexnan+0x3c>
    ce12:	2b29      	cmp	r3, #41	; 0x29
    ce14:	d01b      	beq.n	ce4e <__hexnan+0x146>
    ce16:	2004      	movs	r0, #4
    ce18:	b005      	add	sp, #20
    ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce1e:	9b03      	ldr	r3, [sp, #12]
    ce20:	2b00      	cmp	r3, #0
    ce22:	d0cc      	beq.n	cdbe <__hexnan+0xb6>
    ce24:	9c01      	ldr	r4, [sp, #4]
    ce26:	9b03      	ldr	r3, [sp, #12]
    ce28:	f854 1c04 	ldr.w	r1, [r4, #-4]
    ce2c:	f1c3 0320 	rsb	r3, r3, #32
    ce30:	f04f 30ff 	mov.w	r0, #4294967295
    ce34:	fa20 f303 	lsr.w	r3, r0, r3
    ce38:	400b      	ands	r3, r1
    ce3a:	f844 3c04 	str.w	r3, [r4, #-4]
    ce3e:	e7c1      	b.n	cdc4 <__hexnan+0xbc>
    ce40:	2301      	movs	r3, #1
    ce42:	2005      	movs	r0, #5
    ce44:	f8cc 3000 	str.w	r3, [ip]
    ce48:	b005      	add	sp, #20
    ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce4e:	9b02      	ldr	r3, [sp, #8]
    ce50:	3501      	adds	r5, #1
    ce52:	601d      	str	r5, [r3, #0]
    ce54:	f1be 0f00 	cmp.w	lr, #0
    ce58:	d19f      	bne.n	cd9a <__hexnan+0x92>
    ce5a:	e7dc      	b.n	ce16 <__hexnan+0x10e>
    ce5c:	f1c1 0308 	rsb	r3, r1, #8
    ce60:	009b      	lsls	r3, r3, #2
    ce62:	6805      	ldr	r5, [r0, #0]
    ce64:	f1c3 0720 	rsb	r7, r3, #32
    ce68:	4601      	mov	r1, r0
    ce6a:	684e      	ldr	r6, [r1, #4]
    ce6c:	fa06 f407 	lsl.w	r4, r6, r7
    ce70:	432c      	orrs	r4, r5
    ce72:	fa26 f503 	lsr.w	r5, r6, r3
    ce76:	600c      	str	r4, [r1, #0]
    ce78:	f841 5f04 	str.w	r5, [r1, #4]!
    ce7c:	4588      	cmp	r8, r1
    ce7e:	d8f4      	bhi.n	ce6a <__hexnan+0x162>
    ce80:	e78f      	b.n	cda2 <__hexnan+0x9a>
    ce82:	bf00      	nop
    ce84:	20000c28 	.word	0x20000c28

0000ce88 <__localeconv_l>:
    ce88:	30f0      	adds	r0, #240	; 0xf0
    ce8a:	4770      	bx	lr

0000ce8c <_localeconv_r>:
    ce8c:	4a04      	ldr	r2, [pc, #16]	; (cea0 <_localeconv_r+0x14>)
    ce8e:	4b05      	ldr	r3, [pc, #20]	; (cea4 <_localeconv_r+0x18>)
    ce90:	6812      	ldr	r2, [r2, #0]
    ce92:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ce94:	2800      	cmp	r0, #0
    ce96:	bf08      	it	eq
    ce98:	4618      	moveq	r0, r3
    ce9a:	30f0      	adds	r0, #240	; 0xf0
    ce9c:	4770      	bx	lr
    ce9e:	bf00      	nop
    cea0:	20001530 	.word	0x20001530
    cea4:	20001534 	.word	0x20001534
	...

0000ceb0 <memchr>:
    ceb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ceb4:	2a10      	cmp	r2, #16
    ceb6:	db2b      	blt.n	cf10 <memchr+0x60>
    ceb8:	f010 0f07 	tst.w	r0, #7
    cebc:	d008      	beq.n	ced0 <memchr+0x20>
    cebe:	f810 3b01 	ldrb.w	r3, [r0], #1
    cec2:	3a01      	subs	r2, #1
    cec4:	428b      	cmp	r3, r1
    cec6:	d02d      	beq.n	cf24 <memchr+0x74>
    cec8:	f010 0f07 	tst.w	r0, #7
    cecc:	b342      	cbz	r2, cf20 <memchr+0x70>
    cece:	d1f6      	bne.n	cebe <memchr+0xe>
    ced0:	b4f0      	push	{r4, r5, r6, r7}
    ced2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ced6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ceda:	f022 0407 	bic.w	r4, r2, #7
    cede:	f07f 0700 	mvns.w	r7, #0
    cee2:	2300      	movs	r3, #0
    cee4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    cee8:	3c08      	subs	r4, #8
    ceea:	ea85 0501 	eor.w	r5, r5, r1
    ceee:	ea86 0601 	eor.w	r6, r6, r1
    cef2:	fa85 f547 	uadd8	r5, r5, r7
    cef6:	faa3 f587 	sel	r5, r3, r7
    cefa:	fa86 f647 	uadd8	r6, r6, r7
    cefe:	faa5 f687 	sel	r6, r5, r7
    cf02:	b98e      	cbnz	r6, cf28 <memchr+0x78>
    cf04:	d1ee      	bne.n	cee4 <memchr+0x34>
    cf06:	bcf0      	pop	{r4, r5, r6, r7}
    cf08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cf0c:	f002 0207 	and.w	r2, r2, #7
    cf10:	b132      	cbz	r2, cf20 <memchr+0x70>
    cf12:	f810 3b01 	ldrb.w	r3, [r0], #1
    cf16:	3a01      	subs	r2, #1
    cf18:	ea83 0301 	eor.w	r3, r3, r1
    cf1c:	b113      	cbz	r3, cf24 <memchr+0x74>
    cf1e:	d1f8      	bne.n	cf12 <memchr+0x62>
    cf20:	2000      	movs	r0, #0
    cf22:	4770      	bx	lr
    cf24:	3801      	subs	r0, #1
    cf26:	4770      	bx	lr
    cf28:	2d00      	cmp	r5, #0
    cf2a:	bf06      	itte	eq
    cf2c:	4635      	moveq	r5, r6
    cf2e:	3803      	subeq	r0, #3
    cf30:	3807      	subne	r0, #7
    cf32:	f015 0f01 	tst.w	r5, #1
    cf36:	d107      	bne.n	cf48 <memchr+0x98>
    cf38:	3001      	adds	r0, #1
    cf3a:	f415 7f80 	tst.w	r5, #256	; 0x100
    cf3e:	bf02      	ittt	eq
    cf40:	3001      	addeq	r0, #1
    cf42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    cf46:	3001      	addeq	r0, #1
    cf48:	bcf0      	pop	{r4, r5, r6, r7}
    cf4a:	3801      	subs	r0, #1
    cf4c:	4770      	bx	lr
    cf4e:	bf00      	nop

0000cf50 <_Balloc>:
    cf50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    cf52:	b570      	push	{r4, r5, r6, lr}
    cf54:	4605      	mov	r5, r0
    cf56:	460c      	mov	r4, r1
    cf58:	b14b      	cbz	r3, cf6e <_Balloc+0x1e>
    cf5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    cf5e:	b180      	cbz	r0, cf82 <_Balloc+0x32>
    cf60:	6802      	ldr	r2, [r0, #0]
    cf62:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    cf66:	2300      	movs	r3, #0
    cf68:	6103      	str	r3, [r0, #16]
    cf6a:	60c3      	str	r3, [r0, #12]
    cf6c:	bd70      	pop	{r4, r5, r6, pc}
    cf6e:	2221      	movs	r2, #33	; 0x21
    cf70:	2104      	movs	r1, #4
    cf72:	f000 fcdf 	bl	d934 <_calloc_r>
    cf76:	64e8      	str	r0, [r5, #76]	; 0x4c
    cf78:	4603      	mov	r3, r0
    cf7a:	2800      	cmp	r0, #0
    cf7c:	d1ed      	bne.n	cf5a <_Balloc+0xa>
    cf7e:	2000      	movs	r0, #0
    cf80:	bd70      	pop	{r4, r5, r6, pc}
    cf82:	2101      	movs	r1, #1
    cf84:	fa01 f604 	lsl.w	r6, r1, r4
    cf88:	1d72      	adds	r2, r6, #5
    cf8a:	4628      	mov	r0, r5
    cf8c:	0092      	lsls	r2, r2, #2
    cf8e:	f000 fcd1 	bl	d934 <_calloc_r>
    cf92:	2800      	cmp	r0, #0
    cf94:	d0f3      	beq.n	cf7e <_Balloc+0x2e>
    cf96:	6044      	str	r4, [r0, #4]
    cf98:	6086      	str	r6, [r0, #8]
    cf9a:	e7e4      	b.n	cf66 <_Balloc+0x16>

0000cf9c <_Bfree>:
    cf9c:	b131      	cbz	r1, cfac <_Bfree+0x10>
    cf9e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    cfa0:	684a      	ldr	r2, [r1, #4]
    cfa2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    cfa6:	6008      	str	r0, [r1, #0]
    cfa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    cfac:	4770      	bx	lr
    cfae:	bf00      	nop

0000cfb0 <__multadd>:
    cfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfb2:	690c      	ldr	r4, [r1, #16]
    cfb4:	b083      	sub	sp, #12
    cfb6:	460d      	mov	r5, r1
    cfb8:	4606      	mov	r6, r0
    cfba:	f101 0e14 	add.w	lr, r1, #20
    cfbe:	2700      	movs	r7, #0
    cfc0:	f8de 0000 	ldr.w	r0, [lr]
    cfc4:	b281      	uxth	r1, r0
    cfc6:	fb02 3101 	mla	r1, r2, r1, r3
    cfca:	0c0b      	lsrs	r3, r1, #16
    cfcc:	0c00      	lsrs	r0, r0, #16
    cfce:	fb02 3300 	mla	r3, r2, r0, r3
    cfd2:	b289      	uxth	r1, r1
    cfd4:	3701      	adds	r7, #1
    cfd6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    cfda:	42bc      	cmp	r4, r7
    cfdc:	f84e 1b04 	str.w	r1, [lr], #4
    cfe0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cfe4:	dcec      	bgt.n	cfc0 <__multadd+0x10>
    cfe6:	b13b      	cbz	r3, cff8 <__multadd+0x48>
    cfe8:	68aa      	ldr	r2, [r5, #8]
    cfea:	4294      	cmp	r4, r2
    cfec:	da07      	bge.n	cffe <__multadd+0x4e>
    cfee:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    cff2:	3401      	adds	r4, #1
    cff4:	6153      	str	r3, [r2, #20]
    cff6:	612c      	str	r4, [r5, #16]
    cff8:	4628      	mov	r0, r5
    cffa:	b003      	add	sp, #12
    cffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cffe:	6869      	ldr	r1, [r5, #4]
    d000:	9301      	str	r3, [sp, #4]
    d002:	3101      	adds	r1, #1
    d004:	4630      	mov	r0, r6
    d006:	f7ff ffa3 	bl	cf50 <_Balloc>
    d00a:	692a      	ldr	r2, [r5, #16]
    d00c:	3202      	adds	r2, #2
    d00e:	f105 010c 	add.w	r1, r5, #12
    d012:	4607      	mov	r7, r0
    d014:	0092      	lsls	r2, r2, #2
    d016:	300c      	adds	r0, #12
    d018:	f7f9 fd4c 	bl	6ab4 <memcpy>
    d01c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    d01e:	6869      	ldr	r1, [r5, #4]
    d020:	9b01      	ldr	r3, [sp, #4]
    d022:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    d026:	6028      	str	r0, [r5, #0]
    d028:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    d02c:	463d      	mov	r5, r7
    d02e:	e7de      	b.n	cfee <__multadd+0x3e>

0000d030 <__s2b>:
    d030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d034:	4c23      	ldr	r4, [pc, #140]	; (d0c4 <__s2b+0x94>)
    d036:	9d08      	ldr	r5, [sp, #32]
    d038:	461f      	mov	r7, r3
    d03a:	3308      	adds	r3, #8
    d03c:	fb84 4e03 	smull	r4, lr, r4, r3
    d040:	17db      	asrs	r3, r3, #31
    d042:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
    d046:	f1be 0f01 	cmp.w	lr, #1
    d04a:	4606      	mov	r6, r0
    d04c:	460c      	mov	r4, r1
    d04e:	4690      	mov	r8, r2
    d050:	dd35      	ble.n	d0be <__s2b+0x8e>
    d052:	2301      	movs	r3, #1
    d054:	2100      	movs	r1, #0
    d056:	005b      	lsls	r3, r3, #1
    d058:	459e      	cmp	lr, r3
    d05a:	f101 0101 	add.w	r1, r1, #1
    d05e:	dcfa      	bgt.n	d056 <__s2b+0x26>
    d060:	4630      	mov	r0, r6
    d062:	f7ff ff75 	bl	cf50 <_Balloc>
    d066:	2301      	movs	r3, #1
    d068:	f1b8 0f09 	cmp.w	r8, #9
    d06c:	6145      	str	r5, [r0, #20]
    d06e:	6103      	str	r3, [r0, #16]
    d070:	dd21      	ble.n	d0b6 <__s2b+0x86>
    d072:	f104 0909 	add.w	r9, r4, #9
    d076:	464d      	mov	r5, r9
    d078:	4444      	add	r4, r8
    d07a:	f815 3b01 	ldrb.w	r3, [r5], #1
    d07e:	4601      	mov	r1, r0
    d080:	3b30      	subs	r3, #48	; 0x30
    d082:	220a      	movs	r2, #10
    d084:	4630      	mov	r0, r6
    d086:	f7ff ff93 	bl	cfb0 <__multadd>
    d08a:	42a5      	cmp	r5, r4
    d08c:	d1f5      	bne.n	d07a <__s2b+0x4a>
    d08e:	eb09 0408 	add.w	r4, r9, r8
    d092:	3c08      	subs	r4, #8
    d094:	4547      	cmp	r7, r8
    d096:	dd0c      	ble.n	d0b2 <__s2b+0x82>
    d098:	ebc8 0707 	rsb	r7, r8, r7
    d09c:	4427      	add	r7, r4
    d09e:	f814 3b01 	ldrb.w	r3, [r4], #1
    d0a2:	4601      	mov	r1, r0
    d0a4:	3b30      	subs	r3, #48	; 0x30
    d0a6:	220a      	movs	r2, #10
    d0a8:	4630      	mov	r0, r6
    d0aa:	f7ff ff81 	bl	cfb0 <__multadd>
    d0ae:	42a7      	cmp	r7, r4
    d0b0:	d1f5      	bne.n	d09e <__s2b+0x6e>
    d0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d0b6:	340a      	adds	r4, #10
    d0b8:	f04f 0809 	mov.w	r8, #9
    d0bc:	e7ea      	b.n	d094 <__s2b+0x64>
    d0be:	2100      	movs	r1, #0
    d0c0:	e7ce      	b.n	d060 <__s2b+0x30>
    d0c2:	bf00      	nop
    d0c4:	38e38e39 	.word	0x38e38e39

0000d0c8 <__hi0bits>:
    d0c8:	0c03      	lsrs	r3, r0, #16
    d0ca:	041b      	lsls	r3, r3, #16
    d0cc:	b9b3      	cbnz	r3, d0fc <__hi0bits+0x34>
    d0ce:	0400      	lsls	r0, r0, #16
    d0d0:	2310      	movs	r3, #16
    d0d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    d0d6:	bf04      	itt	eq
    d0d8:	0200      	lsleq	r0, r0, #8
    d0da:	3308      	addeq	r3, #8
    d0dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    d0e0:	bf04      	itt	eq
    d0e2:	0100      	lsleq	r0, r0, #4
    d0e4:	3304      	addeq	r3, #4
    d0e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    d0ea:	bf04      	itt	eq
    d0ec:	0080      	lsleq	r0, r0, #2
    d0ee:	3302      	addeq	r3, #2
    d0f0:	2800      	cmp	r0, #0
    d0f2:	db07      	blt.n	d104 <__hi0bits+0x3c>
    d0f4:	0042      	lsls	r2, r0, #1
    d0f6:	d403      	bmi.n	d100 <__hi0bits+0x38>
    d0f8:	2020      	movs	r0, #32
    d0fa:	4770      	bx	lr
    d0fc:	2300      	movs	r3, #0
    d0fe:	e7e8      	b.n	d0d2 <__hi0bits+0xa>
    d100:	1c58      	adds	r0, r3, #1
    d102:	4770      	bx	lr
    d104:	4618      	mov	r0, r3
    d106:	4770      	bx	lr

0000d108 <__lo0bits>:
    d108:	6803      	ldr	r3, [r0, #0]
    d10a:	f013 0207 	ands.w	r2, r3, #7
    d10e:	d007      	beq.n	d120 <__lo0bits+0x18>
    d110:	07d9      	lsls	r1, r3, #31
    d112:	d420      	bmi.n	d156 <__lo0bits+0x4e>
    d114:	079a      	lsls	r2, r3, #30
    d116:	d420      	bmi.n	d15a <__lo0bits+0x52>
    d118:	089b      	lsrs	r3, r3, #2
    d11a:	6003      	str	r3, [r0, #0]
    d11c:	2002      	movs	r0, #2
    d11e:	4770      	bx	lr
    d120:	b299      	uxth	r1, r3
    d122:	b909      	cbnz	r1, d128 <__lo0bits+0x20>
    d124:	0c1b      	lsrs	r3, r3, #16
    d126:	2210      	movs	r2, #16
    d128:	f013 0fff 	tst.w	r3, #255	; 0xff
    d12c:	bf04      	itt	eq
    d12e:	0a1b      	lsreq	r3, r3, #8
    d130:	3208      	addeq	r2, #8
    d132:	0719      	lsls	r1, r3, #28
    d134:	bf04      	itt	eq
    d136:	091b      	lsreq	r3, r3, #4
    d138:	3204      	addeq	r2, #4
    d13a:	0799      	lsls	r1, r3, #30
    d13c:	bf04      	itt	eq
    d13e:	089b      	lsreq	r3, r3, #2
    d140:	3202      	addeq	r2, #2
    d142:	07d9      	lsls	r1, r3, #31
    d144:	d404      	bmi.n	d150 <__lo0bits+0x48>
    d146:	085b      	lsrs	r3, r3, #1
    d148:	d101      	bne.n	d14e <__lo0bits+0x46>
    d14a:	2020      	movs	r0, #32
    d14c:	4770      	bx	lr
    d14e:	3201      	adds	r2, #1
    d150:	6003      	str	r3, [r0, #0]
    d152:	4610      	mov	r0, r2
    d154:	4770      	bx	lr
    d156:	2000      	movs	r0, #0
    d158:	4770      	bx	lr
    d15a:	085b      	lsrs	r3, r3, #1
    d15c:	6003      	str	r3, [r0, #0]
    d15e:	2001      	movs	r0, #1
    d160:	4770      	bx	lr
    d162:	bf00      	nop

0000d164 <__i2b>:
    d164:	b510      	push	{r4, lr}
    d166:	460c      	mov	r4, r1
    d168:	2101      	movs	r1, #1
    d16a:	f7ff fef1 	bl	cf50 <_Balloc>
    d16e:	2201      	movs	r2, #1
    d170:	6144      	str	r4, [r0, #20]
    d172:	6102      	str	r2, [r0, #16]
    d174:	bd10      	pop	{r4, pc}
    d176:	bf00      	nop

0000d178 <__multiply>:
    d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d17c:	690d      	ldr	r5, [r1, #16]
    d17e:	6917      	ldr	r7, [r2, #16]
    d180:	42bd      	cmp	r5, r7
    d182:	b083      	sub	sp, #12
    d184:	460c      	mov	r4, r1
    d186:	4616      	mov	r6, r2
    d188:	da04      	bge.n	d194 <__multiply+0x1c>
    d18a:	462a      	mov	r2, r5
    d18c:	4634      	mov	r4, r6
    d18e:	463d      	mov	r5, r7
    d190:	460e      	mov	r6, r1
    d192:	4617      	mov	r7, r2
    d194:	68a3      	ldr	r3, [r4, #8]
    d196:	6861      	ldr	r1, [r4, #4]
    d198:	eb05 0807 	add.w	r8, r5, r7
    d19c:	4598      	cmp	r8, r3
    d19e:	bfc8      	it	gt
    d1a0:	3101      	addgt	r1, #1
    d1a2:	f7ff fed5 	bl	cf50 <_Balloc>
    d1a6:	f100 0c14 	add.w	ip, r0, #20
    d1aa:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    d1ae:	45cc      	cmp	ip, r9
    d1b0:	9000      	str	r0, [sp, #0]
    d1b2:	d205      	bcs.n	d1c0 <__multiply+0x48>
    d1b4:	4663      	mov	r3, ip
    d1b6:	2100      	movs	r1, #0
    d1b8:	f843 1b04 	str.w	r1, [r3], #4
    d1bc:	4599      	cmp	r9, r3
    d1be:	d8fb      	bhi.n	d1b8 <__multiply+0x40>
    d1c0:	f106 0214 	add.w	r2, r6, #20
    d1c4:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    d1c8:	f104 0314 	add.w	r3, r4, #20
    d1cc:	4552      	cmp	r2, sl
    d1ce:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    d1d2:	d254      	bcs.n	d27e <__multiply+0x106>
    d1d4:	f8cd 9004 	str.w	r9, [sp, #4]
    d1d8:	4699      	mov	r9, r3
    d1da:	f852 3b04 	ldr.w	r3, [r2], #4
    d1de:	fa1f fb83 	uxth.w	fp, r3
    d1e2:	f1bb 0f00 	cmp.w	fp, #0
    d1e6:	d020      	beq.n	d22a <__multiply+0xb2>
    d1e8:	2000      	movs	r0, #0
    d1ea:	464f      	mov	r7, r9
    d1ec:	4666      	mov	r6, ip
    d1ee:	4605      	mov	r5, r0
    d1f0:	e000      	b.n	d1f4 <__multiply+0x7c>
    d1f2:	461e      	mov	r6, r3
    d1f4:	f857 4b04 	ldr.w	r4, [r7], #4
    d1f8:	6830      	ldr	r0, [r6, #0]
    d1fa:	b2a1      	uxth	r1, r4
    d1fc:	b283      	uxth	r3, r0
    d1fe:	fb0b 3101 	mla	r1, fp, r1, r3
    d202:	0c24      	lsrs	r4, r4, #16
    d204:	0c00      	lsrs	r0, r0, #16
    d206:	194b      	adds	r3, r1, r5
    d208:	fb0b 0004 	mla	r0, fp, r4, r0
    d20c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    d210:	b299      	uxth	r1, r3
    d212:	4633      	mov	r3, r6
    d214:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    d218:	45be      	cmp	lr, r7
    d21a:	ea4f 4510 	mov.w	r5, r0, lsr #16
    d21e:	f843 1b04 	str.w	r1, [r3], #4
    d222:	d8e6      	bhi.n	d1f2 <__multiply+0x7a>
    d224:	6075      	str	r5, [r6, #4]
    d226:	f852 3c04 	ldr.w	r3, [r2, #-4]
    d22a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    d22e:	d020      	beq.n	d272 <__multiply+0xfa>
    d230:	f8dc 3000 	ldr.w	r3, [ip]
    d234:	4667      	mov	r7, ip
    d236:	4618      	mov	r0, r3
    d238:	464d      	mov	r5, r9
    d23a:	2100      	movs	r1, #0
    d23c:	e000      	b.n	d240 <__multiply+0xc8>
    d23e:	4637      	mov	r7, r6
    d240:	882c      	ldrh	r4, [r5, #0]
    d242:	0c00      	lsrs	r0, r0, #16
    d244:	fb0b 0004 	mla	r0, fp, r4, r0
    d248:	4401      	add	r1, r0
    d24a:	b29c      	uxth	r4, r3
    d24c:	463e      	mov	r6, r7
    d24e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    d252:	f846 3b04 	str.w	r3, [r6], #4
    d256:	6878      	ldr	r0, [r7, #4]
    d258:	f855 4b04 	ldr.w	r4, [r5], #4
    d25c:	b283      	uxth	r3, r0
    d25e:	0c24      	lsrs	r4, r4, #16
    d260:	fb0b 3404 	mla	r4, fp, r4, r3
    d264:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    d268:	45ae      	cmp	lr, r5
    d26a:	ea4f 4113 	mov.w	r1, r3, lsr #16
    d26e:	d8e6      	bhi.n	d23e <__multiply+0xc6>
    d270:	607b      	str	r3, [r7, #4]
    d272:	4592      	cmp	sl, r2
    d274:	f10c 0c04 	add.w	ip, ip, #4
    d278:	d8af      	bhi.n	d1da <__multiply+0x62>
    d27a:	f8dd 9004 	ldr.w	r9, [sp, #4]
    d27e:	f1b8 0f00 	cmp.w	r8, #0
    d282:	dd0b      	ble.n	d29c <__multiply+0x124>
    d284:	f859 3c04 	ldr.w	r3, [r9, #-4]
    d288:	f1a9 0904 	sub.w	r9, r9, #4
    d28c:	b11b      	cbz	r3, d296 <__multiply+0x11e>
    d28e:	e005      	b.n	d29c <__multiply+0x124>
    d290:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    d294:	b913      	cbnz	r3, d29c <__multiply+0x124>
    d296:	f1b8 0801 	subs.w	r8, r8, #1
    d29a:	d1f9      	bne.n	d290 <__multiply+0x118>
    d29c:	9800      	ldr	r0, [sp, #0]
    d29e:	f8c0 8010 	str.w	r8, [r0, #16]
    d2a2:	b003      	add	sp, #12
    d2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d2a8 <__pow5mult>:
    d2a8:	f012 0303 	ands.w	r3, r2, #3
    d2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2b0:	4614      	mov	r4, r2
    d2b2:	4607      	mov	r7, r0
    d2b4:	d12e      	bne.n	d314 <__pow5mult+0x6c>
    d2b6:	460e      	mov	r6, r1
    d2b8:	10a4      	asrs	r4, r4, #2
    d2ba:	d01c      	beq.n	d2f6 <__pow5mult+0x4e>
    d2bc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    d2be:	b395      	cbz	r5, d326 <__pow5mult+0x7e>
    d2c0:	07e3      	lsls	r3, r4, #31
    d2c2:	f04f 0800 	mov.w	r8, #0
    d2c6:	d406      	bmi.n	d2d6 <__pow5mult+0x2e>
    d2c8:	1064      	asrs	r4, r4, #1
    d2ca:	d014      	beq.n	d2f6 <__pow5mult+0x4e>
    d2cc:	6828      	ldr	r0, [r5, #0]
    d2ce:	b1a8      	cbz	r0, d2fc <__pow5mult+0x54>
    d2d0:	4605      	mov	r5, r0
    d2d2:	07e3      	lsls	r3, r4, #31
    d2d4:	d5f8      	bpl.n	d2c8 <__pow5mult+0x20>
    d2d6:	462a      	mov	r2, r5
    d2d8:	4631      	mov	r1, r6
    d2da:	4638      	mov	r0, r7
    d2dc:	f7ff ff4c 	bl	d178 <__multiply>
    d2e0:	b1b6      	cbz	r6, d310 <__pow5mult+0x68>
    d2e2:	6872      	ldr	r2, [r6, #4]
    d2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d2e6:	1064      	asrs	r4, r4, #1
    d2e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d2ec:	6031      	str	r1, [r6, #0]
    d2ee:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    d2f2:	4606      	mov	r6, r0
    d2f4:	d1ea      	bne.n	d2cc <__pow5mult+0x24>
    d2f6:	4630      	mov	r0, r6
    d2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d2fc:	462a      	mov	r2, r5
    d2fe:	4629      	mov	r1, r5
    d300:	4638      	mov	r0, r7
    d302:	f7ff ff39 	bl	d178 <__multiply>
    d306:	6028      	str	r0, [r5, #0]
    d308:	f8c0 8000 	str.w	r8, [r0]
    d30c:	4605      	mov	r5, r0
    d30e:	e7e0      	b.n	d2d2 <__pow5mult+0x2a>
    d310:	4606      	mov	r6, r0
    d312:	e7d9      	b.n	d2c8 <__pow5mult+0x20>
    d314:	1e5a      	subs	r2, r3, #1
    d316:	4d0b      	ldr	r5, [pc, #44]	; (d344 <__pow5mult+0x9c>)
    d318:	2300      	movs	r3, #0
    d31a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    d31e:	f7ff fe47 	bl	cfb0 <__multadd>
    d322:	4606      	mov	r6, r0
    d324:	e7c8      	b.n	d2b8 <__pow5mult+0x10>
    d326:	2101      	movs	r1, #1
    d328:	4638      	mov	r0, r7
    d32a:	f7ff fe11 	bl	cf50 <_Balloc>
    d32e:	f240 2171 	movw	r1, #625	; 0x271
    d332:	2201      	movs	r2, #1
    d334:	2300      	movs	r3, #0
    d336:	6141      	str	r1, [r0, #20]
    d338:	6102      	str	r2, [r0, #16]
    d33a:	4605      	mov	r5, r0
    d33c:	64b8      	str	r0, [r7, #72]	; 0x48
    d33e:	6003      	str	r3, [r0, #0]
    d340:	e7be      	b.n	d2c0 <__pow5mult+0x18>
    d342:	bf00      	nop
    d344:	20000e18 	.word	0x20000e18

0000d348 <__lshift>:
    d348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d34c:	4691      	mov	r9, r2
    d34e:	690a      	ldr	r2, [r1, #16]
    d350:	688b      	ldr	r3, [r1, #8]
    d352:	ea4f 1469 	mov.w	r4, r9, asr #5
    d356:	eb04 0802 	add.w	r8, r4, r2
    d35a:	f108 0501 	add.w	r5, r8, #1
    d35e:	429d      	cmp	r5, r3
    d360:	460e      	mov	r6, r1
    d362:	4682      	mov	sl, r0
    d364:	6849      	ldr	r1, [r1, #4]
    d366:	dd04      	ble.n	d372 <__lshift+0x2a>
    d368:	005b      	lsls	r3, r3, #1
    d36a:	429d      	cmp	r5, r3
    d36c:	f101 0101 	add.w	r1, r1, #1
    d370:	dcfa      	bgt.n	d368 <__lshift+0x20>
    d372:	4650      	mov	r0, sl
    d374:	f7ff fdec 	bl	cf50 <_Balloc>
    d378:	2c00      	cmp	r4, #0
    d37a:	f100 0214 	add.w	r2, r0, #20
    d37e:	dd38      	ble.n	d3f2 <__lshift+0xaa>
    d380:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    d384:	2100      	movs	r1, #0
    d386:	f842 1b04 	str.w	r1, [r2], #4
    d38a:	4293      	cmp	r3, r2
    d38c:	d1fb      	bne.n	d386 <__lshift+0x3e>
    d38e:	6934      	ldr	r4, [r6, #16]
    d390:	f106 0114 	add.w	r1, r6, #20
    d394:	f019 091f 	ands.w	r9, r9, #31
    d398:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    d39c:	d021      	beq.n	d3e2 <__lshift+0x9a>
    d39e:	f1c9 0220 	rsb	r2, r9, #32
    d3a2:	2400      	movs	r4, #0
    d3a4:	680f      	ldr	r7, [r1, #0]
    d3a6:	fa07 fc09 	lsl.w	ip, r7, r9
    d3aa:	ea4c 0404 	orr.w	r4, ip, r4
    d3ae:	469c      	mov	ip, r3
    d3b0:	f843 4b04 	str.w	r4, [r3], #4
    d3b4:	f851 4b04 	ldr.w	r4, [r1], #4
    d3b8:	458e      	cmp	lr, r1
    d3ba:	fa24 f402 	lsr.w	r4, r4, r2
    d3be:	d8f1      	bhi.n	d3a4 <__lshift+0x5c>
    d3c0:	f8cc 4004 	str.w	r4, [ip, #4]
    d3c4:	b10c      	cbz	r4, d3ca <__lshift+0x82>
    d3c6:	f108 0502 	add.w	r5, r8, #2
    d3ca:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    d3ce:	6872      	ldr	r2, [r6, #4]
    d3d0:	3d01      	subs	r5, #1
    d3d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d3d6:	6105      	str	r5, [r0, #16]
    d3d8:	6031      	str	r1, [r6, #0]
    d3da:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3e2:	3b04      	subs	r3, #4
    d3e4:	f851 2b04 	ldr.w	r2, [r1], #4
    d3e8:	f843 2f04 	str.w	r2, [r3, #4]!
    d3ec:	458e      	cmp	lr, r1
    d3ee:	d8f9      	bhi.n	d3e4 <__lshift+0x9c>
    d3f0:	e7eb      	b.n	d3ca <__lshift+0x82>
    d3f2:	4613      	mov	r3, r2
    d3f4:	e7cb      	b.n	d38e <__lshift+0x46>
    d3f6:	bf00      	nop

0000d3f8 <__mcmp>:
    d3f8:	6902      	ldr	r2, [r0, #16]
    d3fa:	690b      	ldr	r3, [r1, #16]
    d3fc:	1ad2      	subs	r2, r2, r3
    d3fe:	d113      	bne.n	d428 <__mcmp+0x30>
    d400:	009b      	lsls	r3, r3, #2
    d402:	3014      	adds	r0, #20
    d404:	3114      	adds	r1, #20
    d406:	4419      	add	r1, r3
    d408:	b410      	push	{r4}
    d40a:	4403      	add	r3, r0
    d40c:	e001      	b.n	d412 <__mcmp+0x1a>
    d40e:	4298      	cmp	r0, r3
    d410:	d20c      	bcs.n	d42c <__mcmp+0x34>
    d412:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    d416:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    d41a:	4294      	cmp	r4, r2
    d41c:	d0f7      	beq.n	d40e <__mcmp+0x16>
    d41e:	d309      	bcc.n	d434 <__mcmp+0x3c>
    d420:	2001      	movs	r0, #1
    d422:	f85d 4b04 	ldr.w	r4, [sp], #4
    d426:	4770      	bx	lr
    d428:	4610      	mov	r0, r2
    d42a:	4770      	bx	lr
    d42c:	2000      	movs	r0, #0
    d42e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d432:	4770      	bx	lr
    d434:	f04f 30ff 	mov.w	r0, #4294967295
    d438:	e7f3      	b.n	d422 <__mcmp+0x2a>
    d43a:	bf00      	nop

0000d43c <__mdiff>:
    d43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d440:	690b      	ldr	r3, [r1, #16]
    d442:	460f      	mov	r7, r1
    d444:	6911      	ldr	r1, [r2, #16]
    d446:	1a5b      	subs	r3, r3, r1
    d448:	2b00      	cmp	r3, #0
    d44a:	4690      	mov	r8, r2
    d44c:	d117      	bne.n	d47e <__mdiff+0x42>
    d44e:	0089      	lsls	r1, r1, #2
    d450:	f107 0214 	add.w	r2, r7, #20
    d454:	f108 0514 	add.w	r5, r8, #20
    d458:	1853      	adds	r3, r2, r1
    d45a:	4429      	add	r1, r5
    d45c:	e001      	b.n	d462 <__mdiff+0x26>
    d45e:	429a      	cmp	r2, r3
    d460:	d25e      	bcs.n	d520 <__mdiff+0xe4>
    d462:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    d466:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    d46a:	42a6      	cmp	r6, r4
    d46c:	d0f7      	beq.n	d45e <__mdiff+0x22>
    d46e:	d260      	bcs.n	d532 <__mdiff+0xf6>
    d470:	463b      	mov	r3, r7
    d472:	4614      	mov	r4, r2
    d474:	4647      	mov	r7, r8
    d476:	f04f 0901 	mov.w	r9, #1
    d47a:	4698      	mov	r8, r3
    d47c:	e006      	b.n	d48c <__mdiff+0x50>
    d47e:	db5d      	blt.n	d53c <__mdiff+0x100>
    d480:	f107 0514 	add.w	r5, r7, #20
    d484:	f102 0414 	add.w	r4, r2, #20
    d488:	f04f 0900 	mov.w	r9, #0
    d48c:	6879      	ldr	r1, [r7, #4]
    d48e:	f7ff fd5f 	bl	cf50 <_Balloc>
    d492:	f8d8 3010 	ldr.w	r3, [r8, #16]
    d496:	693e      	ldr	r6, [r7, #16]
    d498:	f8c0 900c 	str.w	r9, [r0, #12]
    d49c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    d4a0:	46a6      	mov	lr, r4
    d4a2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    d4a6:	f100 0414 	add.w	r4, r0, #20
    d4aa:	2300      	movs	r3, #0
    d4ac:	f85e 1b04 	ldr.w	r1, [lr], #4
    d4b0:	f855 8b04 	ldr.w	r8, [r5], #4
    d4b4:	b28a      	uxth	r2, r1
    d4b6:	fa13 f388 	uxtah	r3, r3, r8
    d4ba:	0c09      	lsrs	r1, r1, #16
    d4bc:	1a9a      	subs	r2, r3, r2
    d4be:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    d4c2:	eb03 4322 	add.w	r3, r3, r2, asr #16
    d4c6:	b292      	uxth	r2, r2
    d4c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    d4cc:	45f4      	cmp	ip, lr
    d4ce:	f844 2b04 	str.w	r2, [r4], #4
    d4d2:	ea4f 4323 	mov.w	r3, r3, asr #16
    d4d6:	d8e9      	bhi.n	d4ac <__mdiff+0x70>
    d4d8:	42af      	cmp	r7, r5
    d4da:	d917      	bls.n	d50c <__mdiff+0xd0>
    d4dc:	46a4      	mov	ip, r4
    d4de:	4629      	mov	r1, r5
    d4e0:	f851 eb04 	ldr.w	lr, [r1], #4
    d4e4:	fa13 f28e 	uxtah	r2, r3, lr
    d4e8:	1413      	asrs	r3, r2, #16
    d4ea:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    d4ee:	b292      	uxth	r2, r2
    d4f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    d4f4:	428f      	cmp	r7, r1
    d4f6:	f84c 2b04 	str.w	r2, [ip], #4
    d4fa:	ea4f 4323 	mov.w	r3, r3, asr #16
    d4fe:	d8ef      	bhi.n	d4e0 <__mdiff+0xa4>
    d500:	43ed      	mvns	r5, r5
    d502:	443d      	add	r5, r7
    d504:	f025 0503 	bic.w	r5, r5, #3
    d508:	3504      	adds	r5, #4
    d50a:	442c      	add	r4, r5
    d50c:	3c04      	subs	r4, #4
    d50e:	b922      	cbnz	r2, d51a <__mdiff+0xde>
    d510:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    d514:	3e01      	subs	r6, #1
    d516:	2b00      	cmp	r3, #0
    d518:	d0fa      	beq.n	d510 <__mdiff+0xd4>
    d51a:	6106      	str	r6, [r0, #16]
    d51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d520:	2100      	movs	r1, #0
    d522:	f7ff fd15 	bl	cf50 <_Balloc>
    d526:	2201      	movs	r2, #1
    d528:	2300      	movs	r3, #0
    d52a:	6102      	str	r2, [r0, #16]
    d52c:	6143      	str	r3, [r0, #20]
    d52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d532:	462c      	mov	r4, r5
    d534:	f04f 0900 	mov.w	r9, #0
    d538:	4615      	mov	r5, r2
    d53a:	e7a7      	b.n	d48c <__mdiff+0x50>
    d53c:	463b      	mov	r3, r7
    d53e:	f107 0414 	add.w	r4, r7, #20
    d542:	f108 0514 	add.w	r5, r8, #20
    d546:	4647      	mov	r7, r8
    d548:	f04f 0901 	mov.w	r9, #1
    d54c:	4698      	mov	r8, r3
    d54e:	e79d      	b.n	d48c <__mdiff+0x50>

0000d550 <__ulp>:
    d550:	4b13      	ldr	r3, [pc, #76]	; (d5a0 <__ulp+0x50>)
    d552:	ee10 2a90 	vmov	r2, s1
    d556:	401a      	ands	r2, r3
    d558:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
    d55c:	2b00      	cmp	r3, #0
    d55e:	dd04      	ble.n	d56a <__ulp+0x1a>
    d560:	2000      	movs	r0, #0
    d562:	4619      	mov	r1, r3
    d564:	ec41 0b10 	vmov	d0, r0, r1
    d568:	4770      	bx	lr
    d56a:	425b      	negs	r3, r3
    d56c:	151b      	asrs	r3, r3, #20
    d56e:	2b13      	cmp	r3, #19
    d570:	dd0d      	ble.n	d58e <__ulp+0x3e>
    d572:	3b14      	subs	r3, #20
    d574:	2b1e      	cmp	r3, #30
    d576:	bfdd      	ittte	le
    d578:	f1c3 031f 	rsble	r3, r3, #31
    d57c:	2201      	movle	r2, #1
    d57e:	fa02 f303 	lslle.w	r3, r2, r3
    d582:	2301      	movgt	r3, #1
    d584:	2100      	movs	r1, #0
    d586:	4618      	mov	r0, r3
    d588:	ec41 0b10 	vmov	d0, r0, r1
    d58c:	4770      	bx	lr
    d58e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    d592:	2000      	movs	r0, #0
    d594:	fa42 f103 	asr.w	r1, r2, r3
    d598:	ec41 0b10 	vmov	d0, r0, r1
    d59c:	4770      	bx	lr
    d59e:	bf00      	nop
    d5a0:	7ff00000 	.word	0x7ff00000

0000d5a4 <__b2d>:
    d5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5a8:	6906      	ldr	r6, [r0, #16]
    d5aa:	f100 0814 	add.w	r8, r0, #20
    d5ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
    d5b2:	f856 7c04 	ldr.w	r7, [r6, #-4]
    d5b6:	4638      	mov	r0, r7
    d5b8:	f7ff fd86 	bl	d0c8 <__hi0bits>
    d5bc:	f1c0 0320 	rsb	r3, r0, #32
    d5c0:	280a      	cmp	r0, #10
    d5c2:	600b      	str	r3, [r1, #0]
    d5c4:	f1a6 0304 	sub.w	r3, r6, #4
    d5c8:	dc18      	bgt.n	d5fc <__b2d+0x58>
    d5ca:	4598      	cmp	r8, r3
    d5cc:	f1c0 020b 	rsb	r2, r0, #11
    d5d0:	bf38      	it	cc
    d5d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
    d5d6:	fa27 f102 	lsr.w	r1, r7, r2
    d5da:	f100 0015 	add.w	r0, r0, #21
    d5de:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
    d5e2:	bf34      	ite	cc
    d5e4:	40d3      	lsrcc	r3, r2
    d5e6:	2300      	movcs	r3, #0
    d5e8:	fa07 f000 	lsl.w	r0, r7, r0
    d5ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    d5f0:	ea40 0403 	orr.w	r4, r0, r3
    d5f4:	ec45 4b10 	vmov	d0, r4, r5
    d5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5fc:	4598      	cmp	r8, r3
    d5fe:	d220      	bcs.n	d642 <__b2d+0x9e>
    d600:	f1b0 030b 	subs.w	r3, r0, #11
    d604:	f856 2c08 	ldr.w	r2, [r6, #-8]
    d608:	d01e      	beq.n	d648 <__b2d+0xa4>
    d60a:	fa07 f003 	lsl.w	r0, r7, r3
    d60e:	f040 577f 	orr.w	r7, r0, #1069547520	; 0x3fc00000
    d612:	f1c3 0e20 	rsb	lr, r3, #32
    d616:	f1a6 0108 	sub.w	r1, r6, #8
    d61a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    d61e:	fa22 f00e 	lsr.w	r0, r2, lr
    d622:	4588      	cmp	r8, r1
    d624:	ea47 0500 	orr.w	r5, r7, r0
    d628:	d220      	bcs.n	d66c <__b2d+0xc8>
    d62a:	f856 1c0c 	ldr.w	r1, [r6, #-12]
    d62e:	fa02 f003 	lsl.w	r0, r2, r3
    d632:	fa21 f30e 	lsr.w	r3, r1, lr
    d636:	4318      	orrs	r0, r3
    d638:	4604      	mov	r4, r0
    d63a:	ec45 4b10 	vmov	d0, r4, r5
    d63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d642:	380b      	subs	r0, #11
    d644:	d109      	bne.n	d65a <__b2d+0xb6>
    d646:	4602      	mov	r2, r0
    d648:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
    d64c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    d650:	4614      	mov	r4, r2
    d652:	ec45 4b10 	vmov	d0, r4, r5
    d656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d65a:	fa07 f000 	lsl.w	r0, r7, r0
    d65e:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
    d662:	2000      	movs	r0, #0
    d664:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    d668:	4604      	mov	r4, r0
    d66a:	e7e6      	b.n	d63a <__b2d+0x96>
    d66c:	fa02 f003 	lsl.w	r0, r2, r3
    d670:	4604      	mov	r4, r0
    d672:	e7e2      	b.n	d63a <__b2d+0x96>

0000d674 <__d2b>:
    d674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d678:	ec57 6b10 	vmov	r6, r7, d0
    d67c:	b083      	sub	sp, #12
    d67e:	4688      	mov	r8, r1
    d680:	2101      	movs	r1, #1
    d682:	463c      	mov	r4, r7
    d684:	f3c7 550a 	ubfx	r5, r7, #20, #11
    d688:	4617      	mov	r7, r2
    d68a:	f7ff fc61 	bl	cf50 <_Balloc>
    d68e:	f3c4 0413 	ubfx	r4, r4, #0, #20
    d692:	4681      	mov	r9, r0
    d694:	b10d      	cbz	r5, d69a <__d2b+0x26>
    d696:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    d69a:	9401      	str	r4, [sp, #4]
    d69c:	b31e      	cbz	r6, d6e6 <__d2b+0x72>
    d69e:	a802      	add	r0, sp, #8
    d6a0:	f840 6d08 	str.w	r6, [r0, #-8]!
    d6a4:	f7ff fd30 	bl	d108 <__lo0bits>
    d6a8:	2800      	cmp	r0, #0
    d6aa:	d134      	bne.n	d716 <__d2b+0xa2>
    d6ac:	e89d 000c 	ldmia.w	sp, {r2, r3}
    d6b0:	f8c9 2014 	str.w	r2, [r9, #20]
    d6b4:	2b00      	cmp	r3, #0
    d6b6:	bf0c      	ite	eq
    d6b8:	2101      	moveq	r1, #1
    d6ba:	2102      	movne	r1, #2
    d6bc:	f8c9 3018 	str.w	r3, [r9, #24]
    d6c0:	f8c9 1010 	str.w	r1, [r9, #16]
    d6c4:	b9dd      	cbnz	r5, d6fe <__d2b+0x8a>
    d6c6:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    d6ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    d6ce:	f8c8 0000 	str.w	r0, [r8]
    d6d2:	6918      	ldr	r0, [r3, #16]
    d6d4:	f7ff fcf8 	bl	d0c8 <__hi0bits>
    d6d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    d6dc:	6038      	str	r0, [r7, #0]
    d6de:	4648      	mov	r0, r9
    d6e0:	b003      	add	sp, #12
    d6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d6e6:	a801      	add	r0, sp, #4
    d6e8:	f7ff fd0e 	bl	d108 <__lo0bits>
    d6ec:	9b01      	ldr	r3, [sp, #4]
    d6ee:	f8c9 3014 	str.w	r3, [r9, #20]
    d6f2:	2101      	movs	r1, #1
    d6f4:	3020      	adds	r0, #32
    d6f6:	f8c9 1010 	str.w	r1, [r9, #16]
    d6fa:	2d00      	cmp	r5, #0
    d6fc:	d0e3      	beq.n	d6c6 <__d2b+0x52>
    d6fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    d702:	4405      	add	r5, r0
    d704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    d708:	f8c8 5000 	str.w	r5, [r8]
    d70c:	6038      	str	r0, [r7, #0]
    d70e:	4648      	mov	r0, r9
    d710:	b003      	add	sp, #12
    d712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d716:	e89d 000c 	ldmia.w	sp, {r2, r3}
    d71a:	f1c0 0120 	rsb	r1, r0, #32
    d71e:	fa03 f101 	lsl.w	r1, r3, r1
    d722:	430a      	orrs	r2, r1
    d724:	40c3      	lsrs	r3, r0
    d726:	9301      	str	r3, [sp, #4]
    d728:	f8c9 2014 	str.w	r2, [r9, #20]
    d72c:	e7c2      	b.n	d6b4 <__d2b+0x40>
    d72e:	bf00      	nop

0000d730 <__ratio>:
    d730:	b530      	push	{r4, r5, lr}
    d732:	b087      	sub	sp, #28
    d734:	460c      	mov	r4, r1
    d736:	a904      	add	r1, sp, #16
    d738:	4605      	mov	r5, r0
    d73a:	f7ff ff33 	bl	d5a4 <__b2d>
    d73e:	4620      	mov	r0, r4
    d740:	a905      	add	r1, sp, #20
    d742:	ed8d 0b00 	vstr	d0, [sp]
    d746:	f7ff ff2d 	bl	d5a4 <__b2d>
    d74a:	6920      	ldr	r0, [r4, #16]
    d74c:	6929      	ldr	r1, [r5, #16]
    d74e:	9b05      	ldr	r3, [sp, #20]
    d750:	9a04      	ldr	r2, [sp, #16]
    d752:	1a09      	subs	r1, r1, r0
    d754:	1ad2      	subs	r2, r2, r3
    d756:	eb02 1341 	add.w	r3, r2, r1, lsl #5
    d75a:	ed8d 0b02 	vstr	d0, [sp, #8]
    d75e:	2b00      	cmp	r3, #0
    d760:	e9dd 0100 	ldrd	r0, r1, [sp]
    d764:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    d768:	dd0b      	ble.n	d782 <__ratio+0x52>
    d76a:	eb01 5103 	add.w	r1, r1, r3, lsl #20
    d76e:	e9cd 0100 	strd	r0, r1, [sp]
    d772:	ed9d 7b00 	vldr	d7, [sp]
    d776:	ed9d 6b02 	vldr	d6, [sp, #8]
    d77a:	ee87 0b06 	vdiv.f64	d0, d7, d6
    d77e:	b007      	add	sp, #28
    d780:	bd30      	pop	{r4, r5, pc}
    d782:	eba5 5503 	sub.w	r5, r5, r3, lsl #20
    d786:	e9cd 4502 	strd	r4, r5, [sp, #8]
    d78a:	e7f2      	b.n	d772 <__ratio+0x42>

0000d78c <__copybits>:
    d78c:	b470      	push	{r4, r5, r6}
    d78e:	6914      	ldr	r4, [r2, #16]
    d790:	f102 0314 	add.w	r3, r2, #20
    d794:	3901      	subs	r1, #1
    d796:	114e      	asrs	r6, r1, #5
    d798:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    d79c:	3601      	adds	r6, #1
    d79e:	42a3      	cmp	r3, r4
    d7a0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    d7a4:	d20c      	bcs.n	d7c0 <__copybits+0x34>
    d7a6:	1f01      	subs	r1, r0, #4
    d7a8:	f853 5b04 	ldr.w	r5, [r3], #4
    d7ac:	f841 5f04 	str.w	r5, [r1, #4]!
    d7b0:	429c      	cmp	r4, r3
    d7b2:	d8f9      	bhi.n	d7a8 <__copybits+0x1c>
    d7b4:	1aa3      	subs	r3, r4, r2
    d7b6:	3b15      	subs	r3, #21
    d7b8:	f023 0303 	bic.w	r3, r3, #3
    d7bc:	3304      	adds	r3, #4
    d7be:	4418      	add	r0, r3
    d7c0:	4286      	cmp	r6, r0
    d7c2:	d904      	bls.n	d7ce <__copybits+0x42>
    d7c4:	2300      	movs	r3, #0
    d7c6:	f840 3b04 	str.w	r3, [r0], #4
    d7ca:	4286      	cmp	r6, r0
    d7cc:	d8fb      	bhi.n	d7c6 <__copybits+0x3a>
    d7ce:	bc70      	pop	{r4, r5, r6}
    d7d0:	4770      	bx	lr
    d7d2:	bf00      	nop

0000d7d4 <__any_on>:
    d7d4:	6903      	ldr	r3, [r0, #16]
    d7d6:	114a      	asrs	r2, r1, #5
    d7d8:	4293      	cmp	r3, r2
    d7da:	b410      	push	{r4}
    d7dc:	f100 0414 	add.w	r4, r0, #20
    d7e0:	da10      	bge.n	d804 <__any_on+0x30>
    d7e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d7e6:	429c      	cmp	r4, r3
    d7e8:	d221      	bcs.n	d82e <__any_on+0x5a>
    d7ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
    d7ee:	3b04      	subs	r3, #4
    d7f0:	b118      	cbz	r0, d7fa <__any_on+0x26>
    d7f2:	e015      	b.n	d820 <__any_on+0x4c>
    d7f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d7f8:	b992      	cbnz	r2, d820 <__any_on+0x4c>
    d7fa:	429c      	cmp	r4, r3
    d7fc:	d3fa      	bcc.n	d7f4 <__any_on+0x20>
    d7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    d802:	4770      	bx	lr
    d804:	dd10      	ble.n	d828 <__any_on+0x54>
    d806:	f011 011f 	ands.w	r1, r1, #31
    d80a:	d00d      	beq.n	d828 <__any_on+0x54>
    d80c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    d810:	fa20 f301 	lsr.w	r3, r0, r1
    d814:	fa03 f101 	lsl.w	r1, r3, r1
    d818:	4288      	cmp	r0, r1
    d81a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d81e:	d0e2      	beq.n	d7e6 <__any_on+0x12>
    d820:	2001      	movs	r0, #1
    d822:	f85d 4b04 	ldr.w	r4, [sp], #4
    d826:	4770      	bx	lr
    d828:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d82c:	e7db      	b.n	d7e6 <__any_on+0x12>
    d82e:	2000      	movs	r0, #0
    d830:	e7e5      	b.n	d7fe <__any_on+0x2a>
    d832:	bf00      	nop

0000d834 <__ssprint_r>:
    d834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d838:	6893      	ldr	r3, [r2, #8]
    d83a:	b083      	sub	sp, #12
    d83c:	4690      	mov	r8, r2
    d83e:	2b00      	cmp	r3, #0
    d840:	d072      	beq.n	d928 <__ssprint_r+0xf4>
    d842:	4683      	mov	fp, r0
    d844:	f04f 0900 	mov.w	r9, #0
    d848:	6816      	ldr	r6, [r2, #0]
    d84a:	6808      	ldr	r0, [r1, #0]
    d84c:	688b      	ldr	r3, [r1, #8]
    d84e:	460d      	mov	r5, r1
    d850:	464c      	mov	r4, r9
    d852:	2c00      	cmp	r4, #0
    d854:	d045      	beq.n	d8e2 <__ssprint_r+0xae>
    d856:	429c      	cmp	r4, r3
    d858:	461f      	mov	r7, r3
    d85a:	469a      	mov	sl, r3
    d85c:	d346      	bcc.n	d8ec <__ssprint_r+0xb8>
    d85e:	89ab      	ldrh	r3, [r5, #12]
    d860:	f413 6f90 	tst.w	r3, #1152	; 0x480
    d864:	d02d      	beq.n	d8c2 <__ssprint_r+0x8e>
    d866:	696f      	ldr	r7, [r5, #20]
    d868:	6929      	ldr	r1, [r5, #16]
    d86a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    d86e:	ebc1 0a00 	rsb	sl, r1, r0
    d872:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    d876:	1c60      	adds	r0, r4, #1
    d878:	107f      	asrs	r7, r7, #1
    d87a:	4450      	add	r0, sl
    d87c:	42b8      	cmp	r0, r7
    d87e:	463a      	mov	r2, r7
    d880:	bf84      	itt	hi
    d882:	4607      	movhi	r7, r0
    d884:	463a      	movhi	r2, r7
    d886:	055b      	lsls	r3, r3, #21
    d888:	d533      	bpl.n	d8f2 <__ssprint_r+0xbe>
    d88a:	4611      	mov	r1, r2
    d88c:	4658      	mov	r0, fp
    d88e:	f7fa fc0f 	bl	80b0 <_malloc_r>
    d892:	2800      	cmp	r0, #0
    d894:	d037      	beq.n	d906 <__ssprint_r+0xd2>
    d896:	4652      	mov	r2, sl
    d898:	6929      	ldr	r1, [r5, #16]
    d89a:	9001      	str	r0, [sp, #4]
    d89c:	f7f9 f90a 	bl	6ab4 <memcpy>
    d8a0:	89aa      	ldrh	r2, [r5, #12]
    d8a2:	9b01      	ldr	r3, [sp, #4]
    d8a4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    d8a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d8ac:	81aa      	strh	r2, [r5, #12]
    d8ae:	ebca 0207 	rsb	r2, sl, r7
    d8b2:	eb03 000a 	add.w	r0, r3, sl
    d8b6:	616f      	str	r7, [r5, #20]
    d8b8:	612b      	str	r3, [r5, #16]
    d8ba:	6028      	str	r0, [r5, #0]
    d8bc:	60aa      	str	r2, [r5, #8]
    d8be:	4627      	mov	r7, r4
    d8c0:	46a2      	mov	sl, r4
    d8c2:	4652      	mov	r2, sl
    d8c4:	4649      	mov	r1, r9
    d8c6:	f7fa fef3 	bl	86b0 <memmove>
    d8ca:	f8d8 2008 	ldr.w	r2, [r8, #8]
    d8ce:	68ab      	ldr	r3, [r5, #8]
    d8d0:	6828      	ldr	r0, [r5, #0]
    d8d2:	1bdb      	subs	r3, r3, r7
    d8d4:	4450      	add	r0, sl
    d8d6:	1b14      	subs	r4, r2, r4
    d8d8:	60ab      	str	r3, [r5, #8]
    d8da:	6028      	str	r0, [r5, #0]
    d8dc:	f8c8 4008 	str.w	r4, [r8, #8]
    d8e0:	b314      	cbz	r4, d928 <__ssprint_r+0xf4>
    d8e2:	f8d6 9000 	ldr.w	r9, [r6]
    d8e6:	6874      	ldr	r4, [r6, #4]
    d8e8:	3608      	adds	r6, #8
    d8ea:	e7b2      	b.n	d852 <__ssprint_r+0x1e>
    d8ec:	4627      	mov	r7, r4
    d8ee:	46a2      	mov	sl, r4
    d8f0:	e7e7      	b.n	d8c2 <__ssprint_r+0x8e>
    d8f2:	4658      	mov	r0, fp
    d8f4:	f7fa ff9a 	bl	882c <_realloc_r>
    d8f8:	4603      	mov	r3, r0
    d8fa:	2800      	cmp	r0, #0
    d8fc:	d1d7      	bne.n	d8ae <__ssprint_r+0x7a>
    d8fe:	6929      	ldr	r1, [r5, #16]
    d900:	4658      	mov	r0, fp
    d902:	f7fe fe25 	bl	c550 <_free_r>
    d906:	230c      	movs	r3, #12
    d908:	f8cb 3000 	str.w	r3, [fp]
    d90c:	89ab      	ldrh	r3, [r5, #12]
    d90e:	2200      	movs	r2, #0
    d910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d914:	f04f 30ff 	mov.w	r0, #4294967295
    d918:	81ab      	strh	r3, [r5, #12]
    d91a:	f8c8 2008 	str.w	r2, [r8, #8]
    d91e:	f8c8 2004 	str.w	r2, [r8, #4]
    d922:	b003      	add	sp, #12
    d924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d928:	2000      	movs	r0, #0
    d92a:	f8c8 0004 	str.w	r0, [r8, #4]
    d92e:	b003      	add	sp, #12
    d930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d934 <_calloc_r>:
    d934:	b510      	push	{r4, lr}
    d936:	fb02 f101 	mul.w	r1, r2, r1
    d93a:	f7fa fbb9 	bl	80b0 <_malloc_r>
    d93e:	4604      	mov	r4, r0
    d940:	b1d8      	cbz	r0, d97a <_calloc_r+0x46>
    d942:	f850 2c04 	ldr.w	r2, [r0, #-4]
    d946:	f022 0203 	bic.w	r2, r2, #3
    d94a:	3a04      	subs	r2, #4
    d94c:	2a24      	cmp	r2, #36	; 0x24
    d94e:	d818      	bhi.n	d982 <_calloc_r+0x4e>
    d950:	2a13      	cmp	r2, #19
    d952:	d914      	bls.n	d97e <_calloc_r+0x4a>
    d954:	2300      	movs	r3, #0
    d956:	2a1b      	cmp	r2, #27
    d958:	6003      	str	r3, [r0, #0]
    d95a:	6043      	str	r3, [r0, #4]
    d95c:	d916      	bls.n	d98c <_calloc_r+0x58>
    d95e:	2a24      	cmp	r2, #36	; 0x24
    d960:	6083      	str	r3, [r0, #8]
    d962:	60c3      	str	r3, [r0, #12]
    d964:	bf11      	iteee	ne
    d966:	f100 0210 	addne.w	r2, r0, #16
    d96a:	6103      	streq	r3, [r0, #16]
    d96c:	6143      	streq	r3, [r0, #20]
    d96e:	f100 0218 	addeq.w	r2, r0, #24
    d972:	2300      	movs	r3, #0
    d974:	6013      	str	r3, [r2, #0]
    d976:	6053      	str	r3, [r2, #4]
    d978:	6093      	str	r3, [r2, #8]
    d97a:	4620      	mov	r0, r4
    d97c:	bd10      	pop	{r4, pc}
    d97e:	4602      	mov	r2, r0
    d980:	e7f7      	b.n	d972 <_calloc_r+0x3e>
    d982:	2100      	movs	r1, #0
    d984:	f7fa fef8 	bl	8778 <memset>
    d988:	4620      	mov	r0, r4
    d98a:	bd10      	pop	{r4, pc}
    d98c:	f100 0208 	add.w	r2, r0, #8
    d990:	e7ef      	b.n	d972 <_calloc_r+0x3e>
    d992:	bf00      	nop

0000d994 <__aeabi_uldivmod>:
    d994:	b953      	cbnz	r3, d9ac <__aeabi_uldivmod+0x18>
    d996:	b94a      	cbnz	r2, d9ac <__aeabi_uldivmod+0x18>
    d998:	2900      	cmp	r1, #0
    d99a:	bf08      	it	eq
    d99c:	2800      	cmpeq	r0, #0
    d99e:	bf1c      	itt	ne
    d9a0:	f04f 31ff 	movne.w	r1, #4294967295
    d9a4:	f04f 30ff 	movne.w	r0, #4294967295
    d9a8:	f000 b97e 	b.w	dca8 <__aeabi_idiv0>
    d9ac:	f1ad 0c08 	sub.w	ip, sp, #8
    d9b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d9b4:	f000 f806 	bl	d9c4 <__udivmoddi4>
    d9b8:	f8dd e004 	ldr.w	lr, [sp, #4]
    d9bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d9c0:	b004      	add	sp, #16
    d9c2:	4770      	bx	lr

0000d9c4 <__udivmoddi4>:
    d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d9c8:	468c      	mov	ip, r1
    d9ca:	460e      	mov	r6, r1
    d9cc:	4604      	mov	r4, r0
    d9ce:	9d08      	ldr	r5, [sp, #32]
    d9d0:	2b00      	cmp	r3, #0
    d9d2:	d150      	bne.n	da76 <__udivmoddi4+0xb2>
    d9d4:	428a      	cmp	r2, r1
    d9d6:	4617      	mov	r7, r2
    d9d8:	d96c      	bls.n	dab4 <__udivmoddi4+0xf0>
    d9da:	fab2 fe82 	clz	lr, r2
    d9de:	f1be 0f00 	cmp.w	lr, #0
    d9e2:	d00b      	beq.n	d9fc <__udivmoddi4+0x38>
    d9e4:	f1ce 0420 	rsb	r4, lr, #32
    d9e8:	fa20 f404 	lsr.w	r4, r0, r4
    d9ec:	fa01 f60e 	lsl.w	r6, r1, lr
    d9f0:	ea44 0c06 	orr.w	ip, r4, r6
    d9f4:	fa02 f70e 	lsl.w	r7, r2, lr
    d9f8:	fa00 f40e 	lsl.w	r4, r0, lr
    d9fc:	ea4f 4917 	mov.w	r9, r7, lsr #16
    da00:	0c22      	lsrs	r2, r4, #16
    da02:	fbbc f0f9 	udiv	r0, ip, r9
    da06:	fa1f f887 	uxth.w	r8, r7
    da0a:	fb09 c610 	mls	r6, r9, r0, ip
    da0e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    da12:	fb00 f308 	mul.w	r3, r0, r8
    da16:	42b3      	cmp	r3, r6
    da18:	d909      	bls.n	da2e <__udivmoddi4+0x6a>
    da1a:	19f6      	adds	r6, r6, r7
    da1c:	f100 32ff 	add.w	r2, r0, #4294967295
    da20:	f080 8122 	bcs.w	dc68 <__udivmoddi4+0x2a4>
    da24:	42b3      	cmp	r3, r6
    da26:	f240 811f 	bls.w	dc68 <__udivmoddi4+0x2a4>
    da2a:	3802      	subs	r0, #2
    da2c:	443e      	add	r6, r7
    da2e:	1af6      	subs	r6, r6, r3
    da30:	b2a2      	uxth	r2, r4
    da32:	fbb6 f3f9 	udiv	r3, r6, r9
    da36:	fb09 6613 	mls	r6, r9, r3, r6
    da3a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    da3e:	fb03 f808 	mul.w	r8, r3, r8
    da42:	45a0      	cmp	r8, r4
    da44:	d909      	bls.n	da5a <__udivmoddi4+0x96>
    da46:	19e4      	adds	r4, r4, r7
    da48:	f103 32ff 	add.w	r2, r3, #4294967295
    da4c:	f080 810a 	bcs.w	dc64 <__udivmoddi4+0x2a0>
    da50:	45a0      	cmp	r8, r4
    da52:	f240 8107 	bls.w	dc64 <__udivmoddi4+0x2a0>
    da56:	3b02      	subs	r3, #2
    da58:	443c      	add	r4, r7
    da5a:	ebc8 0404 	rsb	r4, r8, r4
    da5e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    da62:	2100      	movs	r1, #0
    da64:	2d00      	cmp	r5, #0
    da66:	d062      	beq.n	db2e <__udivmoddi4+0x16a>
    da68:	fa24 f40e 	lsr.w	r4, r4, lr
    da6c:	2300      	movs	r3, #0
    da6e:	602c      	str	r4, [r5, #0]
    da70:	606b      	str	r3, [r5, #4]
    da72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da76:	428b      	cmp	r3, r1
    da78:	d907      	bls.n	da8a <__udivmoddi4+0xc6>
    da7a:	2d00      	cmp	r5, #0
    da7c:	d055      	beq.n	db2a <__udivmoddi4+0x166>
    da7e:	2100      	movs	r1, #0
    da80:	e885 0041 	stmia.w	r5, {r0, r6}
    da84:	4608      	mov	r0, r1
    da86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da8a:	fab3 f183 	clz	r1, r3
    da8e:	2900      	cmp	r1, #0
    da90:	f040 8090 	bne.w	dbb4 <__udivmoddi4+0x1f0>
    da94:	42b3      	cmp	r3, r6
    da96:	d302      	bcc.n	da9e <__udivmoddi4+0xda>
    da98:	4282      	cmp	r2, r0
    da9a:	f200 80f8 	bhi.w	dc8e <__udivmoddi4+0x2ca>
    da9e:	1a84      	subs	r4, r0, r2
    daa0:	eb66 0603 	sbc.w	r6, r6, r3
    daa4:	2001      	movs	r0, #1
    daa6:	46b4      	mov	ip, r6
    daa8:	2d00      	cmp	r5, #0
    daaa:	d040      	beq.n	db2e <__udivmoddi4+0x16a>
    daac:	e885 1010 	stmia.w	r5, {r4, ip}
    dab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dab4:	b912      	cbnz	r2, dabc <__udivmoddi4+0xf8>
    dab6:	2701      	movs	r7, #1
    dab8:	fbb7 f7f2 	udiv	r7, r7, r2
    dabc:	fab7 fe87 	clz	lr, r7
    dac0:	f1be 0f00 	cmp.w	lr, #0
    dac4:	d135      	bne.n	db32 <__udivmoddi4+0x16e>
    dac6:	1bf3      	subs	r3, r6, r7
    dac8:	ea4f 4817 	mov.w	r8, r7, lsr #16
    dacc:	fa1f fc87 	uxth.w	ip, r7
    dad0:	2101      	movs	r1, #1
    dad2:	fbb3 f0f8 	udiv	r0, r3, r8
    dad6:	0c22      	lsrs	r2, r4, #16
    dad8:	fb08 3610 	mls	r6, r8, r0, r3
    dadc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    dae0:	fb0c f300 	mul.w	r3, ip, r0
    dae4:	42b3      	cmp	r3, r6
    dae6:	d907      	bls.n	daf8 <__udivmoddi4+0x134>
    dae8:	19f6      	adds	r6, r6, r7
    daea:	f100 32ff 	add.w	r2, r0, #4294967295
    daee:	d202      	bcs.n	daf6 <__udivmoddi4+0x132>
    daf0:	42b3      	cmp	r3, r6
    daf2:	f200 80ce 	bhi.w	dc92 <__udivmoddi4+0x2ce>
    daf6:	4610      	mov	r0, r2
    daf8:	1af6      	subs	r6, r6, r3
    dafa:	b2a2      	uxth	r2, r4
    dafc:	fbb6 f3f8 	udiv	r3, r6, r8
    db00:	fb08 6613 	mls	r6, r8, r3, r6
    db04:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    db08:	fb0c fc03 	mul.w	ip, ip, r3
    db0c:	45a4      	cmp	ip, r4
    db0e:	d907      	bls.n	db20 <__udivmoddi4+0x15c>
    db10:	19e4      	adds	r4, r4, r7
    db12:	f103 32ff 	add.w	r2, r3, #4294967295
    db16:	d202      	bcs.n	db1e <__udivmoddi4+0x15a>
    db18:	45a4      	cmp	ip, r4
    db1a:	f200 80b5 	bhi.w	dc88 <__udivmoddi4+0x2c4>
    db1e:	4613      	mov	r3, r2
    db20:	ebcc 0404 	rsb	r4, ip, r4
    db24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    db28:	e79c      	b.n	da64 <__udivmoddi4+0xa0>
    db2a:	4629      	mov	r1, r5
    db2c:	4628      	mov	r0, r5
    db2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db32:	f1ce 0120 	rsb	r1, lr, #32
    db36:	fa06 f30e 	lsl.w	r3, r6, lr
    db3a:	fa07 f70e 	lsl.w	r7, r7, lr
    db3e:	fa20 f901 	lsr.w	r9, r0, r1
    db42:	ea4f 4817 	mov.w	r8, r7, lsr #16
    db46:	40ce      	lsrs	r6, r1
    db48:	ea49 0903 	orr.w	r9, r9, r3
    db4c:	fbb6 faf8 	udiv	sl, r6, r8
    db50:	ea4f 4419 	mov.w	r4, r9, lsr #16
    db54:	fb08 661a 	mls	r6, r8, sl, r6
    db58:	fa1f fc87 	uxth.w	ip, r7
    db5c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    db60:	fb0a f20c 	mul.w	r2, sl, ip
    db64:	429a      	cmp	r2, r3
    db66:	fa00 f40e 	lsl.w	r4, r0, lr
    db6a:	d90a      	bls.n	db82 <__udivmoddi4+0x1be>
    db6c:	19db      	adds	r3, r3, r7
    db6e:	f10a 31ff 	add.w	r1, sl, #4294967295
    db72:	f080 8087 	bcs.w	dc84 <__udivmoddi4+0x2c0>
    db76:	429a      	cmp	r2, r3
    db78:	f240 8084 	bls.w	dc84 <__udivmoddi4+0x2c0>
    db7c:	f1aa 0a02 	sub.w	sl, sl, #2
    db80:	443b      	add	r3, r7
    db82:	1a9b      	subs	r3, r3, r2
    db84:	fa1f f989 	uxth.w	r9, r9
    db88:	fbb3 f1f8 	udiv	r1, r3, r8
    db8c:	fb08 3311 	mls	r3, r8, r1, r3
    db90:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    db94:	fb01 f60c 	mul.w	r6, r1, ip
    db98:	429e      	cmp	r6, r3
    db9a:	d907      	bls.n	dbac <__udivmoddi4+0x1e8>
    db9c:	19db      	adds	r3, r3, r7
    db9e:	f101 32ff 	add.w	r2, r1, #4294967295
    dba2:	d26b      	bcs.n	dc7c <__udivmoddi4+0x2b8>
    dba4:	429e      	cmp	r6, r3
    dba6:	d969      	bls.n	dc7c <__udivmoddi4+0x2b8>
    dba8:	3902      	subs	r1, #2
    dbaa:	443b      	add	r3, r7
    dbac:	1b9b      	subs	r3, r3, r6
    dbae:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    dbb2:	e78e      	b.n	dad2 <__udivmoddi4+0x10e>
    dbb4:	f1c1 0e20 	rsb	lr, r1, #32
    dbb8:	fa22 f40e 	lsr.w	r4, r2, lr
    dbbc:	408b      	lsls	r3, r1
    dbbe:	4323      	orrs	r3, r4
    dbc0:	fa20 f70e 	lsr.w	r7, r0, lr
    dbc4:	fa06 f401 	lsl.w	r4, r6, r1
    dbc8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    dbcc:	fa26 f60e 	lsr.w	r6, r6, lr
    dbd0:	433c      	orrs	r4, r7
    dbd2:	fbb6 f9fc 	udiv	r9, r6, ip
    dbd6:	0c27      	lsrs	r7, r4, #16
    dbd8:	fb0c 6619 	mls	r6, ip, r9, r6
    dbdc:	fa1f f883 	uxth.w	r8, r3
    dbe0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    dbe4:	fb09 f708 	mul.w	r7, r9, r8
    dbe8:	42b7      	cmp	r7, r6
    dbea:	fa02 f201 	lsl.w	r2, r2, r1
    dbee:	fa00 fa01 	lsl.w	sl, r0, r1
    dbf2:	d908      	bls.n	dc06 <__udivmoddi4+0x242>
    dbf4:	18f6      	adds	r6, r6, r3
    dbf6:	f109 30ff 	add.w	r0, r9, #4294967295
    dbfa:	d241      	bcs.n	dc80 <__udivmoddi4+0x2bc>
    dbfc:	42b7      	cmp	r7, r6
    dbfe:	d93f      	bls.n	dc80 <__udivmoddi4+0x2bc>
    dc00:	f1a9 0902 	sub.w	r9, r9, #2
    dc04:	441e      	add	r6, r3
    dc06:	1bf6      	subs	r6, r6, r7
    dc08:	b2a0      	uxth	r0, r4
    dc0a:	fbb6 f4fc 	udiv	r4, r6, ip
    dc0e:	fb0c 6614 	mls	r6, ip, r4, r6
    dc12:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    dc16:	fb04 f808 	mul.w	r8, r4, r8
    dc1a:	45b8      	cmp	r8, r7
    dc1c:	d907      	bls.n	dc2e <__udivmoddi4+0x26a>
    dc1e:	18ff      	adds	r7, r7, r3
    dc20:	f104 30ff 	add.w	r0, r4, #4294967295
    dc24:	d228      	bcs.n	dc78 <__udivmoddi4+0x2b4>
    dc26:	45b8      	cmp	r8, r7
    dc28:	d926      	bls.n	dc78 <__udivmoddi4+0x2b4>
    dc2a:	3c02      	subs	r4, #2
    dc2c:	441f      	add	r7, r3
    dc2e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    dc32:	ebc8 0707 	rsb	r7, r8, r7
    dc36:	fba0 8902 	umull	r8, r9, r0, r2
    dc3a:	454f      	cmp	r7, r9
    dc3c:	4644      	mov	r4, r8
    dc3e:	464e      	mov	r6, r9
    dc40:	d314      	bcc.n	dc6c <__udivmoddi4+0x2a8>
    dc42:	d029      	beq.n	dc98 <__udivmoddi4+0x2d4>
    dc44:	b365      	cbz	r5, dca0 <__udivmoddi4+0x2dc>
    dc46:	ebba 0304 	subs.w	r3, sl, r4
    dc4a:	eb67 0706 	sbc.w	r7, r7, r6
    dc4e:	fa07 fe0e 	lsl.w	lr, r7, lr
    dc52:	40cb      	lsrs	r3, r1
    dc54:	40cf      	lsrs	r7, r1
    dc56:	ea4e 0303 	orr.w	r3, lr, r3
    dc5a:	e885 0088 	stmia.w	r5, {r3, r7}
    dc5e:	2100      	movs	r1, #0
    dc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc64:	4613      	mov	r3, r2
    dc66:	e6f8      	b.n	da5a <__udivmoddi4+0x96>
    dc68:	4610      	mov	r0, r2
    dc6a:	e6e0      	b.n	da2e <__udivmoddi4+0x6a>
    dc6c:	ebb8 0402 	subs.w	r4, r8, r2
    dc70:	eb69 0603 	sbc.w	r6, r9, r3
    dc74:	3801      	subs	r0, #1
    dc76:	e7e5      	b.n	dc44 <__udivmoddi4+0x280>
    dc78:	4604      	mov	r4, r0
    dc7a:	e7d8      	b.n	dc2e <__udivmoddi4+0x26a>
    dc7c:	4611      	mov	r1, r2
    dc7e:	e795      	b.n	dbac <__udivmoddi4+0x1e8>
    dc80:	4681      	mov	r9, r0
    dc82:	e7c0      	b.n	dc06 <__udivmoddi4+0x242>
    dc84:	468a      	mov	sl, r1
    dc86:	e77c      	b.n	db82 <__udivmoddi4+0x1be>
    dc88:	3b02      	subs	r3, #2
    dc8a:	443c      	add	r4, r7
    dc8c:	e748      	b.n	db20 <__udivmoddi4+0x15c>
    dc8e:	4608      	mov	r0, r1
    dc90:	e70a      	b.n	daa8 <__udivmoddi4+0xe4>
    dc92:	3802      	subs	r0, #2
    dc94:	443e      	add	r6, r7
    dc96:	e72f      	b.n	daf8 <__udivmoddi4+0x134>
    dc98:	45c2      	cmp	sl, r8
    dc9a:	d3e7      	bcc.n	dc6c <__udivmoddi4+0x2a8>
    dc9c:	463e      	mov	r6, r7
    dc9e:	e7d1      	b.n	dc44 <__udivmoddi4+0x280>
    dca0:	4629      	mov	r1, r5
    dca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dca6:	bf00      	nop

0000dca8 <__aeabi_idiv0>:
    dca8:	4770      	bx	lr
    dcaa:	bf00      	nop
    dcac:	0000      	movs	r0, r0
	...

0000dcb0 <___init_veneer>:
    dcb0:	f85f f000 	ldr.w	pc, [pc]	; dcb4 <___init_veneer+0x4>
    dcb4:	60001abd 	.word	0x60001abd
	...

Disassembly of section .fini:

0000dcc0 <_fini>:
    dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcc2:	bf00      	nop
